{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242",
    "id": 1676984426,
    "node_id": "PR_kwDOABII585j9MBq",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29242",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29242.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29242.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a14b95129d3a2894b7a41ce919a426bb60f62e35",
    "number": 29242,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Mempool util: Add RBF diagram checks for single chunks against clusters of size 2",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a smaller piece of https://github.com/bitcoin/bitcoin/pull/28984 broken off for easier review.\r\n\r\nUp to date explanation of diagram checks are here: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393\r\n\r\nThis infrastructure has two near term applications prior to cluster mempool:\r\n1) Limited Package RBF(https://github.com/bitcoin/bitcoin/pull/28984): We want to allow package RBF only when we know it improves the mempool. This narrowly scoped functionality allows use with v3-like topologies, and will be expanded at some point post-cluster mempool when diagram checks can be done efficiently against bounded cluster sizes.\r\n2) Replacement for single tx RBF(in a cluster size of up to two) against conflicts of up to cluster size two. `ImprovesFeerateDiagram` interface will have to change for this use-case, which is a future direction to solve certain pins and improve mempool incentive compatibility: https://delvingbitcoin.org/t/ephemeral-anchors-and-mev/383#diagram-checks-fix-this-3\r\n\r\nAnd longer-term, this would be the proposed way we would compute incentive compatibility for all conflicts, post-cluster mempool.\r\n\r\n",
    "labels": [],
    "created_at": "2024-01-12T18:07:44Z",
    "updated_at": "2024-01-23T13:56:13Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "42571741b1016d23233b8c5ae68e24b8797cecc4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "instagibbs:2024-01-diagram-checks",
      "ref": "2024-01-diagram-checks",
      "sha": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 13910191,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzkxMDE5MQ==",
        "name": "bitcoin",
        "full_name": "instagibbs/bitcoin",
        "owner": {
          "login": "instagibbs",
          "id": 5767891,
          "node_id": "MDQ6VXNlcjU3Njc4OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/instagibbs",
          "html_url": "https://github.com/instagibbs",
          "followers_url": "https://api.github.com/users/instagibbs/followers",
          "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
          "organizations_url": "https://api.github.com/users/instagibbs/orgs",
          "repos_url": "https://api.github.com/users/instagibbs/repos",
          "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/instagibbs/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/instagibbs/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/instagibbs/bitcoin",
        "archive_url": "https://api.github.com/repos/instagibbs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/instagibbs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/instagibbs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/instagibbs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/instagibbs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/instagibbs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/instagibbs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/instagibbs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/instagibbs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/instagibbs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/instagibbs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/instagibbs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/instagibbs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/instagibbs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/instagibbs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/instagibbs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/instagibbs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/instagibbs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/instagibbs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/instagibbs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/instagibbs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/instagibbs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/instagibbs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/instagibbs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/instagibbs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:instagibbs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/instagibbs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/instagibbs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/instagibbs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/instagibbs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/instagibbs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/instagibbs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/instagibbs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/instagibbs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/instagibbs/bitcoin/hooks",
        "svn_url": "https://github.com/instagibbs/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 226838,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-23T13:51:34Z",
        "created_at": "2013-10-27T20:56:53Z",
        "updated_at": "2022-12-28T23:57:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "651fb034d85eb5db561bfd24b74f7271417defa5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36570,
        "stargazers_count": 73493,
        "watchers_count": 73493,
        "size": 247679,
        "default_branch": "master",
        "open_issues_count": 697,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-23T13:51:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-01-23T12:56:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1151,
    "deletions": 41,
    "changed_files": 13,
    "commits": 8,
    "review_comments": 66,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 1889741023,
      "node_id": "IC_kwDOABII585woyjf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889741023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:07:47Z",
      "updated_at": "2024-01-22T22:06:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29242).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [murchandamus](https://github.com/bitcoin/bitcoin/pull/29242#pullrequestreview-1837475718) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29256](https://github.com/bitcoin/bitcoin/pull/29256) (Improve new LogDebug/Trace/Info/Warning/Error Macros by ryanofsky)\n* [#29015](https://github.com/bitcoin/bitcoin/pull/29015) (kernel: Streamline util library by ryanofsky)\n* [#28984](https://github.com/bitcoin/bitcoin/pull/28984) (Cluster size 2 package rbf by instagibbs)\n* [#28960](https://github.com/bitcoin/bitcoin/pull/28960) (kernel: Remove dependency on CScheduler by TheCharlatan)\n* [#28948](https://github.com/bitcoin/bitcoin/pull/28948) (v3 transaction policy for anti-pinning by glozow)\n* [#28886](https://github.com/bitcoin/bitcoin/pull/28886) (refactor: Replace sets of txiter with CTxMemPoolEntryRefs by TheCharlatan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1889741023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:08:49Z",
      "updated_at": "2024-01-12T18:08:49Z",
      "source": {
        "issue": {
          "id": 2021654832,
          "node_id": "PR_kwDOABII585g8KkU",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
          "number": 28984,
          "state": "open",
          "state_reason": null,
          "title": "Cluster size 2 package rbf",
          "body": "Allows any 2 transaction package with no in-mempool ancestors to do package RBF when directly conflicting with other mempool clusters of size two or less.\r\n\r\n\r\nProposed validation steps:\r\n1) If the transaction package is of size 1, legacy rbf rules apply.\r\n2) Otherwise the transaction package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously), so it is also going to create a cluster of size 2). If larger, fail.\r\n3) The package rbf may not evict more than 100 transactions from the mempool(bip125 rule 5)\r\n4) The package's child tx has greater feerate than the parent tx (otherwise the parent should have RBF'd on its own at step 0)\r\n5) Every directly conflicted mempool transaction is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n6) Diagram check: We ensure that the replacement is strictly superior at all points, improving the mempool (which includes bip125 rule 3)\r\n7) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package (equivalent to bip125 rule 3 and 4)\r\n\r\nPost-cluster mempool this will likely be expanded to general package rbf, but this is what we can safely support today.\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28984.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28984.patch"
          },
          "created_at": "2023-12-01T22:12:06Z",
          "updated_at": "2024-01-18T00:10:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11472514498,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKr0K3C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11472514498",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:29:22Z"
    },
    {
      "event": "commented",
      "id": 1889768276,
      "node_id": "IC_kwDOABII585wo5NU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889768276",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:29:27Z",
      "updated_at": "2024-01-12T18:29:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20435922692</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1889768276",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "labeled",
      "id": 11472515246,
      "node_id": "LE_lADOABII58578V6EzwAAAAKr0LCu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11472515246",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:29:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11473103553,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKr2arB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11473103553",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T19:36:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11473548624,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKr4HVQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11473548624",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T20:25:35Z"
    },
    {
      "event": "unlabeled",
      "id": 11473957318,
      "node_id": "UNLE_lADOABII58578V6EzwAAAAKr5rHG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11473957318",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:15:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1889982713,
      "node_id": "IC_kwDOABII585wptj5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889982713",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z",
      "updated_at": "2024-01-12T21:38:22Z",
      "author_association": "MEMBER",
      "body": "ready for review\r\n\r\ncc @glozow @ismaelsadeeq @achow101 ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1889982713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "mentioned",
      "id": 11474139968,
      "node_id": "MEE_lADOABII58578V6EzwAAAAKr6XtA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474139968",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "subscribed",
      "id": 11474139984,
      "node_id": "SE_lADOABII58578V6EzwAAAAKr6XtQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474139984",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "mentioned",
      "id": 11474139994,
      "node_id": "MEE_lADOABII58578V6EzwAAAAKr6Xta",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474139994",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "subscribed",
      "id": 11474140002,
      "node_id": "SE_lADOABII58578V6EzwAAAAKr6Xti",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474140002",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "mentioned",
      "id": 11474140016,
      "node_id": "MEE_lADOABII58578V6EzwAAAAKr6Xtw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474140016",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "subscribed",
      "id": 11474140030,
      "node_id": "SE_lADOABII58578V6EzwAAAAKr6Xt-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11474140030",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T21:38:22Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T02:10:21Z",
      "updated_at": "2024-01-13T02:10:21Z",
      "source": {
        "issue": {
          "id": 2029493410,
          "node_id": "PR_kwDOABII585hWvMx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29015",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29015/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29015/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29015/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29015",
          "number": 29015,
          "state": "open",
          "state_reason": null,
          "title": "kernel: Streamline util library",
          "body": "Remove `fees.h`, `errors.h`, and `spanparsing.h` from the util library. Specifically:\r\n\r\n- Move `Split` functions from `util/spanparsing.h` to `util/string.h`, using `util` namespace for clarity.\r\n- Move remaining spanparsing functions to `script/parsing.h` since they are used for descriptor and miniscript parsing.\r\n- Combine `util/fees.h` and `util/errors.h` into `common/messages.h` so there is a place for simple functions that generate user messages to live, and these functions are not part of the util library.\r\n\r\nMotivation for this change is that the util library is a dependency of the kernel, and we should remove functionality from util that shouldn't be called by kernel code or kernel applications. These changes should also improve code organization and make functions easier to discover. Some of these same moves are (or were) part of #28690, but did not help with code organization, or made it worse, so it is better to move them and clean them up in the same PR so code only has to change one time.\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29015",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29015",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29015.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29015.patch"
          },
          "created_at": "2023-12-06T22:26:39Z",
          "updated_at": "2024-01-22T17:36:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T02:29:29Z",
      "updated_at": "2024-01-13T02:29:29Z",
      "source": {
        "issue": {
          "id": 2014832404,
          "node_id": "PR_kwDOABII585gk1DX",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28960/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28960",
          "number": 28960,
          "state": "open",
          "state_reason": null,
          "title": "kernel: Remove dependency on CScheduler",
          "body": "By defining a virtual interface class for the scheduler client, users of the kernel can now define their own event consuming infrastructure, without having to spawn threads or rely on the scheduler design.\r\n\r\nRemoving `CScheduler` also allows removing the thread and exception modules from the kernel library. \r\n\r\nTo make the `CMainSignals` class easier to use from a kernel library perspective, remove its global instantiation and adopt RAII practices.\r\n\r\n---\r\n\r\nThis PR is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587). It improves the kernel API and removes two modules from the kernel library.",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28960",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28960",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28960.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28960.patch"
          },
          "created_at": "2023-11-28T16:27:42Z",
          "updated_at": "2024-01-22T16:10:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T02:34:30Z",
      "updated_at": "2024-01-13T02:34:30Z",
      "source": {
        "issue": {
          "id": 2012508541,
          "node_id": "PR_kwDOABII585gc3y_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28948/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
          "number": 28948,
          "state": "open",
          "state_reason": null,
          "title": "v3 transaction policy for anti-pinning",
          "body": "See #27463 for overall package relay tracking.\r\n\r\nDelving Bitcoin discussion thread: https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning/340\r\n\r\nRationale:\r\n- There are various pinning problems with RBF and our general ancestor/descendant limits. These policies help mitigate many pinning attacks and make package RBF feasible (see #28984 which implements package RBF on top of this). I would focus the most here on Rule 3 pinning. [1][2]\r\n- Switching to a cluster-based mempool (see #27677 and #28676) requires the removal of CPFP carve out, which applications depend on. V3 + package RBF + ephemeral anchors + 1-parent-1-child package relay provides an intermediate solution.\r\n\r\nV3 policy is for \"Priority Transactions.\" [3][4] It allows users to opt in to more restrictive topological limits for shared transactions, in exchange for the more robust fee-bumping abilities that offers. Even though we don't have cluster limits, we are able to treat these transactions as having as having a maximum cluster size of 2.\r\n\r\nImmediate benefits:\r\n\r\n- You can presign a transaction with 0 fees (not just 1sat/vB!) and add a fee-bump later.\r\n- Rule 3 pinning is reduced by a significant amount, since the attacker can only attach a maximum of 1000vB to your shared transaction.\r\n \r\nThis also enables some other cool things (again see #27463 for overall roadmap):\r\n- Ephemeral Anchors\r\n- Package RBF for these 1-parent-1-child packages. That means e.g. a commitment tx + child can replace another commitment tx using the child's fees.\r\n- We can transition to a \"single anchor\" universe without worrying about package limit pinning. So current users of CPFP carve out would have something else to use.\r\n- We can switch to a cluster-based mempool [5] (#27677 #28676), which removes CPFP carve out [6].\r\n\r\n[1]: Original mailing list post and discussion about RBF pinning problems https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff, https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html\r\n[2]: A FAQ is \"we need this for cluster mempool, but is this still necessary afterwards?\" There are some pinning issues that are fixed here and not fully fixed in cluster mempool, so we will still want this or something similar afterward.\r\n[3]: Mailing list post for v3 https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html\r\n[4]: Original PR #25038 also contains a lot of the discussion\r\n[5]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393/7\r\n[6]: https://delvingbitcoin.org/t/an-overview-of-the-cluster-mempool-proposal/393#the-cpfp-carveout-rule-can-no-longer-be-supported-12",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 62,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28948",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28948",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28948.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28948.patch"
          },
          "created_at": "2023-11-27T15:17:11Z",
          "updated_at": "2024-01-23T09:55:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T02:49:26Z",
      "updated_at": "2024-01-13T02:49:26Z",
      "source": {
        "issue": {
          "id": 1995651017,
          "node_id": "PR_kwDOABII585fkNjm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28886/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28886",
          "number": 28886,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Replace sets of txiter with CTxMemPoolEntryRefs",
          "body": "Currently the mempool returns and consumes sets of multiindex iterators in its public API. A likely motivation for this over working with references to the actual values is that the multi index interface works with these iterators and not with pointers or references to the actual values.\r\n\r\nHowever, using the iterator type in the `setEntries` set provides little benefit in practice as applied currently. Its purpose, ownership, and safety semantics often remain ambiguous, and it is hardly used for actually iterating through the data structures. So replace it where possible with `CTxMemPoolEntryRef`s.\r\n\r\nSince `CTxMemPoolEntry` itself refers to its Parents and Children by `CTxMemPoolEntryRef` and not `txiter`, this allowed for an overall reduction of calls to `iterator_to`. See the [docs](https://www.boost.org/doc/libs/1_83_0/libs/multi_index/doc/tutorial/indices.html#iterator_to) on `iterator_to` for more guidance.\r\n\r\nNo change in the performance of the mempool code was observed in my benchmarks.\r\n\r\nThis also makes the goal of eliminating boost types from the headers as done in https://github.com/bitcoin/bitcoin/pull/28335 more feasible.\r\n",
          "user": {
            "login": "TheCharlatan",
            "id": 8421793,
            "node_id": "MDQ6VXNlcjg0MjE3OTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TheCharlatan",
            "html_url": "https://github.com/TheCharlatan",
            "followers_url": "https://api.github.com/users/TheCharlatan/followers",
            "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
            "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
            "repos_url": "https://api.github.com/users/TheCharlatan/repos",
            "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28886",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28886",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28886.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28886.patch"
          },
          "created_at": "2023-11-15T22:07:32Z",
          "updated_at": "2024-01-20T04:21:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1823506588,
      "node_id": "PRR_kwDOABII585ssICc",
      "url": null,
      "actor": null,
      "commit_id": "5da41e6f851b53d5639dc12aa3d6c308a8a8b403",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#pullrequestreview-1823506588",
      "submitted_at": "2024-01-16T20:00:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-17T22:47:06Z",
      "updated_at": "2024-01-17T22:47:06Z",
      "source": {
        "issue": {
          "id": 2085050770,
          "node_id": "PR_kwDOABII585kQNwH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29256",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29256/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29256/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29256/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29256",
          "number": 29256,
          "state": "open",
          "state_reason": null,
          "title": "Improve new LogDebug/Trace/Info/Warning/Error Macros",
          "body": "Improve new LogDebug(), LogTrace(), LogInfo(),  LogWarning(), LogError() macros introduced in #28318:\r\n\r\n- Make them all accept log categories, to make it possible to filter or highlight log messages from a particular component.\r\n- Make them compatible with wallet logging, which includes the wallet name in log messages.\r\n- Make them not rely on a global LogInstance, to provide better control of logging in controlled environments, such as unit tests that want to selectively capture log output, or libbitcoinkernel applications that want to have multiple instances of validation objects without mixing their log output.\r\n- Make them consistent, now accepting the same parameters.\r\n- Make them less verbose by not requiring BCLog category constants to be specified in individual log prints.\r\n\r\nAn [overview](https://github.com/bitcoin/bitcoin/blob/99feed7350b5fc3ae3157dd395ae6260c5bfc092/src/logging.h#L285-L322) of the macros can be found in the logging header.\r\n\r\n### Problems this PR attempts to solve\r\n\r\nThe new log macros in introduced #28318 are generally great. They allow writing code that is succinct and clear, and they remove verbosity and a lot of ambiguity about log levels and categories. Unfortunately, the new macros are *slightly* less general than than needed to be used throughout the codebase. Particularly (1) These macros cannot be used directly in wallet code because wallet log prints are supposed to automatically attach wallet names to log messages. (2) These macros cannot be used at all in libbitcoinkernel code because they do not allow specifying a logger instance. If this PR is rejected, the only alternative approach to solving these problems would be to reimplement these macros outside of the logging framework so they can be used by wallet and validation code. So this PR takes the simple approach of making a small external change to these macros while they are still brand new, so the benefits they bring can be used everywhere.\r\n\r\n### Note to reviewers\r\n\r\n I would encourage first looking at the PR description and actual code changes in this PR to see what it is about (especially looking at changes to the actual log calls in the codebase). It should be possible to come to an independent judgement of this PR, before (or without necessarily) getting into the  discussion history of this PR. Unfortunately and regrettably, I made some dismissive comments on the previous PR, so the discussion here starts out immediately heated. I believe the criticism of this PR is well intended and made in good faith, but it brings up a lot of tangential issues, goes down some paths that are less constructive, and mostly is not focused on the problems this PR is trying to solve, or pointing out any potential harms that would be caused by merging this PR. I would very much welcome and encourage independent review while the other discussion is ongoing.\r\n\r\n\r\n\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29256",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29256",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29256.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29256.patch"
          },
          "created_at": "2024-01-16T22:09:35Z",
          "updated_at": "2024-01-19T17:19:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11529654460,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKvOJC8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11529654460",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T20:11:36Z"
    },
    {
      "event": "labeled",
      "id": 11529805012,
      "node_id": "LE_lADOABII58578V6EzwAAAAKvOtzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11529805012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T20:29:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1899159499,
      "node_id": "IC_kwDOABII585xMt_L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1899159499",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T20:29:48Z",
      "updated_at": "2024-01-18T20:29:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20632055548</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1899159499",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11530549059,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKvRjdD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11530549059",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T22:04:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11538910424,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKvxczY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11538910424",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T15:23:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11539331677,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKvzDpd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11539331677",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T16:01:11Z"
    },
    {
      "event": "reviewed",
      "id": 1833161137,
      "node_id": "PRR_kwDOABII585tQ9Gx",
      "url": null,
      "actor": null,
      "commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#pullrequestreview-1833161137",
      "submitted_at": "2024-01-19T16:42:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
    },
    {
      "event": "unlabeled",
      "id": 11539837283,
      "node_id": "UNLE_lADOABII58578V6EzwAAAAKv0_Fj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11539837283",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T16:51:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11541828556,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKv8lPM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11541828556",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T20:24:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11541834614,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKv8mt2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11541834614",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T20:25:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11541909586,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKv85BS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11541909586",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T20:32:29Z"
    },
    {
      "event": "labeled",
      "id": 11541910224,
      "node_id": "LE_lADOABII58578V6EzwAAAAKv85LQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11541910224",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T20:32:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1901072804,
      "node_id": "IC_kwDOABII585xUBGk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1901072804",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T20:32:35Z",
      "updated_at": "2024-01-19T20:32:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20672153966</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1901072804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "commented",
      "id": 1901152779,
      "node_id": "IC_kwDOABII585xUUoL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1901152779",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T21:42:00Z",
      "updated_at": "2024-01-19T21:42:00Z",
      "author_association": "MEMBER",
      "body": "test failure appears to be spurious wallet failure, ready for review",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1901152779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "unlabeled",
      "id": 11542787739,
      "node_id": "UNLE_lADOABII58578V6EzwAAAAKwAPab",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11542787739",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-19T22:24:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1902638542,
      "node_id": "IC_kwDOABII585xZ_XO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1902638542",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-21T14:00:29Z",
      "updated_at": "2024-01-21T14:00:29Z",
      "author_association": "MEMBER",
      "body": "In https://github.com/sipa/bitcoin/commits/pr29242 I pushed another commit which makes `CompareFeerateDiagram` not modify the diagrams in-place.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1902638542",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1ZTYzNDg3YzUyODM1NjQ1YzVjZGE5Nzc5NTAwYTAwMGMzYTAyM2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e63487c52835645c5cda9779500a000c3a023c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e63487c52835645c5cda9779500a000c3a023c",
      "tree": {
        "sha": "277531b12bf24185c659edd204f6d906c459c9df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/277531b12bf24185c659edd204f6d906c459c9df"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba8de1b704d590fa4e1975620bd21d830d11666",
          "sha": "3ba8de1b704d590fa4e1975620bd21d830d11666",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba8de1b704d590fa4e1975620bd21d830d11666"
        }
      ],
      "message": "Add FeeFrac utils\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-22T17:21:07Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-12T15:40:41Z"
      },
      "sha": "c5e63487c52835645c5cda9779500a000c3a023c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNiNjE4MWI2ODNlYzdiY2U0MGYxMzM0ZWE3YzBhNzFhM2EwOWVmNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d",
      "tree": {
        "sha": "8a28a13c8c72df294c6c5df497853f5e7a4072bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a28a13c8c72df294c6c5df497853f5e7a4072bb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e63487c52835645c5cda9779500a000c3a023c",
          "sha": "c5e63487c52835645c5cda9779500a000c3a023c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e63487c52835645c5cda9779500a000c3a023c"
        }
      ],
      "message": "Add FeeFrace unit tests\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-22T17:21:07Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-12T15:44:39Z"
      },
      "sha": "cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11559898612,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKxBg30",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11559898612",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T17:30:13Z"
    },
    {
      "event": "commented",
      "id": 1904479665,
      "node_id": "IC_kwDOABII585xhA2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1904479665",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T17:30:57Z",
      "updated_at": "2024-01-22T17:30:57Z",
      "author_association": "MEMBER",
      "body": "> In https://github.com/sipa/bitcoin/commits/pr29242 I pushed another commit which makes CompareFeerateDiagram not modify the diagrams in-place.\r\n\r\nTaken only with minor comment changes, and added another test case or two to cover the iterative nature of the check",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1904479665",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11560895080,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKxFUJo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11560895080",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T19:11:52Z"
    },
    {
      "event": "reviewed",
      "id": 1837231759,
      "node_id": "PRR_kwDOABII585tge6P",
      "url": null,
      "actor": null,
      "commit_id": "f094a0370db7085b8a89842de0b6d12272d826cb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#pullrequestreview-1837231759",
      "submitted_at": "2024-01-22T21:59:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
    },
    {
      "event": "reviewed",
      "id": 1837475718,
      "node_id": "PRR_kwDOABII585thaeG",
      "url": null,
      "actor": null,
      "commit_id": "f094a0370db7085b8a89842de0b6d12272d826cb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, tentative crACK f094a0370db7085b8a89842de0b6d12272d826cb",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#pullrequestreview-1837475718",
      "submitted_at": "2024-01-22T22:06:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyNzFiNzk2YTVkOWVlZGVmMjM2YmJjZWNmYzJhOWUxMWRjNWJmODg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b271b796a5d9eedef236bbcecfc2a9e11dc5bf88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b271b796a5d9eedef236bbcecfc2a9e11dc5bf88",
      "tree": {
        "sha": "125112d9e3aba6c374d6d200ab8f711fed0c2328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/125112d9e3aba6c374d6d200ab8f711fed0c2328"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d",
          "sha": "cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cb6181b683ec7bce40f1334ea7c0a71a3a09ef4d"
        }
      ],
      "message": "Implement ImprovesFeerateDiagram\n\nThis new function takes the populated sets of\ndirect and all conflicts computed in the current\nmempool, assuming the replacements are a single\nchunk, and computes a diagram check.\n\nThe diagram check only works against cluster\nsizes of 2 or less, and fails if it encounters\na different topology.\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-19T20:20:33Z"
      },
      "sha": "b271b796a5d9eedef236bbcecfc2a9e11dc5bf88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVkYmIwODY5MjVmMDQ4MDhiYjZlZWEyZGVmMTc3MWZmYTI1MTdjYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dbb086925f04808bb6eea2def1771ffa2517caa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5dbb086925f04808bb6eea2def1771ffa2517caa",
      "tree": {
        "sha": "bd17f68da59481f6020eac32047e407af921a45a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd17f68da59481f6020eac32047e407af921a45a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b271b796a5d9eedef236bbcecfc2a9e11dc5bf88",
          "sha": "b271b796a5d9eedef236bbcecfc2a9e11dc5bf88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b271b796a5d9eedef236bbcecfc2a9e11dc5bf88"
        }
      ],
      "message": "fuzz: Add fuzz target for ImprovesFeerateDiagram\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-12T16:05:05Z"
      },
      "sha": "5dbb086925f04808bb6eea2def1771ffa2517caa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxYjE0NmQ5MDU1Y2M0MWVkODkxNmZiMmE0ZWI1ODA4ZWQ5MDI1M2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31b146d9055cc41ed8916fb2a4eb5808ed90253a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/31b146d9055cc41ed8916fb2a4eb5808ed90253a",
      "tree": {
        "sha": "628ce7f865d3c20ce8c4b6dbc172af7478dc793d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/628ce7f865d3c20ce8c4b6dbc172af7478dc793d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dbb086925f04808bb6eea2def1771ffa2517caa",
          "sha": "5dbb086925f04808bb6eea2def1771ffa2517caa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5dbb086925f04808bb6eea2def1771ffa2517caa"
        }
      ],
      "message": "test: Add tests for CompareFeerateDiagram and CheckConflictTopology",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-12T16:08:06Z"
      },
      "sha": "31b146d9055cc41ed8916fb2a4eb5808ed90253a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlNWY0YjM3YWY3N2U3NjdjZmM4ODc4ZTIxNDAyMDQyMWFiM2M3YmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5f4b37af77e767cfc8878e214020421ab3c7ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5f4b37af77e767cfc8878e214020421ab3c7ba",
      "tree": {
        "sha": "2490741303b53c73701319163da2a4bc9b816cb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2490741303b53c73701319163da2a4bc9b816cb2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31b146d9055cc41ed8916fb2a4eb5808ed90253a",
          "sha": "31b146d9055cc41ed8916fb2a4eb5808ed90253a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/31b146d9055cc41ed8916fb2a4eb5808ed90253a"
        }
      ],
      "message": "fuzz: fuzz diagram creation and comparison\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-12T16:17:47Z"
      },
      "sha": "6e5f4b37af77e767cfc8878e214020421ab3c7ba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU3Mjk5ZTMzNzU1MDY0NTE0ZjVhYTUxNzQ1OWQyNmZhMmE1ZWZjODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57299e33755064514f5aa517459d26fa2a5efc84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/57299e33755064514f5aa517459d26fa2a5efc84",
      "tree": {
        "sha": "b5c1d91a247b5fec22b541355c671853d8ee4292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c1d91a247b5fec22b541355c671853d8ee4292"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5f4b37af77e767cfc8878e214020421ab3c7ba",
          "sha": "6e5f4b37af77e767cfc8878e214020421ab3c7ba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5f4b37af77e767cfc8878e214020421ab3c7ba"
        }
      ],
      "message": "Add fuzz test for FeeFrac",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-18T17:37:56Z"
      },
      "sha": "57299e33755064514f5aa517459d26fa2a5efc84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGExNGI5NTEyOWQzYTI4OTRiN2E0MWNlOTE5YTQyNmJiNjBmNjJlMzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "tree": {
        "sha": "d8e472403762a07511add4ba6c99fa014cd916b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8e472403762a07511add4ba6c99fa014cd916b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57299e33755064514f5aa517459d26fa2a5efc84",
          "sha": "57299e33755064514f5aa517459d26fa2a5efc84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/57299e33755064514f5aa517459d26fa2a5efc84"
        }
      ],
      "message": "test: unit test for ImprovesFeerateDiagram",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-23T13:45:58Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-19T14:53:54Z"
      },
      "sha": "a14b95129d3a2894b7a41ce919a426bb60f62e35"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11570628614,
      "node_id": "HRFPE_lADOABII58578V6EzwAAAAKxqcgG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11570628614",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:51:36Z"
    },
    {
      "event": "commented",
      "id": 1906111930,
      "node_id": "IC_kwDOABII585xnPW6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1906111930",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:56:12Z",
      "updated_at": "2024-01-23T13:56:12Z",
      "author_association": "MEMBER",
      "body": "@murchandamus comments should be addressed or taken",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#issuecomment-1906111930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29242"
    },
    {
      "event": "mentioned",
      "id": 11570684798,
      "node_id": "MEE_lADOABII58578V6EzwAAAAKxqqN-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11570684798",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:56:12Z"
    },
    {
      "event": "subscribed",
      "id": 11570684817,
      "node_id": "SE_lADOABII58578V6EzwAAAAKxqqOR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11570684817",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:56:12Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480372",
      "pull_request_review_id": 1823506588,
      "id": 1453480372,
      "node_id": "PRRC_kwDOABII585Wolm0",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 91,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /** Add fee and size of another FeeFrac to this one. */\r\n    void inline operator+=(const FeeFrac& other) noexcept\r\n    {\r\n        fee += other.fee;\r\n        size += other.size;\r\n    }\r\n\r\n    /** Subtrack fee and size of another FeeFrac from this one. */\r\n```",
      "created_at": "2024-01-16T14:09:34Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480679",
      "pull_request_review_id": 1823506588,
      "id": 1453480679,
      "node_id": "PRRC_kwDOABII585Wolrn",
      "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();",
      "path": "src/util/feefrac.cpp",
      "position": 12,
      "original_position": 9,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reserve here?\r\n```suggestion\r\n    diagram.clear();\r\n    diagram.reserve(chunks.size() + 1);\r\n```",
      "created_at": "2024-01-16T14:09:41Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453480679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453480679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453482107",
      "pull_request_review_id": 1823506588,
      "id": 1453482107,
      "node_id": "PRRC_kwDOABII585WomB7",
      "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+    return;\n+}",
      "path": "src/util/feefrac.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for this return here\r\n```suggestion\r\n}\r\n```",
      "created_at": "2024-01-16T14:10:20Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453482107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453482107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 19,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453487633",
      "pull_request_review_id": 1823506588,
      "id": 1453487633,
      "node_id": "PRRC_kwDOABII585WonYR",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    friend inline std::strong_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        if (a.fee > INT32_MAX || a.fee < INT32_MIN || b.fee > INT32_MAX || b.fee < INT32_MIN) {\n+            auto a_cross = Mul128(a.fee, b.size);\n+            auto b_cross = Mul128(b.fee, a.size);\n+            return a_cross <=> b_cross;\n+        } else {\n+            auto a_cross = a.fee * b.size;\n+            auto b_cross = b.fee * a.size;\n+            return a_cross <=> b_cross;\n+        }\n+    }\n+\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto feerate_cmp = FeeRateCompare(a, b);\n+        if (feerate_cmp != 0) return feerate_cmp; // NOLINT(modernize-use-nullptr)\n+        return b.size <=> a.size;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) < 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) > 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    friend inline void swap(FeeFrac& a, FeeFrac& b) noexcept\n+    {\n+        std::swap(a.fee, b.fee);\n+        std::swap(a.size, b.size);\n+    }\n+};\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram);",
      "path": "src/util/feefrac.h",
      "position": 158,
      "original_position": 156,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a docstring on what `BuildDiagramFromUnsortedChunks` does in and out params description that are doxygen compatible?",
      "created_at": "2024-01-16T14:14:22Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453487633",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453487633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453501485",
      "pull_request_review_id": 1823506588,
      "id": 1453501485,
      "node_id": "PRRC_kwDOABII585Woqwt",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: we can just use the empty constructor\r\n```suggestion\r\n    FeeFrac empty{};\r\n```",
      "created_at": "2024-01-16T14:24:35Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453501485",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453501485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453502118",
      "pull_request_review_id": 1823506588,
      "id": 1453502118,
      "node_id": "PRRC_kwDOABII585Woq6m",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why can we have negative size ?",
      "created_at": "2024-01-16T14:25:01Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453502118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453502118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453604924",
      "pull_request_review_id": 1823506588,
      "id": 1453604924,
      "node_id": "PRRC_kwDOABII585WpEA8",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you mean `all_conflicts` here\r\n```suggestion\r\n    // old diagram will consist of each element of all_conflicts either at\r\n```",
      "created_at": "2024-01-16T15:36:53Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453604924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453604924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453612523",
      "pull_request_review_id": 1823506588,
      "id": 1453612523,
      "node_id": "PRRC_kwDOABII585WpF3r",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "use static cast?\r\n```suggestion\r\n            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\r\n```",
      "created_at": "2024-01-16T15:42:19Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453612523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453612523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453626393",
      "pull_request_review_id": 1823506588,
      "id": 1453626393,
      "node_id": "PRRC_kwDOABII585WpJQZ",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I understand what happens here but its a bit confusing to me the short forms `CON`, `CNK` `DIAGRAM`\r\nWill prefer something like the compute in computing the `OLD` chunk\r\n\r\n```suggestion\r\n    // Step 2: build the new diagram\r\n\r\n    // Add any parents of direct conflicts that are not conflicted themselves into the NEW chunk\r\n    for (auto direct_conflict : direct_conflicts) {\r\n        // If a direct conflict has an ancestor that is not in all_conflicts,\r\n        // it can be affected by the replacement of the child.\r\n        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\r\n            // Grab the parent.\r\n            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\r\n            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\r\n                // This transaction would be left over, so add to the NEW\r\n                // chunk.\r\n                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\r\n            }\r\n        }\r\n    }\r\n    // Add the replacement package to NEW\r\n    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));\r\n```",
      "created_at": "2024-01-16T15:52:23Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453626393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453626393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453667765",
      "pull_request_review_id": 1823506588,
      "id": 1453667765,
      "node_id": "PRRC_kwDOABII585WpTW1",
      "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should forward the detailed error message also?",
      "created_at": "2024-01-16T16:23:36Z",
      "updated_at": "2024-01-16T20:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1453667765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1453667765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 300,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455418545",
      "pull_request_review_id": 1827173808,
      "id": 1455418545,
      "node_id": "PRRC_kwDOABII585Wv-yx",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453501485,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Even better, I'll add a test that they're the same",
      "created_at": "2024-01-17T12:19:19Z",
      "updated_at": "2024-01-17T12:19:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455418545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455418545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455423851",
      "pull_request_review_id": 1827178150,
      "id": 1455423851,
      "node_id": "PRRC_kwDOABII585WwAFr",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453626393,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These are shorthand labels from https://delvingbitcoin.org/t/post-clustermempool-package-rbf-per-chunk-processing/190 which helped me think through preciesely how it maps onto the concepts laid out.\r\n\r\nI'd like to keep track of these ideas somehow, maybe by defining the labels?",
      "created_at": "2024-01-17T12:21:54Z",
      "updated_at": "2024-01-17T12:21:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455423851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455423851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455426826",
      "pull_request_review_id": 1827180557,
      "id": 1455426826,
      "node_id": "PRRC_kwDOABII585WwA0K",
      "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453667765,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you be more explicit in suggestion? The errors are being returned?",
      "created_at": "2024-01-17T12:23:21Z",
      "updated_at": "2024-01-17T12:23:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455426826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455426826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 300,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455433932",
      "pull_request_review_id": 1827186462,
      "id": 1455433932,
      "node_id": "PRRC_kwDOABII585WwCjM",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453502118,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is testing that subtraction works correctly, not that an individual chunk can have negative size",
      "created_at": "2024-01-17T12:26:54Z",
      "updated_at": "2024-01-17T12:26:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455433932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455433932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455527026",
      "pull_request_review_id": 1827266447,
      "id": 1455527026,
      "node_id": "PRRC_kwDOABII585WwZRy",
      "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453667765,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant what is being returned by `err_string` and `CompareFeerateDiagram` was not used. why were you unable to compute mining score, same for `CompareFeerateDiagram` why is the fee rate insufficient.",
      "created_at": "2024-01-17T13:11:40Z",
      "updated_at": "2024-01-17T13:11:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455527026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455527026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 300,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455534078",
      "pull_request_review_id": 1827272350,
      "id": 1455534078,
      "node_id": "PRRC_kwDOABII585Wwa_-",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 91,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": 1453480372,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, `Subtrack` isn't a word...",
      "created_at": "2024-01-17T13:14:53Z",
      "updated_at": "2024-01-17T13:14:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455534078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455534078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455539143",
      "pull_request_review_id": 1827276759,
      "id": 1455539143,
      "node_id": "PRRC_kwDOABII585WwcPH",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453626393,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\nYeah, maybe to be consistent define the labels and do the same in the  `OLD` `chunk` computation loop above.\r\nThough  the explicit comments in the `OLD`  `chunk` computation loop is more easier to parse for me :).",
      "created_at": "2024-01-17T13:17:06Z",
      "updated_at": "2024-01-17T13:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455539143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455539143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455544265",
      "pull_request_review_id": 1827280890,
      "id": 1455544265,
      "node_id": "PRRC_kwDOABII585WwdfJ",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453502118,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, My question was... whats the rationale for `FeeFrac` to generally have negative size ?",
      "created_at": "2024-01-17T13:19:22Z",
      "updated_at": "2024-01-17T13:19:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455544265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455544265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455658183",
      "pull_request_review_id": 1827381635,
      "id": 1455658183,
      "node_id": "PRRC_kwDOABII585Ww5TH",
      "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453667765,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CompareFeerateDiagram won't return much very interesting, but you're right for the `err_string`, will return it",
      "created_at": "2024-01-17T14:08:17Z",
      "updated_at": "2024-01-17T14:08:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1455658183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1455658183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 300,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459252934",
      "pull_request_review_id": 1833137718,
      "id": 1459252934,
      "node_id": "PRRC_kwDOABII585W-m7G",
      "diff_hunk": "@@ -181,3 +201,108 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+// Compare two feerate points, where one of the points is interpolated from\n+// existing points in a feerate diagram.\n+// Return 1 if the interpolated point is greater than fee_compare; 0 if they\n+// are equal; -1 otherwise.\n+int InterpolateValueAndCompare(int64_t eval_size, const FeeFrac& p1, const FeeFrac& p2, CAmount fee_compare)\n+{\n+    // Interpolate between two points using the formula:\n+    // y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)\n+    // i.e.\n+    // y = p1.fee + (eval_size - p1.size) * (p2.fee - p1.fee) / (p2.size - p2.size)\n+    // fee_compare = fee value we want to compare against the interpolated y\n+    //\n+    // Then evaluating y > fee_compare is equivalent to checking if y*(x2-x1) > fee_compare*(x2-x1),\n+    // or y1*(x2-x1) + (x - x1) * (y2 - y1) > fee_compare*(x2-x1).\n+    const auto fee_compare_scaled = Mul128(fee_compare, p2.size - p1.size);\n+    const auto y_scaled = Add128(Mul128(p1.fee, p2.size - p1.size), Mul128(eval_size - p1.size , p2.fee - p1.fee));\n+\n+    if (y_scaled > fee_compare_scaled) {\n+        return 1;\n+    } else if (y_scaled == fee_compare_scaled) {\n+        return 0;\n+    } else {\n+        return -1;\n+    }\n+}\n+\n+// returns true if the new_diagram is strictly better than the old one; false\n+// otherwise.\n+bool CompareFeerateDiagram(std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    size_t old_index=0;\n+    size_t new_index=0;\n+\n+    // whether the new diagram has at least one point better than old_diagram\n+    bool new_better = false;\n+\n+    // whether the old diagram has at least one point better than new_diagram\n+    bool old_better = false;\n+\n+    // Diagrams should be non-empty, and first elements zero in size and fee\n+    Assert(!old_diagram.empty() && !new_diagram.empty());\n+    Assert(old_diagram[0].fee == 0 && old_diagram[0].size == 0);\n+    Assert(new_diagram[0].fee == 0 && new_diagram[0].size == 0);\n+\n+    // Start by padding the smaller diagram with a transaction that pays the\n+    // tail feerate up to the size of the larger diagram.\n+    // For now, use an implicit tail feerate of 0, but we can change this if\n+    // there's an argument to be made that the true tail feerate is higher.\n+    // Also, if we end up needing to transform the feerates (eg to avoid\n+    // negative numbers or overflow in the calculations?), then the tail\n+    // feerate would need to be transformed as well.\n+    if (old_diagram.back().size < new_diagram.back().size) {\n+        old_diagram.emplace_back(old_diagram.back().fee, new_diagram.back().size);\n+    } else if (old_diagram.back().size > new_diagram.back().size) {\n+        new_diagram.emplace_back(new_diagram.back().fee, old_diagram.back().size);\n+    }\n+\n+    while (old_index < old_diagram.size() && new_index < new_diagram.size()) {\n+        int cmp = 0;\n+        if (old_diagram[old_index].size < new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(old_diagram[old_index].size, new_diagram[new_index-1], new_diagram[new_index], old_diagram[old_index].fee);\n+            old_better |= (cmp == -1);\n+            new_better |= (cmp == 1);\n+            old_index++;\n+        } else if (old_diagram[old_index].size > new_diagram[new_index].size) {\n+            cmp = InterpolateValueAndCompare(new_diagram[new_index].size, old_diagram[old_index-1], old_diagram[old_index], new_diagram[new_index].fee);\n+            old_better |= (cmp == 1);\n+            new_better |= (cmp == -1);\n+            new_index++;\n+        } else {\n+            if (old_diagram[old_index].fee > new_diagram[new_index].fee) {\n+                old_better = true;\n+            } else if (old_diagram[old_index].fee < new_diagram[new_index].fee) {\n+                new_better = true;\n+            }\n+            old_index++;\n+            new_index++;\n+        }\n+    }\n+\n+    // New is better at least one point, and at least as good on all points; we'll take it\n+    return new_better && !old_better;\n+}\n+\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                int64_t replacement_vsize,\n+                                                CAmount replacement_fees)\n+{\n+    // Require that the replacement strictly improve the mempool's fee vs. size diagram.\n+    std::vector<FeeFrac> old_diagram, new_diagram;\n+\n+    const auto err_string{pool.CalculateFeerateDiagramsForRBF(replacement_fees, replacement_vsize, direct_conflicts, all_conflicts, old_diagram, new_diagram)};\n+\n+    if (err_string.has_value()) {\n+        return strprintf(\"unable to compute mining score\");\n+    }\n+\n+    if (!CompareFeerateDiagram(old_diagram, new_diagram)) {\n+        return strprintf(\"insufficient feerate\");\n+    }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 133,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453667765,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:18Z",
      "updated_at": "2024-01-19T16:01:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459252934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459252934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 300,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253057",
      "pull_request_review_id": 1833138006,
      "id": 1459253057,
      "node_id": "PRRC_kwDOABII585W-m9B",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);\n+                old_chunks.emplace_back(individual);\n+            }\n+        } else {\n+            old_chunks.emplace_back(individual);\n+        }\n+    }\n+\n+    // No topology restrictions post-chunking; sort\n+    BuildDiagramFromUnsortedChunks(old_chunks, old_diagram);\n+\n+    std::vector<FeeFrac> new_chunks;\n+\n+    // Step 2: build the NEW = OLD - CON + CNK diagram\n+\n+    // OLD - CON: Any parents of direct conflicts that are not conflicted themselves\n+    for (auto direct_conflict : direct_conflicts) {\n+        // If a direct conflict has an ancestor that is not in all_conflicts,\n+        // it can be affected by the replacement of the child.\n+        if (direct_conflict->GetMemPoolParentsConst().size() > 0) {\n+            // Grab the parent.\n+            const CTxMemPoolEntry& parent = direct_conflict->GetMemPoolParentsConst().begin()->get();\n+            if (!all_conflicts.count(mapTx.iterator_to(parent))) {\n+                // This transaction would be left over, so add to the new\n+                // diagram.\n+                new_chunks.emplace_back(parent.GetModifiedFee(), parent.GetTxSize());\n+            }\n+        }\n+    }\n+    // + CNK\n+    new_chunks.emplace_back(replacement_fees, int32_t(replacement_vsize));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453626393,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "took some of hte language, and explicitly defined each term",
      "created_at": "2024-01-19T16:01:24Z",
      "updated_at": "2024-01-19T16:01:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253223",
      "pull_request_review_id": 1833138370,
      "id": 1459253223,
      "node_id": "PRRC_kwDOABII585W-m_n",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // Compute OLD chunks for all clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), int32_t(txiter->GetSizeWithAncestors())};",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453612523,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:31Z",
      "updated_at": "2024-01-19T16:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1327,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253328",
      "pull_request_review_id": 1833138587,
      "id": 1459253328,
      "node_id": "PRRC_kwDOABII585W-nBQ",
      "diff_hunk": "@@ -1248,3 +1249,121 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of direct_conflicts either at",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ab9a952bdd1406a4fc9fa71c63e6fbecb78d0a4b",
      "in_reply_to_id": 1453604924,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:35Z",
      "updated_at": "2024-01-19T16:01:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253396",
      "pull_request_review_id": 1833138722,
      "id": 1459253396,
      "node_id": "PRRC_kwDOABII585W-nCU",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453502118,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We use subtraction, and should try to handle that?",
      "created_at": "2024-01-19T16:01:37Z",
      "updated_at": "2024-01-19T16:01:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253460",
      "pull_request_review_id": 1833138857,
      "id": 1459253460,
      "node_id": "PRRC_kwDOABII585W-nDU",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};\n+    FeeFrac empty{0, 0};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453501485,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:40Z",
      "updated_at": "2024-01-19T16:01:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253539",
      "pull_request_review_id": 1833139037,
      "id": 1459253539,
      "node_id": "PRRC_kwDOABII585W-nEj",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    friend inline std::strong_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        if (a.fee > INT32_MAX || a.fee < INT32_MIN || b.fee > INT32_MAX || b.fee < INT32_MIN) {\n+            auto a_cross = Mul128(a.fee, b.size);\n+            auto b_cross = Mul128(b.fee, a.size);\n+            return a_cross <=> b_cross;\n+        } else {\n+            auto a_cross = a.fee * b.size;\n+            auto b_cross = b.fee * a.size;\n+            return a_cross <=> b_cross;\n+        }\n+    }\n+\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto feerate_cmp = FeeRateCompare(a, b);\n+        if (feerate_cmp != 0) return feerate_cmp; // NOLINT(modernize-use-nullptr)\n+        return b.size <=> a.size;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) < 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return FeeRateCompare(a, b) > 0; // NOLINT(modernize-use-nullptr)\n+    }\n+\n+    friend inline void swap(FeeFrac& a, FeeFrac& b) noexcept\n+    {\n+        std::swap(a.fee, b.fee);\n+        std::swap(a.size, b.size);\n+    }\n+};\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram);",
      "path": "src/util/feefrac.h",
      "position": 158,
      "original_position": 156,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": 1453487633,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added comment",
      "created_at": "2024-01-19T16:01:43Z",
      "updated_at": "2024-01-19T16:01:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253631",
      "pull_request_review_id": 1833139134,
      "id": 1459253631,
      "node_id": "PRRC_kwDOABII585W-nF_",
      "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();\n+    // Finish by sorting the chunks we calculated, and then accumulating them.\n+    std::sort(chunks.begin(), chunks.end(), [](const FeeFrac& a, const FeeFrac& b) { return a > b; });\n+\n+    // And now build the diagram for these chunks.\n+    diagram.emplace_back(0, 0);\n+    for (auto& chunk : chunks) {\n+        FeeFrac& last = diagram.back();\n+        diagram.emplace_back(last.fee+chunk.fee, last.size+chunk.size);\n+    }\n+    return;\n+}",
      "path": "src/util/feefrac.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": 1453482107,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:46Z",
      "updated_at": "2024-01-19T16:01:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 19,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253686",
      "pull_request_review_id": 1833139262,
      "id": 1459253686,
      "node_id": "PRRC_kwDOABII585W-nG2",
      "diff_hunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+\n+void BuildDiagramFromUnsortedChunks(std::vector<FeeFrac>& chunks, std::vector<FeeFrac>& diagram)\n+{\n+    diagram.clear();",
      "path": "src/util/feefrac.cpp",
      "position": 12,
      "original_position": 9,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": 1453480679,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:48Z",
      "updated_at": "2024-01-19T16:01:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253728",
      "pull_request_review_id": 1833139379,
      "id": 1459253728,
      "node_id": "PRRC_kwDOABII585W-nHg",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <algorithm>\n+#include <compare>\n+#include <vector>\n+\n+namespace {\n+\n+inline std::pair<int64_t, uint64_t> Mul128(int64_t a, int64_t b)\n+{\n+#ifdef __SIZEOF_INT128__\n+    __int128 ret = (__int128)a * b;\n+    return {ret >> 64, ret};\n+#else\n+    uint64_t ll = (uint64_t)(uint32_t)a * (uint32_t)b;\n+    int64_t lh = (uint32_t)a * (b >> 32);\n+    int64_t hl = (a >> 32) * (uint32_t)b;\n+    int64_t hh = (a >> 32) * (b >> 32);\n+    uint64_t mid34 = (ll >> 32) + (uint32_t)lh + (uint32_t)hl;\n+    int64_t hi = hh + (lh >> 32) + (hl >> 32) + (mid34 >> 32);\n+    uint64_t lo = (mid34 << 32) + (uint32_t)ll;\n+    return {hi, lo};\n+#endif\n+}\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (==, !=, >, <, >=, <=, <=>) respect this ordering.\n+ *\n+ * The >> and << operators only compare feerate and treat equal feerate but different size as\n+ * equivalent. The empty FeeFrac is neither lower or higher in feerate than any other.\n+ * The FeeRateCompare function returns the three-way comparison for this order.\n+ */\n+struct FeeFrac\n+{\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t s, int32_t b) noexcept : fee{s}, size{b}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        assert(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add size and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+    }\n+\n+    /** Subtrack size and size of another FeeFrac from this one. */",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 91,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "ec3cf62361912a85ccd8d93abc3606df695c69ef",
      "in_reply_to_id": 1453480372,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T16:01:50Z",
      "updated_at": "2024-01-19T16:01:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459253728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459253728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 84,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459264030",
      "pull_request_review_id": 1833161137,
      "id": 1459264030,
      "node_id": "PRRC_kwDOABII585W-poe",
      "diff_hunk": "@@ -106,4 +108,23 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts\n+ * @param[in]   replacement_fees    Fees of replacement package\n+ * @param[in]   replacement_vsize   Size of replacement package\n+ * @returns error string if mempool diagram doesn't improve, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                CAmount replacement_fees,\n+                                                int64_t replacement_vsize)\n+                                                EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Compares two feerate diagrams. The shorter one is padded with a horizonal line. */\n+std::partial_ordering CompareFeerateDiagram(std::vector<FeeFrac>& dia0, std::vector<FeeFrac>& dia1);",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 31,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: perhaps this function belongs more in util/feefrac (as the building of the diagram also lives there)",
      "created_at": "2024-01-19T16:09:00Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459264030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459264030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459279118",
      "pull_request_review_id": 1833161137,
      "id": 1459279118,
      "node_id": "PRRC_kwDOABII585W-tUO",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <random.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(feefrac_tests)\n+\n+BOOST_AUTO_TEST_CASE(feefrac_operators)\n+{\n+    FeeFrac p1{1000, 100}, p2{500, 300};\n+    FeeFrac sum{1500, 400};\n+    FeeFrac diff{500, -200};",
      "path": "src/test/feefrac_tests.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "8d74a28a62083bbbee1fd6a2dee56994f293a61a",
      "in_reply_to_id": 1453502118,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can think of one use case where negative sizes are actually useful, though it's pretty far fetched.\r\n\r\nCurrently the code hardcodes a \"tail feerate\" (the feerate of which we assume there is an infinite supply) of 0 sat/vB for mempool improvement checks, but in theory this can be configurable. In that case, in addition to the diagram check between old and new package, we want the property that `fee_new >= fee_old + (size_new - size_old) * feerate_tail`. If `old`, `new`, and `tail` are CFeeFrac objects, this condition is exactly `!((new - old) << tail)`. If new is smaller than old, the `new - old` object has negative size.\r\n\r\nA more pragmatic answer is that there is no real reason to restrict it to just positive sizes, and not enforcing it is simpler.",
      "created_at": "2024-01-19T16:18:54Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459279118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459279118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459281387",
      "pull_request_review_id": 1833161137,
      "id": 1459281387,
      "node_id": "PRRC_kwDOABII585W-t3r",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: std::array.",
      "created_at": "2024-01-19T16:20:13Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459281387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459281387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459282903",
      "pull_request_review_id": 1833161137,
      "id": 1459282903,
      "node_id": "PRRC_kwDOABII585W-uPX",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: EMBRACE THE SPACESHIP\r\n\r\n```c++\r\nif (a[i] != b[i]) return a[i] <=> b[i];\r\n```",
      "created_at": "2024-01-19T16:21:09Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459282903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459282903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459283849",
      "pull_request_review_id": 1833161137,
      "id": 1459283849,
      "node_id": "PRRC_kwDOABII585W-ueJ",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Self-nit: `2^64` -> `2^32`",
      "created_at": "2024-01-19T16:21:44Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459283849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459283849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459309396",
      "pull_request_review_id": 1833161137,
      "id": 1459309396,
      "node_id": "PRRC_kwDOABII585W-0tU",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggested change that (I believe) avoids the need for suppressions (and may be more readable?):\r\n\r\n```c++\r\n    auto add_fn = [&](uint64_t v, int pos) {\r\n        uint64_t accum{0};\r\n        for (int i = 0; i + pos < 4; ++i) {\r\n            // Add current value at limb pos in ret.\r\n            accum += ret[3 - pos - i];\r\n            // Add low or high half of v.\r\n            if (i == 0) accum += v & 0xffffffff;\r\n            if (i == 1) accum += v >> 32;\r\n            // Store lower half of result in limb pos in ret.\r\n            ret[3 - pos - i] = accum & 0xffffffff;\r\n            // Leave carry in accum.\r\n            accum >>= 32;\r\n        }\r\n        // Make sure no overflow.\r\n        assert(accum == 0);\r\n    };\r\n```",
      "created_at": "2024-01-19T16:36:25Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459309396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459309396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459312210",
      "pull_request_review_id": 1833161137,
      "id": 1459312210,
      "node_id": "PRRC_kwDOABII585W-1ZS",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;\n+        if (a[i] > b[i]) return std::strong_ordering::greater;\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 62,
      "original_position": 63,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Avoid the need for a suppression:\r\n\r\n```c++\r\n// Compute absolute values.\r\nuint64_t abs_a1 = static_cast<uint64_t>(a1), abs_a2 = static_cast<uint64_t>(a2);\r\nuint64_t abs_b1 = static_cast<uint64_t>(b1), abs_b2 = static_cast<uint64_t>(b2);\r\n// Use (~x + 1) instead of the equivalent (-x) to silence the linter; mod 2^64 behavior is\r\n// intentional here.\r\nif (a1 < 0) abs_a1 = ~abs_a1 + 1;\r\nif (a2 < 0) abs_a2 = ~abs_a2 + 1;\r\nif (b1 < 0) abs_b1 = ~abs_b1 + 1;\r\nif (b2 < 0) abs_b2 = ~abs_b2 + 1;\r\n```\r\n\r\n(The same trick is used in `CScriptNum::serialize`, it could be abstracted out)",
      "created_at": "2024-01-19T16:38:05Z",
      "updated_at": "2024-01-19T17:31:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459312210",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459312210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459315118",
      "pull_request_review_id": 1833161137,
      "id": 1459315118,
      "node_id": "PRRC_kwDOABII585W-2Gu",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 13,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Self-nit: no need for this `namespace` anymore.",
      "created_at": "2024-01-19T16:39:47Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459315118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459315118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459316281",
      "pull_request_review_id": 1833161137,
      "id": 1459316281,
      "node_id": "PRRC_kwDOABII585W-2Y5",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Self-nit: this operator can be dropped (C++20 will automatically generate it as negation of `operator==`).",
      "created_at": "2024-01-19T16:40:32Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459316281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459316281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459317381",
      "pull_request_review_id": 1833161137,
      "id": 1459317381,
      "node_id": "PRRC_kwDOABII585W-2qF",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee != b.fee || a.size != b.size;\n+    }\n+\n+    /** Compare two FeeFracs just by feerate. */\n+    friend inline std::weak_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a < cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a > cross_b;\n+    }\n+\n+    /** Compare two FeeFracs. */\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        if (cross_a == cross_b) return b.size <=> a.size;\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object is worse than another. */\n+    friend inline bool operator<(const FeeFrac& a, const FeeFrac& b) noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 160,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Self-nit: `operator<`, `operator>`, `operator<=` and `operator>=` can be dropped (C++20 will autogenerate them using `operator<=>` (inspecting the compiled code, it's marginally less efficient, but all the actually performance-critical uses use `operator<<`, `operator>>`, or `FeeRateCompare` anyway).",
      "created_at": "2024-01-19T16:41:05Z",
      "updated_at": "2024-01-19T16:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459317381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459317381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709324",
      "pull_request_review_id": 1833628032,
      "id": 1459709324,
      "node_id": "PRRC_kwDOABII585XAWWM",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee != b.fee || a.size != b.size;\n+    }\n+\n+    /** Compare two FeeFracs just by feerate. */\n+    friend inline std::weak_ordering FeeRateCompare(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly lower feerate than another. */\n+    friend inline bool operator<<(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a < cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object has strictly higher feerate than another. */\n+    friend inline bool operator>>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        return cross_a > cross_b;\n+    }\n+\n+    /** Compare two FeeFracs. */\n+    friend inline std::strong_ordering operator<=>(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        auto cross_a = Mul(a.fee, b.size), cross_b = Mul(b.fee, a.size);\n+        if (cross_a == cross_b) return b.size <=> a.size;\n+        return cross_a <=> cross_b;\n+    }\n+\n+    /** Check if a FeeFrac object is worse than another. */\n+    friend inline bool operator<(const FeeFrac& a, const FeeFrac& b) noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 160,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459317381,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:20Z",
      "updated_at": "2024-01-19T20:25:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709417",
      "pull_request_review_id": 1833628227,
      "id": 1459709417,
      "node_id": "PRRC_kwDOABII585XAWXp",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {\n+\n+\n+} // namespace\n+\n+/** Data structure storing a fee and size, ordered by increasing fee/size.\n+ *\n+ * The size of a FeeFrac cannot be zero unless the fee is also zero.\n+ *\n+ * FeeFracs have a total ordering, first by increasing feerate (ratio of fee over size), and then\n+ * by decreasing size. The empty FeeFrac (fee and size both 0) sorts last. So for example, the\n+ * following FeeFracs are in sorted order:\n+ *\n+ * - fee=0 size=1 (feerate 0)\n+ * - fee=1 size=2 (feerate 0.5)\n+ * - fee=2 size=3 (feerate 0.667...)\n+ * - fee=2 size=2 (feerate 1)\n+ * - fee=1 size=1 (feerate 1)\n+ * - fee=3 size=2 (feerate 1.5)\n+ * - fee=2 size=1 (feerate 2)\n+ * - fee=0 size=0 (undefined feerate)\n+ *\n+ * A FeeFrac is considered \"better\" if it sorts after another, by this ordering. All standard\n+ * comparison operators (<=>, ==, !=, >, <, >=, <=) respect this ordering.\n+ *\n+ * The CompareFeeFrac, and >> and << operators only compare feerate and treat equal feerate but\n+ * different size as equivalent. The empty FeeFrac is neither lower or higher in feerate than any\n+ * other.\n+ */\n+struct FeeFrac\n+{\n+    /** Fallback version for Mul (see below).\n+     *\n+     * Separate to permit testing on platforms where it isn't actually needed.\n+     */\n+    static inline std::pair<int64_t, uint32_t> MulFallback(int64_t a, int32_t b) noexcept\n+    {\n+        // Otherwise, emulate 96-bit multiplication using two 64-bit multiplies.\n+        int64_t low = int64_t{static_cast<uint32_t>(a)} * b;\n+        int64_t high = (a >> 32) * b;\n+        return {high + (low >> 32), static_cast<uint32_t>(low)};\n+    }\n+\n+    // Compute a * b, returning an unspecified but totally ordered type.\n+#ifdef __SIZEOF_INT128__\n+    static inline __int128 Mul(int64_t a, int32_t b) noexcept\n+    {\n+        // If __int128 is available, use 128-bit wide multiply.\n+        return __int128{a} * b;\n+    }\n+#else\n+    static constexpr auto Mul = MulFallback;\n+#endif\n+\n+    /** Fee. */\n+    int64_t fee;\n+    /** Size. */\n+    int32_t size;\n+\n+    /** Construct an IsEmpty() FeeFrac. */\n+    inline FeeFrac() noexcept : fee{0}, size{0} {}\n+\n+    /** Construct a FeeFrac with specified fee and size. */\n+    inline FeeFrac(int64_t f, int32_t s) noexcept : fee{f}, size{s}\n+    {\n+        // If size==0, fee must be 0 as well.\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    inline FeeFrac(const FeeFrac&) noexcept = default;\n+    inline FeeFrac& operator=(const FeeFrac&) noexcept = default;\n+\n+    /** Check if this is empty (size and fee are 0). */\n+    bool inline IsEmpty() const noexcept {\n+        return size == 0;\n+    }\n+\n+    /** Add fee and size of another FeeFrac to this one. */\n+    void inline operator+=(const FeeFrac& other) noexcept\n+    {\n+        fee += other.fee;\n+        size += other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Subtract fee and size of another FeeFrac from this one. */\n+    void inline operator-=(const FeeFrac& other) noexcept\n+    {\n+        fee -= other.fee;\n+        size -= other.size;\n+        Assume(size != 0 || fee == 0);\n+    }\n+\n+    /** Sum fee and size. */\n+    friend inline FeeFrac operator+(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee + b.fee, a.size + b.size};\n+    }\n+\n+    /** Subtract both fee and size. */\n+    friend inline FeeFrac operator-(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return {a.fee - b.fee, a.size - b.size};\n+    }\n+\n+    /** Check if two FeeFrac objects are equal (both same fee and same size). */\n+    friend inline bool operator==(const FeeFrac& a, const FeeFrac& b) noexcept\n+    {\n+        return a.fee == b.fee && a.size == b.size;\n+    }\n+\n+    /** Check if two FeeFrac objects are different (either fee or size differs). */\n+    friend inline bool operator!=(const FeeFrac& a, const FeeFrac& b) noexcept",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 125,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459316281,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:25Z",
      "updated_at": "2024-01-19T20:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709496",
      "pull_request_review_id": 1833628323,
      "id": 1459709496,
      "node_id": "PRRC_kwDOABII585XAWY4",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_FEEFRAC_H\n+#define BITCOIN_UTIL_FEEFRAC_H\n+\n+#include <stdint.h>\n+#include <compare>\n+#include <vector>\n+#include <util/check.h>\n+\n+namespace {",
      "path": "src/util/feefrac.h",
      "position": null,
      "original_position": 13,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459315118,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:28Z",
      "updated_at": "2024-01-19T20:25:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709630",
      "pull_request_review_id": 1833628458,
      "id": 1459709630,
      "node_id": "PRRC_kwDOABII585XAWa-",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;\n+        if (a[i] > b[i]) return std::strong_ordering::greater;\n+    }\n+    return std::strong_ordering::equal;\n+}\n+\n+std::strong_ordering MulCompare(int64_t a1, int64_t a2, int64_t b1, int64_t b2)\n+{\n+    // Compute and compare signs.\n+    int sign_a = (a1 == 0 ? 0 : a1 < 0 ? -1 : 1) * (a2 == 0 ? 0 : a2 < 0 ? -1 : 1);\n+    int sign_b = (b1 == 0 ? 0 : b1 < 0 ? -1 : 1) * (b2 == 0 ? 0 : b2 < 0 ? -1 : 1);\n+    if (sign_a != sign_b) return sign_a <=> sign_b;\n+\n+    // Compute absolute values.",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 62,
      "original_position": 63,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459312210,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:34Z",
      "updated_at": "2024-01-19T20:25:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709663",
      "pull_request_review_id": 1833628511,
      "id": 1459709663,
      "node_id": "PRRC_kwDOABII585XAWbf",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459309396,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "looks good, done",
      "created_at": "2024-01-19T20:25:36Z",
      "updated_at": "2024-01-19T20:25:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709766",
      "pull_request_review_id": 1833628606,
      "id": 1459709766,
      "node_id": "PRRC_kwDOABII585XAWdG",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459283849,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:40Z",
      "updated_at": "2024-01-19T20:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709852",
      "pull_request_review_id": 1833628685,
      "id": 1459709852,
      "node_id": "PRRC_kwDOABII585XAWec",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */\n+std::strong_ordering compare_arrays(const std::array<uint32_t, 4>& a, const std::array<uint32_t, 4>& b) {\n+    for (size_t i = 0; i < a.size(); ++i) {\n+        if (a[i] < b[i]) return std::strong_ordering::less;",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459282903,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:44Z",
      "updated_at": "2024-01-19T20:25:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709932",
      "pull_request_review_id": 1833628778,
      "id": 1459709932,
      "node_id": "PRRC_kwDOABII585XAWfs",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/feefrac.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <compare>\n+#include <cstdint>\n+#include <iostream>\n+\n+namespace {\n+\n+/** Compute a * b, represented in 4x32 bits, highest limb first. */\n+std::array<uint32_t, 4> Mul128(uint64_t a, uint64_t b)\n+{\n+    std::array<uint32_t, 4> ret{0, 0, 0, 0};\n+\n+    /** Perform ret += v << (32 * pos), at 128-bit precision. */\n+    auto add_fn = [&](uint64_t v, int pos) {\n+        uint32_t carry = 0;\n+        for (int i = 0; i + pos < 4; ++i) {\n+            uint32_t& limb = ret[3 - pos - i];\n+            uint32_t old = limb;\n+            // Add low or high half of v.\n+            if (i == 0) limb += v;\n+            if (i == 1) limb += v >> 32;\n+            // Add carry from previous position.\n+            limb += carry;\n+            // Compute carry for next position.\n+            carry = (limb < old) || ((limb == old) && carry);\n+        }\n+        // Make sure no overflow.\n+        assert(carry == 0);\n+    };\n+\n+    // Multiply the 4 individual limbs (schoolbook multiply, with base 2^64).\n+    add_fn((a & 0xffffffff) * (b & 0xffffffff), 0);\n+    add_fn((a >> 32) * (b & 0xffffffff), 1);\n+    add_fn((a & 0xffffffff) * (b >> 32), 1);\n+    add_fn((a >> 32) * (b >> 32), 2);\n+    return ret;\n+}\n+\n+/* comparison helper for std::vector */",
      "path": "src/test/fuzz/feefrac.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459281387,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-19T20:25:48Z",
      "updated_at": "2024-01-19T20:25:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459709932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459709932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459710174",
      "pull_request_review_id": 1833628978,
      "id": 1459710174,
      "node_id": "PRRC_kwDOABII585XAWje",
      "diff_hunk": "@@ -106,4 +108,23 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts\n+ * @param[in]   replacement_fees    Fees of replacement package\n+ * @param[in]   replacement_vsize   Size of replacement package\n+ * @returns error string if mempool diagram doesn't improve, otherwise std::nullopt.\n+ */\n+std::optional<std::string> ImprovesFeerateDiagram(CTxMemPool& pool,\n+                                                const CTxMemPool::setEntries& direct_conflicts,\n+                                                const CTxMemPool::setEntries& all_conflicts,\n+                                                CAmount replacement_fees,\n+                                                int64_t replacement_vsize)\n+                                                EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Compares two feerate diagrams. The shorter one is padded with a horizonal line. */\n+std::partial_ordering CompareFeerateDiagram(std::vector<FeeFrac>& dia0, std::vector<FeeFrac>& dia1);",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 31,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "a4b92cfd641d65224528395f1f9b98406822f333",
      "in_reply_to_id": 1459264030,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "makes sense, moved",
      "created_at": "2024-01-19T20:25:58Z",
      "updated_at": "2024-01-19T20:25:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1459710174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1459710174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462332681",
      "pull_request_review_id": 1837231759,
      "id": 1462332681,
      "node_id": "PRRC_kwDOABII585XKW0J",
      "diff_hunk": "@@ -19,6 +19,8 @@\n #include <limits>\n #include <vector>\n \n+#include <compare>",
      "path": "src/policy/rbf.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the commit message of \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n> This new function takes the populated sets of\r\n> direct and all conflicts computed in the current\r\n> mempool, assuming the replacements are a single\r\n> chunk, and computes a diagram check.\r\n\r\nThe first sentence is confusing to me. Could you perhaps clarify \"the populated sets of direct and all conflicts\" and split the sentence up?",
      "created_at": "2024-01-22T19:42:17Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462332681",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462332681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462348934",
      "pull_request_review_id": 1837231759,
      "id": 1462348934,
      "node_id": "PRRC_kwDOABII585XKayG",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nNit: The documentation is in opposite order as the checks. Perhaps switch these two lines.",
      "created_at": "2024-01-22T19:55:55Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462348934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462348934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1274,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462350586",
      "pull_request_review_id": 1837231759,
      "id": 1462350586,
      "node_id": "PRRC_kwDOABII585XKbL6",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n```suggestion\r\n            return strprintf(\"%s has both ancestor and descendant, exceeding cluster limit of 2\", txid_string);\r\n```",
      "created_at": "2024-01-22T19:57:44Z",
      "updated_at": "2024-01-22T21:59:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462350586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462350586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462365378",
      "pull_request_review_id": 1837231759,
      "id": 1462365378,
      "node_id": "PRRC_kwDOABII585XKezC",
      "diff_hunk": "@@ -106,4 +115,20 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 32,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nMaybe that’s my unfamiliarity with the mempool code, but it is not obvious to me what \"direct_conflicts\" and \"all_conflicts\" are, and the description here is self-referential. Do these transactions belong to original, replacement, or both, etc.?",
      "created_at": "2024-01-22T20:12:42Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462365378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462365378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462385881",
      "pull_request_review_id": 1837231759,
      "id": 1462385881,
      "node_id": "PRRC_kwDOABII585XKjzZ",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of all_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // OLD: Compute existing chunks from all affected clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\nNit: Spaces around that minus? It took me a moment to realize that dashes aren’t a thing in variables. ",
      "created_at": "2024-01-22T20:34:34Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462385881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462385881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462412782",
      "pull_request_review_id": 1837231759,
      "id": 1462412782,
      "node_id": "PRRC_kwDOABII585XKqXu",
      "diff_hunk": "@@ -734,6 +735,23 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly (not via descendants)",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 18,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"Implement ImprovesFeerateDiagram\" (9257f33d259bf68f1df1cc41b7b3caaea341782f):\r\n\r\n```suggestion\r\n     * @param[in] direct_conflicts    All transactions that would be removed directly (not by being descendants of conflicting transactions)\r\n```",
      "created_at": "2024-01-22T20:55:51Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462412782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462412782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462453899",
      "pull_request_review_id": 1837231759,
      "id": 1462453899,
      "node_id": "PRRC_kwDOABII585XK0aL",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 206,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\nNit: I found the comment here confusing. How about: \"`new_diagram` is strictly better due to the first chunk, while the second chunk is worse.\"",
      "created_at": "2024-01-22T21:40:35Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462453899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462453899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462457196",
      "pull_request_review_id": 1837231759,
      "id": 1462457196,
      "node_id": "PRRC_kwDOABII585XK1Ns",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\n\r\nNit: in the new diagram, the last two chunks should be one chunk because the last chunk is better (151 sats, 150 vB) than the prior (249 sats, 250 vB).",
      "created_at": "2024-01-22T21:44:38Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462457196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462457196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462462868",
      "pull_request_review_id": 1837231759,
      "id": 1462462868,
      "node_id": "PRRC_kwDOABII585XK2mU",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // If we make the second chunk slightly better, the new diagram now wins.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{1000, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Identical diagrams, cannot be strictly better\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    BOOST_CHECK(std::is_eq(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Same aggregate fee, but different total size (trigger single tail fee check step)\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    // No change in evaluation when tail check needed.\n+    BOOST_CHECK(std::is_gt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 238,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"test: Add tests for CompareFeerateDiagram and CheckConflictTopology\" (b3d415fe84be7edfbed567a79a25d406b438622b):\r\n\r\nThis is the same old_diagram. Did you mean to repeat the same transactions,\r\n```suggestion\r\n\r\n    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\r\n    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\r\n```\r\nor just test in both directions?\r\n```suggestion\r\n```",
      "created_at": "2024-01-22T21:51:02Z",
      "updated_at": "2024-01-22T21:59:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1462462868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1462462868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463281056",
      "pull_request_review_id": 1838789825,
      "id": 1463281056,
      "node_id": "PRRC_kwDOABII585XN-Wg",
      "diff_hunk": "@@ -19,6 +19,8 @@\n #include <limits>\n #include <vector>\n \n+#include <compare>",
      "path": "src/policy/rbf.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462332681,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "direct_conflicts and all_conflicts. Does that help?",
      "created_at": "2024-01-23T13:26:49Z",
      "updated_at": "2024-01-23T13:26:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463281056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463281056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463285858",
      "pull_request_review_id": 1838797602,
      "id": 1463285858,
      "node_id": "PRRC_kwDOABII585XN_hi",
      "diff_hunk": "@@ -106,4 +115,20 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/**\n+ * The replacement transaction must improve the feerate diagram of the mempool.\n+ * @param[in]   pool                The mempool.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the direct conflicts\n+ * @param[in]   all_conflicts       Set of mempool entries corresponding to all conflicts",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 32,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462365378,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "direct_conflicts -> the set of transactions that have at least one input conflicting with a proposed transaction.\r\nall_conflicts -> Everything that would be evicted by the proposed transaction\r\n\r\nI'll touch this up a bit but this is the nomenclature elsewhere",
      "created_at": "2024-01-23T13:30:37Z",
      "updated_at": "2024-01-23T13:30:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463285858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463285858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314427",
      "pull_request_review_id": 1838845793,
      "id": 1463314427,
      "node_id": "PRRC_kwDOABII585XOGf7",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // If we make the second chunk slightly better, the new diagram now wins.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{1000, 350}, FeeFrac{1150, 500}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Identical diagrams, cannot be strictly better\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    BOOST_CHECK(std::is_eq(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Same aggregate fee, but different total size (trigger single tail fee check step)\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+\n+    // No change in evaluation when tail check needed.\n+    BOOST_CHECK(std::is_gt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 399}};\n+",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 238,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": 1462462868,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't recall honestly, removed that line",
      "created_at": "2024-01-23T13:51:39Z",
      "updated_at": "2024-01-23T13:51:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314511",
      "pull_request_review_id": 1838845897,
      "id": 1463314511,
      "node_id": "PRRC_kwDOABII585XOGhP",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 100}, FeeFrac{1100, 200}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is better, but second chunk is worse\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{750, 100}, FeeFrac{999, 350}, FeeFrac{1150, 500}};",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": 1462457196,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah hmm, I'm not sure that matters for correctness of test, but jacked up the last chunk's size just to make it clearer what we're testing",
      "created_at": "2024-01-23T13:51:42Z",
      "updated_at": "2024-01-23T13:51:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314570",
      "pull_request_review_id": 1838845988,
      "id": 1463314570,
      "node_id": "PRRC_kwDOABII585XOGiK",
      "diff_hunk": "@@ -217,15 +232,113 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     BOOST_CHECK(HasNoNewUnconfirmed(/*tx=*/ *spends_unconfirmed.get(),\n                                     /*pool=*/ pool,\n                                     /*iters_conflicting=*/ all_entries) == std::nullopt);\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, {entry2_normal}) == std::nullopt);\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_unconfirmed.get(), pool, empty_set).has_value());\n \n     const auto spends_new_unconfirmed = make_tx({tx1, tx8}, {36 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2}).has_value());\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, {entry2_normal}).has_value());\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_new_unconfirmed.get(), pool, all_entries).has_value());\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n-    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+    BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(pool.CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // N direct conflicts; ok\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok, even if it's considered a direct conflict as well\n+    const auto child_tx = add_descendants(tx10, 1, pool);\n+    const auto entry10_child = pool.GetIter(child_tx->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}) == std::nullopt);\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained, entry10_child}) == std::nullopt);\n+\n+    // One more, size 3 cluster too much\n+    const auto child_tx2 = add_descendants(tx10, 1, pool);\n+    const auto entry10_child2 = pool.GetIter(child_tx2->GetHash()).value();\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_unchained, entry11_unchained}).has_value());\n+    // even if direct conflict is descendent itself\n+    BOOST_CHECK(pool.CheckConflictTopology({entry9_unchained, entry10_child2, entry11_unchained}).has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(feerate_diagram_utilities)\n+{\n+    // Sanity check the correctness of the feerate diagram comparison.\n+\n+    // A strictly better case.\n+    std::vector<FeeFrac> old_diagram{{FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}}};\n+    std::vector<FeeFrac> new_diagram{{FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1050, 400}}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Incomparable diagrams\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1000, 300}, FeeFrac{1000, 400}};\n+\n+    BOOST_CHECK(CompareFeerateDiagram(old_diagram, new_diagram) == std::partial_ordering::unordered);\n+\n+    // Strictly better but smaller size.\n+    old_diagram = {FeeFrac{0, 0}, FeeFrac{950, 300}, FeeFrac{1050, 400}};\n+    new_diagram = {FeeFrac{0, 0}, FeeFrac{1100, 300}};\n+\n+    BOOST_CHECK(std::is_lt(CompareFeerateDiagram(old_diagram, new_diagram)));\n+\n+    // Feerate of first chunk is sufficiently better, but second chunk is worse.",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 206,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "b3d415fe84be7edfbed567a79a25d406b438622b",
      "in_reply_to_id": 1462453899,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tried my own re-explanation. I agree as-is is confusing",
      "created_at": "2024-01-23T13:51:45Z",
      "updated_at": "2024-01-23T13:51:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314620",
      "pull_request_review_id": 1838846083,
      "id": 1463314620,
      "node_id": "PRRC_kwDOABII585XOGi8",
      "diff_hunk": "@@ -734,6 +735,23 @@ class CTxMemPool\n         return m_sequence_number;\n     }\n \n+    /**\n+     * Calculate the old and new mempool feerate diagrams relating to the\n+     * clusters that would be affected by a potential replacement transaction.\n+     *\n+     * @param[in] replacement_fees    Package fees\n+     * @param[in] replacement_vsize   Package size\n+     * @param[in] direct_conflicts    All transactions that would be removed directly (not via descendants)",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 18,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462412782,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "tried my own explanation",
      "created_at": "2024-01-23T13:51:47Z",
      "updated_at": "2024-01-23T13:51:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 744,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314778",
      "pull_request_review_id": 1838846344,
      "id": 1463314778,
      "node_id": "PRRC_kwDOABII585XOGla",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.\n+        if (has_descendant) {\n+            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\n+            if (our_child->get().GetCountWithAncestors() > 2) {\n+                return strprintf(\"%s is not the only parent of child %s\",\n+                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        } else if (has_ancestor) {\n+            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\n+            if (our_parent->get().GetCountWithDescendants() > 2) {\n+                return strprintf(\"%s is not the only child of parent %s\",\n+                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CTxMemPool::CalculateFeerateDiagramsForRBF(CAmount replacement_fees, int64_t replacement_vsize, const setEntries& direct_conflicts, const setEntries& all_conflicts, std::vector<FeeFrac>& old_diagram, std::vector<FeeFrac>& new_diagram)\n+{\n+    auto err_string{CheckConflictTopology(direct_conflicts)};\n+    if (err_string.has_value()) {\n+        // Unsupported topology for calculating a feerate diagram\n+        return err_string;\n+    }\n+\n+    // new_diagram will have chunks that consist of each ancestor of\n+    // direct_conflicts that is at its own fee/size, along with the replacement\n+    // tx/package at its own fee/size\n+\n+    // old diagram will consist of each element of all_conflicts either at\n+    // its own feerate (followed by any descendant at its own feerate) or as a\n+    // single chunk at its descendant's ancestor feerate.\n+\n+    std::vector<FeeFrac> old_chunks;\n+    // Step 1: build the old diagram.\n+\n+    // The above clusters are all trivially linearized;\n+    // they have a strict topology of 1 or two connected transactions.\n+\n+    // OLD: Compute existing chunks from all affected clusters\n+    for (auto txiter : all_conflicts) {\n+        // Does this transaction have descendants?\n+        if (txiter->GetCountWithDescendants() > 1) {\n+            // Consider this tx when we consider the descendant.\n+            continue;\n+        }\n+        // Does this transaction have ancestors?\n+        FeeFrac individual{txiter->GetModifiedFee(), txiter->GetTxSize()};\n+        if (txiter->GetCountWithAncestors() > 1) {\n+            // We'll add chunks for either the ancestor by itself and this tx\n+            // by itself, or for a combined package.\n+            FeeFrac package{txiter->GetModFeesWithAncestors(), static_cast<int32_t>(txiter->GetSizeWithAncestors())};\n+            if (individual > package) {\n+                // The individual feerate is higher than the package, and\n+                // therefore higher than the parent's fee. Chunk these\n+                // together.\n+                old_chunks.emplace_back(package);\n+            } else {\n+                // Add two points, one for the parent and one for this child.\n+                old_chunks.emplace_back(package-individual);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462385881,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-01-23T13:51:54Z",
      "updated_at": "2024-01-23T13:51:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463314778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463314778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315597",
      "pull_request_review_id": 1838847715,
      "id": 1463315597,
      "node_id": "PRRC_kwDOABII585XOGyN",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462350586,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2024-01-23T13:52:33Z",
      "updated_at": "2024-01-23T13:52:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315777",
      "pull_request_review_id": 1838847976,
      "id": 1463315777,
      "node_id": "PRRC_kwDOABII585XOG1B",
      "diff_hunk": "@@ -1248,3 +1249,126 @@ std::vector<CTxMemPool::txiter> CTxMemPool::GatherClusters(const std::vector<uin\n     }\n     return clustered_txs;\n }\n+\n+std::optional<std::string> CTxMemPool::CheckConflictTopology(const setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        // Ancestor and descendant counts are inclusive of the tx itself.\n+        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\n+        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\n+        const bool has_ancestor{ancestor_count > 1};\n+        const bool has_descendant{descendant_count > 1};\n+        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\n+        // The only allowed configurations are:\n+        // 1 ancestor and 0 descendant\n+        // 0 ancestor and 1 descendant\n+        // 0 ancestor and 0 descendant\n+        if (ancestor_count > 2) {\n+            return strprintf(\"%s has %u ancestors, max 1 allowed\", txid_string, ancestor_count - 1);\n+        } else if (descendant_count > 2) {\n+            return strprintf(\"%s has %u descendants, max 1 allowed\", txid_string, descendant_count - 1);\n+        } else if (has_ancestor && has_descendant) {\n+            return strprintf(\"%s has both ancestor and descendant\", txid_string);\n+        }\n+        // Additionally enforce that:\n+        // If we have a parent, we are its only child.\n+        // If we have a child,  we are its only parent.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "a14b95129d3a2894b7a41ce919a426bb60f62e35",
      "original_commit_id": "9257f33d259bf68f1df1cc41b7b3caaea341782f",
      "in_reply_to_id": 1462348934,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-01-23T13:52:40Z",
      "updated_at": "2024-01-23T13:52:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29242#discussion_r1463315777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463315777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29242"
        }
      },
      "start_line": null,
      "original_start_line": 1274,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1274,
      "side": "RIGHT"
    }
  ]
}