{
  "type": "issue",
  "issue": {
    "id": 2255228738,
    "node_id": "I_kwDOABII586GbA9C",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29931",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29931/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29931/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29931/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/29931",
    "number": 29931,
    "state": "open",
    "state_reason": null,
    "title": "ReadAnchor throws exception on second run",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Current behaviour\r\n\r\n```\r\nstd::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\r\n{\r\n    std::vector<CAddress> anchors;\r\n    try {\r\n        DeserializeFileDB(anchors_db_path, CAddress::V2_DISK(anchors));\r\n        LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), fs::quoted(fs::PathToString(anchors_db_path.filename())));\r\n    } catch (const std::exception&) {\r\n        anchors.clear();\r\n    }\r\n\r\n    fs::remove(anchors_db_path);\r\n    return anchors;\r\n}\r\n```\r\n\r\nOn second run I would get:\r\nEXCEPTION: NSt10filesystem7__cxx1116filesystem_errorE       \r\nfilesystem error: cannot remove: No such file or directory [... \\AppData\\Roaming\\Bitcoin\\anchors.dat]       \r\n..\\bitcoin-qt.exe in Runaway exception    \r\n\r\nAttempting blind delete on already-deleted file..\r\n\r\n### Expected behaviour\r\n\r\nNo crash on second run, this works for me:\r\n\r\n```\r\nstd::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\r\n{\r\n    std::vector<CAddress> anchors;\r\n    try {\r\n        DeserializeFileDB(anchors_db_path, CAddress::V2_DISK(anchors));\r\n        LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), fs::quoted(fs::PathToString(anchors_db_path.filename())));\r\n    } catch (const std::exception&) {\r\n        anchors.clear();\r\n    }\r\n\r\n    if (fs::exists(anchors_db_path)) {\r\n        try {\r\n            fs::remove(anchors_db_path);\r\n        } catch (const std::filesystem::filesystem_error& e) {\r\n            LogPrintf(\"Error. %s could not be deleted: %s\\n\", fs::quoted(fs::PathToString(anchors_db_path.filename())), e.what());\r\n        }\r\n    }\r\n    return anchors;\r\n}\r\n```\r\n\r\nI emphasize that I am not very familiar with the code base, and there could be reasons for the way this is done. Just trying to better understand it really..\r\n\r\n### Steps to reproduce\r\n\r\nCompile from source MinGW64, run twice..\r\n\r\n### Relevant log output\r\n\r\n_No response_\r\n\r\n### How did you obtain Bitcoin Core\r\n\r\nCompiled from source\r\n\r\n### What version of Bitcoin Core are you using?\r\n\r\n26.1\r\n\r\n### Operating system and version\r\n\r\nWindows, MinGW64 (using portable_endian.h)\r\n\r\n### Machine specifications\r\n\r\n_No response_",
    "user": {
      "login": "asctime",
      "id": 41893923,
      "node_id": "MDQ6VXNlcjQxODkzOTIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/41893923?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asctime",
      "html_url": "https://github.com/asctime",
      "followers_url": "https://api.github.com/users/asctime/followers",
      "following_url": "https://api.github.com/users/asctime/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/asctime/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/asctime/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/asctime/subscriptions",
      "organizations_url": "https://api.github.com/users/asctime/orgs",
      "repos_url": "https://api.github.com/users/asctime/repos",
      "events_url": "https://api.github.com/users/asctime/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/asctime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 0,
    "created_at": "2024-04-21T19:27:59Z",
    "updated_at": "2024-04-21T19:44:26Z"
  },
  "events": []
}