{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431",
    "id": 1725255931,
    "node_id": "PR_kwDOABII585m1VD7",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29431",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29431.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29431.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ae528cb9e29b75d36a8018954f45bcfb886a4557",
    "number": 29431,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "test/BIP324: disconnection scenarios during v2 handshake",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add tests for the following v2 handshake scenarios:\r\n1. Disconnection happens when > `MAX_GARBAGE_LEN` bytes garbage is sent\r\n2. Disconnection happens when incorrect garbage terminator is sent\r\n3. Disconnection happens when garbage bytes are tampered with\r\n4. Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\r\n5. bitcoind ignores non-empty version packet and no disconnection happens\r\n\r\nAll these tests require a modified v2 P2P class (different from `EncryptedP2PState` used in `v2_p2p.py`) to implement our custom handshake behaviour based on different scenarios and have been kept in a single test file (`test/functional/p2p_v2_misbehaving.py`). Shifted the test in `test/functional/p2p_v2_earlykeyresponse.py` which is of the same pattern to this file too.",
    "labels": [],
    "created_at": "2024-02-14T08:59:18Z",
    "updated_at": "2024-06-06T15:50:32Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "d576d3f931cf910c4b8f93fc8c4dd77908f97c11",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stratospher:more-v2-tests",
      "ref": "more-v2-tests",
      "sha": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 379929443,
        "node_id": "MDEwOlJlcG9zaXRvcnkzNzk5Mjk0NDM=",
        "name": "bitcoin",
        "full_name": "stratospher/bitcoin",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/stratospher/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/bitcoin",
        "archive_url": "https://api.github.com/repos/stratospher/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stratospher/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stratospher/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stratospher/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stratospher/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stratospher/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stratospher/bitcoin/hooks",
        "svn_url": "https://github.com/stratospher/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 248981,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-28T06:55:29Z",
        "created_at": "2021-06-24T13:12:06Z",
        "updated_at": "2024-05-17T15:30:55Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "327f08bb0cd91a22249395adeb34549e3c86ca76",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35475,
        "stargazers_count": 76744,
        "watchers_count": 76744,
        "size": 260208,
        "default_branch": "master",
        "open_issues_count": 682,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-06-06T15:52:42Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-06-06T15:25:15Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 199,
    "deletions": 103,
    "changed_files": 9,
    "commits": 11,
    "review_comments": 20,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 1943330480,
      "node_id": "IC_kwDOABII585z1N6w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1943330480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T08:59:20Z",
      "updated_at": "2024-06-06T15:50:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29431).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [sr-gi](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2083422330) |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1948492950), [kevkevinpal](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884162177), [mzumsande](https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1907520121) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#29500](https://github.com/bitcoin/bitcoin/pull/29500) (test: create assert_not_equal util by kevkevinpal)\n* [#29420](https://github.com/bitcoin/bitcoin/pull/29420) (test: extend the SOCKS5 Python proxy to actually connect to a destination by vasild)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#28521](https://github.com/bitcoin/bitcoin/pull/28521) (net: additional disconnect logging by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1943330480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T15:19:27Z",
      "updated_at": "2024-02-14T15:19:27Z",
      "source": {
        "issue": {
          "id": 2110803031,
          "node_id": "PR_kwDOABII585lm9mA",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29358",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29358/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29358/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29358/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29358",
          "number": 29358,
          "state": "closed",
          "state_reason": null,
          "title": "test: use v2 everywhere for P2PConnection if --v2transport is enabled",
          "body": "#24748 added v2 transport to the python `P2PConnection`, but so far each test that wants to make use of it needs to enable it on an individual basis.\r\nThis PR changes it so that if the test suite is run with `--v2transport` option, v2 is used in each test by default, not only for connections between two bitcoind instances as before, but also wherever `P2PConnection` is used. Individual tests can override this global option.\r\n\r\nTo do that, a few tests need to be adjusted.\r\nIn addition, I added a commit to always use v1 in a few select subtests that send a large number of large messages (e.g. large reorgs). These tests don't have a fundamental problem with v2 but become very slow due to the unoptimised python ChaCha20 implementation (~30 minutes on my computer, so probably not suitable to be run in the CI).\r\n\r\nAs a result, `python3 test_runner.py --v2transport` should succeed and use `v2` everywhere (unless v1 is chosen explicitly).\r\n\r\n[Edit]: To make the \"test each commit\" CI pass, several test fixes were squashed into the last commit, which actually enables v2 p2p for `P2PConnection`. I have an unsquashed version at https://github.com/mzumsande/bitcoin/tree/202401_bip324_alltests_unsquashed, in case that helps with review.\r\n\r\n",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29358",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29358",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29358.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29358.patch"
          },
          "closed_at": "2024-02-27T09:51:50Z",
          "created_at": "2024-01-31T19:22:28Z",
          "updated_at": "2024-02-27T15:19:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-14T18:11:23Z",
      "updated_at": "2024-02-14T18:11:23Z",
      "source": {
        "issue": {
          "id": 1893223976,
          "node_id": "PR_kwDOABII585aKu0D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28463",
          "number": 28463,
          "state": "open",
          "state_reason": null,
          "title": "p2p: Increase inbound capacity for block-relay only connections",
          "body": "This is joint work with amitiuttarwar.\r\n\r\nSee issue #28462 for a broader discussion on increasing the number of block-relay-only connections independent of this particular implementation proposal.\r\n\r\nWe suggest to increase the number of inbound slots allocated to block-relay-only peers by increasing the default maximum connections from 125 to 200, with 50% of inbound slots accessible for tx-relaying peers.\r\nThis is a prerequisite for being able to increase the default number of outgoing block-relay-only peers later, because the current inbound capacity of the network is not sufficient.\r\nIn order to account for incoming tx-relaying peers separately from incoming block-relay peers, changes to the inbound eviction logic are necessary.\r\n\r\nSee the next post in this thread for a more detailed explanation and motivation of the changes.",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28463",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28463",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28463.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28463.patch"
          },
          "created_at": "2023-09-12T20:36:39Z",
          "updated_at": "2024-06-05T19:23:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1945395946,
      "node_id": "IC_kwDOABII585z9GLq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1945395946",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:37Z",
      "updated_at": "2024-02-15T05:27:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sr-gi, i tried [this manually sending idea](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) but i still think intermittent failures are possible there.\r\n- we can't get rid of `can_data_be_received` variable because if we don't use this variable, test would succeed irrespective of whether we send 4 bytes network magic first or 4 bytes from ellswift bytes first and we don't want that.\r\n- so since `data_received()` always happens in `Network thread`  and send of ellswift bytes + setting  `can_data_be_received=True` happens on `MainThread`, in the rare scenario that `data_received()` gets called before setting `can_data_be_received`, an intermittent failure could happen i think.\r\n\r\nhere's a [branch](https://github.com/stratospher/bitcoin/commit/7e7173467fd5459e4b19ebd48186690f174be95f) where i tweaked the code you shared a bit with a sleep statement for making the test crash and reintroducing `can_data_be_received` variable.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1945395946",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 11810301834,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAK_8ueK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11810301834",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:38Z"
    },
    {
      "event": "subscribed",
      "id": 11810301847,
      "node_id": "SE_lADOABII585_MAi-zwAAAAK_8ueX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11810301847",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-15T05:27:38Z"
    },
    {
      "event": "reviewed",
      "id": 1884147732,
      "node_id": "PRR_kwDOABII585wTdAU",
      "url": null,
      "actor": null,
      "commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884147732",
      "submitted_at": "2024-02-16T01:03:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "commented",
      "id": 1948492950,
      "node_id": "IC_kwDOABII5850I6SW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948492950",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-16T14:35:06Z",
      "updated_at": "2024-02-16T14:35:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1948492950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1884162177,
      "node_id": "PRR_kwDOABII585wTgiB",
      "url": null,
      "actor": null,
      "commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nadded two comments I will continue to test these changes as I am still trying to understand fully what the tests do exactly",
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1884162177",
      "submitted_at": "2024-02-16T15:12:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-26T20:51:41Z",
      "updated_at": "2024-02-26T20:51:41Z",
      "source": {
        "issue": {
          "id": 2155002288,
          "node_id": "PR_kwDOABII585n9brs",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29483",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29483/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29483/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29483/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29483",
          "number": 29483,
          "state": "closed",
          "state_reason": null,
          "title": "test, ci: add --v1transport option, add --v2transport  to a CI task",
          "body": "This suggests a strategy to run the functional tests with both v1 and v2 transport in the CI.\r\n\r\n**Status Quo:**\r\nThere is both the global `--v2transport` option for the `test_runner.py` (not enabled by default), plus the possibility to specify `--v2transport` for particular tests, which is used for a handful of tests. Currently, when running `test_runner.py --v2transport`, these tests are run twice with the same `--v2transport` configuration, as has been noted in https://github.com/bitcoin/bitcoin/pull/29358#discussion_r1485626063, which is wasteful.\r\n\r\n**Suggested Change:**\r\nFix this by adding a `--v1transport` option and using it in `test_runner.py`, so that irrespective of the global `--v2transport` flag, the  tests that run twice use v1 in one run and v2 in the other.\r\nAlso add `--v2transport` to one CI task (`multiprocess, i686, DEBUG`).\r\nThis means, that for each CI task, the majority of functional tests will run once using the global `--v2transport` option if provided, while a few selected tests will always run two times, once with `v1` and once with `v2`.\r\n\r\n**Rationale:**\r\nA simpler alternative would have been to remove all test-specific `--v2transport` commands from `test_runner.py` and just enable `--v2transport` option for a few CI tasks. I didn't do that because it would have meant that v2 would never be running in the CI for some platforms, and also be run a lot less locally by users and devs (who would have to actively enable the `--v2transport` option). ",
          "user": {
            "login": "mzumsande",
            "id": 48763452,
            "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
            "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mzumsande",
            "html_url": "https://github.com/mzumsande",
            "followers_url": "https://api.github.com/users/mzumsande/followers",
            "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
            "organizations_url": "https://api.github.com/users/mzumsande/orgs",
            "repos_url": "https://api.github.com/users/mzumsande/repos",
            "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mzumsande/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29483",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29483",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29483.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29483.patch"
          },
          "closed_at": "2024-03-11T13:22:23Z",
          "created_at": "2024-02-26T19:51:42Z",
          "updated_at": "2024-03-11T15:01:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11935110249,
      "node_id": "LE_lADOABII585_MAi-zwAAAALHY1Rp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11935110249",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-27T11:49:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11951907498,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALIY6Kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11951907498",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T13:40:23Z"
    },
    {
      "event": "unlabeled",
      "id": 11953003327,
      "node_id": "UNLE_lADOABII585_MAi-zwAAAALIdFs_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11953003327",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T14:59:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T23:30:16Z",
      "updated_at": "2024-02-28T23:30:16Z",
      "source": {
        "issue": {
          "id": 2157984412,
          "node_id": "PR_kwDOABII585oHrjX",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29500",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29500/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29500/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29500/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29500",
          "number": 29500,
          "state": "open",
          "state_reason": null,
          "title": "test: create assert_not_equal util",
          "body": "In the functional tests there are lots of cases where we assert != which we now swap with assert_not_equal to be more readable\r\n\r\nThis is motivated/uses logic from this PR which was closed https://github.com/bitcoin/bitcoin/pull/28528\r\nThis partially helps https://github.com/bitcoin/bitcoin/issues/23119\r\n\r\nI've broken it up to just `assert_not_equal` to keep the PR smaller as suggested in https://github.com/bitcoin/bitcoin/pull/28528#issuecomment-1959945805\r\n\r\nI can create follow up PR's if this is wanted",
          "user": {
            "login": "kevkevinpal",
            "id": 15950706,
            "node_id": "MDQ6VXNlcjE1OTUwNzA2",
            "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevkevinpal",
            "html_url": "https://github.com/kevkevinpal",
            "followers_url": "https://api.github.com/users/kevkevinpal/followers",
            "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
            "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
            "repos_url": "https://api.github.com/users/kevkevinpal/repos",
            "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29500",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29500",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29500.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29500.patch"
          },
          "created_at": "2024-02-28T02:55:22Z",
          "updated_at": "2024-06-05T16:29:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1971505987,
      "node_id": "IC_kwDOABII5851gstD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1971505987",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-29T16:28:44Z",
      "updated_at": "2024-02-29T16:29:18Z",
      "author_association": "MEMBER",
      "body": "> * we can't get rid of `can_data_be_received` variable because if we don't use this variable, test would succeed irrespective of whether we send 4 bytes network magic first or 4 bytes from ellswift bytes first and we don't want that.\r\n\r\nI've been playing around sending anything different than the first 4 bytes as the network magic and test fail on my end (which is expected given `data_received` is called with `magic_sent` false on the first-byte mismatch).\r\n\r\nDo you have any working example I can try to reproduce?",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1971505987",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-01T18:45:43Z",
      "updated_at": "2024-03-01T18:45:43Z",
      "source": {
        "issue": {
          "id": 2089436197,
          "node_id": "PR_kwDOABII585kfIUl",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29279",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29279/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29279/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29279/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29279",
          "number": 29279,
          "state": "closed",
          "state_reason": null,
          "title": "test: p2p: check disconnect due to lack of desirable service flags",
          "body": "This PR adds missing test coverage for disconnecting peers which don't offer the desirable service flags in their VERSION message:\r\nhttps://github.com/bitcoin/bitcoin/blob/5f3a0574c45477288bc678b15f24940486084576/src/net_processing.cpp#L3384-L3389\r\nThis check is relevant for the connection types \"outbound-full-relay\", \"block-relay-only\" and \"addr-fetch\" (see `CNode::ExpectServicesFromConn(...)`). Feeler connections always disconnect, which is also tested here.\r\n\r\nIn lack of finding a proper file where this test would fit in, I created a new one. Happy to take suggestions there.",
          "user": {
            "login": "theStack",
            "id": 91535,
            "node_id": "MDQ6VXNlcjkxNTM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theStack",
            "html_url": "https://github.com/theStack",
            "followers_url": "https://api.github.com/users/theStack/followers",
            "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
            "organizations_url": "https://api.github.com/users/theStack/orgs",
            "repos_url": "https://api.github.com/users/theStack/repos",
            "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theStack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29279",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29279",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29279.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29279.patch"
          },
          "closed_at": "2024-03-19T17:22:55Z",
          "created_at": "2024-01-19T02:37:51Z",
          "updated_at": "2024-03-19T17:23:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1982878975,
      "node_id": "IC_kwDOABII5852MFT_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1982878975",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T08:15:46Z",
      "updated_at": "2024-03-07T08:15:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I've been playing around sending anything different than the first 4 bytes as the network magic and test fail on my end (which is expected given data_received is called with magic_sent false on the first-byte mismatch).\r\n\r\nyes! that's expected behaviour and sending anything other than the first 4 bytes as network magic will make the test fail on master.\r\n\r\nwhat i was trying to say was:\r\n1. on master\r\n- replacing `return b\"\\xfa\\xbf\\xb5\\xda\"` with any other 4 bytes will make the test fail and this is expected behaviour\r\n3. using [this patch](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) mentioned in #29352\r\n- replacing `return b\"\\xfa\\xbf\\xb5\\xda\"` with any other 4 bytes will make the test pass and this isn't behaviour we want\r\n- this happens because [`can_data_be_received` variable](https://github.com/bitcoin/bitcoin/blob/ab5dfdbec1143f673f4d83acd4e335bb2c51034e/test/functional/p2p_v2_earlykeyresponse.py#L29) is removed in the patch\r\n\r\nso i was just trying to say that we can't remove [`can_data_be_received` variable](https://github.com/bitcoin/bitcoin/blob/ab5dfdbec1143f673f4d83acd4e335bb2c51034e/test/functional/p2p_v2_earlykeyresponse.py#L29).",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1982878975",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1907520121,
      "node_id": "PRR_kwDOABII585xsnJ5",
      "url": null,
      "actor": null,
      "commit_id": "22cba895180d706069de7460947a555d75ae80c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThe one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in `complete_handshake` - the main implementation in `v2_p2p.py` and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1907520121",
      "submitted_at": "2024-03-07T22:24:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12069154140,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALPYK1c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12069154140",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T07:25:46Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmOTY2OWFmOWNjYzMzZGNhZGUwOWJjZWIyN2Q2NzQ1ZTlkOWE3NWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
      "tree": {
        "sha": "d44e0a9af26cede51cff63b56557f37e919fa81d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d44e0a9af26cede51cff63b56557f37e919fa81d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cc99df44aec4d104590aee46cf18318e22a8568",
          "sha": "4cc99df44aec4d104590aee46cf18318e22a8568",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc99df44aec4d104590aee46cf18318e22a8568"
        }
      ],
      "message": "test: Rename early key response test and move random_bitflip to util\n\nEarly key response test is a special kind of test which requires\nmodified v2 handshake functions. More such tests can be added\nwhere v2 handshake functions send incorrect garbage terminator,\nexcess garbage bytes etc.. Hence, rename p2p_v2_earlykey.py to a\ngeneral test file name - p2p_v2_misbehaving.py.\n\nrandom_bitflip function (used in signature tests prior to this\ncommit) can be used in p2p_v2_misbehaving test to generate wrong\ngarbage terminator, wrong garbage bytes etc..\nSo, move the function to util.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-03-11T07:28:20Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-01-30T13:57:21Z"
      },
      "sha": "bf9669af9ccc33dcade09bceb27d6745e9d9a75a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2Y2NhMmNiYTIzMGMxMDMyNGM2YWVkZDEyYWU5NjU1YjgzYjI4NTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cca2cba230c10324c6aedd12ae9655b83b2856",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86cca2cba230c10324c6aedd12ae9655b83b2856",
      "tree": {
        "sha": "a8af211dec0b93b3995fa1bd684be6fdb2f9a64b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8af211dec0b93b3995fa1bd684be6fdb2f9a64b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
          "sha": "bf9669af9ccc33dcade09bceb27d6745e9d9a75a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf9669af9ccc33dcade09bceb27d6745e9d9a75a"
        }
      ],
      "message": "test: Support disconnect waiting for add_p2p_connection\n\nAdds a new boolean parameter `expect_success` to the\n`add_p2p_connection` method. If set, the node under\ntest doesn't wait for connection to be established\nand is useful for testing scenarios when disconnection\nis expected.\n\nWithout this parameter, intermittent test failures can happen\nif the disconnection happens before wait_until for is_connected\nis hit inside `add_p2p_connection`.\n\nCo-Authored-By: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-03-11T07:32:03Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T05:07:23Z"
      },
      "sha": "86cca2cba230c10324c6aedd12ae9655b83b2856"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12069259462,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAALPYkjG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12069259462",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T07:37:14Z"
    },
    {
      "event": "commented",
      "id": 1987813380,
      "node_id": "IC_kwDOABII5852e6AE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1987813380",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T07:55:34Z",
      "updated_at": "2024-03-11T07:55:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in complete_handshake - the main implementation in v2_p2p.py and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...\r\n\r\nhmm good point. will need to think about it more. simplest solution would be keeping it all in main implementation in `v2_p2p.py` haha but doesn't make sense to have it there just for this test file :(",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1987813380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T10:38:38Z",
      "updated_at": "2024-03-11T10:38:38Z",
      "source": {
        "issue": {
          "id": 2129035863,
          "node_id": "PR_kwDOABII585mlCyX",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29420",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29420/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29420/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29420/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29420",
          "number": 29420,
          "state": "open",
          "state_reason": null,
          "title": "test: extend the SOCKS5 Python proxy to actually connect to a destination",
          "body": "If requested, make the SOCKS5 Python proxy redirect connections to a set of given destinations. Actually act as a real proxy, connecting the client to a destination, except that the destination is not what the client asked for.\r\n\r\nThis would enable us to \"connect\" to Tor addresses from the functional tests.\r\n\r\nPlus a few other minor improvements in the test framework as individual commits.\r\n\r\n---\r\n\r\nThese changes are part of https://github.com/bitcoin/bitcoin/pull/29415 but they make sense on their own and would be good to have them, regardless of the fate of #29415. Also, if this is merged, that would reduce the size of #29415, thus the current standalone PR.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29420",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29420",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29420.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29420.patch"
          },
          "created_at": "2024-02-11T15:30:32Z",
          "updated_at": "2024-05-07T15:46:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-11T23:24:34Z",
      "updated_at": "2024-03-11T23:24:34Z",
      "source": {
        "issue": {
          "id": 2127176950,
          "node_id": "PR_kwDOABII585me8Nn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29415/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29415",
          "number": 29415,
          "state": "open",
          "state_reason": null,
          "title": "Broadcast own transactions only via short-lived Tor or I2P connections",
          "body": "To improve privacy, broadcast locally submitted transactions (from the `sendrawtransaction` RPC) to the P2P network only via Tor or I2P short-lived connections.\r\n\r\n* Introduce a new connection type for private broadcast of transactions with the following properties:\r\n  * started whenever there are local transactions to be sent\r\n  * only opened to Tor or I2P peers\r\n  * opened regardless of max connections limits\r\n  * after handshake is completed one local transaction is pushed to the peer, `PING` is sent and after receiving `PONG` the connection is closed\r\n  * ignore all incoming messages after handshake is completed (except `PONG`)\r\n\r\n* Broadcast transactions submitted via `sendrawtransaction` using this new mechanism, to a few Tor or I2P peers. Keep doing this until we receive an `INV` about this transaction from one of our ordinary peers (this takes about 1 second on mainnet).\r\n\r\n* The transaction is stored in peerman and does not enter the mempool.\r\n\r\n* Once we get an `INV` from somebody, then the normal flow executes: we request the transaction with `GETDATA`, receive it with a `TX` message, put it in our mempool and broadcast it to all our existent connections (as if we see it for the first time).\r\n\r\n* After we receive the full transaction as a `TX` message, in reply to our `GETDATA` request, only then consider the transaction has propagated through the network and remove it from the storage in peerman, ending the private broadcast attempts.\r\n\r\nThe messages exchange should look like this:\r\n\r\n```\r\ntx-sender >--- connect -------> tx-recipient\r\ntx-sender >--- VERSION -------> tx-recipient (dummy VERSION with no revealing data)\r\ntx-sender <--- VERSION -------< tx-recipient\r\ntx-sender <--- WTXIDRELAY ----< tx-recipient (maybe)\r\ntx-sender <--- SENDADDRV2 ----< tx-recipient (maybe)\r\ntx-sender <--- SENDTXRCNCL ---< tx-recipient (maybe)\r\ntx-sender <--- VERACK --------< tx-recipient\r\ntx-sender >--- VERACK --------> tx-recipient\r\ntx-sender >--- TX ------------> tx-recipient\r\ntx-sender >--- PING ----------> tx-recipient\r\ntx-sender <--- PONG ----------< tx-recipient\r\ntx-sender disconnects\r\n```\r\n\r\nWhenever a new transaction is received from `sendrawtransaction` RPC, the node will send it to 5 (`NUM_PRIVATE_BROADCAST_PER_TX`) recipients right away. If after 10-15 mins we still have not heard anything about the transaction from the network, then it will be sent to 1 more peer (see `PeerManagerImpl::ReattemptPrivateBroadcast()`).\r\n\r\nA few considerations:\r\n* The short-lived private broadcast connections are very cheap and fast wrt network traffic. It is expected that some of those peers could blackhole the transaction. Just one honest/proper peer is enough for successful propagation.\r\n* The peers that receive the transaction could deduce that this is initial transaction broadcast from the transaction originator. This is ok, they can't identify the sender.\r\n\r\n---\r\n\r\nSome explanation of the commits:\r\n\r\n* New logging category and config option to enable private broadcast\r\n  * `log: introduce a new category for private broadcast`\r\n  * `init: introduce a new option to enable/disable private broadcast`\r\n\r\n* Implement the private broadcast connection handling on the `CConnman` side:\r\n  * `net: introduce a new connection type for private broadcast`\r\n  * `net: move peers counting before grant acquisition in ThreadOpenConnections()`\r\n  * `net: implement opening PRIVATE_BROADCAST connections`\r\n\r\n* Prepare `BroadcastTransaction()` for private broadcast requests:\r\n  * `net_processing: rename RelayTransaction to better describe what it does`\r\n  * `node: change a tx-relay on/off flag to a tri-state`\r\n  * `net_processing: store transactions for private broadcast in PeerManager`\r\n\r\n* Implement the private broadcast connection handling on the `PeerManager` side:\r\n  * `net_processing: reorder the code that handles the VERSION message`\r\n  * `net_processing: handle ConnectionType::PRIVATE_BROADCAST connections`\r\n  * `net_processing: stop private broadcast of a transaction after round-trip`\r\n  * `net_processing: retry private broadcast`\r\n\r\n* Engage the new functionality from `sendrawtransaction`:\r\n  * `rpc: use private broadcast from sendrawtransaction RPC if -privatebroadcast is ON`\r\n\r\n* Independent test framework improvements (also opened as a standalone PR at https://github.com/bitcoin/bitcoin/pull/29420):\r\n  * `test: improve debug log message from P2PConnection::connection_made()`\r\n  * `test: extend the SOCKS5 Python proxy to actually connect to a destination`\r\n  * `test: support WTX INVs from P2PDataStore and fix a comment`\r\n  * `test: set P2PConnection::p2p_connected_to_node in peer_connect_helper()`\r\n\r\n* New functional test that exercies some of the new code:\r\n  * `test: add functional test for local tx relay`\r\n\r\n---\r\n\r\nThis addresses:\r\nhttps://github.com/bitcoin/bitcoin/issues/3828 Clients leak IPs if they are recipients of a transaction\r\nhttps://github.com/bitcoin/bitcoin/issues/14692 Can't configure bitocoind to only send tx via Tor but receive clearnet transactions\r\nhttps://github.com/bitcoin/bitcoin/issues/19042 Tor-only transaction broadcast onlynet=onion alternative\r\nhttps://github.com/bitcoin/bitcoin/issues/24557 Option for receive events with all networks, but send transactions and/or blocks only with anonymous network[s]?\r\nhttps://github.com/bitcoin/bitcoin/issues/25450 Ability to broadcast wallet transactions only via dedicated oneshot Tor connections\r\n\r\nRelated, but different:\r\nhttps://github.com/bitcoin/bitcoin/issues/21876 Broadcast a transaction to specific nodes\r\nhttps://github.com/bitcoin/bitcoin/issues/28636 new RPC: sendrawtransactiontopeer\r\n\r\n---\r\n\r\nNext step after this PR is done will be to have the wallet do the private broadcast as well, https://github.com/bitcoin/bitcoin/issues/11887 would have to be resolved.\r\n\r\n---\r\n\r\n_A previous incarnation of this can be found at https://github.com/bitcoin/bitcoin/pull/27509. It puts the transaction in the mempool and (tries to) hide it from the outside observers. This turned out to be too error prone or maybe even impossible._\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 32,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29415",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29415",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29415.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29415.patch"
          },
          "created_at": "2024-02-09T13:39:10Z",
          "updated_at": "2024-06-04T03:17:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 2018102733,
      "node_id": "IC_kwDOABII5854Sc3N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018102733",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T14:14:25Z",
      "updated_at": "2024-03-25T14:14:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > The one thing I'm a bit unsure about is that this duplicates quite a lot of code, especially in complete_handshake - the main implementation in v2_p2p.py and the overwritten version from this test could run out of sync in the future. But I don't have a good idea how to avoid this yet...\r\n> \r\n> hmm good point. will need to think about it more. simplest solution would be keeping it all in main implementation in `v2_p2p.py` haha but doesn't make sense to have it there just for this test file :(\r\n\r\nOne idea to avoid at least reimplementing `generate_keypair_and_garbage` would be to allow setting a fixed garbage length with a new parameter (that is `None` by default, meaning that a random length will be picked), e.g:\r\n```diff\r\ndiff --git a/test/functional/test_framework/v2_p2p.py b/test/functional/test_framework/v2_p2p.py\r\nindex 8f79623bd8..c27cd5e2fe 100644\r\n--- a/test/functional/test_framework/v2_p2p.py\r\n+++ b/test/functional/test_framework/v2_p2p.py\r\n@@ -111,10 +111,11 @@ class EncryptedP2PState:\r\n             # Responding, place their public key encoding first.\r\n             return TaggedHash(\"bip324_ellswift_xonly_ecdh\", ellswift_theirs + ellswift_ours + ecdh_point_x32)\r\n \r\n-    def generate_keypair_and_garbage(self):\r\n+    def generate_keypair_and_garbage(self, garbage_len=None):\r\n         \"\"\"Generates ellswift keypair and 4095 bytes garbage at max\"\"\"\r\n         self.privkey_ours, self.ellswift_ours = ellswift_create()\r\n-        garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\r\n+        if garbage_len is None:\r\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\r\n         self.sent_garbage = random.randbytes(garbage_len)\r\n         logger.debug(f\"sending {garbage_len} bytes of garbage data\")\r\n         return self.ellswift_ours + self.sent_garbage\r\n```\r\nThe overruled method of `initiate_v2_handshake` in the test could then call this with the parameter set if needed, e.g. for the EXCESS_GARBAGE case:\r\n```\r\n     def initiate_v2_handshake(self):\r\n         if self.test_type == TestType.EARLY_KEY_RESPONSE:\r\n             .....\r\n         elif self.test_type == TestType.EXCESS_GARBAGE:\r\n             # send > 4095 bytes garbage\r\n             return self.generate_keypair_and_garbage(garbage_len=MAX_GARBAGE_LEN + random.randrange(1, 10))\r\n```\r\n(For the `WRONG_GARBAGE` test, bit-flipping `self.sent_garbage` right after calling `generate_keypair_and_garbage` should still be sufficient for causing a mismatch.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2018102733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "reviewed",
      "id": 1957780790,
      "node_id": "PRR_kwDOABII5850sV02",
      "url": null,
      "actor": null,
      "commit_id": "67708b64dba454fc625607470d0cbf4341ebb85a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-1957780790",
      "submitted_at": "2024-03-25T14:17:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "commented",
      "id": 2096517368,
      "node_id": "IC_kwDOABII58589lD4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2096517368",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T17:07:24Z",
      "updated_at": "2024-05-06T17:15:45Z",
      "author_association": "MEMBER",
      "body": "I find the approach fairly hard to follow here. Having all the logic in the constructor with if/elses based on the connection type instead of having different constructors/a test for each type of failure feels really error-prone and difficult to make sure if a test is doing what we expect. I think it'd be better to have multiple classes that build from `v2_p2p` and modify what's needed, even if the file gets larger.\r\n\r\nJust an example:\r\n\r\nIn the `WRONG_GARBAGE_TERMINATOR` case, we are modifying the gargabe in two ways. First, we are making it smaller than expected, but also, we are randomly flipping some of its bits. Turns out if you removed both changes, the tests still passes, but I'm not sure why. I would expect this not to be the case, since removing the relevant parts should make the class equal to the expected `v2_p2p`.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2096517368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12843005621,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAL9gLa1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843005621",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:35:48Z"
    },
    {
      "event": "commented",
      "id": 2116717090,
      "node_id": "IC_kwDOABII585-Kooi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2116717090",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:35Z",
      "updated_at": "2024-05-17T05:39:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think it'd be better to have multiple classes that build from v2_p2p and modify what's needed, even if the file gets larger.\r\n\r\nthat's a great suggestion @sr-gi! it's possible to design those classes in such a way that it avoids code duplication and the file is almost the same size!\r\n\r\n> Turns out if you removed both changes, the tests still passes, but I'm not sure why. \r\n\r\nbecause we don't send a version message to ensure that the disconnection happens in the v2 handshake phase. in your case (different from what we are testing here), we send the correct garbage terminator but because we don't send a version message - disconnection is still expected.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2116717090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 12843028627,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAL9gRCT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843028627",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:36Z"
    },
    {
      "event": "subscribed",
      "id": 12843028639,
      "node_id": "SE_lADOABII585_MAi-zwAAAAL9gRCf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843028639",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T05:39:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2NDJiMDhjNGU0NWNiM2E2MjVhODY3ZWJkNjZjMGFlNTFiZGUyMTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
      "tree": {
        "sha": "94a972d8fbea598f635c2dec00ee3f7fd8d478a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94a972d8fbea598f635c2dec00ee3f7fd8d478a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cca2cba230c10324c6aedd12ae9655b83b2856",
          "sha": "86cca2cba230c10324c6aedd12ae9655b83b2856",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/86cca2cba230c10324c6aedd12ae9655b83b2856"
        }
      ],
      "message": "test: Log when the garbage is actually sent to transport layer\n\nCurrently, we log the number of bytes of garbage when it is\ngenerated. The log is a better fit for when the garbage\nactually gets sent to the transport layer.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T05:42:39Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T04:10:38Z"
      },
      "sha": "c642b08c4e45cb3a625a867ebd66c0ae51bde212"
    },
    {
      "event": "commented",
      "id": 2116864386,
      "node_id": "IC_kwDOABII585-LMmC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2116864386",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T06:45:00Z",
      "updated_at": "2024-05-17T06:45:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25085973641</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2116864386",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "labeled",
      "id": 12843518455,
      "node_id": "LE_lADOABII585_MAi-zwAAAAL9iIn3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843518455",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T06:45:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12843924767,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAL9jr0f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12843924767",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T07:26:52Z"
    },
    {
      "event": "unlabeled",
      "id": 12844698709,
      "node_id": "UNLE_lADOABII585_MAi-zwAAAAL9moxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12844698709",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T08:34:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2117828829,
      "node_id": "IC_kwDOABII585-O4Dd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117828829",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T15:18:37Z",
      "updated_at": "2024-05-17T15:18:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated the PR to have different child class implementations for `EncryptedP2PState` based on the disconnection scenario we're testing - `EarlyKeyResponseState`, `ExcessGarbageState` etc...\r\n\r\nAlso introduced 2 more commits for cleaner code:\r\n- c642b08c - logging when the garbage is sent instead of when garbage is generated (suggestion from https://github.com/bitcoin/bitcoin/pull/24748#discussion_r1466826427 which is useful now that we have multiple child classes for `EncryptedP2PState`)\r\n- 38eb429 - transport version as a class variable instead of a global variable",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2117828829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-17T15:20:44Z",
      "updated_at": "2024-05-17T15:20:44Z",
      "source": {
        "issue": {
          "id": 1191033673,
          "node_id": "PR_kwDOABII5841jAnn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24748/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
          "number": 24748,
          "state": "closed",
          "state_reason": null,
          "title": "test/BIP324: functional tests for v2 P2P encryption",
          "body": "This PR introduces support for v2 P2P encryption(BIP 324) in the existing functional test framework and adds functional tests for the same.\r\n\r\n### commits overview\r\n1. introduces a new class `EncryptedP2PState` to store the keys, functions for performing the initial v2 handshake and encryption/decryption.\r\n3. this class is used by `P2PConnection` in inbound/outbound connections to perform the initial v2 handshake before the v1 version handshake. Only after the initial v2 handshake is performed do application layer P2P messages(version, verack etc..) get exchanged. (in a v2 connection)\r\n    - `v2_state` is the object of class `EncryptedP2PState` in `P2PConnection` used to store its keys, session-id etc.\r\n    - a node [advertising](https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md#advertising-to-support-v2-p2p) support for  v2 P2P is different from a node actually [supporting v2 P2P](https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md#supporting-v2-p2p) (differ when false advertisement of services occur)\r\n        - introduce a boolean variable `supports_v2_p2p` in `P2PConnection` to denote if it supports v2 P2P.\r\n        - introduce a boolean variable `advertises_v2_p2p` to denote whether `P2PConnection` which mimics peer behaviour advertises V2 P2P support. Default option is `False`.\r\n    - In the test framework, you can create Inbound and Outbound connections to `TestNode`\r\n        1. During **Inbound Connections**, `P2PConnection` is the initiator [`TestNode` <--------- `P2PConnection`]\r\n            - Case 1:\r\n                - if the `TestNode` advertises/signals v2 P2P support (means `self.nodes[i]` set up with `\"-v2transport=1\"`), different behaviour will be exhibited based on whether:\r\n                    1. `P2PConnection` supports v2 P2P\r\n                    2. `P2PConnection` does not support v2 P2P\r\n               - In a real world scenario, the initiator node would intrinsically know if they support v2 P2P based on whatever code they choose to run. However, in the test scenario where we mimic peer behaviour, we have no way of knowing if `P2PConnection` should support v2 P2P or not. So `supports_v2_p2p` boolean variable is used as an option to enable support for v2 P2P in `P2PConnection`.\r\n              - Since the `TestNode` advertises v2 P2P support (using \"-v2transport=1\"), our initiator `P2PConnection` would send:\r\n                1. (if the `P2PConnection` supports v2 P2P) ellswift + garbage bytes to initiate the connection\r\n                2. (if the `P2PConnection` does not support v2 P2P) version message to initiate the connection\r\n           - Case 2:\r\n                - if the `TestNode` doesn't signal v2 P2P support; `P2PConnection` being the initiator would send version message to initiate a connection.\r\n       2. During **Outbound Connections** [TestNode --------> P2PConnection]\r\n           - initiator `TestNode` would send:\r\n                - (if the `P2PConnection` advertises v2 P2P) ellswift + garbage bytes to initiate the connection\r\n                - (if the `P2PConnection` advertises v2 P2P) version message to initiate the connection\r\n          - Suppose `P2PConnection` advertises v2 P2P support when it actually doesn't support v2 P2P (false advertisement scenario)\r\n               - `TestNode` sends ellswift + garbage bytes\r\n               - `P2PConnection` receives but can't process it and disconnects.\r\n               - `TestNode` then tries using v1 P2P and sends version message\r\n               - `P2PConnection` receives/processes this successfully and they communicate on v1 P2P\r\n\r\n4. the encrypted P2P messages follow a different format - 3 byte length + 1-13 byte message_type + payload + 16 byte MAC\r\n5. includes support for testing decoy messages and v2 connection downgrade(using false advertisement - when a v2 node makes an outbound connection to a node which doesn't support v2 but is advertised as v2 by some malicious\r\nintermediary)\r\n\r\n### run the tests\r\n* functional test - `test/functional/p2p_v2_encrypted.py` `test/functional/p2p_v2_earlykeyresponse.py`\r\n\r\nI'm also super grateful to @ dhruv for his really valuable feedback on this branch.\r\nAlso written a more elaborate explanation here - https://github.com/stratospher/blogosphere/blob/main/integration_test_bip324.md",
          "user": {
            "login": "stratospher",
            "id": 44024636,
            "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stratospher",
            "html_url": "https://github.com/stratospher",
            "followers_url": "https://api.github.com/users/stratospher/followers",
            "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
            "organizations_url": "https://api.github.com/users/stratospher/orgs",
            "repos_url": "https://api.github.com/users/stratospher/repos",
            "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stratospher/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/61",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/61/labels",
            "id": 9334188,
            "node_id": "MI_kwDOABII584Ajm2s",
            "number": 61,
            "state": "closed",
            "title": "27.0",
            "description": "",
            "creator": {
              "login": "sipa",
              "id": 548488,
              "node_id": "MDQ6VXNlcjU0ODQ4OA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/sipa",
              "html_url": "https://github.com/sipa",
              "followers_url": "https://api.github.com/users/sipa/followers",
              "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
              "organizations_url": "https://api.github.com/users/sipa/orgs",
              "repos_url": "https://api.github.com/users/sipa/repos",
              "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/sipa/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 69,
            "created_at": "2023-04-27T08:01:57Z",
            "updated_at": "2024-04-16T08:33:17Z",
            "closed_at": "2024-04-16T08:33:17Z"
          },
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24748",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24748",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24748.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24748.patch"
          },
          "closed_at": "2024-01-29T17:31:51Z",
          "created_at": "2022-04-03T20:14:51Z",
          "updated_at": "2024-05-17T15:21:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 2066388767,
      "node_id": "PRR_kwDOABII5857Kpcf",
      "url": null,
      "actor": null,
      "commit_id": "b06255688af46bac47f985be747f76acb51b0104",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I like this approach much better, it is way easier to follow and reason about. I left some comments inline.\r\n\r\n> because we don't send a version message to ensure that the disconnection happens in the v2 handshake phase. in your case (different from what we are testing here), we send the correct garbage terminator but because we don't send a version message - disconnection is still expected.\r\n\r\nWhat is weird is that the test is expecting a specific log message, which seems to also match in this case. This is still the case by the way. Is there an alternative way of making sure this does not happen?",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2066388767",
      "submitted_at": "2024-05-20T16:38:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0YTFkYTg1NDM1MjJhMjEzYWM3NTc2MTEzMWQ4NzhlZWRmZDRhNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4a1da8543522a213ac75761131d878eedfd4a5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a1da8543522a213ac75761131d878eedfd4a5b",
      "tree": {
        "sha": "8050f16a484e344afd77ccb1d537efc9119cd3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8050f16a484e344afd77ccb1d537efc9119cd3b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c642b08c4e45cb3a625a867ebd66c0ae51bde212",
          "sha": "c642b08c4e45cb3a625a867ebd66c0ae51bde212",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c642b08c4e45cb3a625a867ebd66c0ae51bde212"
        }
      ],
      "message": "test: Make global TRANSPORT_VERSION variable an instance variable\n\nCurrently, transport version is a global variable declared as\nTRANSPORT_VERSION in v2_p2p.py. Making it an instance variable\nwould help in sending non empty transport version packets for\ntesting purposes. It might also help EncryptedP2PState be more\nextensible in far future protocol upgrades.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-27T04:20:32Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-17T04:36:59Z"
      },
      "sha": "d4a1da8543522a213ac75761131d878eedfd4a5b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdkMDdkYWE2MjMxMWJkYjBlMmNlMjNkMGI1NWY3MTFmNTA4OGJkMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
      "tree": {
        "sha": "955334107b472124ea42babf2532c3f23bf2681a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/955334107b472124ea42babf2532c3f23bf2681a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4a1da8543522a213ac75761131d878eedfd4a5b",
          "sha": "d4a1da8543522a213ac75761131d878eedfd4a5b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a1da8543522a213ac75761131d878eedfd4a5b"
        }
      ],
      "message": "log: Add V2 handshake timeout",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:02:04Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:02:04Z"
      },
      "sha": "7d07daa62311bdb0e2ce23d0b55f711f5088bd28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRhN2Y1NDEwNTRkNjM0YTM0ZTVmM2NiZGE0MjdlNDAwZGMxNTY5ZjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7f541054d634a34e5f3cbda427e400dc1569f1",
      "tree": {
        "sha": "1aee7042e128c33cf39526d3fe7e0f71238bd310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aee7042e128c33cf39526d3fe7e0f71238bd310"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
          "sha": "7d07daa62311bdb0e2ce23d0b55f711f5088bd28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7d07daa62311bdb0e2ce23d0b55f711f5088bd28"
        }
      ],
      "message": "test: Introduce test types and modify v2 handshake function accordingly\n\nPrior to this commit, TestEncryptedP2PState would always\nsend initial_v2_handshake bytes in 2 parts (as required\nby early key response test).\n\nFor generalising this test and having different v2 handshake\nbehaviour based on the test type, special behaviours like\nsending initial_v2_handshake bytes in 2 parts are executed\nonly if test_type is set to EARLY_KEY_RESPONSE.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:06:10Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-01-30T14:20:12Z"
      },
      "sha": "4a7f541054d634a34e5f3cbda427e400dc1569f1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEyYjlhYTIyZDZhNzRlNGY2ZTllZjk2NzI1NjlmMTlkMzNkNGY1MmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
      "tree": {
        "sha": "1c2e82d9bc177f0d549a29271ba6786f1d517699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2e82d9bc177f0d549a29271ba6786f1d517699"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a7f541054d634a34e5f3cbda427e400dc1569f1",
          "sha": "4a7f541054d634a34e5f3cbda427e400dc1569f1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7f541054d634a34e5f3cbda427e400dc1569f1"
        }
      ],
      "message": "test: Check that disconnection happens when >4095 garbage bytes is sent\n\nThis test type is represented using EXCESS_GARBAGE.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:06:21Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:17:45Z"
      },
      "sha": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1ODJhYmViNWEzZGE4YzllMDc1NjNmYWY2NjdkZjI3MTEzNWE2MTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d582abeb5a3da8c9e07563faf667df271135a613",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d582abeb5a3da8c9e07563faf667df271135a613",
      "tree": {
        "sha": "e4926e9ed5ae9398e2cfc978e0a7961429471453",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4926e9ed5ae9398e2cfc978e0a7961429471453"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
          "sha": "12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/12b9aa22d6a74e4f6e9ef9672569f19d33d4f52b"
        }
      ],
      "message": "test: Check that disconnection happens when wrong garbage terminator is sent\n\nThis test type is represented using WRONG_GARBAGE_TERMINATOR.\nsince the wrong garbage terminator is sent to TestNode, TestNode\nwill interpret all of the gabage bytes, wrong garbage terminator,\ndecoy messages and version packet it receives as garbage bytes.\n\nIf the length of all these is more than 4095 + 16, it will result\nin a missing garbage terminator error. otherwise, it will result\nin a V2 handshake timeout error.\n\nSend only MAX_GARBAGE_LEN//2 bytes of garbage data to TestNode\nso that the total length received by the TestNode is at max\n= (MAX_GARBAGE_LEN//2) + 16 + 10*120 + 20 = 3283 bytes\n(which is less than 4095 + 16 bytes) and we get a consistent\nV2 handshake timeout error message.\n\nIf we do not limit the garbage length sent, we will intermittently\nget both missing garbage terminator error and V2 handshake\ntimeout error based on the garbage length and decoy packets length\nwhich are chosen at random.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:30:56Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:21:51Z"
      },
      "sha": "d582abeb5a3da8c9e07563faf667df271135a613"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNhYmU0MmFhYTFlOTBmZDIyNmI3MGIyYmE0ZGIyMjI3NzQ0ZDMyOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3abe42aaa1e90fd226b70b2ba4db2227744d329a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3abe42aaa1e90fd226b70b2ba4db2227744d329a",
      "tree": {
        "sha": "f633f9a0b47a0a8eaa3716d1772caa8a336cbe33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f633f9a0b47a0a8eaa3716d1772caa8a336cbe33"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d582abeb5a3da8c9e07563faf667df271135a613",
          "sha": "d582abeb5a3da8c9e07563faf667df271135a613",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d582abeb5a3da8c9e07563faf667df271135a613"
        }
      ],
      "message": "test: Check that disconnection happens when garbage sent/received are different\n\nThis test type is represented using WRONG_GARBAGE.\nHere, garbage bytes sent to TestNode are assumed to be tampered with and\ndo not correspond to the garbage bytes which P2PInterface calculated and\nuses.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:33:40Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:27:17Z"
      },
      "sha": "3abe42aaa1e90fd226b70b2ba4db2227744d329a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRjMjEzN2E5NDNiNGI3NWVmNDY5MTA5YTJjYWM4OWNiNTA2OGRkNTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc2137a943b4b75ef469109a2cac89cb5068dd56",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2137a943b4b75ef469109a2cac89cb5068dd56",
      "tree": {
        "sha": "de8cd941a21190d5bdbaeab99ec7d8878679cdf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de8cd941a21190d5bdbaeab99ec7d8878679cdf4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3abe42aaa1e90fd226b70b2ba4db2227744d329a",
          "sha": "3abe42aaa1e90fd226b70b2ba4db2227744d329a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3abe42aaa1e90fd226b70b2ba4db2227744d329a"
        }
      ],
      "message": "test: Check that disconnection happens when AAD isn't filled\n\nThis test type is represented using SEND_NO_AAD. If AAD of the first encrypted packet\nsent after the garbage terminator (optional decoy packet/version packet) hasn't been\nfilled, disconnection happens.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:33:40Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-14T08:13:52Z"
      },
      "sha": "dc2137a943b4b75ef469109a2cac89cb5068dd56"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlNTI4Y2I5ZTI5Yjc1ZDM2YTgwMTg5NTRmNDViY2ZiODg2YTQ1NTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "tree": {
        "sha": "fab19e7d5646e926f90952586a3a7e49bf6c1a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fab19e7d5646e926f90952586a3a7e49bf6c1a20"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc2137a943b4b75ef469109a2cac89cb5068dd56",
          "sha": "dc2137a943b4b75ef469109a2cac89cb5068dd56",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2137a943b4b75ef469109a2cac89cb5068dd56"
        }
      ],
      "message": "test: Check that non empty version packet is ignored and no disconnection happens\n\nThis test type is represented using SEND_NON_EMPTY_VERSION_PACKET.",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-05-28T06:33:40Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2024-02-13T15:31:21Z"
      },
      "sha": "ae528cb9e29b75d36a8018954f45bcfb886a4557"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12952627673,
      "node_id": "HRFPE_lADOABII585_MAi-zwAAAAMECWnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952627673",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T06:55:30Z"
    },
    {
      "event": "commented",
      "id": 2134500918,
      "node_id": "IC_kwDOABII585_OeY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134500918",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:30Z",
      "updated_at": "2024-05-28T07:12:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for the helpful reviews @sr-gi!\r\n\r\nI've updated the PR:\r\n- `EARLY_KEY_RESPONSE` test doesn't have `magic_sent` now and the `initial_v2_handshake()` function is cleaner\r\n- `EARLY_KEY_RESPONSE` test does sending of 4 bytes ellswift (which match network magic) + remaining ellswift and garbage bytes on `MainThread` - both are done manually now\r\n- Added v2 handshake timeout log in 7d07daa\r\n\r\n     \r\n> What is weird is that the test is expecting a specific log message, which seems to also match in this case. This is still the case by the way. Is there an alternative way of making sure this does not happen?\r\n\r\nhmm fair point, i've added a log message in `InactivityCheck()` to distinguish v2 handshake timeout case from version handshake timeout.",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-2134500918",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29431"
    },
    {
      "event": "mentioned",
      "id": 12952816894,
      "node_id": "MEE_lADOABII585_MAi-zwAAAAMEDEz-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952816894",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:31Z"
    },
    {
      "event": "subscribed",
      "id": 12952816899,
      "node_id": "SE_lADOABII585_MAi-zwAAAAMEDE0D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12952816899",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T07:12:31Z"
    },
    {
      "event": "reviewed",
      "id": 2083422330,
      "node_id": "PRR_kwDOABII5858LoB6",
      "url": null,
      "actor": null,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I love it now 🚀 \r\n\r\nACK ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#pullrequestreview-2083422330",
      "submitted_at": "2024-05-28T16:59:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
    },
    {
      "event": "review_requested",
      "id": 12960754154,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWnq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:10Z",
      "requested_reviewer": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12960754284,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWps",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754284",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:11Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12960754414,
      "node_id": "RRE_lADOABII585_MAi-zwAAAAMEhWru",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12960754414",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T16:59:12Z",
      "requested_reviewer": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-28T23:44:05Z",
      "updated_at": "2024-05-28T23:44:05Z",
      "source": {
        "issue": {
          "id": 1909889037,
          "node_id": "PR_kwDOABII585bCrp0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28521",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28521/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28521/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28521/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28521",
          "number": 28521,
          "state": "open",
          "state_reason": null,
          "title": "net: additional disconnect logging",
          "body": "While debugging unexpected disconnections, possibly related to #28331, I found some additional [net] logging to be useful.\r\n\r\nAll cases where we disconnect now come with a log message that has the word `disconnecting`:\r\n\r\n* `CloseSocketDisconnect()` logs `disconnecting peer=…`\r\n* whereever we set `pnode->fDisconnect = true;`\r\n* for all `InactivityCheck` cases (which in turn sets `fDisconnect`)\r\n* replaces \"dropping\" with \"disconnecting\" in `Network not active, dropping peer=…`\r\n\r\nSometimes the reason appears in the line above, e.g.:\r\n\r\n```\r\nsocket send error for peer=…\r\ndisconnecting peer=… \r\n```\r\n\r\nNote that `CloseSocketDisconnect()` always logs `disconnecting` (unless there's no socket), so the message before it doesn't need `disconnecting`, whereas `pnode->fDisconnect = true;` unceremoniously drops the connection without a log message.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28521",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28521",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28521.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28521.patch"
          },
          "created_at": "2023-09-23T14:22:16Z",
          "updated_at": "2024-05-29T12:25:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-29T08:52:18Z",
      "updated_at": "2024-05-29T08:52:18Z",
      "source": {
        "issue": {
          "id": 2182604130,
          "node_id": "PR_kwDOABII585pbmSj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
          "number": 29641,
          "state": "open",
          "state_reason": null,
          "title": "scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint",
          "body": "`LogPrintf/LogPrint` are problematic, because:\r\n\r\n* Their name is non-descriptive of what the function does (info logging or debug logging).\r\n* They are deprecated aliases, where code is using either the deprecated or non-deprecated alias, which is inconsistent and confusing.\r\n\r\nFix all issues by replacing the usage.\r\n\r\nWhile the diff is large and may cause merge conflicts or backport conflicts, I don't see the deprecated aliases being kept forever, so this will have to be done at some point. All conflicts should be trivial to solve, in any case.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29641",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29641.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29641.patch"
          },
          "created_at": "2024-03-12T20:21:40Z",
          "updated_at": "2024-06-06T14:38:49Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491842216",
      "pull_request_review_id": 1884147732,
      "id": 1491842216,
      "node_id": "PRRC_kwDOABII585Y67So",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "doesn't the `+1` make the `garbage_len` greater than `4095` which is what is being covered in `TestType.EXCESS_GARBAGE`",
      "created_at": "2024-02-16T01:03:36Z",
      "updated_at": "2024-02-16T01:03:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491842216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491842216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491843089",
      "pull_request_review_id": 1884149060,
      "id": 1491843089,
      "node_id": "PRRC_kwDOABII585Y67gR",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491842216,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "never mind randrange doesn't include the value passed",
      "created_at": "2024-02-16T01:05:25Z",
      "updated_at": "2024-02-16T01:05:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491843089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491843089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491848110",
      "pull_request_review_id": 1884162177,
      "id": 1491848110,
      "node_id": "PRRC_kwDOABII585Y68uu",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()\n+\n+    def test_earlykeyresponse(self):\n+        self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n+        self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n+        node0 = self.nodes[0]\n+        self.log.info('Sending first 4 bytes of ellswift which match network magic')\n+        self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n+        # send happens in `initiate_v2_handshake()` in `connection_made()`\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True)\n+        self.wait_until(lambda: peer1.connection_opened)\n+        self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n+        self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n+        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n+        peer1.send_raw_message(ellswift_and_garbage_data)\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):\n+            peer1.wait_for_disconnect(timeout=5)\n+        self.log.info('successful disconnection since modified ellswift was sent as response')\n+\n+    def test_v2disconnection(self):\n+        # test v2 disconnection scenarios\n+        node0 = self.nodes[0]\n+        expected_debug_message = [\n+            [],  # EARLY_KEY_RESPONSE\n+            [\"V2 transport error: missing garbage terminator, peer=1\"],  # EXCESS_GARBAGE\n+            [\"version handshake timeout peer=2\"],  # WRONG_GARBAGE_TERMINATOR\n+            [\"V2 transport error: packet decryption failure\"],  # WRONG_GARBAGE\n+            [\"V2 transport error: packet decryption failure\"],  # SEND_NO_AAD\n+            [],  # SEND_NON_EMPTY_VERSION_PACKET\n+        ]\n+        for test_type in TestType:\n+            if test_type == TestType.EARLY_KEY_RESPONSE:\n+                continue",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 166,
      "original_position": 190,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "do you think it would make sense to use `test_earlykeyresponse` here and then make `test_v2disconnection` into `run_test`",
      "created_at": "2024-02-16T01:15:28Z",
      "updated_at": "2024-02-16T15:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491848110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491848110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491897558",
      "pull_request_review_id": 1884162177,
      "id": 1491897558,
      "node_id": "PRRC_kwDOABII585Y7IzW",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 134,
      "original_position": 158,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": null,
      "user": {
        "login": "kevkevinpal",
        "id": 15950706,
        "node_id": "MDQ6VXNlcjE1OTUwNzA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/15950706?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevkevinpal",
        "html_url": "https://github.com/kevkevinpal",
        "followers_url": "https://api.github.com/users/kevkevinpal/followers",
        "following_url": "https://api.github.com/users/kevkevinpal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kevkevinpal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kevkevinpal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kevkevinpal/subscriptions",
        "organizations_url": "https://api.github.com/users/kevkevinpal/orgs",
        "repos_url": "https://api.github.com/users/kevkevinpal/repos",
        "events_url": "https://api.github.com/users/kevkevinpal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kevkevinpal/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are the `test_type`'s in `test_v2disconnection` dependent on `test_earlykeyresponse` to run first?\r\n\r\nI tried running the tests individually for each `test_type` but I ran into this error, using this diff a74f4ddcc50eeba04977d8eeb96ffee2a94dbbf9 \r\n```\r\n2024-02-16T02:38:17.055000Z TestFramework (INFO): PRNG seed is: 8074818075718275852\r\n2024-02-16T02:38:17.056000Z TestFramework (INFO): Initializing test directory /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar\r\n2024-02-16T02:38:22.936000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.run_test()\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/./test/functional/p2p_v2_misbehaving.py\", line 176, in run_test\r\n    with self.nodes[0].assert_debug_log(expected_debug_message[test_type.value], timeout=5):\r\n  File \"/usr/local/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py\", line 144, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_node.py\", line 492, in assert_debug_log\r\n    self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\r\n  File \"/Users/kevkevin/DEVDIR/bitcoin/test/functional/test_framework/test_node.py\", line 190, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Expected messages \"['version handshake timeout peer=2']\" does not partially match log:\r\n\r\n - 2024-02-16T02:38:17.908176Z [net] [net.cpp:3712] [CNode] [net] Added connection peer=0\r\n - 2024-02-16T02:38:17.908650Z [net] [net.cpp:1820] [CreateNodeFromAcceptedSocket] [net] connection from 127.0.0.1:63849 accepted\r\n - 2024-02-16T02:38:21.015546Z [net] [net.cpp:1992] [InactivityCheck] [net] version handshake timeout peer=0\r\n - 2024-02-16T02:38:21.015844Z [net] [net.cpp:555] [CloseSocketDisconnect] [net] disconnecting peer=0\r\n - 2024-02-16T02:38:21.016463Z [net] [net_processing.cpp:1672] [FinalizeNode] [net] Cleared nodestate for peer=0\r\n\r\n\r\n2024-02-16T02:38:22.999000Z TestFramework (INFO): Stopping nodes\r\n2024-02-16T02:38:23.270000Z TestFramework (WARNING): Not cleaning up dir /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar\r\n2024-02-16T02:38:23.270000Z TestFramework (ERROR): Test failed. Test logging available at /var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar/test_framework.log\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR):\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR): Hint: Call /Users/kevkevin/DEVDIR/bitcoin/test/functional/combine_logs.py '/var/folders/9g/cvx014yx4dq5lwl_x5zvn_j80000gn/T/bitcoin_func_test_dmwxb4ar' to consolidate all logs\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR):\r\n2024-02-16T02:38:23.271000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2024-02-16T02:38:23.272000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2024-02-16T02:38:23.272000Z TestFramework (ERROR):\r\n```",
      "created_at": "2024-02-16T02:43:16Z",
      "updated_at": "2024-02-16T15:12:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491897558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491897558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": 133,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491901555",
      "pull_request_review_id": 1884232439,
      "id": 1491901555,
      "node_id": "PRRC_kwDOABII585Y7Jxz",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 60,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491842216,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes!",
      "created_at": "2024-02-16T02:51:30Z",
      "updated_at": "2024-02-16T02:51:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1491901555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1491901555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494116658",
      "pull_request_review_id": 1887729403,
      "id": 1494116658,
      "node_id": "PRRC_kwDOABII585ZDmky",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()\n+\n+    def test_earlykeyresponse(self):\n+        self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n+        self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n+        node0 = self.nodes[0]\n+        self.log.info('Sending first 4 bytes of ellswift which match network magic')\n+        self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n+        # send happens in `initiate_v2_handshake()` in `connection_made()`\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True)\n+        self.wait_until(lambda: peer1.connection_opened)\n+        self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n+        self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n+        ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n+        peer1.send_raw_message(ellswift_and_garbage_data)\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):\n+            peer1.wait_for_disconnect(timeout=5)\n+        self.log.info('successful disconnection since modified ellswift was sent as response')\n+\n+    def test_v2disconnection(self):\n+        # test v2 disconnection scenarios\n+        node0 = self.nodes[0]\n+        expected_debug_message = [\n+            [],  # EARLY_KEY_RESPONSE\n+            [\"V2 transport error: missing garbage terminator, peer=1\"],  # EXCESS_GARBAGE\n+            [\"version handshake timeout peer=2\"],  # WRONG_GARBAGE_TERMINATOR\n+            [\"V2 transport error: packet decryption failure\"],  # WRONG_GARBAGE\n+            [\"V2 transport error: packet decryption failure\"],  # SEND_NO_AAD\n+            [],  # SEND_NON_EMPTY_VERSION_PACKET\n+        ]\n+        for test_type in TestType:\n+            if test_type == TestType.EARLY_KEY_RESPONSE:\n+                continue",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 166,
      "original_position": 190,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491848110,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`test_earlykeyresponse` sends handshake bytes etc.. in the `MainThread` and I feel it's better to isolate that behaviour in a different test.\r\n\r\nalso, if you grep for `def test_` in `test/functional`, you'll see many [examples](https://github.com/bitcoin/bitcoin/blob/3cbc8cbc71d3d6ecfaf41164ce59c24ac94bae99/test/functional/feature_asmap.py#L128) of different tests listed in `run_test()` using the pattern which is currently used.",
      "created_at": "2024-02-19T07:35:13Z",
      "updated_at": "2024-02-19T07:51:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1494116658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494116658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494131410",
      "pull_request_review_id": 1887729403,
      "id": 1494131410,
      "node_id": "PRRC_kwDOABII585ZDqLS",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import random\n+from enum import Enum\n+\n+from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import random_bitflip\n+from test_framework.v2_p2p import (\n+    logger,\n+    EncryptedP2PState,\n+    MAX_GARBAGE_LEN,\n+    TRANSPORT_VERSION,\n+)\n+\n+\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n+    2. EXCESS_GARBAGE - Disconnection happens when > MAX_GARBAGE_LEN bytes garbage is sent\n+    3. WRONG_GARBAGE_TERMINATOR - Disconnection happens when incorrect garbage terminator is sent\n+    4. WRONG_GARBAGE - Disconnection happens when garbage bytes that is sent is different from what the peer receives\n+    5. SEND_NO_AAD - Disconnection happens when AAD of first encrypted packet after the garbage terminator is not filled\n+    6. SEND_NON_EMPTY_VERSION_PACKET - non-empty version packet is simply ignored\n+    \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+    EXCESS_GARBAGE = 1\n+    WRONG_GARBAGE_TERMINATOR = 2\n+    WRONG_GARBAGE = 3\n+    SEND_NO_AAD = 4\n+    SEND_NON_EMPTY_VERSION_PACKET = 5\n+\n+\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__(initiating=True, net='regtest')\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        \"\"\"Generate > MAX_GARBAGE_LEN garbage bytes, MAX_GARBAGE_LEN//2 garbage bytes, tampered garbage bytes\n+        when TestType = (EXCESS_GARBAGE, WRONG_GARBAGE_TERMINATOR, WRONG_GARBAGE)\"\"\"\n+        self.privkey_ours, self.ellswift_ours = ellswift_create()\n+\n+        if self.test_type == TestType.EXCESS_GARBAGE:\n+            # send > 4095 bytes garbage\n+            garbage_len = MAX_GARBAGE_LEN + random.randrange(1, 10)\n+        elif self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN//2)\n+        else:\n+            garbage_len = random.randrange(MAX_GARBAGE_LEN + 1)\n+\n+        self.sent_garbage = random.randbytes(garbage_len)\n+        logger.debug(f\"sending {garbage_len} bytes of garbage data\")\n+\n+        if self.test_type == TestType.WRONG_GARBAGE:\n+            # assume that garbage bytes sent to TestNode were tampered with\n+            return self.ellswift_ours + random_bitflip(self.sent_garbage)\n+        else:\n+            return self.ellswift_ours + self.sent_garbage\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n+        else:\n+            return super().initiate_v2_handshake()\n+\n+    def complete_handshake(self, response):\n+        \"\"\"Add option for sending wrong garbage terminator, not filling first encrypted packet after garbage terminator\n+        with AAD, sending non-empty transport version packet.\n+        when TestType = (WRONG_GARBAGE_TERMINATOR, SEND_NO_AAD, SEND_NON_EMPTY_VERSION_PACKET)\"\"\"\n+        ellswift_theirs = self.received_prefix + response.read(64 - len(self.received_prefix))\n+        # return b\"\" if we need to receive more bytes\n+        if len(ellswift_theirs) != 64:\n+            return 0, b\"\"\n+        ecdh_secret = self.v2_ecdh(self.privkey_ours, ellswift_theirs, self.ellswift_ours, self.initiating)\n+        self.initialize_v2_transport(ecdh_secret)\n+        # Send garbage terminator\n+        msg_to_send = self.peer['send_garbage_terminator']\n+        aad = self.sent_garbage\n+\n+        if self.test_type == TestType.WRONG_GARBAGE_TERMINATOR:\n+            msg_to_send = random_bitflip(msg_to_send)\n+        elif self.test_type == TestType.SEND_NO_AAD:\n+            aad = b''\n+\n+        # Optionally send decoy packets after garbage terminator.\n+        for decoy_content_len in [random.randint(1, 100) for _ in range(random.randint(0, 10))]:\n+            msg_to_send += self.v2_enc_packet(decoy_content_len * b'\\x00', aad=aad, ignore=True)\n+            aad = b''\n+\n+        # Send version packet.\n+        if self.test_type == TestType.SEND_NON_EMPTY_VERSION_PACKET:\n+            msg_to_send += self.v2_enc_packet(random.randbytes(5), aad=aad)\n+        else:\n+            msg_to_send += self.v2_enc_packet(TRANSPORT_VERSION, aad=aad)\n+\n+        return 64 - len(self.received_prefix), msg_to_send\n+\n+\n+class MisbehavingV2Peer(P2PInterface):\n+    \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n+    def __init__(self, test_type):\n+        super().__init__()\n+        self.v2_state = None\n+        self.connection_opened = False\n+        self.test_type = test_type\n+\n+    def connection_made(self, transport):\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n+        super().connection_made(transport)\n+\n+    def data_received(self, t):\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n+\n+    def on_open(self):\n+        self.connection_opened = True\n+\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n+\n+    def run_test(self):\n+        self.test_earlykeyresponse()\n+        self.test_v2disconnection()",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": 134,
      "original_position": 158,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ec9005ca4be088dfa2d247bbfe964a9c98e4f29d",
      "in_reply_to_id": 1491897558,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah! `expected_debug_message` on [L180](https://github.com/bitcoin/bitcoin/blob/ec9005ca4be088dfa2d247bbfe964a9c98e4f29d/test/functional/p2p_v2_misbehaving.py#L180) was written with the assumption that `test_v2disconnection` is run after `test_earlykeyresponse`. so peer=0 happens in `test_earlykeyresponse` and peer=1,2,3,4,5 happens in  `test_v2disconnection`.",
      "created_at": "2024-02-19T07:50:51Z",
      "updated_at": "2024-02-19T07:51:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1494131410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1494131410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": 133,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506721918",
      "pull_request_review_id": 1907520121,
      "id": 1506721918,
      "node_id": "PRRC_kwDOABII585ZzsB-",
      "diff_hunk": "@@ -694,6 +694,9 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         supports_v2_p2p = self.use_v2transport and supports_v2_p2p\n         p2p_conn.peer_connect(**kwargs, send_version=send_version, net=self.chain, timeout_factor=self.timeout_factor, supports_v2_p2p=supports_v2_p2p)()\n \n+        if wait_for_disconnect:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 13,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "32f9afb00ad26da3570cc89e5ac8904de0e26fa0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems not ideal to me that this is done before the line `self.p2ps.append(p2p_conn)`.\r\nI think it could lead to errors in which we expect to get disconnected but actually didn't: If we just haven't established the connected yet (i.e. the `connection_made` callback hasn't been called yet), we could abort here, and only afterwards establish the connection that would then not be part of `self.p2ps`.\r\n\r\nA better approach in general might be to have an `expect_success` parameter instead that just skips the waits below and returns, and let the individual test deal with the waiting for disconnection waiting (depending on the test it could ask the TestNode, the test framework, both to wait, or do something else like checking logs for specific disconnect reasons, which the tests you add later already do). ",
      "created_at": "2024-02-28T22:06:19Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1506721918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506721918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516792089",
      "pull_request_review_id": 1907520121,
      "id": 1516792089,
      "node_id": "PRRC_kwDOABII585aaGkZ",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 28,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: its",
      "created_at": "2024-03-07T20:39:28Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1516792089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516792089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516838229",
      "pull_request_review_id": 1907520121,
      "id": 1516838229,
      "node_id": "PRRC_kwDOABII585aaR1V",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n         else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n+            return super().initiate_v2_handshake()\n \n \n-class PeerEarlyKey(P2PInterface):\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n         self.v2_state = None\n         self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n \n     def on_open(self):\n         self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n         self.wait_until(lambda: peer1.connection_opened)\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n         ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n         peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 141,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: can use `node0`",
      "created_at": "2024-03-07T21:12:00Z",
      "updated_at": "2024-03-07T22:24:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1516838229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516838229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519263987",
      "pull_request_review_id": 1927099239,
      "id": 1519263987,
      "node_id": "PRRC_kwDOABII585ajiDz",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"\n+            else:\n+                # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+                # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = False.\n+                # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+                # This state is represented using `can_data_be_received` = True.\n+                self.can_data_be_received = True\n+                return self.ellswift_ours[4:] + self.sent_garbage\n         else:\n-            self.can_data_be_received = True\n-            return self.ellswift_ours[4:] + self.sent_garbage\n+            return super().initiate_v2_handshake()\n \n \n-class PeerEarlyKey(P2PInterface):\n+class MisbehavingV2Peer(P2PInterface):\n     \"\"\"Custom implementation of P2PInterface which uses modified v2 P2P protocol functions for testing purposes.\"\"\"\n-    def __init__(self):\n+    def __init__(self, test_type):\n         super().__init__()\n         self.v2_state = None\n         self.connection_opened = False\n+        self.test_type = test_type\n \n     def connection_made(self, transport):\n-        \"\"\"64 bytes ellswift is sent in 2 parts during `initial_v2_handshake()`\"\"\"\n-        self.v2_state = TestEncryptedP2PState()\n+        \"\"\"Only first 4 ellswift bytes which match network magic bytes is sent using `initial_v2_handshake()` in\n+        `connection_made()` when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        self.v2_state = TestEncryptedP2PState(self.test_type)\n         super().connection_made(transport)\n \n     def data_received(self, t):\n-        # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (send_net_magic = False)\n-        assert self.v2_state.can_data_be_received and not self.v2_state.send_net_magic\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # check that data can be received on recvbuf only when mismatch from V1_PREFIX happens (magic_sent = True)\n+            assert self.v2_state.can_data_be_received and self.v2_state.magic_sent\n+        else:\n+            super().data_received(t)\n \n     def on_open(self):\n         self.connection_opened = True\n \n-class P2PEarlyKey(BitcoinTestFramework):\n+\n+class EncryptedP2PMisbehaving(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-v2transport=1\", \"-peertimeout=3\"]]\n \n     def run_test(self):\n+        self.test_earlykeyresponse()\n+\n+    def test_earlykeyresponse(self):\n         self.log.info('Sending ellswift bytes in parts to ensure that response from responder is received only when')\n         self.log.info('ellswift bytes have a mismatch from the 16 bytes(network magic followed by \"version\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\")')\n         node0 = self.nodes[0]\n         self.log.info('Sending first 4 bytes of ellswift which match network magic')\n         self.log.info('If a response is received, assertion failure would happen in our custom data_received() function')\n         # send happens in `initiate_v2_handshake()` in `connection_made()`\n-        peer1 = node0.add_p2p_connection(PeerEarlyKey(), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n+        peer1 = node0.add_p2p_connection(MisbehavingV2Peer(TestType.EARLY_KEY_RESPONSE), wait_for_verack=False, send_version=False, supports_v2_p2p=True, wait_for_v2_handshake=False)\n         self.wait_until(lambda: peer1.connection_opened)\n         self.log.info('Sending remaining ellswift and garbage which are different from V1_PREFIX. Since a response is')\n         self.log.info('expected now, our custom data_received() function wouldn\\'t result in assertion failure')\n         ellswift_and_garbage_data = peer1.v2_state.initiate_v2_handshake()\n         peer1.send_raw_message(ellswift_and_garbage_data)\n-        peer1.wait_for_disconnect(timeout=5)\n-        self.log.info('successful disconnection when MITM happens in the key exchange phase')\n+        with self.nodes[0].assert_debug_log(['version handshake timeout peer=0']):",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 141,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": 1516838229,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2024-03-11T07:42:50Z",
      "updated_at": "2024-03-11T07:42:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519263987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519263987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519264157",
      "pull_request_review_id": 1927099456,
      "id": 1519264157,
      "node_id": "PRRC_kwDOABII585ajiGd",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out it's ellswift + garbage bytes",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 28,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "af6bd3f664aeb42094a50d31f4f5349c149000b4",
      "in_reply_to_id": 1516792089,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2024-03-11T07:43:00Z",
      "updated_at": "2024-03-11T07:43:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519264157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519264157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519266541",
      "pull_request_review_id": 1927104835,
      "id": 1519266541,
      "node_id": "PRRC_kwDOABII585ajirt",
      "diff_hunk": "@@ -694,6 +694,9 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, send_version=Tru\n         supports_v2_p2p = self.use_v2transport and supports_v2_p2p\n         p2p_conn.peer_connect(**kwargs, send_version=send_version, net=self.chain, timeout_factor=self.timeout_factor, supports_v2_p2p=supports_v2_p2p)()\n \n+        if wait_for_disconnect:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 13,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "32f9afb00ad26da3570cc89e5ac8904de0e26fa0",
      "in_reply_to_id": 1506721918,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "woah more racy thread logic. good catch! i've implemented the `expect_success` parameter suggestion.",
      "created_at": "2024-03-11T07:45:57Z",
      "updated_at": "2024-03-11T07:45:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1519266541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519266541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 697,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537611908",
      "pull_request_review_id": 1957780790,
      "id": 1537611908,
      "node_id": "PRRC_kwDOABII585bphiE",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 70,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ee562933765e64babe067bfcb56a65c8637df82c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit ee562933765e64babe067bfcb56a65c8637df82c, magic-number-nit:\r\n```suggestion\r\n                return MAGIC_BYTES[self.net]\r\n```",
      "created_at": "2024-03-25T13:36:24Z",
      "updated_at": "2024-03-25T14:17:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1537611908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1537611908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605174508",
      "pull_request_review_id": 2063714050,
      "id": 1605174508,
      "node_id": "PRRC_kwDOABII585frQTs",
      "diff_hunk": "@@ -3,87 +3,107 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n-\n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n+\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n+    EARLY_KEY_RESPONSE = 0\n+\n \n-    def __init__(self):\n+class TestEncryptedP2PState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing scenarios listed in `TestType`\"\"\"\n+    def __init__(self, test_type):\n         super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+        self.test_type = test_type\n+        if test_type == TestType.EARLY_KEY_RESPONSE:\n+            self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+            self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def generate_keypair_and_garbage(self):\n+        return super().generate_keypair_and_garbage()\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        if self.test_type == TestType.EARLY_KEY_RESPONSE:\n+            # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+            # It is sent in 2 phases:\n+            # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+            # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+            if not self.magic_sent:\n+                self.generate_keypair_and_garbage()\n+                self.magic_sent = True\n+                return b\"\\xfa\\xbf\\xb5\\xda\"",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 70,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "ee562933765e64babe067bfcb56a65c8637df82c",
      "in_reply_to_id": 1537611908,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2024-05-17T15:18:44Z",
      "updated_at": "2024-05-17T15:18:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1605174508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605174508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606879417",
      "pull_request_review_id": 2066388767,
      "id": 1606879417,
      "node_id": "PRRC_kwDOABII585fxwi5",
      "diff_hunk": "@@ -79,6 +78,7 @@ class EncryptedP2PState:\n \n         encrypt/decrypt v2 P2P messages using v2_enc_packet() and v2_receive_packet().\n     \"\"\"\n+    transport_version = b''",
      "path": "test/functional/test_framework/v2_p2p.py",
      "position": null,
      "original_position": 12,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "38eb42984406dd9eabba0e3d197c7336aed495c7",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 38eb42984406dd9eabba0e3d197c7336aed495c7\r\n\r\nThis is not being used as a class attribute, so it should belong inside `__init__()`",
      "created_at": "2024-05-20T14:46:56Z",
      "updated_at": "2024-05-20T16:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1606879417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606879417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606901839",
      "pull_request_review_id": 2066388767,
      "id": 1606901839,
      "node_id": "PRRC_kwDOABII585fx2BP",
      "diff_hunk": "@@ -3,87 +3,100 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n-\n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+    EARLY_KEY_RESPONSE = 0\n+\n+\n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+        # It is sent in 2 phases:\n+        # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+        # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+        if not self.magic_sent:\n+            self.generate_keypair_and_garbage()\n+            self.magic_sent = True\n+            return MAGIC_BYTES[self.net]\n         else:\n+            # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+            # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = False.\n+            # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = True.",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 72,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "6d9df282d0ca925a596787df18bf88ae48deef3a",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 6d9df282d0ca925a596787df18bf88ae48deef3a\r\n\r\nI still think this can be simplified. `initiate_v2_handshake` is going to be called, asynchronously, when creating this object. You can reduce a lot of the boilerplate, and get rid of `magic_sent`, as long as you do the last bit manually on the test (or just create another method, like `continue_v2_handshake`). \r\n\r\nIt just feels weird to me that this initialization method is called twice (one async, once manually), it doesn't feel too intuitive. ",
      "created_at": "2024-05-20T15:04:52Z",
      "updated_at": "2024-05-20T16:38:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1606901839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606901839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616695926",
      "pull_request_review_id": 2081913775,
      "id": 1616695926,
      "node_id": "PRRC_kwDOABII585gXNJ2",
      "diff_hunk": "@@ -79,6 +78,7 @@ class EncryptedP2PState:\n \n         encrypt/decrypt v2 P2P messages using v2_enc_packet() and v2_receive_packet().\n     \"\"\"\n+    transport_version = b''",
      "path": "test/functional/test_framework/v2_p2p.py",
      "position": null,
      "original_position": 12,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "38eb42984406dd9eabba0e3d197c7336aed495c7",
      "in_reply_to_id": 1606879417,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2024-05-28T06:58:54Z",
      "updated_at": "2024-05-28T06:58:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1616695926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616695926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616701338",
      "pull_request_review_id": 2081922888,
      "id": 1616701338,
      "node_id": "PRRC_kwDOABII585gXOea",
      "diff_hunk": "@@ -3,87 +3,100 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import random\n+from enum import Enum\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.crypto.ellswift import ellswift_create\n+from test_framework.messages import MAGIC_BYTES\n from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.v2_p2p import EncryptedP2PState\n \n \n-class TestEncryptedP2PState(EncryptedP2PState):\n-    \"\"\" Modify v2 P2P protocol functions for testing that \"The responder waits until one byte is received which does\n-    not match the 16 bytes consisting of the network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\".\" (see BIP 324)\n+class TestType(Enum):\n+    \"\"\" Scenarios to be tested:\n \n-    - if `send_net_magic` is True, send first 4 bytes of ellswift (match network magic) else send remaining 60 bytes\n-    - `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n-            - v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n-              This state is represented using `can_data_be_received` = False.\n-            - v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n-              This state is represented using `can_data_be_received` = True.\n+    1. EARLY_KEY_RESPONSE - The responder needs to wait until one byte is received which does not match the 16 bytes\n+    consisting of network magic followed by \"version\\x00\\x00\\x00\\x00\\x00\" before sending out its ellswift + garbage bytes\n     \"\"\"\n-\n-    def __init__(self):\n-        super().__init__(initiating=True, net='regtest')\n-        self.send_net_magic = True\n-        self.can_data_be_received = False\n-\n-    def initiate_v2_handshake(self, garbage_len=random.randrange(4096)):\n-        \"\"\"Initiator begins the v2 handshake by sending its ellswift bytes and garbage.\n-        Here, the 64 bytes ellswift is assumed to have it's 4 bytes match network magic bytes. It is sent in 2 phases:\n-            1. when `send_network_magic` = True, send first 4 bytes of ellswift (matches network magic bytes)\n-            2. when `send_network_magic` = False, send remaining 60 bytes of ellswift\n-        \"\"\"\n-        if self.send_net_magic:\n-            self.privkey_ours, self.ellswift_ours = ellswift_create()\n-            self.sent_garbage = random.randbytes(garbage_len)\n-            self.send_net_magic = False\n-            return b\"\\xfa\\xbf\\xb5\\xda\"\n+    EARLY_KEY_RESPONSE = 0\n+\n+\n+class EarlyKeyResponseState(EncryptedP2PState):\n+    \"\"\" Modify v2 P2P protocol functions for testing EARLY_KEY_RESPONSE scenario\"\"\"\n+    def __init__(self, initiating, net):\n+        super().__init__(initiating=initiating, net=net)\n+        self.magic_sent = False  # set to True after first 4 bytes of ellswift which match network magic is sent.\n+        self.can_data_be_received = False  # variable used to assert if data is received on recvbuf.\n+\n+    def initiate_v2_handshake(self):\n+        \"\"\"Send ellswift and garbage bytes in 2 parts when TestType = (EARLY_KEY_RESPONSE)\"\"\"\n+        # Here, the 64 bytes ellswift is assumed to have it's first 4 bytes match network magic bytes.\n+        # It is sent in 2 phases:\n+        # 1. when `magic_sent` = False, send first 4 bytes of ellswift (matches network magic bytes)\n+        # 2. when `magic_sent` = True, send remaining 60 bytes of ellswift\n+        if not self.magic_sent:\n+            self.generate_keypair_and_garbage()\n+            self.magic_sent = True\n+            return MAGIC_BYTES[self.net]\n         else:\n+            # `can_data_be_received` is a variable used to assert if data is received on recvbuf.\n+            # 1. v2 TestNode shouldn't respond back if we send V1_PREFIX and data shouldn't be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = False.\n+            # 2. v2 TestNode responds back when mismatch from V1_PREFIX happens and data can be received on recvbuf.\n+            # This state is represented using `can_data_be_received` = True.",
      "path": "test/functional/p2p_v2_misbehaving.py",
      "position": null,
      "original_position": 72,
      "commit_id": "ae528cb9e29b75d36a8018954f45bcfb886a4557",
      "original_commit_id": "6d9df282d0ca925a596787df18bf88ae48deef3a",
      "in_reply_to_id": 1606901839,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I still think this can be simplified. initiate_v2_handshake is going to be called, asynchronously, when creating this object. You can reduce a lot of the boilerplate, and get rid of magic_sent, as long as you do the last bit manually on the test (or just create another method, like continue_v2_handshake).\r\n\r\nyes, that can be done since the last bit is being sent from `MainThread` anyways.\r\n\r\nbefore: \r\n1. send both 4 bytes network magic (first 4 bytes of ellswift) - `NetworkThread`\r\n2. remaining `ellswift_garbage` bytes - `MainThread`\r\n\r\nnow:\r\n1. send both 4 bytes network magic (first 4 bytes of ellswift) - `MainThread`\r\n2. remaining `ellswift_garbage` bytes - `MainThread`\r\n\r\nrealised [my earlier comment](https://github.com/bitcoin/bitcoin/pull/29431#issuecomment-1945395946) is the situation in master too and a sleep in `MainThread` where there's no waiting for some other tasks is unlikely. 😬\r\n\r\nI've used [your original suggestion](https://github.com/bitcoin/bitcoin/pull/29352#pullrequestreview-1854149947) and updated the PR to send everything manually! ",
      "created_at": "2024-05-28T07:03:28Z",
      "updated_at": "2024-05-28T07:03:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29431#discussion_r1616701338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1616701338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29431"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    }
  ]
}