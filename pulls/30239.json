{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239",
    "id": 1907765698,
    "node_id": "PR_kwDOABII585xtjHC",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30239",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30239.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30239.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/131bed19bdfc922328cad9781fa9122b6810a8fd",
    "number": 30239,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Ephemeral Dust",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "A replacement for https://github.com/bitcoin/bitcoin/pull/29001\r\n\r\nNow that we have 1P1C relay, TRUC transactions and sibling eviction, it makes sense to retarget this feature more narrowly by not introducing a new output type, and simple focusing on the feature of allowing temporary dust in the mempool.\r\n\r\nUsers of this can immediately use dust outputs as:\r\n1. Single keyed anchor (can be shared by multiple parties)\r\n2. Single unkeyed anchor, ala P2A\r\n\r\nWhich is useful when the parent transaction cannot have fees for technical or accounting reasons.\r\n\r\nWhat I'm calling \"keyed\" anchors would be used anytime you don't want a third party to be able to run off with the utxo. As a motivating example, in Ark there is the concept of a \"forfeit transaction\" which spends a \"connector output\". The connector output would ideally be 0-value, but you would not want that utxo spend by anyone, because this would cause financial loss for the coordinator of the service: https://arkdev.info/docs/learn/concepts#forfeit-transaction\r\n\r\nNote that this specific use-case likely doesn't work as it involves a tree of dust, but the connector idea in general demonstrates how it could be used.\r\n\r\nAnother related example is connector outputs in BitVM2: https://bitvm.org/bitvm2.html .\r\n\r\nNote that non-TRUC usage will be impractical unless the minrelay requirement on individual transactions are dropped in general, which should happen post-cluster mempool.\r\n\r\nLightning Network intends to use this feature post-29.0 if available: https://github.com/lightning/bolts/issues/1171#issuecomment-2373748582 \r\n\r\nIt's also useful for Ark, ln-symmetry, spacechains, Timeout Trees, and other constructs with large presigned trees or other large-N party smart contracts.",
    "labels": [],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/69",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/69",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/69/labels",
      "id": 11324346,
      "node_id": "MI_kwDOABII584ArMu6",
      "number": 69,
      "state": "open",
      "title": "29.0",
      "description": "",
      "creator": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 10,
      "closed_issues": 14,
      "created_at": "2024-07-17T08:47:56Z",
      "updated_at": "2024-11-02T12:00:13Z"
    },
    "created_at": "2024-06-06T17:31:44Z",
    "updated_at": "2024-11-06T11:17:07Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "6d343935a22e5c7c86fd14c64a6cc4e1a2e0d34c",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "instagibbs:2024-03-general-ephemeral",
      "ref": "2024-03-general-ephemeral",
      "sha": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 13910191,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzkxMDE5MQ==",
        "name": "bitcoin",
        "full_name": "instagibbs/bitcoin",
        "owner": {
          "login": "instagibbs",
          "id": 5767891,
          "node_id": "MDQ6VXNlcjU3Njc4OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/instagibbs",
          "html_url": "https://github.com/instagibbs",
          "followers_url": "https://api.github.com/users/instagibbs/followers",
          "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
          "organizations_url": "https://api.github.com/users/instagibbs/orgs",
          "repos_url": "https://api.github.com/users/instagibbs/repos",
          "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/instagibbs/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/instagibbs/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/instagibbs/bitcoin",
        "archive_url": "https://api.github.com/repos/instagibbs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/instagibbs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/instagibbs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/instagibbs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/instagibbs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/instagibbs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/instagibbs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/instagibbs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/instagibbs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/instagibbs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/instagibbs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/instagibbs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/instagibbs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/instagibbs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/instagibbs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/instagibbs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/instagibbs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/instagibbs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/instagibbs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/instagibbs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/instagibbs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/instagibbs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/instagibbs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/instagibbs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/instagibbs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:instagibbs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/instagibbs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/instagibbs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/instagibbs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/instagibbs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/instagibbs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/instagibbs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/instagibbs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/instagibbs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/instagibbs/bitcoin/hooks",
        "svn_url": "https://github.com/instagibbs/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 248689,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-04T17:21:07Z",
        "created_at": "2013-10-27T20:56:53Z",
        "updated_at": "2024-08-28T03:28:00Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6463117a29294f6ddc9fafecfd1e9023956cc41b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36309,
        "stargazers_count": 79218,
        "watchers_count": 79218,
        "size": 270542,
        "default_branch": "master",
        "open_issues_count": 636,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-06T11:15:27Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-06T11:55:11Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1221,
    "deletions": 3,
    "changed_files": 20,
    "commits": 9,
    "review_comments": 158,
    "comments": 42
  },
  "events": [
    {
      "event": "commented",
      "id": 2153056956,
      "node_id": "IC_kwDOABII586AVQq8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2153056956",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:31:47Z",
      "updated_at": "2024-11-05T14:16:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30239.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2414414598), [sdaftuar](https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2457295681) |\n| Concept NACK | [petertodd](https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2236753415) |\n| Concept ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2228142149), [t-bast](https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2238752561), [murchandamus](https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2382979168) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31153](https://github.com/bitcoin/bitcoin/pull/31153) (bench: Remove various extraneous benchmarks by dergoegge)\n* [#29247](https://github.com/bitcoin/bitcoin/pull/29247) (CAT in Tapscript (BIP-347) by 0xBEEFCAF3)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2153056956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13070222307,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMLC8Pj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13070222307",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:38:59Z"
    },
    {
      "event": "labeled",
      "id": 13070223155,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMLC8cz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13070223155",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:39:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2153069209,
      "node_id": "IC_kwDOABII586AVTqZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2153069209",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T17:39:04Z",
      "updated_at": "2024-06-06T17:39:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25906194302</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2153069209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2153175605,
      "node_id": "IC_kwDOABII586AVto1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2153175605",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T18:44:50Z",
      "updated_at": "2024-06-06T18:44:50Z",
      "author_association": "MEMBER",
      "body": "going to put this into draft until https://github.com/bitcoin/bitcoin/pull/29496 is merged, since dust checks are completely off when `-acceptnonstdtxn=1`. which is required for TRUC currently.\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2153175605",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "convert_to_draft",
      "id": 13070882825,
      "node_id": "CTDE_lADOABII586LZ3ZQzwAAAAMLFdgJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13070882825",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T18:44:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13083680180,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAML2R20",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13083680180",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T17:22:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13083751895,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAML2jXX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13083751895",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T17:30:06Z"
    },
    {
      "event": "ready_for_review",
      "id": 13084249056,
      "node_id": "RFRE_lADOABII586LZ3ZQzwAAAAML4cvg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13084249056",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:30:27Z"
    },
    {
      "event": "unlabeled",
      "id": 13086962979,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMMCzUj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13086962979",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-08T03:16:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2156706861,
      "node_id": "IC_kwDOABII586AjLwt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2156706861",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-09T17:22:05Z",
      "updated_at": "2024-06-09T17:22:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is it an option to be more restrictive and only allow zero-value outputs as ephemeral anchors, for not having to deal with the concept of dust at all? Or, asked differently: what would be the motivation/benefit for users to ever create an anchor output with nValue > 0? (Note that I haven't looked too deep into the concept of ephemeral anchors and the predecessor PR #29001, so very likely I'm missing something obvious here, but I guess the answer could be interesting for other potential reviewers too.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2156706861",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2158409770,
      "node_id": "IC_kwDOABII586Aprgq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2158409770",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-10T13:39:44Z",
      "updated_at": "2024-06-10T13:41:33Z",
      "author_association": "MEMBER",
      "body": "@theStack the primary motivation is to cover cases where non-0 value is attached to handle cases where a smart contract may want to \"throw away\" a few sats to fees, but otherwise cannot because of the 0-fee requirement of this PR for transactions with ephemeral anchors. If the ephemeral anchor-having transaction had non-0-fee, that would allow endogenous incentives to get it mined on its own, leaving the dust in the utxo set. As an example from the LN spec, [trimmed outputs(https://github.com/lightning/bolts/blob/master/03-transactions.md#trimmed-outputs) are directly added to the commitment transaction fee. Instead, spec writers could have the value flow to the ephemeral anchor, which is then spent to fees by the child transaction. Example spec here: https://github.com/instagibbs/bolts/commits/zero_fee_commitment\r\n\r\nIt's a fairly narrow motivation, and honestly I don't love the timmed output to fees scheme, but also doesn't make the code anymore complicated, so I think it's worth consideration.\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2158409770",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13101773242,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMM7TG6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13101773242",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-10T13:39:45Z"
    },
    {
      "event": "subscribed",
      "id": 13101773269,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMM7THV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13101773269",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-10T13:39:45Z"
    },
    {
      "event": "labeled",
      "id": 13176898693,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMRZ4SF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13176898693",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T20:07:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2171839722,
      "node_id": "IC_kwDOABII586Bc6Tq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2171839722",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T20:07:18Z",
      "updated_at": "2024-06-16T20:07:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25953908933</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2171839722",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "comment_deleted",
      "id": 13177018561,
      "node_id": "CDE_lADOABII586LZ3ZQzwAAAAMRaVjB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13177018561",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T21:03:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13187175831,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMSBFWX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13187175831",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T14:54:11Z"
    },
    {
      "event": "commented",
      "id": 2173636274,
      "node_id": "IC_kwDOABII586Bjw6y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2173636274",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T14:54:38Z",
      "updated_at": "2024-06-17T14:54:38Z",
      "author_association": "MEMBER",
      "body": "rebased due to s/nVersion/version/ change for transactions causing a silent merge conflict",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2173636274",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "unlabeled",
      "id": 13188397178,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMSFvh6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13188397178",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T16:25:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13232158495,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMUsrcf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13232158495",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T17:07:51Z"
    },
    {
      "event": "labeled",
      "id": 13357997895,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMcMt9H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13357997895",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T00:27:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 13367910407,
      "node_id": "RTE_lADOABII586LZ3ZQzwAAAAMcyiAH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13367910407",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T15:15:01Z",
      "rename": {
        "from": "Ephemeral Anchors, take 2",
        "to": "Ephemeral Dust"
      }
    },
    {
      "event": "labeled",
      "id": 13372237355,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMdDCYr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13372237355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T21:51:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13381206681,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMdlQKZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13381206681",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-03T13:56:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13429477477,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMgdZBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13429477477",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T20:28:51Z"
    },
    {
      "event": "commented",
      "id": 2215221618,
      "node_id": "IC_kwDOABII586ECZly",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2215221618",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T20:30:03Z",
      "updated_at": "2024-07-08T20:30:03Z",
      "author_association": "MEMBER",
      "body": "rebased on master, and s/anchor/dust/ everywhere",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2215221618",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "unlabeled",
      "id": 13429949412,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMgfMPk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13429949412",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T21:09:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2228142149,
      "node_id": "IC_kwDOABII586EzsBF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2228142149",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-15T10:08:18Z",
      "updated_at": "2024-07-15T10:08:18Z",
      "author_association": "MEMBER",
      "body": "concept ACK",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2228142149",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2236753415,
      "node_id": "IC_kwDOABII586FUiYH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236753415",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T14:40:22Z",
      "updated_at": "2024-07-18T14:40:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept NACK\r\n\r\nThere's no reason to limit this behavior to TRUC/V3 transactions. The implementation should not ship with this restriction.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2236753415",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2237345861,
      "node_id": "IC_kwDOABII586FWzBF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2237345861",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T19:09:41Z",
      "updated_at": "2024-07-18T20:33:53Z",
      "author_association": "MEMBER",
      "body": "@petertodd I'll give a non-TRUC version another try and report back. I may have been over-thinking things. If it works out it will be very similar in code structure...\r\n\r\nedit: oh of course I already noted in OP: We don't allow individual transactions with 0-fee outside of TRUC, for now due to trimming computation concerns. Cluster mempool does away with this restriction entirely. I'll rework the code to upgrade to non-TRUC usage once cluster mempool hits.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2237345861",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13561652998,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMoVmcG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13561652998",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T19:09:43Z"
    },
    {
      "event": "subscribed",
      "id": 13561653018,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMoVmca",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13561653018",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T19:09:43Z"
    },
    {
      "event": "commented",
      "id": 2237833642,
      "node_id": "IC_kwDOABII586FYqGq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2237833642",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T01:09:09Z",
      "updated_at": "2024-07-19T01:09:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @petertodd I'll give a non-TRUC version another try and report back. I may have been over-thinking things. If it works out it will be very similar in code structure...\r\n> \r\n> edit: oh of course I already noted in OP: We don't allow individual transactions with 0-fee outside of TRUC, for now due to trimming computation concerns. Cluster mempool does away with this restriction entirely. I'll rework the code to upgrade to non-TRUC usage once cluster mempool hits.\r\n\r\nI think the worthwhile question here is why are 0-fee CPFP's required to signal TRUC/V3? I don't see any reason why transaction creators should be forced to adhere to the restrictive TRUC/V3 rules if they do not wish to.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2237833642",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13564753172,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMohbUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13564753172",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T01:09:10Z"
    },
    {
      "event": "subscribed",
      "id": 13564753177,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMohbUZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13564753177",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T01:09:10Z"
    },
    {
      "event": "commented",
      "id": 2238752561,
      "node_id": "IC_kwDOABII586FcKcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238752561",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T09:29:17Z",
      "updated_at": "2024-07-19T09:29:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK :+1: ",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2238752561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2239410595,
      "node_id": "IC_kwDOABII586FerGj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2239410595",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T14:59:51Z",
      "updated_at": "2024-07-19T14:59:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm also going to point out that restricting ephemeral dust transactions to zero fee seems to create protocol design problems around HTLCs: https://delvingbitcoin.org/t/ephemeral-anchors-and-mevil/383\r\n\r\nThe simplest solution with dust HTLCs is to just put the value towards mining fees. Forcing them to be put towards the keyless ephemeral output potentially creates incentive problems around stealing that output. If ephemeral dust transactions have fewer rules around them, that kind of design problem goes away and protocols can do what makes sense for them without trying to meet TRUC/V3 requirements.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2239410595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2239497457,
      "node_id": "IC_kwDOABII586FfATx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2239497457",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T15:50:27Z",
      "updated_at": "2024-07-19T15:50:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Forcing them to be put towards the keyless ephemeral output potentially creates incentive problems around stealing that output. \r\n\r\nNot really, because it will always be the miner that will steal it (since they can replace any spend by a spend to themselves). As was detailed in the delving post you're referencing, putting HTLC values in the keyless ephemeral output ensures that it's spent and doesn't pollute the utxo set, while putting the fees directly to the commitment transaction doesn't incentivize spending that output?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2239497457",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2239528767,
      "node_id": "IC_kwDOABII586FfH8_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2239528767",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T16:10:57Z",
      "updated_at": "2024-07-19T16:10:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Stealing an ephemeral anchor output can only be done in certain conditions, at specific ranges of values. It is not always profitable due to overheads, and you can reduce those overheads by doing complex things.\n\nThe game theory is much simpler if the dust HTLC funds go directly to fees.\n\nOn July 19, 2024 5:50:49 PM GMT+02:00, Bastien Teinturier ***@***.***> wrote:\n>> Forcing them to be put towards the keyless ephemeral output potentially creates incentive problems around stealing that output. \n>\n>Not really, because it will always be the miner that will steal it (since they can replace any spend by a spend to themselves). As was detailed in the delving post you're referencing, putting HTLC values in the keyless ephemeral output ensures that it's spent and doesn't pollute the utxo set, while putting the fees directly to the commitment transaction doesn't incentivize spending that output?\n>\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2239528767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13577328902,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMpRZkG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13577328902",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T16:27:20Z"
    },
    {
      "event": "commented",
      "id": 2239730901,
      "node_id": "IC_kwDOABII586Ff5TV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2239730901",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T17:32:18Z",
      "updated_at": "2024-07-19T18:33:50Z",
      "author_association": "MEMBER",
      "body": "Ok, the rework ended up being quite easy.\r\n\r\nPushed an update that generalizes to non-TRUC transactions, but as noted earlier, individual transactions have to meet minrelay for now unless they are TRUC, see/divert discussion here for that specific point: https://github.com/bitcoin/bitcoin/pull/26933 . If this restriction goes away, it will be usable(see tests I added with v2 transactions at the bottom where I checked it). Note that we are still constrained to 1P1C relay until we get general package relay.\r\n\r\n---\r\n\r\nre:0-fee, yes it's obviously sub-optimal for transaction creation for things like trimmed values. There's no simple way that I can think of that ensures that dust isn't mined. E.g., `TxA` with dust, followed by `TxB` spending the dust. Both enter mempool. Then `TxB'` replaces `TxB`, but doesn't spend the dust output from `TxA`. If `TxA` has fees at or above minrelay, it may well be mined on its own.\r\n\r\nI don't have any clean ways of doing that at present. If we figure it out, it's another clean relaxation that should have easy logic to follow.\r\n\r\n@glozow had suggested long ago that we could allow any fee under minrelay for ephemeral tx, but this is still pretty limited in what amounts are allowed for fees. I'm not convinced it's worth it vs thinking harder about figuring out how to allow unbounded feerates.\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2239730901",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13578775612,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMpW6w8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13578775612",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T17:32:19Z"
    },
    {
      "event": "subscribed",
      "id": 13578775627,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMpW6xL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13578775627",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T17:32:19Z"
    },
    {
      "event": "commented",
      "id": 2242378141,
      "node_id": "IC_kwDOABII586Fp_md",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2242378141",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T08:25:37Z",
      "updated_at": "2024-07-22T08:25:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Stealing an ephemeral anchor output can only be done in certain conditions, at specific ranges of values. It is not always profitable due to overheads, and you can reduce those overheads by doing complex things.\r\n\r\nI don't understand this hand-wavy comment, can you detail? I don't see any complexity here. Whenever a miner would include a transaction spending an ephemeral output in a block:\r\n\r\n- if that ephemeral output is economical, the miner replaces the spending transaction by one that sends funds to themselves\r\n- otherwise, they keep the existing transaction (which in most cases will contain an unrelated input to bring fees)\r\n\r\nSounds trivial enough?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2242378141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "labeled",
      "id": 13604213017,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMq39EZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13604213017",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T16:54:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2243406819,
      "node_id": "IC_kwDOABII586Ft6vj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2243406819",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T16:54:43Z",
      "updated_at": "2024-07-22T16:54:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27674254741</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2243406819",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13604610452,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMq5eGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13604610452",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T17:30:26Z"
    },
    {
      "event": "reviewed",
      "id": 2192228537,
      "node_id": "PRR_kwDOABII586CqsC5",
      "url": null,
      "actor": null,
      "commit_id": "2d7ec2f6719eb2ecdf67a7536a8731830ae26981",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Mahmoud198425",
        "id": 172866158,
        "node_id": "U_kgDOCk26bg",
        "avatar_url": "https://avatars.githubusercontent.com/u/172866158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mahmoud198425",
        "html_url": "https://github.com/Mahmoud198425",
        "followers_url": "https://api.github.com/users/Mahmoud198425/followers",
        "following_url": "https://api.github.com/users/Mahmoud198425/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mahmoud198425/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mahmoud198425/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mahmoud198425/subscriptions",
        "organizations_url": "https://api.github.com/users/Mahmoud198425/orgs",
        "repos_url": "https://api.github.com/users/Mahmoud198425/repos",
        "events_url": "https://api.github.com/users/Mahmoud198425/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mahmoud198425/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2192228537",
      "submitted_at": "2024-07-22T18:11:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "unlabeled",
      "id": 13606538775,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMrA04X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13606538775",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T20:30:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2192421044,
      "node_id": "PRR_kwDOABII586CrbC0",
      "url": null,
      "actor": null,
      "commit_id": "2d7ec2f6719eb2ecdf67a7536a8731830ae26981",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2192421044",
      "submitted_at": "2024-07-22T20:47:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13608776931,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMrJXTj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13608776931",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T02:08:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13608793022,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMrJbO-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13608793022",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T02:10:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13636025527,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMsxTy3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13636025527",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-24T20:28:14Z"
    },
    {
      "event": "commented",
      "id": 2248844497,
      "node_id": "IC_kwDOABII586GCqTR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2248844497",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-24T20:29:13Z",
      "updated_at": "2024-07-24T20:29:13Z",
      "author_association": "MEMBER",
      "body": "added fuzz and unit tests which cover more than the functional tests can alone",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2248844497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13636067252,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMsxd-0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13636067252",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-24T20:32:49Z"
    },
    {
      "event": "labeled",
      "id": 13636067968,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAMsxeKA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13636067968",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-24T20:32:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2248850091,
      "node_id": "IC_kwDOABII586GCrqr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2248850091",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-24T20:32:55Z",
      "updated_at": "2024-07-24T20:32:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27880415572</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2248850091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "unlabeled",
      "id": 13637834679,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAMs4Ne3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13637834679",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-25T00:51:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13665399212,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMuhXGs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13665399212",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T20:00:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13669492294,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMuw-ZG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13669492294",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T20:30:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13682388549,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMviK5F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13682388549",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-29T15:19:42Z"
    },
    {
      "event": "commented",
      "id": 2264791372,
      "node_id": "IC_kwDOABII586G_flM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2264791372",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T07:53:59Z",
      "updated_at": "2024-08-02T07:53:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like we've created a new, rare, pinning vector here: in the event that a dust-generating transaction is reorged back into the mempool, transactions that otherwise could have spent an ordinary output of that transaction alone now can't be accepted into the mempool because they fail the \"spends all parent dust\" check.\r\n\r\nFor example, imagine a coinjoin is funded by a transaction A containing a dust output. After a reorg, the transaction A gets forced back into the mempool. Now the coinjoin (or double-spends of it) fails the spends all parents dust check, because it doesn't spend the dust of A, and A may never get mined due to fee-rates increasing.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2264791372",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2265468005,
      "node_id": "IC_kwDOABII586HCExl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2265468005",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T14:01:33Z",
      "updated_at": "2024-08-02T19:18:36Z",
      "author_association": "MEMBER",
      "body": "@petertodd I believe that's incorrect, and looks like I wrote a test case for this: https://github.com/bitcoin/bitcoin/pull/30239/commits/63e097092253b25fa9d72af167d83d911c805c9c#diff-f3bb3623abbd14a7140e405175278c9187eb8c2cf6ff0279700ac507c5f4180cR334\r\n\r\nI show that a child spend of parent tx gets into mempool even if it has dust of its own, *and* fails to spend parent's dust.\r\n\r\nReorgs should hopefully be expensive, so we simply allow things back in mempool even if the spentness is violated.\r\n\r\nYou can glance at the new usages of `bypass_limits` in the code changes to see. I should probably add a test showing that a tx with *two* dust or fee-having can't use `bypass_limits`.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2265468005",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13742305793,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMzGvIB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13742305793",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T14:01:35Z"
    },
    {
      "event": "subscribed",
      "id": 13742305810,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMzGvIS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13742305810",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T14:01:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13742982706,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMzJUYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13742982706",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T14:45:47Z"
    },
    {
      "event": "referenced",
      "id": 13743044550,
      "node_id": "REFE_lADOABII586LZ3ZQzwAAAAMzJjfG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13743044550",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2aff9a36c352640a263e8b5de469710f7e80eb54",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aff9a36c352640a263e8b5de469710f7e80eb54",
      "created_at": "2024-08-02T14:50:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13744638658,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAMzPorC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13744638658",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T17:06:33Z"
    },
    {
      "event": "commented",
      "id": 2265812068,
      "node_id": "IC_kwDOABII586HDYxk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2265812068",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T17:06:54Z",
      "updated_at": "2024-08-02T17:06:54Z",
      "author_association": "MEMBER",
      "body": "rebased on top of master to pick up PayToAnchor support for those who would like to test them together",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2265812068",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2266030372,
      "node_id": "IC_kwDOABII586HEOEk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2266030372",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T19:38:50Z",
      "updated_at": "2024-08-02T19:38:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @petertodd I believe that's incorrect, and looks like I wrote a test case for this: [63e0970#diff-f3bb3623abbd14a7140e405175278c9187eb8c2cf6ff0279700ac507c5f4180cR334](https://github.com/bitcoin/bitcoin/commit/63e097092253b25fa9d72af167d83d911c805c9c#diff-f3bb3623abbd14a7140e405175278c9187eb8c2cf6ff0279700ac507c5f4180cR334)\r\n> \r\n> I show that a child spend of parent tx gets into mempool even if it has dust of its own, _and_ fails to spend parent's dust.\r\n> \r\n> Reorgs should hopefully be expensive, so we simply allow things back in mempool even if the spentness is violated.\r\n> \r\n> You can glance at the new usages of `bypass_limits` in the code changes to see. I should probably add a test showing that a tx with _two_ dust or fee-having can't use `bypass_limits`.\r\n\r\nI think you're misunderstanding the scenario I'm talking about. I'm not saying that transactions in a block won't get back into your mempool when your node reorgs the block - they of course do get it due to the `bypass_limits` flag. What I'm saying is that *subsequent* transactions won't be accepted, resulting in a pin.\r\n\r\nConcretely, imagine that the top block contains transaction A, which contains a dust output. Transaction B, which spends an output of A, can be accepted into your mempool as A is mined, and we can double-spend B as usual with a higher fee-rate.\r\n\r\nNow let's reorg out the top block. Transaction A is forced into the mempool using `bypass_limits`; transaction B remains in the mempool. However, we can no longer double-spend B with a higher fee-rate, as any B2 is rejected on the basis that it does not spend the dust output of A. Thus, B is pinned by the existence of A in your mempool.\r\n\r\nWhile this is a relatively rare scenario, it's not *that* rare. And there's probably circumstances where attackers could take advantage of this opportunistically by waiting until they happened to have a transaction in the right state to use in an attack.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2266030372",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 13746040337,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAAMzU-4R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13746040337",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T19:38:51Z"
    },
    {
      "event": "subscribed",
      "id": 13746040353,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAAMzU-4h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13746040353",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T19:38:51Z"
    },
    {
      "event": "commented",
      "id": 2266047071,
      "node_id": "IC_kwDOABII586HESJf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2266047071",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T19:51:32Z",
      "updated_at": "2024-08-02T19:51:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I should point out that the TRUC code may suffer from this same category of problem around reorgs too...",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2266047071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2266067044,
      "node_id": "IC_kwDOABII586HEXBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2266067044",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T20:06:52Z",
      "updated_at": "2024-08-02T20:06:52Z",
      "author_association": "MEMBER",
      "body": "Got it. Normally a reorg like this would result in an effective feerate reduction, as the entire package is now having to be paid for. With the dust spending restriction, it makes it *impossible* to replace later, exactly like a package limit pin.\r\n\r\n> I should point out that the TRUC code may suffer from this same category of problem around reorgs too...\r\n\r\nDepends on the topo but yep, post-reorg package limits may be hit unexpectedly. Parent->child->grandchild, where parent was formerly confirmed, as an example. Regular chain limits are also possible to hit, f.e. if the re-entered parent was 100kvB, or full chain limits hit.\r\n\r\nCircling back to dust, I suppose bypass-ness of a transaction entry(the re-entered parent in this context) could be tracked and spenders could bypass the dust spentness check as well? Will mull it over.\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2266067044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "commented",
      "id": 2267097301,
      "node_id": "IC_kwDOABII586HISjV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2267097301",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-03T18:37:10Z",
      "updated_at": "2024-08-03T18:37:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Got it. Normally a reorg like this would result in an effective feerate reduction, as the entire package is now having to be paid for. With the dust spending restriction, it makes it _impossible_ to replace later, exactly like a package limit pin.\r\n\r\nExactly. And unlike the inherent pin possible by the fact that the reorged transaction could simply be big, this variant works even if the transaction is small, making pulling it off potentially a lot easier.\r\n\r\nPersonally I'd consider removing the restrictions on spending outputs of ephemeral dust transactions. For what Core is trying to accomplish here, I think it's enough that the transaction was accepted into your mempool with the dust being spent. That's enough of a nudge to get the vast majority of use-cases to do what we want them to do. It's more important that this feature can be used securely by L2 implementations, without having to worry about security problems from complex edge cases.\r\n\r\nPeople who want to actually create dust intentionally can do so pretty easily anyway by just sending their transactions to one of the pools that doesn't enforce the dust limit; most of the recent growth is probably due to intentional token protocols doing things for which rules like this are irrelevant.\r\n\r\nSuppose we do remove that restriction. You would be able to create an unspent dust UTXO by broadcasting a transaction package creating the UTXO in A, a transaction with a dust output and a non-dust output, and then spending it with a two input transaction B spending both those outputs. Then you double-spend B to remove the dust input while still providing miners an incentive to mine A.\r\n\r\nThing is, to do this you have to spend about as much money in fees as it would have cost you in lost sats to create an unspent non-dust output instead. Probably more, because the dust limit is based on an unrealistically low 1sat/vb fee-rate. This isn't actually any worse than the status quo for an attacker trying to create dust.\r\n\r\nSimilarly, I don't think we actually need the restriction only having one dust output per transaction. If they've all been spent to get the transaction into your mempool, playing games to get them unspent costs as much or more money as just creating non-dust UTXOs.\r\n\r\n> Regular chain limits are also possible to hit, f.e. if the re-entered parent was 100kvB, or full chain limits hit.\r\n\r\nWhile I'm not sure off the top of my head if this is actually true, it *should* be the case that RBF's of existing transactions should always be allowed even if package limits have been exceeded somehow. I proposed this principle awhile back as the \"always replaceable invariant\": the mempool should always allow you to replace a transaction already in the mempool with a similar one at higher fee so that you can make forward progress.\r\n\r\nThis specific issue contradicts that principal because it's a hard restriction on the type of transaction allowed in a specific circumstance.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2267097301",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "labeled",
      "id": 13908946634,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAM9Ca7K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13908946634",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:06:09Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14047508028,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANFS_Y8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14047508028",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T14:13:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14047725765,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANFT0jF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14047725765",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T14:19:47Z"
    },
    {
      "event": "unlabeled",
      "id": 14059624467,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAANGBNgT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14059624467",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T10:42:17Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14083747175,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANHdO1n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14083747175",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T15:48:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14084462511,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANHf9ev",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14084462511",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T16:23:29Z"
    },
    {
      "event": "labeled",
      "id": 14107545012,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAANI4A20",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14107545012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T22:44:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14107905832,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANI5Y8o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14107905832",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T00:22:34Z"
    },
    {
      "event": "unlabeled",
      "id": 14108004615,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAANI5xEH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14108004615",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T00:48:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14118822720,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANJjCNA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14118822720",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T17:28:45Z"
    },
    {
      "event": "commented",
      "id": 2327111683,
      "node_id": "IC_kwDOABII586KtOgD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2327111683",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T17:57:24Z",
      "updated_at": "2024-09-03T17:57:24Z",
      "author_association": "MEMBER",
      "body": "Reworked the PR to relax `IsStandardTx` to allow a single dust output, and hopefully simplified the remaining checks that enforces spend of dusty parent's dust. This should assure the same mempool invariants as before, but with more understandable and minimal changes to logic flow.\r\n\r\n@petertodd \r\n\r\n> It's more important that this feature can be used securely by L2 implementations, without having to worry about security problems from complex edge cases.\r\n\r\nI can't speak for all wallets, but at least for CLN the fresh spend of funding outputs will be detected and the anchor spending will start anew. I think for first cut the tradeoff of having invariants that are easy to reason about is best. Given that there are actionable things wallets can do and the minimal complexity, I'm sticking with the overall current approach.\r\n\r\n> While I'm not sure off the top of my head if this is actually true, it should be the case that RBF's of existing transactions should always be allowed even if package limits have been exceeded somehow. \r\n\r\nToday's mempool does a suboptimal job of dealing with chain limits and RBFs. Assuming cluster mempool, we still have the issue of what to do with cluster limits that are exceeded even after removing RBF conflicts, if any. This has been called \"sibling eviction\" and in general seems doable in a DoS-resistant way but is left to future work. It's a problem I'm very interested in solving post-cluster mempool.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2327111683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 14119132537,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAANJkN15",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14119132537",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T17:57:25Z"
    },
    {
      "event": "subscribed",
      "id": 14119132548,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAANJkN2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14119132548",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T17:57:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14121027530,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANJrcfK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121027530",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T20:46:14Z"
    },
    {
      "event": "commented",
      "id": 2327406917,
      "node_id": "IC_kwDOABII586KuWlF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2327406917",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T20:46:19Z",
      "updated_at": "2024-09-03T20:46:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29626041615</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2327406917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "labeled",
      "id": 14121028220,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAANJrcp8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121028220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T20:46:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14121092479,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANJrsV_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14121092479",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T20:52:42Z"
    },
    {
      "event": "unlabeled",
      "id": 14123379532,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAANJ0atM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14123379532",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T02:40:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2328715995,
      "node_id": "IC_kwDOABII586KzWLb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2328715995",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T11:39:02Z",
      "updated_at": "2024-09-04T11:39:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Today's mempool does a suboptimal job of dealing with chain limits and RBFs. Assuming cluster mempool, we still have the issue of what to do with cluster limits that are exceeded even after removing RBF conflicts, if any. This has been called \"sibling eviction\" and in general seems doable in a DoS-resistant way but is left to future work. It's a problem I'm very interested in solving post-cluster mempool.\r\n\r\nWhat I mean is, if you are doing an RBF replacement of one transaction with another transaction paying a higher fee-rate, with the same or smaller size, this should always be allowed even if somehow your mempool got into a state where a cluster limit was exceeded.\r\n\r\nPoint is, the replacement isn't making anything worse, so it should be allowed. Sibling eviction isn't needed to support this case.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2328715995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "reviewed",
      "id": 2278092199,
      "node_id": "PRR_kwDOABII586HyO2n",
      "url": null,
      "actor": null,
      "commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good. New rules seem easier to reason about (up to 1 as long as 0-fee, must spend all of my parent's dust no matter what).\r\n\r\nCan you remind me of the use cases of a keyed dust output again? It seems slightly safer to require ephemeral dust be P2A, as it would allow anybody to clean them up in case something goes wrong, but perhaps too narrow.\r\n\r\nAdditionally, could add a release note fragment.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2278092199",
      "submitted_at": "2024-09-04T19:56:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14149166836,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANLWyb0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14149166836",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T15:17:23Z"
    },
    {
      "event": "commented",
      "id": 2332066227,
      "node_id": "IC_kwDOABII586LAIGz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2332066227",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T15:40:21Z",
      "updated_at": "2024-09-05T15:44:14Z",
      "author_association": "MEMBER",
      "body": "With the new changes, I'm considering disallowing entry into the mempool if *either* the base fee or the modified fee is non-0. If miners really want to mine things generally with 0 fee that's one thing, but offering an interface to avoid the dust cleanup seems suboptimal.\r\n\r\n@glozow \r\n\r\n> Can you remind me of the use cases of a keyed dust output again?\r\n\r\nWhat I'm calling \"keyed\" anchors would be used anytime you don't want a third party to be able to run off with the utxo. As a motivating example, in Ark there is the concept of a \"forfeit transaction\" which spends a \"connector output\". The connector output would ideally be 0-value, but you would not want that utxo spend by anyone, because this would cause financial loss for the coordinator of the service: https://arkdev.info/docs/learn/concepts#forfeit-transaction\r\n\r\nNote that this specific use-case likely doesn't work as it involves a tree of dust, but the connector idea in general demonstrates how it could be used.\r\n\r\nAnother related example is connector outputs in BitVM2: https://bitvm.org/bitvm2.html . You could imag\r\n\r\n>  It seems slightly safer to require ephemeral dust be P2A, as it would allow anybody to clean them up in case something goes wrong, but perhaps too narrow.\r\n\r\nIn general. if we have 0-value dust, I find it unlikely to hope that miners will clean it up for no reason?\r\n\r\nI'm also pretty hesitant to guess what people will find useful in general, e.g., if they're worried about third party replacement cycling, they can be more cautious. The can also include a tapscript branch for anyonecanspend cleanup, just like LN does today!\r\n\r\nI feel moderately strongly about this, but of course relaxing policy further later is also another valid choice.\r\n\r\n> Additionally, could add a release note fragment.\r\n\r\nAdded",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2332066227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 14149485404,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAANLYANc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14149485404",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T15:40:22Z"
    },
    {
      "event": "subscribed",
      "id": 14149485428,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAANLYAN0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14149485428",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T15:40:22Z"
    },
    {
      "event": "commented",
      "id": 2332421427,
      "node_id": "IC_kwDOABII586LBe0z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2332421427",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T18:50:05Z",
      "updated_at": "2024-09-05T18:50:05Z",
      "author_association": "MEMBER",
      "body": "> I'm also pretty hesitant to guess what people will find useful in general, e.g., if they're worried about third party replacement cycling, they can be more cautious. The can also include a tapscript branch for anyonecanspend cleanup, just like LN does today!\r\n\r\nSeems reasonable to want keyed. Mostly wanted the rationale to be written up here.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2332421427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14153590257,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANLnqXx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14153590257",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T22:13:05Z"
    },
    {
      "event": "commented",
      "id": 2332719825,
      "node_id": "IC_kwDOABII586LCnrR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2332719825",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T22:13:32Z",
      "updated_at": "2024-09-05T22:13:32Z",
      "author_association": "MEMBER",
      "body": "@glozow copied some of the text to the OP",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2332719825",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 14153593166,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAANLnrFO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14153593166",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T22:13:33Z"
    },
    {
      "event": "subscribed",
      "id": 14153593180,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAANLnrFc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14153593180",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-05T22:13:33Z"
    },
    {
      "event": "labeled",
      "id": 14156291284,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAANLx9zU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14156291284",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T04:10:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2334086913,
      "node_id": "IC_kwDOABII586LH1cB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334086913",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T13:41:22Z",
      "updated_at": "2024-09-06T13:41:22Z",
      "author_association": "MEMBER",
      "body": "CI failures seem like spurious timeouts of random tests",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2334086913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14166144150,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANMXjSW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14166144150",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T19:11:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14187712567,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANNp1A3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14187712567",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T18:21:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14187834542,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANNqSyu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14187834542",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T18:32:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14187933297,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANNqq5x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14187933297",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T18:41:29Z"
    },
    {
      "event": "unlabeled",
      "id": 14198301413,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAANOSOLl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14198301413",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T12:46:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2346256796,
      "node_id": "IC_kwDOABII586L2Qmc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2346256796",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T13:15:48Z",
      "updated_at": "2024-09-12T13:15:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> In general. if we have 0-value dust, I find it unlikely to hope that miners will clean it up for no reason?\r\n\r\nAnyone can pay fees to clean up the dust. Doesn't have to be miners specifically.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2346256796",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "reviewed",
      "id": 2301347857,
      "node_id": "PRR_kwDOABII586JK8gR",
      "url": null,
      "actor": null,
      "commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Finer comb of the first 2 commits",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2301347857",
      "submitted_at": "2024-09-12T21:34:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "mentioned",
      "id": 14244564002,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAANRCswi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14244564002",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T07:51:43Z"
    },
    {
      "event": "subscribed",
      "id": 14244564013,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAANRCswt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14244564013",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T07:51:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14250042779,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANRXmWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14250042779",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T14:39:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14474667636,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANeweZ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14474667636",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T14:59:32Z"
    },
    {
      "event": "commented",
      "id": 2413476340,
      "node_id": "IC_kwDOABII586P2rn0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2413476340",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T10:13:50Z",
      "updated_at": "2024-10-15T10:13:50Z",
      "author_association": "MEMBER",
      "body": "@fanquake can I get a 29.0 milestone for this?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2413476340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "mentioned",
      "id": 14654764223,
      "node_id": "MEE_lADOABII586LZ3ZQzwAAAANpffS_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14654764223",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T10:13:52Z"
    },
    {
      "event": "subscribed",
      "id": 14654764247,
      "node_id": "SE_lADOABII586LZ3ZQzwAAAANpffTX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14654764247",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T10:13:52Z"
    },
    {
      "event": "milestoned",
      "id": 14654806693,
      "node_id": "MIE_lADOABII586LZ3ZQzwAAAANpfpql",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14654806693",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T10:16:56Z",
      "milestone": {
        "title": "29.0"
      }
    },
    {
      "event": "reviewed",
      "id": 2368652846,
      "node_id": "PRR_kwDOABII586NLsYu",
      "url": null,
      "actor": null,
      "commit_id": "2ae711638e200f53b4c2967042cf230ce6709d9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Read through the code (except for the fuzz test, which I plan to go back and review). Concept ACK.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2368652846",
      "submitted_at": "2024-10-16T10:42:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14683739497,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANrOBVp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14683739497",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T16:03:09Z"
    },
    {
      "event": "reviewed",
      "id": 2378496425,
      "node_id": "PRR_kwDOABII586NxPmp",
      "url": null,
      "actor": null,
      "commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2378496425",
      "submitted_at": "2024-10-18T16:41:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14767078617,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANwL7zZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14767078617",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:31:16Z"
    },
    {
      "event": "reviewed",
      "id": 2382979168,
      "node_id": "PRR_kwDOABII586OCWBg",
      "url": null,
      "actor": null,
      "commit_id": "7defd31351e9d650ab67df88240a9e898f85abb1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2382979168",
      "submitted_at": "2024-10-21T18:18:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14770707233,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANwZxsh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14770707233",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T20:07:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14770967558,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAANwaxQG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14770967558",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T20:29:43Z"
    },
    {
      "event": "commented",
      "id": 2427657480,
      "node_id": "IC_kwDOABII586Qsx0I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2427657480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T20:29:49Z",
      "updated_at": "2024-10-21T20:29:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/31849856149</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2427657480",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "labeled",
      "id": 14770968420,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAANwaxdk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14770968420",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T20:29:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 14771438965,
      "node_id": "UE_lADOABII586LZ3ZQzwAAAANwckV1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14771438965",
      "actor": {
        "login": "gsannikov",
        "id": 52405655,
        "node_id": "MDQ6VXNlcjUyNDA1NjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52405655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsannikov",
        "html_url": "https://github.com/gsannikov",
        "followers_url": "https://api.github.com/users/gsannikov/followers",
        "following_url": "https://api.github.com/users/gsannikov/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gsannikov/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gsannikov/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gsannikov/subscriptions",
        "organizations_url": "https://api.github.com/users/gsannikov/orgs",
        "repos_url": "https://api.github.com/users/gsannikov/repos",
        "events_url": "https://api.github.com/users/gsannikov/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gsannikov/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T21:10:51Z"
    },
    {
      "event": "unlabeled",
      "id": 14771865286,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAANweMbG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14771865286",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T21:55:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2395962778,
      "node_id": "PRR_kwDOABII586Oz32a",
      "url": null,
      "actor": null,
      "commit_id": "4ffb542b6bbcfbc51d42db91e271ed4140c2a7b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks pretty good, I think most of my comments are nitty.  Along those lines, you may want to retouch the commit message of fcbfed4630bdee6c52644c89e972ba7c130f47d5, as I think there's a missing paren.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2395962778",
      "submitted_at": "2024-10-26T10:53:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14904592456,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAN4YghI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14904592456",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T14:26:25Z"
    },
    {
      "event": "commented",
      "id": 2439723285,
      "node_id": "IC_kwDOABII586RazkV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2439723285",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T20:10:08Z",
      "updated_at": "2024-10-26T20:10:08Z",
      "author_association": "MEMBER",
      "body": "Code review ACK e01bb3a06693efc77a173afdf25ed7ba631316a2\r\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2439723285",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "review_requested",
      "id": 14911983682,
      "node_id": "RRE_lADOABII586LZ3ZQzwAAAAN40tBC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14911983682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T20:10:15Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14911983710,
      "node_id": "RRE_lADOABII586LZ3ZQzwAAAAN40tBe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14911983710",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T20:10:16Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 14990683551,
      "node_id": "LE_lADOABII586LZ3ZQzwAAAAN9g62f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14990683551",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:05:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14990887595,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAN9hsqr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14990887595",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:23:38Z"
    },
    {
      "event": "commented",
      "id": 2445259353,
      "node_id": "IC_kwDOABII586Rv7JZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2445259353",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:23:50Z",
      "updated_at": "2024-10-29T20:23:50Z",
      "author_association": "MEMBER",
      "body": "rebased on master due to conflict ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2445259353",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "unlabeled",
      "id": 14991874916,
      "node_id": "UNLE_lADOABII586LZ3ZQzwAAAAN9ldtk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14991874916",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T22:09:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2328771065,
      "node_id": "PRR_kwDOABII586Kzjn5",
      "url": null,
      "actor": null,
      "commit_id": "40377e810076b639b4cc7a1ddf1488a1e2759432",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nMostly looked and reasoned about the core commit 92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c so far. From what I understand the \"only one dust output\" limit would not be strictly necessary and is far less important than the other two rules (must be 0-fee, child must spend all dust from the parent) in order to disisincentivize creating dust UTXOs, or am I missing something?\r\n\r\nWhat I left below are largely nits and follow-up ideas, feel free to ignore. Still want to look deeper into unit tests and the fuzzer.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2328771065",
      "submitted_at": "2024-11-01T00:00:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI4NzMzNTExZGU5MDczZmQ5MjNkODNiYzQzZmNhMTM1M2U5MDQxYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28733511de9073fd923d83bc43fca1353e9041aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/28733511de9073fd923d83bc43fca1353e9041aa",
      "tree": {
        "sha": "fcac95220a3e4cf3a487faa896d43f9a3fba40db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcac95220a3e4cf3a487faa896d43f9a3fba40db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97b790e844abd2f92c928239a7dc786d37fad18b",
          "sha": "97b790e844abd2f92c928239a7dc786d37fad18b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97b790e844abd2f92c928239a7dc786d37fad18b"
        }
      ],
      "message": "functional test: Add new -dustrelayfee=0 test case\n\nThis test would catch regressions where ephemeral\ndust checks are being erroneously applied on outputs\nthat are not actually dust.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-01T13:44:30Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-09-13T14:27:15Z"
      },
      "sha": "28733511de9073fd923d83bc43fca1353e9041aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1YzU2NGEyNGY5NmVjMzg0YjJkZTY4YmY4N2U2ZWIzYWQ5MjM5ZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
      "tree": {
        "sha": "7d425c872273bb8368e28fb2b71a0ae31117da6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d425c872273bb8368e28fb2b71a0ae31117da6a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28733511de9073fd923d83bc43fca1353e9041aa",
          "sha": "28733511de9073fd923d83bc43fca1353e9041aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/28733511de9073fd923d83bc43fca1353e9041aa"
        }
      ],
      "message": "policy: Allow dust in transactions, spent in-mempool\n\nAlso known as Ephemeral Dust.\n\nWe try to ensure that dust is spent in blocks by requiring:\n  - ephemeral dust tx is 0-fee\n  - ephemeral dust tx only has one dust output\n  - If the ephemeral dust transaction has a child,\n    the dust is spent by by that child.\n\n0-fee requirement means there is no incentive to mine\na transaction which doesn't have a child bringing its\nown fees for the transaction package.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-01T13:44:30Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-07-19T16:25:23Z"
      },
      "sha": "d5c564a24f96ec384b2de68bf87e6eb3ad9239d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQxNDdkOTI5ZjUwOTNmNzFjMzljYjdlZmJiMGRkMzg4OGY2YzgxMTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d147d929f5093f71c39cb7efbb0dd3888f6c8114",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d147d929f5093f71c39cb7efbb0dd3888f6c8114",
      "tree": {
        "sha": "8e71e0cb866fa1569fa72cf8029b6c02d844fd19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e71e0cb866fa1569fa72cf8029b6c02d844fd19"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
          "sha": "d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c564a24f96ec384b2de68bf87e6eb3ad9239d2"
        }
      ],
      "message": "rpc: disallow in-mempool prioritisation of dusty tx",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-01T13:44:37Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-10-01T14:28:28Z"
      },
      "sha": "d147d929f5093f71c39cb7efbb0dd3888f6c8114"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhN2M5MGE5MWFkY2Y4YWQ5ZDZiOTRkNWQxNzc5N2NmZDBlYjUyMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228",
      "tree": {
        "sha": "64a6a4fe47db5977ad3c1e457808a881d311c0b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64a6a4fe47db5977ad3c1e457808a881d311c0b1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d147d929f5093f71c39cb7efbb0dd3888f6c8114",
          "sha": "d147d929f5093f71c39cb7efbb0dd3888f6c8114",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d147d929f5093f71c39cb7efbb0dd3888f6c8114"
        }
      ],
      "message": "functional test: Add ephemeral dust tests",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-01T13:44:37Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-07-19T16:26:09Z"
      },
      "sha": "aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15068596458,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAOCKIjq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15068596458",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-01T13:56:19Z"
    },
    {
      "event": "commented",
      "id": 2453089942,
      "node_id": "IC_kwDOABII586SNy6W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2453089942",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-02T18:41:45Z",
      "updated_at": "2024-11-02T18:41:45Z",
      "author_association": "MEMBER",
      "body": "ACK 51c2394eb8158113e73659f4ae65c237813bd5d2",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2453089942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "review_requested",
      "id": 15082455034,
      "node_id": "RRE_lADOABII586LZ3ZQzwAAAAOC-__6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15082455034",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-02T18:41:51Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2412016718,
      "node_id": "PRR_kwDOABII586PxHRO",
      "url": null,
      "actor": null,
      "commit_id": "6fa10b4537b03b1746fd899de20b6f10dd6e15f0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2412016718",
      "submitted_at": "2024-11-04T02:00:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "review_requested",
      "id": 15097220530,
      "node_id": "RRE_lADOABII586LZ3ZQzwAAAAOD3U2y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15097220530",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T02:00:40Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhNmE3ZjljNjNjMmRlNWEwZjY0YTZhZjVlMDAzYmJhOGY0ZTlmOTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96",
      "tree": {
        "sha": "cbb49fd645435436298f58b47149091746c939b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbb49fd645435436298f58b47149091746c939b4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228",
          "sha": "aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa7c90a91adcf8ad9d6b94d5d17797cfd0eb5228"
        }
      ],
      "message": "test: Add CheckMempoolEphemeralInvariants\n\nChecks that transactions in mempool with dust\nfollow expected invariants.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-04T14:20:15Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-07-24T16:51:24Z"
      },
      "sha": "0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIwZjYxMzY1NTlhMmI4YmQzMmU0M2Q4N2EzYWMyNDQ1MTQwNGQ5YjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0f6136559a2b8bd32e43d87a3ac24451404d9b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b0f6136559a2b8bd32e43d87a3ac24451404d9b0",
      "tree": {
        "sha": "d1077f6906575576ece8b4c4511f1bf349537e8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1077f6906575576ece8b4c4511f1bf349537e8e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96",
          "sha": "0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6a7f9c63c2de5a0f64a6af5e003bba8f4e9f96"
        }
      ],
      "message": "fuzz: add ephemeral_package_eval harness\n\nWorks a bit harder to get ephemeral dust\ntransactions into the mempool.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-04T14:20:15Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-07-24T16:52:15Z"
      },
      "sha": "b0f6136559a2b8bd32e43d87a3ac24451404d9b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ3MzY1MGQ0Y2UxMzU4ZjRhY2Y0NjYyNzY5NTRjMjBiZmUxMTBiYTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73650d4ce1358f4acf466276954c20bfe110ba3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d73650d4ce1358f4acf466276954c20bfe110ba3",
      "tree": {
        "sha": "221717d0dd70d7b3be3c81872d934bab6a4a7ded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/221717d0dd70d7b3be3c81872d934bab6a4a7ded"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0f6136559a2b8bd32e43d87a3ac24451404d9b0",
          "sha": "b0f6136559a2b8bd32e43d87a3ac24451404d9b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b0f6136559a2b8bd32e43d87a3ac24451404d9b0"
        }
      ],
      "message": "test: unit test for CheckEphemeralSpends",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-04T14:20:15Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-09-03T17:21:38Z"
      },
      "sha": "d73650d4ce1358f4acf466276954c20bfe110ba3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNkYmE2YzFjMWUxMzgxNmEwYzNjYTFiOWZkMjAxZWU0NjZiYjc0YzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0",
      "tree": {
        "sha": "25f62578f3fedcb1800cc1ed51325f987223a046",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25f62578f3fedcb1800cc1ed51325f987223a046"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73650d4ce1358f4acf466276954c20bfe110ba3",
          "sha": "d73650d4ce1358f4acf466276954c20bfe110ba3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d73650d4ce1358f4acf466276954c20bfe110ba3"
        }
      ],
      "message": "Add release note for ephemeral dust",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-04T14:20:15Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-09-05T15:39:11Z"
      },
      "sha": "3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEzMWJlZDE5YmRmYzkyMjMyOGNhZDk3ODFmYTkxMjJiNjgxMGE4ZmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/131bed19bdfc922328cad9781fa9122b6810a8fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/131bed19bdfc922328cad9781fa9122b6810a8fd",
      "tree": {
        "sha": "0daf140b494794bd6df9d00829d63e483dc2a827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0daf140b494794bd6df9d00829d63e483dc2a827"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0",
          "sha": "3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3dba6c1c1e13816a0c3ca1b9fd201ee466bb74c0"
        }
      ],
      "message": "bench: Add basic CheckEphemeralSpends benchmark",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-11-04T14:20:15Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-10-21T19:55:26Z"
      },
      "sha": "131bed19bdfc922328cad9781fa9122b6810a8fd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15105250068,
      "node_id": "HRFPE_lADOABII586LZ3ZQzwAAAAOEV9MU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15105250068",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T14:48:34Z"
    },
    {
      "event": "reviewed",
      "id": 2414414598,
      "node_id": "PRR_kwDOABII586P6QsG",
      "url": null,
      "actor": null,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 131bed19bdfc922328cad9781fa9122b6810a8fd",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2414414598",
      "submitted_at": "2024-11-05T00:55:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    },
    {
      "event": "review_requested",
      "id": 15112326027,
      "node_id": "RRE_lADOABII586LZ3ZQzwAAAAOEw8uL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15112326027",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-05T00:55:39Z",
      "requested_reviewer": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2457295681,
      "node_id": "IC_kwDOABII586Sd1tB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2457295681",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-05T14:16:40Z",
      "updated_at": "2024-11-05T14:16:40Z",
      "author_association": "MEMBER",
      "body": "ACK 131bed19bdfc922328cad9781fa9122b6810a8fd",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2457295681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30239"
    },
    {
      "event": "reviewed",
      "id": 2415896626,
      "node_id": "PRR_kwDOABII586P_6gy",
      "url": null,
      "actor": null,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#pullrequestreview-2415896626",
      "submitted_at": "2024-11-05T15:02:25Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687062365",
      "pull_request_review_id": 2192421044,
      "id": 1687062365,
      "node_id": "PRRC_kwDOABII585kjodd",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }\n+\n+        if (!child_unspent_dust.empty()) {\n+            return tx->GetHash();\n+        }\n+\n+        // Process new dust\n+        for (uint32_t i=0; i<tx->vout.size(); i++) {\n+            if (IsDust(tx->vout[i], dust_relay_rate)) {\n+                // CheckValidEphemeralTx should disallow multiples\n+                Assume(map_tx_dust.count(tx->GetHash()) == 0);",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 872c06dacde6c45c2add69c8c15c94571b08119d \"policy: Allow dust in transactions, spent in-mempool\"\r\n\r\nnit: Use `contains`, here and elsewhere.\r\n\r\n```suggestion\r\n                Assume(!map_tx_dust.contains(tx->GetHash()));\r\n```",
      "created_at": "2024-07-22T19:44:28Z",
      "updated_at": "2024-07-22T20:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687062365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687062365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687083132",
      "pull_request_review_id": 2192421044,
      "id": 1687083132,
      "node_id": "PRRC_kwDOABII585kjth8",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if any are true:\n+ *  - tx has non-0 fee\n+    - tx has more than one dust output\n+ * and sets relevant invalid state.\n+ * Otherwise it returns true.\n+ */\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state);\n+\n+/** Checks that all dust in package ends up spent by direct children. Assumes package is well-formed and sorted. */\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate);",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 23,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 872c06dacde6c45c2add69c8c15c94571b08119d \"policy: Allow dust in transactions, spent in-mempool\"\r\n\r\nCould you document what the return value is?",
      "created_at": "2024-07-22T20:05:59Z",
      "updated_at": "2024-07-22T20:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687083132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687083132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687085679",
      "pull_request_review_id": 2192421044,
      "id": 1687085679,
      "node_id": "PRRC_kwDOABII585kjuJv",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }\n+\n+        if (!child_unspent_dust.empty()) {\n+            return tx->GetHash();",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 872c06dacde6c45c2add69c8c15c94571b08119d \"policy: Allow dust in transactions, spent in-mempool\"\r\n\r\nI'm a little confused about this return value. The usage of this function suggests that the return value is the wtxid of a parent transaction that has unspent dust. However, this appears to be returning the child txid.",
      "created_at": "2024-07-22T20:08:29Z",
      "updated_at": "2024-07-22T20:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687085679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687085679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687087037",
      "pull_request_review_id": 2192421044,
      "id": 1687087037,
      "node_id": "PRRC_kwDOABII585kjue9",
      "diff_hunk": "@@ -1560,6 +1600,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    // Run package-based dust spentness checks\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate)}) {\n+            const auto parent_wtxid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 141,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 872c06dacde6c45c2add69c8c15c94571b08119d \"policy: Allow dust in transactions, spent in-mempool\"\r\n\r\n`CheckEphemeralSpends` appears to only return txids, not wtxid, suggest renaming this variable:\r\n\r\n```suggestion\r\n            const auto parent_txid = ephemeral_violation.value();\r\n```",
      "created_at": "2024-07-22T20:09:46Z",
      "updated_at": "2024-07-22T20:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687087037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687087037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687094839",
      "pull_request_review_id": 2192421044,
      "id": 1687094839,
      "node_id": "PRRC_kwDOABII585kjwY3",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 872c06dacde6c45c2add69c8c15c94571b08119d \"policy: Allow dust in transactions, spent in-mempool\"\r\n\r\nIt's not clear to me why there is a rule that a descendant must also spend the dust if they spent any other output from an ancestor. This rule does not seem to be mentioned anywhere in the PR description.\r\n\r\nISTM it would be easier and just as effective to check that all dust outputs end up being spent rather than this slightly convoluted check.",
      "created_at": "2024-07-22T20:17:56Z",
      "updated_at": "2024-07-22T20:47:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687094839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687094839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 47,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687135318",
      "pull_request_review_id": 2192543417,
      "id": 1687135318,
      "node_id": "PRRC_kwDOABII585kj6RW",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687094839,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Imagine three transactions:\r\n\r\nTxA, 0-fee with two outputs, one non-dust, one dust\r\nTxB, spends TxA's non-dust\r\nTxC, spends TxA's dust\r\n\r\nAll the dust is spent if `TxA+TxB+TxC` is accepted, but the mining template may just pick up `TxA+TxB`  rather than the three \"legal configurations:\r\n0) None\r\n1) `TxA+TxB+TxC`\r\n2) `TxA+TxC`\r\n\r\nBy requiring the child transaction to sweep any dust from the parent txn, we ensure that there is a *single child only*, and this child is the only transaction possible for bringing fees, or itself being spent by another child, and so on.",
      "created_at": "2024-07-22T20:58:35Z",
      "updated_at": "2024-07-22T21:05:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687135318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687135318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 47,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687148241",
      "pull_request_review_id": 2192563994,
      "id": 1687148241,
      "node_id": "PRRC_kwDOABII585kj9bR",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687094839,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can update the documentation reflecting this if you find the explanation compelling.",
      "created_at": "2024-07-22T21:12:59Z",
      "updated_at": "2024-07-22T21:12:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687148241",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687148241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 47,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687157629",
      "pull_request_review_id": 2192578823,
      "id": 1687157629,
      "node_id": "PRRC_kwDOABII585kj_t9",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687094839,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I see. Any child must spend the dust output, and I see that this is being enforced in the other variant too.\r\n\r\nAdditional documentation would be appreciated.",
      "created_at": "2024-07-22T21:23:51Z",
      "updated_at": "2024-07-22T21:23:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687157629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687157629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 47,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328626",
      "pull_request_review_id": 2192832285,
      "id": 1687328626,
      "node_id": "PRRC_kwDOABII585kkpdy",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687094839,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added some documentation",
      "created_at": "2024-07-23T02:08:09Z",
      "updated_at": "2024-07-23T02:08:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687328626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 47,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328664",
      "pull_request_review_id": 2192832331,
      "id": 1687328664,
      "node_id": "PRRC_kwDOABII585kkpeY",
      "diff_hunk": "@@ -1560,6 +1600,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    // Run package-based dust spentness checks\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate)}) {\n+            const auto parent_wtxid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 141,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687087037,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-07-23T02:08:12Z",
      "updated_at": "2024-07-23T02:08:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687328664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1606,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328677",
      "pull_request_review_id": 2192832351,
      "id": 1687328677,
      "node_id": "PRRC_kwDOABII585kkpel",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }\n+\n+        if (!child_unspent_dust.empty()) {\n+            return tx->GetHash();",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687085679,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "switched to txid since that's how it's being tracked",
      "created_at": "2024-07-23T02:08:14Z",
      "updated_at": "2024-07-23T02:08:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687328677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328696",
      "pull_request_review_id": 2192832377,
      "id": 1687328696,
      "node_id": "PRRC_kwDOABII585kkpe4",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if any are true:\n+ *  - tx has non-0 fee\n+    - tx has more than one dust output\n+ * and sets relevant invalid state.\n+ * Otherwise it returns true.\n+ */\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state);\n+\n+/** Checks that all dust in package ends up spent by direct children. Assumes package is well-formed and sorted. */\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate);",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 23,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687083132,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "documented",
      "created_at": "2024-07-23T02:08:17Z",
      "updated_at": "2024-07-23T02:08:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687328696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328715",
      "pull_request_review_id": 2192832419,
      "id": 1687328715,
      "node_id": "PRRC_kwDOABII585kkpfL",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<uint256> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // Running tally of unspent dust\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_dust;\n+\n+    // If a parent tx has dust, we have to check for the spend\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(tx_input.prevout.hash)) {\n+                child_unspent_dust.insert(tx_input.prevout.hash);\n+            }\n+        }\n+\n+        // Now that we've built a list of parent txids\n+        // that have dust, make sure that all parent's\n+        // dust are swept by this same tx\n+        for (const auto& tx_input : tx->vin) {\n+            const auto& prevout = tx_input.prevout;\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent\n+            if (map_tx_dust.count(prevout.hash) &&\n+                map_tx_dust[prevout.hash] == prevout.n) {\n+                 child_unspent_dust.erase(prevout.hash);\n+            }\n+\n+            // We want to detect dangling dust too\n+            unspent_dust.erase(tx_input.prevout);\n+        }\n+\n+        if (!child_unspent_dust.empty()) {\n+            return tx->GetHash();\n+        }\n+\n+        // Process new dust\n+        for (uint32_t i=0; i<tx->vout.size(); i++) {\n+            if (IsDust(tx->vout[i], dust_relay_rate)) {\n+                // CheckValidEphemeralTx should disallow multiples\n+                Assume(map_tx_dust.count(tx->GetHash()) == 0);",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6eca593c83309a7ebd83855847972778cf43f251",
      "in_reply_to_id": 1687062365,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-07-23T02:08:19Z",
      "updated_at": "2024-07-23T02:08:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1687328715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1687328715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742455118",
      "pull_request_review_id": 2278092199,
      "id": 1742455118,
      "node_id": "PRRC_kwDOABII585n28FO",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1baab614851bb5e6f7b7b124a346f0af5729dcf0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx has more than 1 dust output\");\r\n```",
      "created_at": "2024-09-03T17:52:06Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1742455118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742455118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742455496",
      "pull_request_review_id": 2278092199,
      "id": 1742455496,
      "node_id": "PRRC_kwDOABII585n28LI",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1baab614851bb5e6f7b7b124a346f0af5729dcf0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0 fee\");\r\n```",
      "created_at": "2024-09-03T17:52:27Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1742455496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742455496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744281879",
      "pull_request_review_id": 2278092199,
      "id": 1744281879,
      "node_id": "PRRC_kwDOABII585n96EX",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 35,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could go in test_framework/mempool_util.py?",
      "created_at": "2024-09-04T19:00:38Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744281879",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744281879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744291930",
      "pull_request_review_id": 2278092199,
      "id": 1744291930,
      "node_id": "PRRC_kwDOABII585n98ha",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.connect_nodes(0, 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - 1) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-1)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a transaction with any value is standard as long as it's spent\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 177,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        self.log.info(\"Test that ephemeral dust is allowed for non-0 dust values\")\r\n```",
      "created_at": "2024-09-04T19:10:36Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744291930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744291930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744294677",
      "pull_request_review_id": 2278092199,
      "id": 1744294677,
      "node_id": "PRRC_kwDOABII585n99MV",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.connect_nodes(0, 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - 1) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-1)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a transaction with any value is standard as long as it's spent\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+            assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+            res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+            assert_equal(res[\"package_msg\"], \"success\")\n+            assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+            self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that ephemeral outputs of any value are disallowed if not spent in a package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Set fee to 0 for simplicity, but prioritise a bit to have package be acceptable\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(sweep_tx[\"txid\"], 0, 1000)\n+\n+        # Spend works\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and spend the non-dust instead (1st output)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Set fee to 0 for simplicity, but prioritise it to have package be acceptable\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].prioritisetransaction(sweep_tx[\"txid\"], 0, 1000)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        coins = self.wallet.get_utxos(mark_as_spent=False)\n+        sponsor_coin = coins[0]\n+        del coins[0]\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        self.sync_all()\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend the dust with parent still in mempool\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_raises_rpc_error(-26, \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Create sweep that doesn't spend conflicting sponsor\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can rebroadcast the sweep again and get it mined\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"]])\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]])\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that dust is still allowed when acceptnonstd=1\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 372,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "acceptnonstdtxn",
      "created_at": "2024-09-04T19:13:22Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744294677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744294677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 371,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744296294",
      "pull_request_review_id": 2278092199,
      "id": 1744296294,
      "node_id": "PRRC_kwDOABII585n99lm",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 95,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think all of these `assert_mempool_contents` can also have a `self.sync_mempools()` to check that the ephemeral dust packages propagate.",
      "created_at": "2024-09-04T19:14:49Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744296294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744296294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744310449",
      "pull_request_review_id": 2278092199,
      "id": 1744310449,
      "node_id": "PRRC_kwDOABII585n-BCx",
      "diff_hunk": "@@ -89,6 +90,126 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay).has_value());\n+\n+    // Now with dust, ok because no spending transaction exists",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Now with dust, ok because the tx has no dusty parents\r\n```",
      "created_at": "2024-09-04T19:28:01Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744310449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744310449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744312279",
      "pull_request_review_id": 2278092199,
      "id": 1744312279,
      "node_id": "PRRC_kwDOABII585n-BfX",
      "diff_hunk": "@@ -1560,6 +1575,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    // Run package-based dust spentness checks\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate)}) {\n+            const Txid parent_txid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n            const Txid& parent_txid = ephemeral_violation.value();\r\n```",
      "created_at": "2024-09-04T19:29:56Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744312279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744312279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744323500",
      "pull_request_review_id": 2278092199,
      "id": 1744323500,
      "node_id": "PRRC_kwDOABII585n-EOs",
      "diff_hunk": "@@ -142,11 +143,16 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n             reason = \"bare-multisig\";\n             return false;\n         } else if (IsDust(txout, dust_relay_fee)) {\n-            reason = \"dust\";\n-            return false;\n+            num_dust_outputs++;\n         }\n     }\n \n+    // Only one dust is permitted(on otherwise valid ephemeral dust)\n+    if (num_dust_outputs > 1) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "if you make 1 a constexpr `MAX_DUST_OUTPUTS_PER_TX`, you can `static_assert` that it == 1 as an assumption in `CheckEphemeralSpends`",
      "created_at": "2024-09-04T19:40:13Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744323500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744323500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744330898",
      "pull_request_review_id": 2278092199,
      "id": 1744330898,
      "node_id": "PRRC_kwDOABII585n-GCS",
      "diff_hunk": "@@ -89,6 +90,126 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay).has_value());\n+\n+    // Now with dust, ok because no spending transaction exists\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1}, minrelay).has_value());\n+\n+    // Dust checks pass\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, CFeeRate(0)).has_value());\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, minrelay).has_value());\n+\n+    auto dust_non_spend = make_tx({COutPoint{dust_txid, dust_index - 1}}, /*version=*/2);\n+\n+    // Child spending non-dust only from parent should be disallowed even if dust otherwise spent\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend, dust_spend}, minrelay).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_spend, dust_non_spend}, minrelay).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend}, minrelay).has_value());\n+\n+    auto grandparent_tx_2 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid_2 = grandparent_tx_2->GetHash();\n+\n+    // Spend dust from one but not another is ok, as long as second grandparent has no child\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend}, minrelay).has_value());\n+\n+    auto dust_non_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index - 1}}, /*version=*/2);\n+    // But if we spend from the parent, it must spend dust\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_non_spend_both_parents}, minrelay).has_value());\n+\n+    auto dust_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_both_parents}, minrelay).has_value());\n+\n+    // Spending all outputs is also correct",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Spending other outputs is also correct, as long as the dusty one is spent\r\n```",
      "created_at": "2024-09-04T19:46:53Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744330898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744330898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744335056",
      "pull_request_review_id": 2278092199,
      "id": 1744335056,
      "node_id": "PRRC_kwDOABII585n-HDQ",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // If a parent tx has dust, we have to check for the spend by the child\n+    // Maps Txid of parent to output index of the dust.\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could comment that `tx_input.prevout.n` doesn't need to equal `map_tx_dust.at(tx_input.prevout.hash)`; a child can spend multiple outputs of a parent.",
      "created_at": "2024-09-04T19:50:51Z",
      "updated_at": "2024-09-04T19:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1744335056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744335056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745593",
      "pull_request_review_id": 2283393108,
      "id": 1745745593,
      "node_id": "PRRC_kwDOABII585oDfa5",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1baab614851bb5e6f7b7b124a346f0af5729dcf0",
      "in_reply_to_id": 1742455118,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "never actually reachable as this is already caught in `IsStandardTx`, removed this error condition",
      "created_at": "2024-09-05T15:17:24Z",
      "updated_at": "2024-09-05T15:17:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745745593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745724",
      "pull_request_review_id": 2283393333,
      "id": 1745745724,
      "node_id": "PRRC_kwDOABII585oDfc8",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1baab614851bb5e6f7b7b124a346f0af5729dcf0",
      "in_reply_to_id": 1742455496,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:30Z",
      "updated_at": "2024-09-05T15:17:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745745724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745966",
      "pull_request_review_id": 2283393684,
      "id": 1745745966,
      "node_id": "PRRC_kwDOABII585oDfgu",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 35,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744281879,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:38Z",
      "updated_at": "2024-09-05T15:17:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745745966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745745966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746064",
      "pull_request_review_id": 2283393832,
      "id": 1745746064,
      "node_id": "PRRC_kwDOABII585oDfiQ",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.connect_nodes(0, 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - 1) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-1)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a transaction with any value is standard as long as it's spent\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 177,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744291930,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:41Z",
      "updated_at": "2024-09-05T15:17:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746181",
      "pull_request_review_id": 2283393999,
      "id": 1745746181,
      "node_id": "PRRC_kwDOABII585oDfkF",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.connect_nodes(0, 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - 1) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-1)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a transaction with any value is standard as long as it's spent\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+            assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+            res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+            assert_equal(res[\"package_msg\"], \"success\")\n+            assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+            self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that ephemeral outputs of any value are disallowed if not spent in a package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Set fee to 0 for simplicity, but prioritise a bit to have package be acceptable\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(sweep_tx[\"txid\"], 0, 1000)\n+\n+        # Spend works\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and spend the non-dust instead (1st output)\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Set fee to 0 for simplicity, but prioritise it to have package be acceptable\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].prioritisetransaction(sweep_tx[\"txid\"], 0, 1000)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        coins = self.wallet.get_utxos(mark_as_spent=False)\n+        sponsor_coin = coins[0]\n+        del coins[0]\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        self.sync_all()\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend the dust with parent still in mempool\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_raises_rpc_error(-26, \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Create sweep that doesn't spend conflicting sponsor\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can rebroadcast the sweep again and get it mined\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"]])\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]])\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that dust is still allowed when acceptnonstd=1\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 372,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744294677,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:45Z",
      "updated_at": "2024-09-05T15:17:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 371,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746321",
      "pull_request_review_id": 2283394235,
      "id": 1745746321,
      "node_id": "PRRC_kwDOABII585oDfmR",
      "diff_hunk": "@@ -0,0 +1,472 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        self.assert_mempool_contents(expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 95,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744296294,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added an optional sync argument, only unused during reorg test",
      "created_at": "2024-09-05T15:17:49Z",
      "updated_at": "2024-09-05T15:17:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746321",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746418",
      "pull_request_review_id": 2283394378,
      "id": 1745746418,
      "node_id": "PRRC_kwDOABII585oDfny",
      "diff_hunk": "@@ -89,6 +90,126 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay).has_value());\n+\n+    // Now with dust, ok because no spending transaction exists",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744310449,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:53Z",
      "updated_at": "2024-09-05T15:17:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746514",
      "pull_request_review_id": 2283394535,
      "id": 1745746514,
      "node_id": "PRRC_kwDOABII585oDfpS",
      "diff_hunk": "@@ -1560,6 +1575,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    // Run package-based dust spentness checks\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate)}) {\n+            const Txid parent_txid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744312279,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:17:56Z",
      "updated_at": "2024-09-05T15:17:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746514",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746680",
      "pull_request_review_id": 2283394783,
      "id": 1745746680,
      "node_id": "PRRC_kwDOABII585oDfr4",
      "diff_hunk": "@@ -142,11 +143,16 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n             reason = \"bare-multisig\";\n             return false;\n         } else if (IsDust(txout, dust_relay_fee)) {\n-            reason = \"dust\";\n-            return false;\n+            num_dust_outputs++;\n         }\n     }\n \n+    // Only one dust is permitted(on otherwise valid ephemeral dust)\n+    if (num_dust_outputs > 1) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744323500,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "great idea, added ",
      "created_at": "2024-09-05T15:18:02Z",
      "updated_at": "2024-09-05T15:18:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746765",
      "pull_request_review_id": 2283394899,
      "id": 1745746765,
      "node_id": "PRRC_kwDOABII585oDftN",
      "diff_hunk": "@@ -89,6 +90,126 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay).has_value());\n+\n+    // Now with dust, ok because no spending transaction exists\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1}, minrelay).has_value());\n+\n+    // Dust checks pass\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, CFeeRate(0)).has_value());\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, minrelay).has_value());\n+\n+    auto dust_non_spend = make_tx({COutPoint{dust_txid, dust_index - 1}}, /*version=*/2);\n+\n+    // Child spending non-dust only from parent should be disallowed even if dust otherwise spent\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend, dust_spend}, minrelay).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_spend, dust_non_spend}, minrelay).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend}, minrelay).has_value());\n+\n+    auto grandparent_tx_2 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid_2 = grandparent_tx_2->GetHash();\n+\n+    // Spend dust from one but not another is ok, as long as second grandparent has no child\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend}, minrelay).has_value());\n+\n+    auto dust_non_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index - 1}}, /*version=*/2);\n+    // But if we spend from the parent, it must spend dust\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_non_spend_both_parents}, minrelay).has_value());\n+\n+    auto dust_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_both_parents}, minrelay).has_value());\n+\n+    // Spending all outputs is also correct",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744330898,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-09-05T15:18:05Z",
      "updated_at": "2024-09-05T15:18:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746912",
      "pull_request_review_id": 2283395095,
      "id": 1745746912,
      "node_id": "PRRC_kwDOABII585oDfvg",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    bool has_dust = false;\n+    for (const CTxOut& txout : tx.vout) {\n+        if (IsDust(txout, dust_relay_fee)) {\n+            // We only allow a single dusty output\n+            if (has_dust) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+            }\n+            has_dust = true;\n+         }\n+    }\n+\n+    // No dust; it's complete standard already\n+    if (!has_dust) return true;\n+\n+    // We never want to give incentives to mine this alone\n+    if (txfee != 0) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    // If a parent tx has dust, we have to check for the spend by the child\n+    // Maps Txid of parent to output index of the dust.\n+    // Single dust per tx possible\n+    std::map<Txid, uint32_t> map_tx_dust;\n+\n+    for (const auto& tx : package) {\n+        std::unordered_set<Txid, SaltedTxidHasher> child_unspent_dust;\n+        for (const auto& tx_input : tx->vin) {\n+            // Parent tx had dust, child MUST be sweeping it\n+            // if it's spending any output from parent",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "c98fb6f490ac003cce2683afe3cda65089f334f8",
      "in_reply_to_id": 1744335056,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "elaborated a bit, let me know if it helps",
      "created_at": "2024-09-05T15:18:09Z",
      "updated_at": "2024-09-05T15:18:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1745746912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745746912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757536232",
      "pull_request_review_id": 2301347857,
      "id": 1757536232,
      "node_id": "PRRC_kwDOABII585owd_o",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Any reason to use a `CTransaction&` instead of a `CTransactionRef`?",
      "created_at": "2024-09-12T20:24:41Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757536232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757536232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757541211",
      "pull_request_review_id": 2301347857,
      "id": 1757541211,
      "node_id": "PRRC_kwDOABII585owfNb",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 15,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this language is a little bit too strong. It's not risk-free, I think we're just checking that there is no visible incentive for the dust to enter the utxo set.",
      "created_at": "2024-09-12T20:28:58Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757541211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757541211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757546693",
      "pull_request_review_id": 2301347857,
      "id": 1757546693,
      "node_id": "PRRC_kwDOABII585owgjF",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.\n+ */\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if tx has non-0 fee\n+ * and sets relevant invalid state.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 39,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * Returns false if the fee is non-zero and dust exists, populating state. True otherwise.\r\n```",
      "created_at": "2024-09-12T20:34:14Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757546693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757546693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 38,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757548475",
      "pull_request_review_id": 2301347857,
      "id": 1757548475,
      "node_id": "PRRC_kwDOABII585owg-7",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 34,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't really understand the \"or itself being spent by another child, and so on\" part",
      "created_at": "2024-09-12T20:36:01Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757548475",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757548475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757550476",
      "pull_request_review_id": 2301347857,
      "id": 1757550476,
      "node_id": "PRRC_kwDOABII585owheM",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if (txfee != 0) {\n+        for (const CTxOut& txout : tx.vout) {\n+            if (IsDust(txout, dust_relay_fee)) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+             }\n+        }\n+    }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "?\r\n```suggestion\r\n    if (txfee != 0 && std::any_of(tx.vout.cbegin(), tx.vout.cbegin(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\r\n        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\r\n    }\r\n```",
      "created_at": "2024-09-12T20:37:58Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757550476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757550476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757552226",
      "pull_request_review_id": 2301347857,
      "id": 1757552226,
      "node_id": "PRRC_kwDOABII585owh5i",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.\n+ */\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if tx has non-0 fee\n+ * and sets relevant invalid state.\n+ * Otherwise it returns true.\n+ */\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state);\n+\n+/** Checks that all dust in a package ends up spent by an only-child or has no child.\n+ *  Assumes package is well-formed and sorted.\n+ *  The function returns std::nullopt if all dust is properly spent, or the txid of the violating child spend.\n+ */\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate);\n+\n+/** Checks that individual transactions' parents have all their dust spent by this only-child transaction.\n+ *  The function returns std::nullopt if all dust is properly spent or an error message string.\n+ */\n+std::optional<std::string> CheckEphemeralSpends(const CTransactionRef& ptx,",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you add documentation for when each function must be called, like we did for TRUC?",
      "created_at": "2024-09-12T20:39:27Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757552226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757552226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757573473",
      "pull_request_review_id": 2301347857,
      "id": 1757573473,
      "node_id": "PRRC_kwDOABII585ownFh",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 125,
      "original_position": 116,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No need to restart node1?",
      "created_at": "2024-09-12T20:57:10Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757573473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757573473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757574587",
      "pull_request_review_id": 2301347857,
      "id": 1757574587,
      "node_id": "PRRC_kwDOABII585ownW7",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 121,
      "original_position": 113,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This isn't really the desirable behavior, perhaps worth commenting. If we fix this through something like #27476, this should be replaced with a test for the opposite case.",
      "created_at": "2024-09-12T20:58:09Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757574587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757574587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757578284",
      "pull_request_review_id": 2301347857,
      "id": 1757578284,
      "node_id": "PRRC_kwDOABII585owoQs",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 121,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: sentence structure kind of weird. the transaction ignores modified? I know what you mean, but maybe confusing wording",
      "created_at": "2024-09-12T21:01:33Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757578284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757578284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757579115",
      "pull_request_review_id": 2301347857,
      "id": 1757579115,
      "node_id": "PRRC_kwDOABII585owodr",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 128,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A little bit brittle, as it assumes the utxo selected is from a coinbase.\r\n```suggestion\r\n        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # main output is not dust\r\n```",
      "created_at": "2024-09-12T21:02:10Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757579115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757579115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757585957",
      "pull_request_review_id": 2301347857,
      "id": 1757585957,
      "node_id": "PRRC_kwDOABII585owqIl",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can't remember if we discussed this in the past... we definitely don't want people to be able to bypass the rule using `prioritisetransaction`, but have you considered adding a `CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_modified_fees, state)` in addition to this check? Basically equivalent to \"you can't prioritisetransaction at all,\" I think.",
      "created_at": "2024-09-12T21:07:42Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757585957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757585957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757590433",
      "pull_request_review_id": 2301347857,
      "id": 1757590433,
      "node_id": "PRRC_kwDOABII585owrOh",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 217,
      "original_position": 203,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add a note that this is basically checking that v2 is subject to min relay feerate requirements, and you can flip this test if that changes",
      "created_at": "2024-09-12T21:11:46Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757590433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757590433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 217,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757607870",
      "pull_request_review_id": 2301347857,
      "id": 1757607870,
      "node_id": "PRRC_kwDOABII585owve-",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # First time, enter dust tx by itself into mempool  and test that dust must be spent\n+        self.nodes[0].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+        self.nodes[1].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+\n+        self.nodes[0].sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that multi-dust and non-0 fee dust is still allowed when acceptnonstdtxn=1\")\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.restart_node(1, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.nodes[0].rpc.sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Sweep tx that doesn't sweep dust ok too\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].rpc.sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 412,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thoughts on adding this test before the changes in commit 1?",
      "created_at": "2024-09-12T21:25:54Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757607870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757607870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 386,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757611051",
      "pull_request_review_id": 2301347857,
      "id": 1757611051,
      "node_id": "PRRC_kwDOABII585owwQr",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # First time, enter dust tx by itself into mempool  and test that dust must be spent\n+        self.nodes[0].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+        self.nodes[1].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+\n+        self.nodes[0].sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that multi-dust and non-0 fee dust is still allowed when acceptnonstdtxn=1\")\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.restart_node(1, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.nodes[0].rpc.sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Sweep tx that doesn't sweep dust ok too\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].rpc.sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    # N.B. this extra_args can be removed post cluster mempool\n+    def test_free_relay(self):\n+        self.log.info(\"Test that ephemeral dust works in non-TRUC contexts when there's no minrelay requirement\")\n+\n+        # Note: since minrelay is 0, it is not testing 1P1C relay\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # generate coins for next tests\n+        self.generate(self.nodes[0], 1)\n+        self.wallet.rescan_utxos()\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test batched ephemeral dust sweep\")\n+        dusty_txs = []\n+        for _ in range(24):\n+            dusty_txs.append(self.wallet.create_self_transfer_multi(fee_per_output=0, version=2))\n+            self.add_output_to_create_multi_result(dusty_txs[-1])\n+\n+        all_parent_utxos = [utxo for tx in dusty_txs for utxo in tx[\"new_utxos\"]]\n+\n+        # Missing one dust spend spend from a single parent, child rejected",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 447,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "spend spend",
      "created_at": "2024-09-12T21:29:04Z",
      "updated_at": "2024-09-12T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757611051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757611051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757628003",
      "pull_request_review_id": 2301478239,
      "id": 1757628003,
      "node_id": "PRRC_kwDOABII585ow0Zj",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757585957,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, this was my open question https://github.com/bitcoin/bitcoin/pull/30239#issuecomment-2332066227\r\n\r\nEven if we do this change it can still be prioritized for mining *after* entering the mempool; we would need heavier machinery to stop ever treating it as prioritised. This would mean someone would have to create a CPFP transaction then cycle it away, while also using `prioritisetransaction` to get it mined without the dust spent?\r\n\r\n@sdaftuar you have any thoughts?",
      "created_at": "2024-09-12T21:45:55Z",
      "updated_at": "2024-09-12T21:45:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757628003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757628003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757737177",
      "pull_request_review_id": 2301607875,
      "id": 1757737177,
      "node_id": "PRRC_kwDOABII585oxPDZ",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757585957,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't have a strong view, but I'm trying to think about what a mining pool might want the behavior to be.  One guess is that some miners may want to have a way to prioritise normal-looking transactions but not inadvertently prioritise something that would create a dust output and spam the UTXO set with garbage that will never be spent.\r\n\r\nIf that is the case, then we could try to build the heavier machinery you're talking about: perhaps change the behavior of `prioritisetransaction` to produce an error by default when invoked on an in-mempool transaction that has a dust output, coupled with what I think you guys are talking about here of rejecting transactions that are prioritised already on entry.  But probably someone should talk to mining pools that offer transaction acceleration to see what they would intend and if what I just described is worth implementing; if they don't care about UTXO bloat then it's not hard to bypass these rules regardless of what we do here.",
      "created_at": "2024-09-13T00:07:43Z",
      "updated_at": "2024-09-13T00:07:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1757737177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1757737177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758381743",
      "pull_request_review_id": 2302406927,
      "id": 1758381743,
      "node_id": "PRRC_kwDOABII585ozsav",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757585957,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@sdaftuar \r\n\r\nRe: dust UTXO creation, MARA has told me directly that they do not enforce the dust limit at all, and IIUC F2Pool does not as well. I haven't however personally tested this.",
      "created_at": "2024-09-13T08:01:50Z",
      "updated_at": "2024-09-13T08:01:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758381743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758381743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758992957",
      "pull_request_review_id": 2303317176,
      "id": 1758992957,
      "node_id": "PRRC_kwDOABII585o2Bo9",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # First time, enter dust tx by itself into mempool  and test that dust must be spent\n+        self.nodes[0].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+        self.nodes[1].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+\n+        self.nodes[0].sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that multi-dust and non-0 fee dust is still allowed when acceptnonstdtxn=1\")\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.restart_node(1, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.nodes[0].rpc.sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Sweep tx that doesn't sweep dust ok too\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].rpc.sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    # N.B. this extra_args can be removed post cluster mempool\n+    def test_free_relay(self):\n+        self.log.info(\"Test that ephemeral dust works in non-TRUC contexts when there's no minrelay requirement\")\n+\n+        # Note: since minrelay is 0, it is not testing 1P1C relay\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # generate coins for next tests\n+        self.generate(self.nodes[0], 1)\n+        self.wallet.rescan_utxos()\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test batched ephemeral dust sweep\")\n+        dusty_txs = []\n+        for _ in range(24):\n+            dusty_txs.append(self.wallet.create_self_transfer_multi(fee_per_output=0, version=2))\n+            self.add_output_to_create_multi_result(dusty_txs[-1])\n+\n+        all_parent_utxos = [utxo for tx in dusty_txs for utxo in tx[\"new_utxos\"]]\n+\n+        # Missing one dust spend spend from a single parent, child rejected",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 447,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757611051,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-09-13T14:39:34Z",
      "updated_at": "2024-09-13T14:39:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758992957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758992957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993050",
      "pull_request_review_id": 2303317326,
      "id": 1758993050,
      "node_id": "PRRC_kwDOABII585o2Bqa",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # First time, enter dust tx by itself into mempool  and test that dust must be spent\n+        self.nodes[0].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+        self.nodes[1].prioritisetransaction(dusty_tx[\"txid\"], 0, 1000)\n+\n+        self.nodes[0].sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will make it even with unspent dusty_tx dust\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    def test_acceptnonstd(self):\n+        self.log.info(\"Test that multi-dust and non-0 fee dust is still allowed when acceptnonstdtxn=1\")\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.restart_node(1, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.nodes[0].rpc.sendrawtransaction(dusty_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Sweep tx that doesn't sweep dust ok too\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.nodes[0].rpc.sendrawtransaction(sweep_tx[\"hex\"])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 412,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757607870,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good idea, moved this subtest to `mempool_dust.py` as its own commit, switched it to testing dustrelay arg instead of standardness as I think that's more directly testing what we want.",
      "created_at": "2024-09-13T14:39:37Z",
      "updated_at": "2024-09-13T14:39:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 386,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993149",
      "pull_request_review_id": 2303317477,
      "id": 1758993149,
      "node_id": "PRRC_kwDOABII585o2Br9",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will be accepted if base fee is 0 even if modified fee is non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # Submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+            self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 217,
      "original_position": 203,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757590433,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "dropped a note",
      "created_at": "2024-09-13T14:39:40Z",
      "updated_at": "2024-09-13T14:39:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 217,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993261",
      "pull_request_review_id": 2303317635,
      "id": 1758993261,
      "node_id": "PRRC_kwDOABII585o2Btt",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(dusty_tx[\"tx\"].vout[0].nValue, 5000000000 - sats_fee) # main output is not dust",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 128,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757579115,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added suggestion and a direct assertion that the main output amount is >330 the taproot dust amount",
      "created_at": "2024-09-13T14:39:44Z",
      "updated_at": "2024-09-13T14:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993345",
      "pull_request_review_id": 2303317750,
      "id": 1758993345,
      "node_id": "PRRC_kwDOABII585o2BvB",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have base fee, and ignores modified\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 121,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757578284,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "dropped the reference to modified as it probably isn't clarifying",
      "created_at": "2024-09-13T14:39:47Z",
      "updated_at": "2024-09-13T14:39:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993386",
      "pull_request_review_id": 2303317801,
      "id": 1758993386,
      "node_id": "PRRC_kwDOABII585o2Bvq",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 121,
      "original_position": 113,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757574587,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, if it's fixed this will fail, letting the author know to write a new case. Added a note that this isn't desired, just descriptive, ",
      "created_at": "2024-09-13T14:39:48Z",
      "updated_at": "2024-09-13T14:39:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993580",
      "pull_request_review_id": 2303318060,
      "id": 1758993580,
      "node_id": "PRRC_kwDOABII585o2Bys",
      "diff_hunk": "@@ -0,0 +1,493 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_acceptnonstd()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # But if we add modified fees, it would succeed\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert test_res[0][\"allowed\"]\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # And package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee\n+        self.restart_node(0)\n+        self.restart_node(1)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 125,
      "original_position": 116,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757573473,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would cause the nodes to fail to sync their mempools, no? I find it easiest when the restarts are done in sync anyways.",
      "created_at": "2024-09-13T14:39:55Z",
      "updated_at": "2024-09-13T14:39:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993663",
      "pull_request_review_id": 2303318204,
      "id": 1758993663,
      "node_id": "PRRC_kwDOABII585o2Bz_",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.\n+ */\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if tx has non-0 fee\n+ * and sets relevant invalid state.\n+ * Otherwise it returns true.\n+ */\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state);\n+\n+/** Checks that all dust in a package ends up spent by an only-child or has no child.\n+ *  Assumes package is well-formed and sorted.\n+ *  The function returns std::nullopt if all dust is properly spent, or the txid of the violating child spend.\n+ */\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate);\n+\n+/** Checks that individual transactions' parents have all their dust spent by this only-child transaction.\n+ *  The function returns std::nullopt if all dust is properly spent or an error message string.\n+ */\n+std::optional<std::string> CheckEphemeralSpends(const CTransactionRef& ptx,",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757552226,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added a sentence to each saying when they should be called",
      "created_at": "2024-09-13T14:39:58Z",
      "updated_at": "2024-09-13T14:39:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993726",
      "pull_request_review_id": 2303318297,
      "id": 1758993726,
      "node_id": "PRRC_kwDOABII585o2B0-",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if (txfee != 0) {\n+        for (const CTxOut& txout : tx.vout) {\n+            if (IsDust(txout, dust_relay_fee)) {\n+                return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+             }\n+        }\n+    }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757550476,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-09-13T14:40:01Z",
      "updated_at": "2024-09-13T14:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 11,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993801",
      "pull_request_review_id": 2303318427,
      "id": 1758993801,
      "node_id": "PRRC_kwDOABII585o2B2J",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 34,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757548475,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "clarified comment, let me know if that's more clear",
      "created_at": "2024-09-13T14:40:04Z",
      "updated_at": "2024-09-13T14:40:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993882",
      "pull_request_review_id": 2303318541,
      "id": 1758993882,
      "node_id": "PRRC_kwDOABII585o2B3a",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:\n+ * 1) None\n+ * 2) TxA+TxB+TxC\n+ * 3) TxA+TxC\n+ * By requiring the child transaction to sweep any dust from the parent txn, we ensure that\n+ * there is a single child only, and this child is the only transaction possible for\n+ * bringing fees, or itself being spent by another child, and so on.\n+ */\n+\n+/** Does context-less checks about a single transaction.\n+ * If it has relay dust, it returns false if tx has non-0 fee\n+ * and sets relevant invalid state.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 39,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757546693,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-09-13T14:40:07Z",
      "updated_at": "2024-09-13T14:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 38,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993968",
      "pull_request_review_id": 2303318652,
      "id": 1758993968,
      "node_id": "PRRC_kwDOABII585o2B4w",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without risking them entering the utxo\n+ * set.",
      "path": "src/policy/ephemeral_policy.h",
      "position": null,
      "original_position": 15,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757541211,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added a hedge word",
      "created_at": "2024-09-13T14:40:10Z",
      "updated_at": "2024-09-13T14:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758993968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758993968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758994056",
      "pull_request_review_id": 2303318785,
      "id": 1758994056,
      "node_id": "PRRC_kwDOABII585o2B6I",
      "diff_hunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransaction& tx, CFeeRate dust_relay_fee, CAmount txfee, TxValidationState& state)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757536232,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nope, changed",
      "created_at": "2024-09-13T14:40:13Z",
      "updated_at": "2024-09-13T14:40:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1758994056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1758994056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759111178",
      "pull_request_review_id": 2303494042,
      "id": 1759111178,
      "node_id": "PRRC_kwDOABII585o2egK",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757585957,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@petertodd I know for their slipstream accelerator at a minimum they do not, and perhaps they updated all their nodes to not enforce, I'm not sure.\r\n\r\n@sdaftuar Ok that's not much machinery, and seems to make sense combined with base and modified fee both being checked.\r\n\r\nI think any node runner who wants to ignore dust rules they'll simply set `-dustrelayfee=0`, which works out of the box as expected in this PR, and even if we're more controlling on when `prioritisetransaction` can be called.\r\n\r\nI pushed a commit which makes the changes and can rework history if people think the changes are agreeable. Miners can evade this by simply turning dust levels to 0, like they could before.",
      "created_at": "2024-09-13T15:55:59Z",
      "updated_at": "2024-09-13T15:55:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1759111178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759111178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759707389",
      "pull_request_review_id": 2304417942,
      "id": 1759707389,
      "node_id": "PRRC_kwDOABII585o4wD9",
      "diff_hunk": "@@ -934,6 +935,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                                     fSpendsCoinbase, nSigOpsCost, lock_points.value()));\n     ws.m_vsize = entry->GetTxSize();\n \n+    // Enforces 0 base fee for dust transactions, no incentive to be mined alone\n+    if (m_pool.m_opts.require_standard) {\n+        if (!CheckValidEphemeralTx(tx, m_pool.m_opts.dust_relay_feerate, ws.m_base_fees, state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "1332c4a077778f3b88ffd416dde68245e2c2b8a1",
      "in_reply_to_id": 1757585957,
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@instagibbs What MARA told me was that their nodes do not enforce the dust limit. Notably, that means if Libre Relay or some other implementation removed the dust limit, transactions violating it would get to MARA and be mined.",
      "created_at": "2024-09-14T09:47:44Z",
      "updated_at": "2024-09-14T09:47:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1759707389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759707389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 940,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800758237",
      "pull_request_review_id": 2368652846,
      "id": 1800758237,
      "node_id": "PRRC_kwDOABII585rVWPd",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+    static_assert(MAX_DUST_OUTPUTS_PER_TX == 1);\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we need this `assert()`?  Can we just do an`Assume()` instead?\r\n\r\nMy general philosophy is that we should avoid calling `assert()` in codepaths that run on data received from the network, unless it really would be better for (potentially) the ENTIRE network to go down rather than just continue, in the event that the assert() can be remotely triggered.\r\n\r\nI see that we might crash further down if we somehow there is a nullptr here, so my suggestion for error handling would be to `Assume()` everything is non-null, and return early if anything is nullptr.",
      "created_at": "2024-10-15T09:09:29Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1800758237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800758237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800908033",
      "pull_request_review_id": 2368652846,
      "id": 1800908033,
      "node_id": "PRRC_kwDOABII585rV60B",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would love to merge the codepaths for the package and non-package case, so that we have no concerns over whether all the right checks have been run.  What if we did something like this:\r\n\r\n- Add all passed-in transactions to a map: Txid -> CTransactionRef. This will allow us to look up transactions either locally (from a package) or in the mempool.\r\n\r\n- For every transaction passed in:\r\n  * For every input in the transaction:\r\n    - Look up the input in the local map. If not found, look up in the mempool.\r\n    - If a parent transaction was found in either the local map or mempool, check to see if it creates a dust output. If it does, add the dust output to an `unspent_dust` unordered map, like in the single-transaction case below.\r\n  * For every input in the transaction, erase from the `unspent_dust` unordered_map (like in the single-transaction case below).\r\n  * If any entries remain in `unspent_dust`, return an error.\r\n",
      "created_at": "2024-10-15T10:43:01Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1800908033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800908033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800930436",
      "pull_request_review_id": 2368652846,
      "id": 1800930436,
      "node_id": "PRRC_kwDOABII585rWASE",
      "diff_hunk": "@@ -1062,6 +1070,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n+    // Ensure any parents in-mempool that have dust have it spent by this transaction\n+    if (!bypass_limits && m_pool.m_opts.require_standard) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it makes sense to gate this on `!bypass_limits` -- doing so only has an effect for transactions that spend a non-dust output that are coming from the same block as a transaction that creates a dust output, which seems like both (a) a very small effect that (b) we don't obviously want to do...\r\n\r\nSpecifically, it seems strange that we would only accept a transaction that was reorged out of a block that has a dust output if it has exactly 1 such dust output and exactly 0 fee, yet we would take a spend of such a transaction regardless of the ephemeral dust rules.  Presumably if we don't care about enforcing the ephemeral dust rules during a reorg, then we should not enforce them on the parent transaction either?\r\n\r\nGiven that we're going to make a choice, I think it makes more sense to enforce those rules on both transactions -- the use case where this matters is for a miner who has not chosen to set the -dustrelayfee to 0. For such a user, I think we might as well continue to enforce the rules on both transactions, so that we help such a miner avoid inadvertently creating dust in the UTXO set.\r\n\r\nThe question remains as to what to do about transactions that might already be in the mempool that spend a non-dust output of a transaction that creates ephemeral dust.  While I think it'd be somewhat better to evict such transactions, I don't think it would be worth doing if it came at a significant CPU cost -- so I wouldn't want us to add a slow operation to the `removeForReorg()` code that gets invoked for every mempool transaction.  However, if we did something smart by tracking transactions from a block that create dust outputs and use `mapNextTx` to look up spends to evict, that would probably work and be pretty fast.",
      "created_at": "2024-10-15T10:58:53Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1800930436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1800930436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1074,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802693519",
      "pull_request_review_id": 2368652846,
      "id": 1802693519,
      "node_id": "PRRC_kwDOABII585rcuuP",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 67,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: s/spend/spent/ ?",
      "created_at": "2024-10-16T09:12:43Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1802693519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802693519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802727338",
      "pull_request_review_id": 2368652846,
      "id": 1802727338,
      "node_id": "PRRC_kwDOABII585rc2-q",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 191,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just want to make sure I understand this comment, does \"any size\" refer to the value in the output?",
      "created_at": "2024-10-16T09:27:49Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1802727338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802727338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802744124",
      "pull_request_review_id": 2368652846,
      "id": 1802744124,
      "node_id": "PRRC_kwDOABII585rc7E8",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 250,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we assert that this transaction is different from the one already in the mempool?",
      "created_at": "2024-10-16T09:35:09Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1802744124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802744124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802745380",
      "pull_request_review_id": 2368652846,
      "id": 1802745380,
      "node_id": "PRRC_kwDOABII585rc7Yk",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 244,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might be nice to assert that this transaction has a higher feerate than the one in the mempool, just to be sure that this would be a successful RBF if not for the ephemeral dust issue.",
      "created_at": "2024-10-16T09:35:57Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1802745380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802745380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802833358",
      "pull_request_review_id": 2368652846,
      "id": 1802833358,
      "node_id": "PRRC_kwDOABII585rdQ3O",
      "diff_hunk": "@@ -141,6 +141,54 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "83b0430885f4ae06335d3ba5744c675063949ff7",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mean `const CTransactionRef& tx_ref` here?",
      "created_at": "2024-10-16T10:27:37Z",
      "updated_at": "2024-10-16T10:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1802833358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802833358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408738",
      "pull_request_review_id": 2372981381,
      "id": 1803408738,
      "node_id": "PRRC_kwDOABII585rfdVi",
      "diff_hunk": "@@ -141,6 +141,54 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "83b0430885f4ae06335d3ba5744c675063949ff7",
      "in_reply_to_id": 1802833358,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "sure, changed",
      "created_at": "2024-10-16T16:03:14Z",
      "updated_at": "2024-10-16T16:03:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803408738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408819",
      "pull_request_review_id": 2372981499,
      "id": 1803408819,
      "node_id": "PRRC_kwDOABII585rfdWz",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 244,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": 1802745380,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-16T16:03:16Z",
      "updated_at": "2024-10-16T16:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803408819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408904",
      "pull_request_review_id": 2372981652,
      "id": 1803408904,
      "node_id": "PRRC_kwDOABII585rfdYI",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], \"ephemeral-dust-unspent, tx does not spend parent ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Spend works with dust spent\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 250,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": 1802744124,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-16T16:03:19Z",
      "updated_at": "2024-10-16T16:03:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803408904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803408904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409020",
      "pull_request_review_id": 2372981795,
      "id": 1803409020,
      "node_id": "PRRC_kwDOABII585rfdZ8",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with ephemeral dust.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any size is allowed, not checking spending\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 191,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": 1802727338,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, clarified",
      "created_at": "2024-10-16T16:03:22Z",
      "updated_at": "2024-10-16T16:03:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803409020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409152",
      "pull_request_review_id": 2372981969,
      "id": 1803409152,
      "node_id": "PRRC_kwDOABII585rfdcA",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spend in package\")",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 67,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "2edef54ea9688c82fd4d85c242673f2418b2bc7f",
      "in_reply_to_id": 1802693519,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-10-16T16:03:25Z",
      "updated_at": "2024-10-16T16:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803409152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409321",
      "pull_request_review_id": 2372982197,
      "id": 1803409321,
      "node_id": "PRRC_kwDOABII585rfdep",
      "diff_hunk": "@@ -1062,6 +1070,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n+    // Ensure any parents in-mempool that have dust have it spent by this transaction\n+    if (!bypass_limits && m_pool.m_opts.require_standard) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": 1800930436,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed the `bypass_limits` along with unification of CheckEphemeralSpends.\r\n\r\n> However, if we did something smart by tracking transactions from a block that create dust outputs and use mapNextTx to look up spends to evict, that would probably work and be pretty fast.\r\n\r\nI'll take a look at the latter idea\r\n",
      "created_at": "2024-10-16T16:03:30Z",
      "updated_at": "2024-10-16T22:05:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803409321",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1074,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409405",
      "pull_request_review_id": 2372982362,
      "id": 1803409405,
      "node_id": "PRRC_kwDOABII585rfdf9",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": 1800908033,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done, put the new version in both AcceptMultipleTransactions and AcceptSingleTransaciton",
      "created_at": "2024-10-16T16:03:34Z",
      "updated_at": "2024-10-16T16:03:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803409405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409501",
      "pull_request_review_id": 2372982523,
      "id": 1803409501,
      "node_id": "PRRC_kwDOABII585rfdhd",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate)\n+{\n+    // Package is topologically sorted, and PreChecks ensures that\n+    // there is up to one dust output per tx.\n+    static_assert(MAX_DUST_OUTPUTS_PER_TX == 1);\n+\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "dccb87df3e6f4ac469a30d91c2dc850ad0a536c0",
      "in_reply_to_id": 1800758237,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "changed assert to `Assume` as requested, let it stumble along",
      "created_at": "2024-10-16T16:03:38Z",
      "updated_at": "2024-10-16T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1803409501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1803409501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806727152",
      "pull_request_review_id": 2378496425,
      "id": 1806727152,
      "node_id": "PRRC_kwDOABII585rsHfw",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this should be `const CTransactionRef& tx` (and in the header file as well)",
      "created_at": "2024-10-18T16:02:42Z",
      "updated_at": "2024-10-18T16:41:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1806727152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806727152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806730678",
      "pull_request_review_id": 2378496425,
      "id": 1806730678,
      "node_id": "PRRC_kwDOABII585rsIW2",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        std::vector<uint32_t> dust_indexes{GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate)};\n+        if (!dust_indexes.empty()) {\n+            const auto& children = entry.GetMemPoolChildrenConst();\n+            if (!children.empty()) {\n+                Assert(children.size() == 1);\n+                // Find an input that doesn't spend from parent's txid\n+                const auto& only_child = children.begin()->get().GetTx();\n+                for (const auto& tx_input : only_child.vin) {\n+                    if (tx_input.prevout.hash != tx_info.tx->GetHash()) {\n+                        return tx_input.prevout;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+FUZZ_TARGET(ephemeral_package_eval, .init = initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate{static_cast<DummyChainState&>(node.chainman->ActiveChainstate())};\n+\n+    MockTime(fuzzed_data_provider, chainstate);\n+\n+    // All RBF-spendable outpoints outside of the unsubmitted package\n+    std::set<COutPoint> mempool_outpoints;\n+    std::map<COutPoint, CAmount> outpoints_value;\n+    for (const auto& outpoint : g_outpoints_coinbase_init_mature) {\n+        Assert(mempool_outpoints.insert(outpoint).second);\n+        outpoints_value[outpoint] = 50 * COIN;\n+    }\n+\n+    auto outpoints_updater = std::make_shared<OutpointsUpdater>(mempool_outpoints);\n+    node.validation_signals->RegisterSharedValidationInterface(outpoints_updater);\n+\n+    auto tx_pool_{MakeEphemeralMempool(node)};\n+    MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(tx_pool_.get());\n+\n+    chainstate.SetMempool(&tx_pool);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n+        Assert(!mempool_outpoints.empty());\n+\n+        std::vector<CTransactionRef> txs;\n+\n+        // Find something we may want to double-spend with two input single tx\n+        std::optional<COutPoint> outpoint_to_rbf{GetEphemeralSibling(tx_pool)};\n+        bool should_rbf_eph_spend = outpoint_to_rbf && fuzzed_data_provider.ConsumeBool();\n+\n+        // Make small packages\n+        const auto num_txs = should_rbf_eph_spend ? 1 : (size_t) fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+\n+        std::set<COutPoint> package_outpoints;\n+        while (txs.size() < num_txs) {\n+\n+            // Last transaction in a package needs to be a child of parents to get further in validation\n+            // so the last transaction to be generated(in a >1 package) must spend all package-made outputs\n+            // Note that this test currently only spends package outputs in last transaction.\n+            bool last_tx = num_txs > 1 && txs.size() == num_txs - 1;\n+\n+            // Create transaction to add to the mempool\n+            const CTransactionRef tx = [&] {\n+                CMutableTransaction tx_mut;\n+                tx_mut.version = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = 0;\n+                // Last tx will sweep half or more of all outpoints from package\n+                const auto num_in = should_rbf_eph_spend ? 2 :\n+                    last_tx ? fuzzed_data_provider.ConsumeIntegralInRange<int>(package_outpoints.size()/2 + 1, package_outpoints.size()) :\n+                    fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+                auto num_out = should_rbf_eph_spend ? 1 : fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+\n+                auto& outpoints = last_tx ? package_outpoints : mempool_outpoints;\n+\n+                Assert((int)outpoints.size() >= num_in && num_in > 0);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                    auto outpoint = *pop;\n+\n+                    if (i == 0 && should_rbf_eph_spend) {\n+                        outpoint = *outpoint_to_rbf;\n+                        outpoints.erase(outpoint);\n+                    } else {\n+                        outpoints.erase(pop);\n+                    }\n+                    // no need to update or erase from outpoints_value\n+                    amount_in += outpoints_value.at(outpoint);\n+\n+                    // Create input\n+                    CTxIn in;\n+                    in.prevout = outpoint;\n+                    in.scriptWitness.stack = P2WSH_EMPTY_TRUE_STACK;\n+\n+                    tx_mut.vin.push_back(in);\n+                }\n+\n+                const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, amount_in);\n+                const auto amount_out = (amount_in - amount_fee) / num_out;\n+                for (int i = 0; i < num_out; ++i) {\n+                    tx_mut.vout.emplace_back(amount_out, P2WSH_EMPTY);\n+                }\n+\n+                // Note output amounts can naturally drop to dust on their own.\n+                if (!should_rbf_eph_spend && fuzzed_data_provider.ConsumeBool()) {\n+                    uint32_t dust_index = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, num_out);\n+                    tx_mut.vout.insert(tx_mut.vout.begin() + dust_index, CTxOut(0, P2WSH_EMPTY));\n+                }\n+\n+                auto tx = MakeTransactionRef(tx_mut);\n+                // Restore previously removed outpoints, except in-package outpoints (to allow RBF)\n+                if (!last_tx) {\n+                    for (const auto& in : tx->vin) {\n+                        Assert(outpoints.insert(in.prevout).second);\n+                    }\n+                    // Cache the in-package outpoints being made\n+                    for (size_t i = 0; i < tx->vout.size(); ++i) {\n+                        package_outpoints.emplace(tx->GetHash(), i);\n+                    }\n+                }\n+                // We need newly-created values for the duration of this run\n+                for (size_t i = 0; i < tx->vout.size(); ++i) {\n+                    outpoints_value[COutPoint(tx->GetHash(), i)] = tx->vout[i].nValue;\n+                }\n+                return tx;\n+            }();\n+            txs.push_back(tx);\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   txs.back()->GetHash() :\n+                                   PickValue(fuzzed_data_provider, mempool_outpoints).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            // We only prioritise out of mempool transactions since PrioritiseTransaction doesn't\n+            // filter for ephemeral dust GetEntry\n+            if (tx_pool.exists(GenTxid::Txid(txid))) {\n+                const auto tx_info{tx_pool.info(GenTxid::Txid(txid))};\n+                if (GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate).empty()) {\n+                    tx_pool.PrioritiseTransaction(txid.ToUint256(), delta);\n+                }\n+            }\n+        }\n+\n+        // Remember all added transactions\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(added);\n+        node.validation_signals->RegisterSharedValidationInterface(txr);\n+\n+        auto single_submit = txs.size() == 1;\n+\n+        const auto result_package = WITH_LOCK(::cs_main,\n+                                    return ProcessNewPackage(chainstate, tx_pool, txs, /*test_accept=*/single_submit, /*client_maxfeerate=*/{}));\n+\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, txs.back(), GetTime(),\n+                                   /*bypass_limits=*/false, /*test_accept=*/!single_submit));",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps we could let `bypass_limits` be filled in by the fuzzer, rather than hardcoded to false?",
      "created_at": "2024-10-18T16:05:50Z",
      "updated_at": "2024-10-18T16:41:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1806730678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806730678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806765767",
      "pull_request_review_id": 2378496425,
      "id": 1806765767,
      "node_id": "PRRC_kwDOABII585rsQ7H",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Overall I think this is much easier to follow with the codepaths merged, thanks.  However on further review, I am concerned about how much work we might do in this function.\r\n\r\nAs written, if a transaction had 1000 inputs, which all spend from a single parent with 1000 outputs, then we'd do 1M loop iterations, because we're not deduplicating parents for each input of a transaction (so for each input of the child, we'd be looking at all 1000 outputs of the parent).  If we deduplicate the parents first, then the number of parent outputs we might possibly have to look at is bounded by the ancestor size limit (or the cluster size limit, in the future), to something on the order of a few thousand outputs. \r\n\r\nIf we are relying on the ancestor size limits for a work bound, then we should make sure that all those limits are checked prior to this function being invoked.  I think in the package acceptance case, that would involve moving this check to come after the `CheckPackageLimits()` check that happens in `AcceptMultipleTransactions`.\r\n\r\nI think this might be enough, but we could consider going further -- what if we were to cache how many dust outputs a transaction has in the `CTxMemPoolEntry` itself?  Then we would be reduced to just looping over the inputs of the incoming transactions and counting, for each distinct parent, how many of the dust outputs are spent. This is probably not simple to do at the moment (since in the package case, we don't have CTxMemPoolEntry objects to work on yet), but I have some refactors in mind for mempool acceptance which would make this easier to consider in the future.\r\n\r\nAnyway, it might be nice to add a micro-benchmark for transaction validation of a single transaction with 1000 inputs, which all come from a single parent with 1000 outputs, just to make sure we're not slowing that case down inordinately.",
      "created_at": "2024-10-18T16:38:56Z",
      "updated_at": "2024-10-18T16:41:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1806765767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1806765767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809048162",
      "pull_request_review_id": 2382486629,
      "id": 1809048162,
      "node_id": "PRRC_kwDOABII585r0-Ji",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        std::vector<uint32_t> dust_indexes{GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate)};\n+        if (!dust_indexes.empty()) {\n+            const auto& children = entry.GetMemPoolChildrenConst();\n+            if (!children.empty()) {\n+                Assert(children.size() == 1);\n+                // Find an input that doesn't spend from parent's txid\n+                const auto& only_child = children.begin()->get().GetTx();\n+                for (const auto& tx_input : only_child.vin) {\n+                    if (tx_input.prevout.hash != tx_info.tx->GetHash()) {\n+                        return tx_input.prevout;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+FUZZ_TARGET(ephemeral_package_eval, .init = initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate{static_cast<DummyChainState&>(node.chainman->ActiveChainstate())};\n+\n+    MockTime(fuzzed_data_provider, chainstate);\n+\n+    // All RBF-spendable outpoints outside of the unsubmitted package\n+    std::set<COutPoint> mempool_outpoints;\n+    std::map<COutPoint, CAmount> outpoints_value;\n+    for (const auto& outpoint : g_outpoints_coinbase_init_mature) {\n+        Assert(mempool_outpoints.insert(outpoint).second);\n+        outpoints_value[outpoint] = 50 * COIN;\n+    }\n+\n+    auto outpoints_updater = std::make_shared<OutpointsUpdater>(mempool_outpoints);\n+    node.validation_signals->RegisterSharedValidationInterface(outpoints_updater);\n+\n+    auto tx_pool_{MakeEphemeralMempool(node)};\n+    MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(tx_pool_.get());\n+\n+    chainstate.SetMempool(&tx_pool);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n+        Assert(!mempool_outpoints.empty());\n+\n+        std::vector<CTransactionRef> txs;\n+\n+        // Find something we may want to double-spend with two input single tx\n+        std::optional<COutPoint> outpoint_to_rbf{GetEphemeralSibling(tx_pool)};\n+        bool should_rbf_eph_spend = outpoint_to_rbf && fuzzed_data_provider.ConsumeBool();\n+\n+        // Make small packages\n+        const auto num_txs = should_rbf_eph_spend ? 1 : (size_t) fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+\n+        std::set<COutPoint> package_outpoints;\n+        while (txs.size() < num_txs) {\n+\n+            // Last transaction in a package needs to be a child of parents to get further in validation\n+            // so the last transaction to be generated(in a >1 package) must spend all package-made outputs\n+            // Note that this test currently only spends package outputs in last transaction.\n+            bool last_tx = num_txs > 1 && txs.size() == num_txs - 1;\n+\n+            // Create transaction to add to the mempool\n+            const CTransactionRef tx = [&] {\n+                CMutableTransaction tx_mut;\n+                tx_mut.version = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = 0;\n+                // Last tx will sweep half or more of all outpoints from package\n+                const auto num_in = should_rbf_eph_spend ? 2 :\n+                    last_tx ? fuzzed_data_provider.ConsumeIntegralInRange<int>(package_outpoints.size()/2 + 1, package_outpoints.size()) :\n+                    fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+                auto num_out = should_rbf_eph_spend ? 1 : fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);\n+\n+                auto& outpoints = last_tx ? package_outpoints : mempool_outpoints;\n+\n+                Assert((int)outpoints.size() >= num_in && num_in > 0);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                    auto outpoint = *pop;\n+\n+                    if (i == 0 && should_rbf_eph_spend) {\n+                        outpoint = *outpoint_to_rbf;\n+                        outpoints.erase(outpoint);\n+                    } else {\n+                        outpoints.erase(pop);\n+                    }\n+                    // no need to update or erase from outpoints_value\n+                    amount_in += outpoints_value.at(outpoint);\n+\n+                    // Create input\n+                    CTxIn in;\n+                    in.prevout = outpoint;\n+                    in.scriptWitness.stack = P2WSH_EMPTY_TRUE_STACK;\n+\n+                    tx_mut.vin.push_back(in);\n+                }\n+\n+                const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, amount_in);\n+                const auto amount_out = (amount_in - amount_fee) / num_out;\n+                for (int i = 0; i < num_out; ++i) {\n+                    tx_mut.vout.emplace_back(amount_out, P2WSH_EMPTY);\n+                }\n+\n+                // Note output amounts can naturally drop to dust on their own.\n+                if (!should_rbf_eph_spend && fuzzed_data_provider.ConsumeBool()) {\n+                    uint32_t dust_index = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, num_out);\n+                    tx_mut.vout.insert(tx_mut.vout.begin() + dust_index, CTxOut(0, P2WSH_EMPTY));\n+                }\n+\n+                auto tx = MakeTransactionRef(tx_mut);\n+                // Restore previously removed outpoints, except in-package outpoints (to allow RBF)\n+                if (!last_tx) {\n+                    for (const auto& in : tx->vin) {\n+                        Assert(outpoints.insert(in.prevout).second);\n+                    }\n+                    // Cache the in-package outpoints being made\n+                    for (size_t i = 0; i < tx->vout.size(); ++i) {\n+                        package_outpoints.emplace(tx->GetHash(), i);\n+                    }\n+                }\n+                // We need newly-created values for the duration of this run\n+                for (size_t i = 0; i < tx->vout.size(); ++i) {\n+                    outpoints_value[COutPoint(tx->GetHash(), i)] = tx->vout[i].nValue;\n+                }\n+                return tx;\n+            }();\n+            txs.push_back(tx);\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   txs.back()->GetHash() :\n+                                   PickValue(fuzzed_data_provider, mempool_outpoints).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            // We only prioritise out of mempool transactions since PrioritiseTransaction doesn't\n+            // filter for ephemeral dust GetEntry\n+            if (tx_pool.exists(GenTxid::Txid(txid))) {\n+                const auto tx_info{tx_pool.info(GenTxid::Txid(txid))};\n+                if (GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate).empty()) {\n+                    tx_pool.PrioritiseTransaction(txid.ToUint256(), delta);\n+                }\n+            }\n+        }\n+\n+        // Remember all added transactions\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(added);\n+        node.validation_signals->RegisterSharedValidationInterface(txr);\n+\n+        auto single_submit = txs.size() == 1;\n+\n+        const auto result_package = WITH_LOCK(::cs_main,\n+                                    return ProcessNewPackage(chainstate, tx_pool, txs, /*test_accept=*/single_submit, /*client_maxfeerate=*/{}));\n+\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, txs.back(), GetTime(),\n+                                   /*bypass_limits=*/false, /*test_accept=*/!single_submit));",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806730678,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done, previously this would have allowed non-dust-spending children and invalidate the invariant checks, now it shouldn't matter",
      "created_at": "2024-10-21T15:31:16Z",
      "updated_at": "2024-10-21T15:31:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809048162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809048162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809048220",
      "pull_request_review_id": 2382486727,
      "id": 1809048220,
      "node_id": "PRRC_kwDOABII585r0-Kc",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806727152,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-21T15:31:18Z",
      "updated_at": "2024-10-21T15:31:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809048220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809048220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809050952",
      "pull_request_review_id": 2382491158,
      "id": 1809050952,
      "node_id": "PRRC_kwDOABII585r0-1I",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806765767,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> we don't have CTxMemPoolEntry objects to work on yet\r\n\r\nI don't think that's true? `PreChecks` has built a mempool entry for each package tx. We could track the exact outpoint that is dust in the mempool entry. I'll give that a shot.",
      "created_at": "2024-10-21T15:33:03Z",
      "updated_at": "2024-10-21T15:33:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809050952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809050952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809231705",
      "pull_request_review_id": 2382860507,
      "id": 1809231705,
      "node_id": "PRRC_kwDOABII585r1q9Z",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806765767,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@sdaftuar this should do it if you think something like this is reasonable: https://github.com/instagibbs/bitcoin/commit/6007146613fe663f0af30c24c47a19792f8e691d\r\n\r\n",
      "created_at": "2024-10-21T17:37:23Z",
      "updated_at": "2024-10-21T17:37:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809231705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809231705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809271898",
      "pull_request_review_id": 2382979168,
      "id": 1809271898,
      "node_id": "PRRC_kwDOABII585r10xa",
      "diff_hunk": "@@ -493,7 +493,15 @@ static RPCHelpMan prioritisetransaction()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureAnyMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n+    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+\n+    // Non-0 fees are not allowed for entry, and modification not allowed afterwards\n+    const auto& tx = mempool.get(hash);\n+    if (tx && std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, mempool.m_opts.dust_relay_feerate); })) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is not supported for transactions with ephemeral dust.\");",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "3923a1315643e18cb637edc1adf5671a40a4cd03",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me that this would apply to any transaction with a dust output rather than just one that fulfills the criteria of \"ephemeral dust\". \r\n\r\n```suggestion\r\n        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is not supported for transactions with dust outputs.\");\r\n```",
      "created_at": "2024-10-21T18:11:49Z",
      "updated_at": "2024-10-21T18:18:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809271898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809271898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809279480",
      "pull_request_review_id": 2382979168,
      "id": 1809279480,
      "node_id": "PRRC_kwDOABII585r12n4",
      "diff_hunk": "@@ -0,0 +1,12 @@\n+P2P and network changes\n+-----------------------\n+\n+Ephemeral dust is a new concept that allows a single\n+dust output in a tranasction, provided the transaction",
      "path": "doc/release-notes-30239.md",
      "position": null,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "7defd31351e9d650ab67df88240a9e898f85abb1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\ndust output in a transaction, provided the transaction\r\n```",
      "created_at": "2024-10-21T18:17:43Z",
      "updated_at": "2024-10-21T18:18:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809279480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809279480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809451766",
      "pull_request_review_id": 2383208003,
      "id": 1809451766,
      "node_id": "PRRC_kwDOABII585r2gr2",
      "diff_hunk": "@@ -493,7 +493,15 @@ static RPCHelpMan prioritisetransaction()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureAnyMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n+    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+\n+    // Non-0 fees are not allowed for entry, and modification not allowed afterwards\n+    const auto& tx = mempool.get(hash);\n+    if (tx && std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, mempool.m_opts.dust_relay_feerate); })) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is not supported for transactions with ephemeral dust.\");",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "3923a1315643e18cb637edc1adf5671a40a4cd03",
      "in_reply_to_id": 1809271898,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-21T20:07:07Z",
      "updated_at": "2024-10-21T20:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809451766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809451766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809451807",
      "pull_request_review_id": 2383208062,
      "id": 1809451807,
      "node_id": "PRRC_kwDOABII585r2gsf",
      "diff_hunk": "@@ -0,0 +1,12 @@\n+P2P and network changes\n+-----------------------\n+\n+Ephemeral dust is a new concept that allows a single\n+dust output in a tranasction, provided the transaction",
      "path": "doc/release-notes-30239.md",
      "position": null,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "7defd31351e9d650ab67df88240a9e898f85abb1",
      "in_reply_to_id": 1809279480,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-21T20:07:09Z",
      "updated_at": "2024-10-21T20:07:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809451807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809451807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809453084",
      "pull_request_review_id": 2383209433,
      "id": 1809453084,
      "node_id": "PRRC_kwDOABII585r2hAc",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806765767,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hm, I I think that approach uses an extra 24 bytes per mempool entry, which strikes me as a bit heavy for what we need.  Let's see if this is fast enough as-is and if so, call it a day.",
      "created_at": "2024-10-21T20:07:59Z",
      "updated_at": "2024-10-21T20:07:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809453084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809453084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809480956",
      "pull_request_review_id": 2383243057,
      "id": 1809480956,
      "node_id": "PRRC_kwDOABII585r2nz8",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806765767,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alternative is to store a bool, and use that to filter 99.9% of transactions that won't have dust, and then eat the O(num_outputs) cost to find the dust when at spending time.\r\n\r\nWith 1000 inputs/outputs and a small number of dust outputs, I get:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|           60,600.53 |           16,501.51 |    0.7% |      0.01 | `MempoolCheckEphemeralSpends`\r\n```\r\n\r\nWhen I make all the outputs dust(which can't happen currently due to IsStandard):\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|           75,160.69 |           13,304.83 |    0.6% |      1.07 | `MempoolCheckEphemeralSpends`\r\n\r\n```\r\n\r\nnumber of outputs/inputs can be varied in the benchmark via `-asymptote=X`",
      "created_at": "2024-10-21T20:27:34Z",
      "updated_at": "2024-10-21T20:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1809480956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1809480956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816952259",
      "pull_request_review_id": 2395711441,
      "id": 1816952259,
      "node_id": "PRRC_kwDOABII585sTH3D",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(tx_input.prevout.hash)) {\n+                parent_ref = map_txid_ref[tx_input.prevout.hash];\n+            } else {\n+                parent_ref = tx_pool.get(tx_input.prevout.hash);\n+            }\n+\n+            // Check for dust on parents\n+            if (parent_ref) {\n+                for (uint32_t out_index = 0; out_index < parent_ref->vout.size(); out_index++) {\n+                    const auto& tx_output = parent_ref->vout[out_index];\n+                    if (IsDust(tx_output, dust_relay_rate)) {\n+                        unspent_parent_dust.insert(COutPoint(parent_ref->GetHash(), out_index));\n+                    }\n+                }\n+            }\n+        }",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": 64,
      "original_position": 53,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "ad3e40ce53a9baff01701439d6cfced996cb7ba4",
      "in_reply_to_id": 1806765767,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this should be fine for performance.  Large transactions take orders of magnitude more time to validate than what is being added here (and for small transactions this is extremely fast).",
      "created_at": "2024-10-25T15:47:23Z",
      "updated_at": "2024-10-25T15:47:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1816952259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1816952259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817094524",
      "pull_request_review_id": 2395962778,
      "id": 1817094524,
      "node_id": "PRRC_kwDOABII585sTql8",
      "diff_hunk": "@@ -1592,6 +1610,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n+    // Now that we've bounded the resulting possible ancestry count, check parents for dust spends\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate, m_pool)}) {\n+            const Txid& parent_txid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fcbfed4630bdee6c52644c89e972ba7c130f47d5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this logging correct?  The `parent_txid` here is really the txid of the child that didn't spend all of some parent's dust.  I don't think we know which actual parent of that transaction had the unspent dust, unless we add more information to the return value of `CheckEphemeralSpends`.",
      "created_at": "2024-10-25T17:32:10Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817094524",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817094524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817223902",
      "pull_request_review_id": 2395962778,
      "id": 1817223902,
      "node_id": "PRRC_kwDOABII585sUKLe",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with dust outputs.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any satoshi amount is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_greater_than(unspent_sweep_tx[\"fee\"], sweep_tx[\"fee\"])\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 248,
      "original_position": 246,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d2ed713df9a842599dc41467aa35f75387fa6f7a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it also worth testing that this fails if submitted via `sendrawtransaction` as well, so we're not just testing the `AcceptPackage()` code path?",
      "created_at": "2024-10-25T19:11:21Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817223902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817223902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 248,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817315017",
      "pull_request_review_id": 2395962778,
      "id": 1817315017,
      "node_id": "PRRC_kwDOABII585sUgbJ",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with dust outputs.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any satoshi amount is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_greater_than(unspent_sweep_tx[\"fee\"], sweep_tx[\"fee\"])\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], f\"missing-ephemeral-spends, tx {unspent_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Spend works with dust spent\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        assert sweep_tx[\"hex\"] != sweep_tx_2[\"hex\"]\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits allowing 0-fee individually\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will not make it back in due to spend checks\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    # N.B. this extra_args can be removed post cluster mempool\n+    def test_free_relay(self):\n+        self.log.info(\"Test that ephemeral dust works in non-TRUC contexts when there's no minrelay requirement\")\n+\n+        # Note: since minrelay is 0, it is not testing 1P1C relay\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # generate coins for next tests\n+        self.generate(self.nodes[0], 1)\n+        self.wallet.rescan_utxos()\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test batched ephemeral dust sweep\")\n+        dusty_txs = []\n+        for _ in range(24):\n+            dusty_txs.append(self.wallet.create_self_transfer_multi(fee_per_output=0, version=2))\n+            self.add_output_to_create_multi_result(dusty_txs[-1])\n+\n+        all_parent_utxos = [utxo for tx in dusty_txs for utxo in tx[\"new_utxos\"]]\n+\n+        # Missing one dust spend from a single parent, child rejected\n+        insufficient_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=25000, utxos_to_spend=all_parent_utxos[:-1], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs] + [insufficient_sweep_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"transaction failed\")\n+        assert_equal(res['tx-results'][insufficient_sweep_tx['wtxid']]['error'], f\"missing-ephemeral-spends, tx {insufficient_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        # Everything got in except for insufficient spend\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs])\n+\n+        # Next put some parents in mempool, but not others, and test unspent dust again with all parents spent\n+        B_coin = self.wallet.get_utxo() # coin to cycle out CPFP\n+        sweep_all_but_one_tx = self.wallet.create_self_transfer_multi(fee_per_output=20000, utxos_to_spend=all_parent_utxos[:-2] + [B_coin], version=2)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs[:-1]] + [sweep_all_but_one_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [sweep_all_but_one_tx[\"tx\"]])\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs] + [insufficient_sweep_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"transaction failed\")\n+        assert_equal(res['tx-results'][insufficient_sweep_tx[\"wtxid\"]][\"error\"], f\"missing-ephemeral-spends, tx {insufficient_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [sweep_all_but_one_tx[\"tx\"]])\n+\n+        # Cycle out the partial sweep to avoid triggering package RBF behavior which limits package to no in-mempool ancestors\n+        cancel_sweep = self.wallet.create_self_transfer_multi(fee_per_output=21000, utxos_to_spend=[B_coin], version=2)\n+        self.nodes[0].sendrawtransaction(cancel_sweep[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [cancel_sweep[\"tx\"]])\n+\n+        # Sweeps all dust, where most are already in-mempool",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 459,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d2ed713df9a842599dc41467aa35f75387fa6f7a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think all the parents in-mempool at this point?",
      "created_at": "2024-10-25T20:35:00Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817315017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817315017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817374367",
      "pull_request_review_id": 2395962778,
      "id": 1817374367,
      "node_id": "PRRC_kwDOABII585sUu6f",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fecf9322b903d11e1cbf1726effb69ab840dbbe2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just want to make sure I understand what you mean by \"sibling\" here. Is the idea that if we have a topology like this:\r\n\r\n```mermaid\r\nflowchart TD\r\n  TxA --> TxC\r\n  TxB --> TxC\r\n```\r\n\r\nWhere Tx A has ephemeral dust outputs and is in the mempool, and Tx C spends them and is in the mempool, than you want to return an outpoint of Tx B, whether or not Tx B itself is in the mempool, and whether or not Tx B itself has ephemeral dust outputs?",
      "created_at": "2024-10-25T21:10:19Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817374367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817374367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817771844",
      "pull_request_review_id": 2395962778,
      "id": 1817771844,
      "node_id": "PRRC_kwDOABII585sWP9E",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        std::vector<uint32_t> dust_indexes{GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate)};\n+        if (!dust_indexes.empty()) {\n+            const auto& children = entry.GetMemPoolChildrenConst();\n+            if (!children.empty()) {\n+                Assert(children.size() == 1);\n+                // Find an input that doesn't spend from parent's txid\n+                const auto& only_child = children.begin()->get().GetTx();\n+                for (const auto& tx_input : only_child.vin) {\n+                    if (tx_input.prevout.hash != tx_info.tx->GetHash()) {\n+                        return tx_input.prevout;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+FUZZ_TARGET(ephemeral_package_eval, .init = initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate{static_cast<DummyChainState&>(node.chainman->ActiveChainstate())};\n+\n+    MockTime(fuzzed_data_provider, chainstate);\n+\n+    // All RBF-spendable outpoints outside of the unsubmitted package\n+    std::set<COutPoint> mempool_outpoints;\n+    std::map<COutPoint, CAmount> outpoints_value;\n+    for (const auto& outpoint : g_outpoints_coinbase_init_mature) {\n+        Assert(mempool_outpoints.insert(outpoint).second);\n+        outpoints_value[outpoint] = 50 * COIN;\n+    }\n+\n+    auto outpoints_updater = std::make_shared<OutpointsUpdater>(mempool_outpoints);\n+    node.validation_signals->RegisterSharedValidationInterface(outpoints_updater);\n+\n+    auto tx_pool_{MakeEphemeralMempool(node)};\n+    MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(tx_pool_.get());\n+\n+    chainstate.SetMempool(&tx_pool);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n+        Assert(!mempool_outpoints.empty());\n+\n+        std::vector<CTransactionRef> txs;\n+\n+        // Find something we may want to double-spend with two input single tx\n+        std::optional<COutPoint> outpoint_to_rbf{GetEphemeralSibling(tx_pool)};\n+        bool should_rbf_eph_spend = outpoint_to_rbf && fuzzed_data_provider.ConsumeBool();\n+\n+        // Make small packages\n+        const auto num_txs = should_rbf_eph_spend ? 1 : (size_t) fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": 91,
      "original_position": 89,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fecf9322b903d11e1cbf1726effb69ab840dbbe2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If it's not too hard, I was thinking it would be nice to have this fuzz test cover the package RBF case as well.",
      "created_at": "2024-10-26T10:42:05Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817771844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817771844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 227,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817772690",
      "pull_request_review_id": 2395962778,
      "id": 1817772690,
      "node_id": "PRRC_kwDOABII585sWQKS",
      "diff_hunk": "@@ -89,6 +90,125 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay, pool).has_value());\n+\n+    // Now with dust, ok because the tx has no dusty parents\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1}, minrelay, pool).has_value());\n+\n+    // Dust checks pass\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, CFeeRate(0), pool).has_value());\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, minrelay, pool).has_value());\n+\n+    auto dust_non_spend = make_tx({COutPoint{dust_txid, dust_index - 1}}, /*version=*/2);\n+\n+    // Child spending non-dust only from parent should be disallowed even if dust otherwise spent\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend, dust_spend}, minrelay, pool).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_spend, dust_non_spend}, minrelay, pool).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend}, minrelay, pool).has_value());\n+\n+    auto grandparent_tx_2 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid_2 = grandparent_tx_2->GetHash();\n+\n+    // Spend dust from one but not another is ok, as long as second grandparent has no child\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend}, minrelay, pool).has_value());\n+\n+    auto dust_non_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index - 1}}, /*version=*/2);\n+    // But if we spend from the parent, it must spend dust\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_non_spend_both_parents}, minrelay, pool).has_value());\n+\n+    auto dust_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_both_parents}, minrelay, pool).has_value());\n+\n+    // Spending other outputs is also correct, as long as the dusty one is spent\n+    const std::vector<COutPoint> all_outpoints{COutPoint(dust_txid, 0), COutPoint(dust_txid, 1), COutPoint(dust_txid, 2),\n+        COutPoint(dust_txid_2, 0), COutPoint(dust_txid_2, 1), COutPoint(dust_txid_2, 2)};\n+    auto dust_spend_all_outpoints = make_tx(all_outpoints, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_all_outpoints}, minrelay, pool).has_value());\n+\n+    // 2 grandparents with dust <- 1 dust-spending parent with dust <- child with no dust\n+    auto parent_with_dust = make_ephemeral_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    // Ok for parent to have dust\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust}, minrelay, pool).has_value());\n+    auto child_no_dust = make_tx({COutPoint{parent_with_dust->GetHash(), dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust, child_no_dust}, minrelay, pool).has_value());\n+\n+    // 2 grandparents with dust <- 1 dust-spending parent with dust <- child with dust\n+    auto child_with_dust = make_ephemeral_tx({COutPoint{parent_with_dust->GetHash(), dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust, child_with_dust}, minrelay, pool).has_value());\n+\n+    // Tests with parents in mempool\n+\n+    // Empty ancestors means this should never fail since it only checks parents' dust",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "823d6be7ca6e64e4dbd2f51593943725277b6656",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Comment needs to be updated I think?",
      "created_at": "2024-10-26T10:49:05Z",
      "updated_at": "2024-10-26T10:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817772690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817772690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860890",
      "pull_request_review_id": 2397263180,
      "id": 1817860890,
      "node_id": "PRRC_kwDOABII585sWlsa",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+        std::vector<uint32_t> dust_indexes{GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate)};\n+        if (!dust_indexes.empty()) {\n+            const auto& children = entry.GetMemPoolChildrenConst();\n+            if (!children.empty()) {\n+                Assert(children.size() == 1);\n+                // Find an input that doesn't spend from parent's txid\n+                const auto& only_child = children.begin()->get().GetTx();\n+                for (const auto& tx_input : only_child.vin) {\n+                    if (tx_input.prevout.hash != tx_info.tx->GetHash()) {\n+                        return tx_input.prevout;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+FUZZ_TARGET(ephemeral_package_eval, .init = initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate{static_cast<DummyChainState&>(node.chainman->ActiveChainstate())};\n+\n+    MockTime(fuzzed_data_provider, chainstate);\n+\n+    // All RBF-spendable outpoints outside of the unsubmitted package\n+    std::set<COutPoint> mempool_outpoints;\n+    std::map<COutPoint, CAmount> outpoints_value;\n+    for (const auto& outpoint : g_outpoints_coinbase_init_mature) {\n+        Assert(mempool_outpoints.insert(outpoint).second);\n+        outpoints_value[outpoint] = 50 * COIN;\n+    }\n+\n+    auto outpoints_updater = std::make_shared<OutpointsUpdater>(mempool_outpoints);\n+    node.validation_signals->RegisterSharedValidationInterface(outpoints_updater);\n+\n+    auto tx_pool_{MakeEphemeralMempool(node)};\n+    MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(tx_pool_.get());\n+\n+    chainstate.SetMempool(&tx_pool);\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n+        Assert(!mempool_outpoints.empty());\n+\n+        std::vector<CTransactionRef> txs;\n+\n+        // Find something we may want to double-spend with two input single tx\n+        std::optional<COutPoint> outpoint_to_rbf{GetEphemeralSibling(tx_pool)};\n+        bool should_rbf_eph_spend = outpoint_to_rbf && fuzzed_data_provider.ConsumeBool();\n+\n+        // Make small packages\n+        const auto num_txs = should_rbf_eph_spend ? 1 : (size_t) fuzzed_data_provider.ConsumeIntegralInRange<int>(1, 4);",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": 91,
      "original_position": 89,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fecf9322b903d11e1cbf1726effb69ab840dbbe2",
      "in_reply_to_id": 1817771844,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't looked lately but these harnesses should trigger package RBF behavior. I added the package mempool results checking to check the related invariants.\r\n\r\nedit: To be clear, I validated that package rbfs were happening prior, it's just not constructed \"intentionally\" by the harness.",
      "created_at": "2024-10-26T14:26:25Z",
      "updated_at": "2024-10-26T15:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 227,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860896",
      "pull_request_review_id": 2397263188,
      "id": 1817860896,
      "node_id": "PRRC_kwDOABII585sWlsg",
      "diff_hunk": "@@ -89,6 +90,125 @@ static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int3\n     return MakeTransactionRef(mtx);\n }\n \n+// Same as make_tx but adds 2 normal outputs and 0-value dust to end of vout\n+static inline CTransactionRef make_ephemeral_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.version = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(3);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 3; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = (i == 2) ? 0 : 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(ephemeral_tests, RegTestingSetup)\n+{\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries empty_ancestors;\n+\n+    CFeeRate minrelay(1000);\n+\n+    // Basic transaction with dust\n+    auto grandparent_tx_1 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid = grandparent_tx_1->GetHash();\n+\n+    uint32_t dust_index = 2;\n+\n+    // Child transaction spending dust\n+    auto dust_spend = make_tx({COutPoint{dust_txid, dust_index}}, /*version=*/2);\n+\n+    // We first start with nothing \"in the mempool\", using package checks\n+\n+    // Trivial single transaction with no dust\n+    BOOST_CHECK(!CheckEphemeralSpends({dust_spend}, minrelay, pool).has_value());\n+\n+    // Now with dust, ok because the tx has no dusty parents\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1}, minrelay, pool).has_value());\n+\n+    // Dust checks pass\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, CFeeRate(0), pool).has_value());\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, dust_spend}, minrelay, pool).has_value());\n+\n+    auto dust_non_spend = make_tx({COutPoint{dust_txid, dust_index - 1}}, /*version=*/2);\n+\n+    // Child spending non-dust only from parent should be disallowed even if dust otherwise spent\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend, dust_spend}, minrelay, pool).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_spend, dust_non_spend}, minrelay, pool).has_value());\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, dust_non_spend}, minrelay, pool).has_value());\n+\n+    auto grandparent_tx_2 = make_ephemeral_tx(random_outpoints(1), /*version=*/2);\n+    const auto dust_txid_2 = grandparent_tx_2->GetHash();\n+\n+    // Spend dust from one but not another is ok, as long as second grandparent has no child\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend}, minrelay, pool).has_value());\n+\n+    auto dust_non_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index - 1}}, /*version=*/2);\n+    // But if we spend from the parent, it must spend dust\n+    BOOST_CHECK(CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_non_spend_both_parents}, minrelay, pool).has_value());\n+\n+    auto dust_spend_both_parents = make_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_both_parents}, minrelay, pool).has_value());\n+\n+    // Spending other outputs is also correct, as long as the dusty one is spent\n+    const std::vector<COutPoint> all_outpoints{COutPoint(dust_txid, 0), COutPoint(dust_txid, 1), COutPoint(dust_txid, 2),\n+        COutPoint(dust_txid_2, 0), COutPoint(dust_txid_2, 1), COutPoint(dust_txid_2, 2)};\n+    auto dust_spend_all_outpoints = make_tx(all_outpoints, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, dust_spend_all_outpoints}, minrelay, pool).has_value());\n+\n+    // 2 grandparents with dust <- 1 dust-spending parent with dust <- child with no dust\n+    auto parent_with_dust = make_ephemeral_tx({COutPoint{dust_txid, dust_index}, COutPoint{dust_txid_2, dust_index}}, /*version=*/2);\n+    // Ok for parent to have dust\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust}, minrelay, pool).has_value());\n+    auto child_no_dust = make_tx({COutPoint{parent_with_dust->GetHash(), dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust, child_no_dust}, minrelay, pool).has_value());\n+\n+    // 2 grandparents with dust <- 1 dust-spending parent with dust <- child with dust\n+    auto child_with_dust = make_ephemeral_tx({COutPoint{parent_with_dust->GetHash(), dust_index}}, /*version=*/2);\n+    BOOST_CHECK(!CheckEphemeralSpends({grandparent_tx_1, grandparent_tx_2, parent_with_dust, child_with_dust}, minrelay, pool).has_value());\n+\n+    // Tests with parents in mempool\n+\n+    // Empty ancestors means this should never fail since it only checks parents' dust",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "823d6be7ca6e64e4dbd2f51593943725277b6656",
      "in_reply_to_id": 1817772690,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "updated",
      "created_at": "2024-10-26T14:26:29Z",
      "updated_at": "2024-10-26T14:26:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860901",
      "pull_request_review_id": 2397263196,
      "id": 1817860901,
      "node_id": "PRRC_kwDOABII585sWlsl",
      "diff_hunk": "@@ -137,6 +137,212 @@ std::unique_ptr<CTxMemPool> MakeMempool(FuzzedDataProvider& fuzzed_data_provider\n     return mempool;\n }\n \n+std::unique_ptr<CTxMemPool> MakeEphemeralMempool(const NodeContext& node)\n+{\n+    // Take the default options for tests...\n+    CTxMemPool::Options mempool_opts{MemPoolOptionsForTest(node)};\n+\n+    mempool_opts.check_ratio = 1;\n+\n+    // Require standardness rules otherwise ephemeral dust is no-op\n+    mempool_opts.require_standard = true;\n+\n+    // And set minrelay to 0 to allow ephemeral parent tx even with non-TRUC\n+    mempool_opts.min_relay_feerate = CFeeRate(0);\n+\n+    // Don't worry about signaling replacement\n+    mempool_opts.full_rbf = true;\n+\n+    bilingual_str error;\n+    // ...and construct a CTxMemPool from it\n+    auto mempool{std::make_unique<CTxMemPool>(std::move(mempool_opts), error)};\n+    Assert(error.empty());\n+    return mempool;\n+}\n+\n+// Scan mempool for a tx that has spent dust, and return a \"sibling\"\n+// spend of that dust to double-spend that dust-spend out of the mempool.\n+// This assumes CheckMempoolEphemeralInvariants has passed for tx_pool.\n+std::optional<COutPoint> GetEphemeralSibling(const CTxMemPool& tx_pool)",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fecf9322b903d11e1cbf1726effb69ab840dbbe2",
      "in_reply_to_id": 1817374367,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah that's confusing, reworded",
      "created_at": "2024-10-26T14:26:32Z",
      "updated_at": "2024-10-26T14:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860919",
      "pull_request_review_id": 2397263201,
      "id": 1817860919,
      "node_id": "PRRC_kwDOABII585sWls3",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with dust outputs.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any satoshi amount is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_greater_than(unspent_sweep_tx[\"fee\"], sweep_tx[\"fee\"])\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"tx-results\"][unspent_sweep_tx[\"wtxid\"]][\"error\"], f\"missing-ephemeral-spends, tx {unspent_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Spend works with dust spent\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        assert sweep_tx[\"hex\"] != sweep_tx_2[\"hex\"]\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+\n+        # Re-set and test again with nothing from package in mempool this time\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Spend non-dust only\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"unspent-dust\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Now spend dust only which should work\n+        second_coin = self.wallet.get_utxo() # another fee-bringing coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[dusty_tx[\"new_utxos\"][1], second_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_sponsor_cycle(self):\n+        self.log.info(\"Test that dust txn is not evicted when it becomes childless, but won't be mined\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(\n+            fee_per_output=0,\n+            version=3\n+        )\n+\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sponsor_coin = self.wallet.get_utxo()\n+\n+        # Bring \"fee\" input that can be double-spend separately\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"] + [sponsor_coin], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        # sync to make sure unsponsor_tx hits second node's mempool after initial package\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Now we RBF away the child using the sponsor input only\n+        unsponsor_tx = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[sponsor_coin],\n+            num_outputs=1,\n+            fee_per_output=2000,\n+            version=3\n+        )\n+        self.nodes[0].sendrawtransaction(unsponsor_tx[\"hex\"])\n+\n+        # Parent is now childless and fee-free, so will not be mined\n+        entry_info = self.nodes[0].getmempoolentry(dusty_tx[\"txid\"])\n+        assert_equal(entry_info[\"descendantcount\"], 1)\n+        assert_equal(entry_info[\"fees\"][\"descendant\"], Decimal(0))\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], unsponsor_tx[\"tx\"]])\n+\n+        # Dust tx is not mined\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]])\n+\n+        # Create sweep that doesn't spend conflicting sponsor coin\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Can resweep\n+        self.nodes[0].sendrawtransaction(sweep_tx[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_reorgs(self):\n+        self.log.info(\"Test that reorgs breaking the truc topology doesn't cause issues\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Many shallow re-orgs confuse block gossiping making test less reliable otherwise\n+        self.disconnect_nodes(0, 1)\n+\n+        # Get dusty tx mined, then check that it makes it back into mempool on reorg\n+        # due to bypass_limits allowing 0-fee individually\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Create a sweep that has dust of its own and leaves dusty_tx's dust unspent\n+        sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx[\"hex\"])\n+\n+        # Mine the sweep then re-org, the sweep will not make it back in due to spend checks\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"]], sync=False)\n+\n+        # Also should happen if dust is swept\n+        sweep_tx_2 = self.wallet.create_self_transfer_multi(fee_per_output=0, utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.add_output_to_create_multi_result(sweep_tx_2)\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, sweep_tx_2[\"hex\"])\n+\n+        reconsider_block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_tx[\"hex\"], sweep_tx_2[\"hex\"]])\n+        self.nodes[0].invalidateblock(reconsider_block_res[\"hash\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx_2[\"tx\"]], sync=False)\n+\n+        # TRUC transactions restriction for ephemeral dust disallows further spends of ancestor chains\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=sweep_tx_2[\"new_utxos\"], version=3)\n+        assert_raises_rpc_error(-26, \"TRUC-violation\", self.nodes[0].sendrawtransaction, child_tx[\"hex\"])\n+\n+        self.nodes[0].reconsiderblock(reconsider_block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test that ephemeral dust tx with fees or multi dust don't enter mempool via reorg\")\n+        multi_dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+        self.add_output_to_create_multi_result(multi_dusty_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [multi_dusty_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # With fee and one dust\n+        dusty_fee_tx = self.wallet.create_self_transfer_multi(fee_per_output=1, version=3)\n+        self.add_output_to_create_multi_result(dusty_fee_tx)\n+\n+        block_res = self.nodes[0].rpc.generateblock(self.wallet.get_address(), [dusty_fee_tx[\"hex\"]])\n+        self.nodes[0].invalidateblock(block_res[\"hash\"])\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Re-connect and make sure we have same state still\n+        self.connect_nodes(0, 1)\n+        self.sync_all()\n+\n+    # N.B. this extra_args can be removed post cluster mempool\n+    def test_free_relay(self):\n+        self.log.info(\"Test that ephemeral dust works in non-TRUC contexts when there's no minrelay requirement\")\n+\n+        # Note: since minrelay is 0, it is not testing 1P1C relay\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # generate coins for next tests\n+        self.generate(self.nodes[0], 1)\n+        self.wallet.rescan_utxos()\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        self.log.info(\"Test batched ephemeral dust sweep\")\n+        dusty_txs = []\n+        for _ in range(24):\n+            dusty_txs.append(self.wallet.create_self_transfer_multi(fee_per_output=0, version=2))\n+            self.add_output_to_create_multi_result(dusty_txs[-1])\n+\n+        all_parent_utxos = [utxo for tx in dusty_txs for utxo in tx[\"new_utxos\"]]\n+\n+        # Missing one dust spend from a single parent, child rejected\n+        insufficient_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=25000, utxos_to_spend=all_parent_utxos[:-1], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs] + [insufficient_sweep_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"transaction failed\")\n+        assert_equal(res['tx-results'][insufficient_sweep_tx['wtxid']]['error'], f\"missing-ephemeral-spends, tx {insufficient_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        # Everything got in except for insufficient spend\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs])\n+\n+        # Next put some parents in mempool, but not others, and test unspent dust again with all parents spent\n+        B_coin = self.wallet.get_utxo() # coin to cycle out CPFP\n+        sweep_all_but_one_tx = self.wallet.create_self_transfer_multi(fee_per_output=20000, utxos_to_spend=all_parent_utxos[:-2] + [B_coin], version=2)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs[:-1]] + [sweep_all_but_one_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [sweep_all_but_one_tx[\"tx\"]])\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"] for dusty_tx in dusty_txs] + [insufficient_sweep_tx[\"hex\"]])\n+        assert_equal(res['package_msg'], \"transaction failed\")\n+        assert_equal(res['tx-results'][insufficient_sweep_tx[\"wtxid\"]][\"error\"], f\"missing-ephemeral-spends, tx {insufficient_sweep_tx['txid']} did not spend parent's ephemeral dust\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [sweep_all_but_one_tx[\"tx\"]])\n+\n+        # Cycle out the partial sweep to avoid triggering package RBF behavior which limits package to no in-mempool ancestors\n+        cancel_sweep = self.wallet.create_self_transfer_multi(fee_per_output=21000, utxos_to_spend=[B_coin], version=2)\n+        self.nodes[0].sendrawtransaction(cancel_sweep[\"hex\"])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"] for dusty_tx in dusty_txs] + [cancel_sweep[\"tx\"]])\n+\n+        # Sweeps all dust, where most are already in-mempool",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": null,
      "original_position": 459,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d2ed713df9a842599dc41467aa35f75387fa6f7a",
      "in_reply_to_id": 1817315017,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "correct, updated comment",
      "created_at": "2024-10-26T14:26:35Z",
      "updated_at": "2024-10-26T14:26:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860922",
      "pull_request_review_id": 2397263205,
      "id": 1817860922,
      "node_id": "PRRC_kwDOABII585sWls6",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)\n+\n+        # Package evaluation succeeds\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Entry is denied when non-0-fee, either base or unmodified.\n+        # If in-mempool, we're not allowed to prioritise due to detected dust output\n+        assert_raises_rpc_error(-8, \"Priority is not supported for transactions with dust outputs.\", self.nodes[0].prioritisetransaction, dusty_tx[\"txid\"], 0, 1)\n+\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_node_restart(self):\n+        self.log.info(\"Test that an ephemeral package is rejected on restart due to individual evaluation\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"success\")\n+        assert_equal(len(self.nodes[0].getrawmempool()), 2)\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Node restart; doesn't allow allow ephemeral transaction back in due to individual submission\n+        # resulting in 0-fee. Supporting re-submission of CPFP packages on restart is desired but not\n+        # yet implemented.\n+        self.restart_node(0)\n+        self.restart_node(1)\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_fee_having_parent(self):\n+        self.log.info(\"Test that a transaction with ephemeral dust may not have non-0 base fee\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        sats_fee = 1\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=sats_fee, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        assert_equal(int(COIN * dusty_tx[\"fee\"]), sats_fee) # has fees\n+        assert_greater_than(dusty_tx[\"tx\"].vout[0].nValue, 330) # main output is not dust\n+        assert_equal(dusty_tx[\"tx\"].vout[1].nValue, 0) # added one is dust\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # When base fee is non-0, we report dust like usual\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Priority is ignored: rejected even if modified fee is 0\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-sats_fee)\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        # Will not be accepted if base fee is 0 with modified fee of non-0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+        self.nodes[1].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=1000)\n+\n+        # It's rejected submitted alone\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+\n+        # Or as a package\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust, tx with dust output must be 0-fee\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    def test_multidust(self):\n+        self.log.info(\"Test that a transaction with multiple ephemeral dusts is not allowed\")\n+\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"dust\")\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_nonzero_dust(self):\n+        self.log.info(\"Test that a single output of any satoshi amount is allowed, not checking spending\")\n+\n+        # We aren't checking spending, allow it in with no fee\n+        self.restart_node(0, extra_args=[\"-minrelaytxfee=0\"])\n+        self.restart_node(1, extra_args=[\"-minrelaytxfee=0\"])\n+        self.connect_nodes(0, 1)\n+\n+        # 330 is dust threshold for taproot outputs\n+        for value in [1, 329, 330]:\n+            assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+            dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+            self.add_output_to_create_multi_result(dusty_tx, value)\n+\n+            test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+            assert test_res[0][\"allowed\"]\n+\n+        self.restart_node(0, extra_args=[])\n+        self.restart_node(1, extra_args=[])\n+        self.connect_nodes(0, 1)\n+        assert_mempool_contents(self, self.nodes[0], expected=[])\n+\n+    # N.B. If individual minrelay requirement is dropped, this test can be dropped\n+    def test_non_truc(self):\n+        self.log.info(\"Test that v2 dust-having transaction is rejected even if spent, because of min relay requirement\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=2)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=2)\n+\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_equal(res[\"package_msg\"], \"transaction failed\")\n+        assert_equal(res[\"tx-results\"][dusty_tx[\"wtxid\"]][\"error\"], \"min relay fee not met, 0 < 147\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+    def test_unspent_ephemeral(self):\n+        self.log.info(\"Test that spending from a tx with ephemeral outputs is only allowed if dust is spent as well\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx, 329)\n+\n+        # Valid sweep we will RBF incorrectly by not spending dust as well\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+        self.nodes[0].submitpackage([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert_mempool_contents(self, self.nodes[0], expected=[dusty_tx[\"tx\"], sweep_tx[\"tx\"]])\n+\n+        # Doesn't spend in-mempool dust output from parent\n+        unspent_sweep_tx = self.wallet.create_self_transfer_multi(fee_per_output=2000, utxos_to_spend=[dusty_tx[\"new_utxos\"][0]], version=3)\n+        assert_greater_than(unspent_sweep_tx[\"fee\"], sweep_tx[\"fee\"])\n+        res = self.nodes[0].submitpackage([dusty_tx[\"hex\"], unspent_sweep_tx[\"hex\"]])",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 248,
      "original_position": 246,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d2ed713df9a842599dc41467aa35f75387fa6f7a",
      "in_reply_to_id": 1817223902,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-10-26T14:26:38Z",
      "updated_at": "2024-10-26T14:26:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 248,
      "original_line": 248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860928",
      "pull_request_review_id": 2397263217,
      "id": 1817860928,
      "node_id": "PRRC_kwDOABII585sWltA",
      "diff_hunk": "@@ -1592,6 +1610,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n+    // Now that we've bounded the resulting possible ancestry count, check parents for dust spends\n+    if (m_pool.m_opts.require_standard) {\n+        if (const auto ephemeral_violation{CheckEphemeralSpends(txns, m_pool.m_opts.dust_relay_feerate, m_pool)}) {\n+            const Txid& parent_txid = ephemeral_violation.value();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "fcbfed4630bdee6c52644c89e972ba7c130f47d5",
      "in_reply_to_id": 1817094524,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "out of date logging, updated",
      "created_at": "2024-10-26T14:26:41Z",
      "updated_at": "2024-10-26T14:26:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1817860928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817860928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825267562",
      "pull_request_review_id": 2328771065,
      "id": 1825267562,
      "node_id": "PRRC_kwDOABII585sy19q",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef& tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<Txid, SaltedTxidHasher> processed_parent_set;\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            const Txid& parent_txid{tx_input.prevout.hash};\n+            // Skip parents we've already checked dust for\n+            if (processed_parent_set.contains(parent_txid)) continue;\n+\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(parent_txid)) {\n+                parent_ref = map_txid_ref[parent_txid];",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could avoid the duplicate map lookup:\r\n```suggestion\r\n            if (auto it = map_txid_ref.find(parent_txid); it != map_txid_ref.end()) {\r\n                parent_ref = it->second;\r\n```\r\n(though it probably doesn't really matter that much as `map_txid_ref` won't have more than two entries currently; also in light of https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1816952259)",
      "created_at": "2024-10-31T23:06:35Z",
      "updated_at": "2024-11-01T00:04:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825267562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825267562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 43,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825269811",
      "pull_request_review_id": 2328771065,
      "id": 1825269811,
      "node_id": "PRRC_kwDOABII585sy2gz",
      "diff_hunk": "@@ -0,0 +1,12 @@\n+P2P and network changes\n+-----------------------\n+\n+Ephemeral dust is a new concept that allows a single\n+dust output in a transaction, provided the transaction\n+is zero fee. In order to spend any unconfirmed outputs\n+from this transaction, the spender must also spend\n+this dust in addition to any other outputs.\n+\n+In other words, this type of transaction\n+should be created in a transaction package where\n+the dust is both created and spend simultaneously.",
      "path": "doc/release-notes-30239.md",
      "position": null,
      "original_position": 12,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "52b1acd16b1f9e40f6ed286a668835c0bab2e0c4",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthe dust is both created and spent simultaneously.\r\n```",
      "created_at": "2024-10-31T23:10:43Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825269811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825269811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825270642",
      "pull_request_review_id": 2328771065,
      "id": 1825270642,
      "node_id": "PRRC_kwDOABII585sy2ty",
      "diff_hunk": "@@ -71,9 +71,39 @@ def test_dust_output(self, node: TestNode, dust_relay_fee: Decimal,\n         # finally send the transaction to avoid running out of MiniWallet UTXOs\n         self.wallet.sendrawtransaction(from_node=node, tx_hex=tx_good_hex)\n \n+    def test_dustrelay(self):\n+        self.log.info(\"Test that small outputs are acceptable when dust relay rate is set to 0 that would otherwise trigger ephemeral dust rules\")\n+\n+        self.restart_node(0, extra_args=[\"-dustrelayfee=0\"])\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        # Dust is 1 satoshi create_self_transfer_multi disallows 0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, amount_per_output=1, num_outputs=2)\n+        dust_txid = self.nodes[0].rpc.sendrawtransaction(hexstring=dusty_tx[\"hex\"], maxfeerate=0)",
      "path": "test/functional/mempool_dust.py",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "191ca0506ca69caa4d24c1f38b6f68742abb84dc",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: calling the RPC via the `.rpc` member shouldn't be needed? (here and below)\r\n```suggestion\r\n        dust_txid = self.nodes[0].sendrawtransaction(hexstring=dusty_tx[\"hex\"], maxfeerate=0)\r\n```",
      "created_at": "2024-10-31T23:12:26Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825270642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825270642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825272593",
      "pull_request_review_id": 2328771065,
      "id": 1825272593,
      "node_id": "PRRC_kwDOABII585sy3MR",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "whitespace nit\r\n```suggestion\r\n#include <policy/ephemeral_policy.h>\r\n#include <policy/policy.h>\r\n```\r\n",
      "created_at": "2024-10-31T23:16:33Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825272593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825272593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825273227",
      "pull_request_review_id": 2328771065,
      "id": 1825273227,
      "node_id": "PRRC_kwDOABII585sy3WL",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef& tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "potential follow-up nit: could create a helper like `HasDustOutputs` (or `IsDusty`) and use that here and in the `prioritisetransaction` RPC",
      "created_at": "2024-10-31T23:17:54Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825273227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825273227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825276484",
      "pull_request_review_id": 2328771065,
      "id": 1825276484,
      "node_id": "PRRC_kwDOABII585sy4JE",
      "diff_hunk": "@@ -491,7 +491,15 @@ static RPCHelpMan prioritisetransaction()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureAnyMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n+    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+\n+    // Non-0 fees are not allowed for entry, and modification not allowed afterwards",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d75a77b11e281a4358d0ee9b92c51dddd1589d84",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Non-0 fee dust transactions are not allowed for entry, and modification not allowed afterwards\r\n```",
      "created_at": "2024-10-31T23:24:20Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825276484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825276484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825278134",
      "pull_request_review_id": 2328771065,
      "id": 1825278134,
      "node_id": "PRRC_kwDOABII585sy4i2",
      "diff_hunk": "@@ -21,6 +21,20 @@\n \n ORPHAN_TX_EXPIRE_TIME = 1200\n \n+def assert_mempool_contents(test_framework, node, expected=None, sync=True):",
      "path": "test/functional/test_framework/mempool_util.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "follow-up idea: could take use of that helper in `mempool_package_rbf.py` (might be a nice \"good first issue\")",
      "created_at": "2024-10-31T23:27:38Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825278134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825278134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825279952",
      "pull_request_review_id": 2328771065,
      "id": 1825279952,
      "node_id": "PRRC_kwDOABII585sy4_Q",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 74,
      "original_position": 74,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "follow-up idea: could put this in a helper for creating an ephemeral package (`dusty_tx` + `sweep_tx`), as that's a repeated pattern in many sub-tests; might make sense to parametrize with tx version, number of dust outputs and optional additional sponsors",
      "created_at": "2024-10-31T23:31:25Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825279952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825279952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": 71,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825281386",
      "pull_request_review_id": 2328771065,
      "id": 1825281386,
      "node_id": "PRRC_kwDOABII585sy5Vq",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: here and in other subtests, could verify that the modified fees are indeed zero again with an `getprioritisedtransactions` call after",
      "created_at": "2024-10-31T23:34:04Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825281386",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825281386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825284831",
      "pull_request_review_id": 2328771065,
      "id": 1825284831,
      "node_id": "PRRC_kwDOABII585sy6Lf",
      "diff_hunk": "@@ -252,7 +252,7 @@ def get_tx(self):\n         vin = self.valid_txin\n         vin.scriptSig = CScript([opcode])\n         tx.vin.append(vin)\n-        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.vout.append(CTxOut(1000, basic_p2sh))",
      "path": "test/functional/data/invalid_txs.py",
      "position": null,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is this change needed? seems to also pass with the dust value",
      "created_at": "2024-10-31T23:41:29Z",
      "updated_at": "2024-11-01T00:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825284831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825284831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 255,
      "start_side": "LEFT",
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848550",
      "pull_request_review_id": 2410119169,
      "id": 1825848550,
      "node_id": "PRRC_kwDOABII585s1Dzm",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef& tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": 1825273227,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added `HasDust` to make it more obvious where these checks are being done",
      "created_at": "2024-11-01T13:56:18Z",
      "updated_at": "2024-11-01T13:56:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848601",
      "pull_request_review_id": 2410119261,
      "id": 1825848601,
      "node_id": "PRRC_kwDOABII585s1D0Z",
      "diff_hunk": "@@ -491,7 +491,15 @@ static RPCHelpMan prioritisetransaction()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureAnyMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n+    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+\n+    // Non-0 fees are not allowed for entry, and modification not allowed afterwards",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d75a77b11e281a4358d0ee9b92c51dddd1589d84",
      "in_reply_to_id": 1825276484,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-11-01T13:56:21Z",
      "updated_at": "2024-11-01T13:56:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848640",
      "pull_request_review_id": 2410119336,
      "id": 1825848640,
      "node_id": "PRRC_kwDOABII585s1D1A",
      "diff_hunk": "@@ -21,6 +21,20 @@\n \n ORPHAN_TX_EXPIRE_TIME = 1200\n \n+def assert_mempool_contents(test_framework, node, expected=None, sync=True):",
      "path": "test/functional/test_framework/mempool_util.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": 1825278134,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Deferring to Future Work",
      "created_at": "2024-11-01T13:56:23Z",
      "updated_at": "2024-11-01T13:56:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848676",
      "pull_request_review_id": 2410119406,
      "id": 1825848676,
      "node_id": "PRRC_kwDOABII585s1D1k",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 74,
      "original_position": 74,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": 1825279952,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "deferring to Future Work",
      "created_at": "2024-11-01T13:56:26Z",
      "updated_at": "2024-11-01T13:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": 71,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848726",
      "pull_request_review_id": 2410119505,
      "id": 1825848726,
      "node_id": "PRRC_kwDOABII585s1D2W",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    CTxOut,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import assert_mempool_contents\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+class EphemeralDustTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Mempools should match via 1P1C p2p relay\n+        self.num_nodes = 2\n+\n+        # Don't test trickling logic\n+        self.noban_tx_relay = True\n+\n+    def add_output_to_create_multi_result(self, result, output_value=0):\n+        \"\"\" Add output without changing absolute tx fee\n+        \"\"\"\n+        assert len(result[\"tx\"].vout) > 0\n+        assert result[\"tx\"].vout[0].nValue >= output_value\n+        result[\"tx\"].vout.append(CTxOut(output_value, result[\"tx\"].vout[0].scriptPubKey))\n+        # Take value from first output\n+        result[\"tx\"].vout[0].nValue -= output_value\n+        result[\"new_utxos\"][0][\"value\"] = Decimal(result[\"tx\"].vout[0].nValue) / COIN\n+        new_txid = result[\"tx\"].rehash()\n+        result[\"txid\"]  = new_txid\n+        result[\"wtxid\"] = result[\"tx\"].getwtxid()\n+        result[\"hex\"] = result[\"tx\"].serialize().hex()\n+        for new_utxo in result[\"new_utxos\"]:\n+            new_utxo[\"txid\"] = new_txid\n+            new_utxo[\"wtxid\"] = result[\"tx\"].getwtxid()\n+\n+        result[\"new_utxos\"].append({\"txid\": new_txid, \"vout\": len(result[\"tx\"].vout) - 1, \"value\": Decimal(output_value) / COIN, \"height\": 0, \"coinbase\": False, \"confirmations\": 0})\n+\n+    def run_test(self):\n+\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        self.test_normal_dust()\n+        self.test_sponsor_cycle()\n+        self.test_node_restart()\n+        self.test_fee_having_parent()\n+        self.test_multidust()\n+        self.test_nonzero_dust()\n+        self.test_non_truc()\n+        self.test_unspent_ephemeral()\n+        self.test_reorgs()\n+        self.test_free_relay()\n+\n+    def test_normal_dust(self):\n+        self.log.info(\"Create 0-value dusty output, show that it works inside truc when spent in package\")\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=0, version=3)\n+        self.add_output_to_create_multi_result(dusty_tx)\n+\n+        sweep_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=dusty_tx[\"new_utxos\"], version=3)\n+\n+        # Test doesn't work because lack of package feerates\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"], sweep_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"min relay fee not met\")\n+\n+        # And doesn't work on its own\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, dusty_tx[\"hex\"])\n+\n+        # If we add modified fees, it is still not allowed due to dust check\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=COIN)\n+        test_res = self.nodes[0].testmempoolaccept([dusty_tx[\"hex\"]])\n+        assert not test_res[0][\"allowed\"]\n+        assert_equal(test_res[0][\"reject-reason\"], \"dust\")\n+        # Reset priority\n+        self.nodes[0].prioritisetransaction(txid=dusty_tx[\"txid\"], dummy=0, fee_delta=-COIN)",
      "path": "test/functional/mempool_ephemeral_dust.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "b140ec1abd1348685eee020aeaa41324553d8e54",
      "in_reply_to_id": 1825281386,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "solid idea, done",
      "created_at": "2024-11-01T13:56:29Z",
      "updated_at": "2024-11-01T13:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848831",
      "pull_request_review_id": 2410119645,
      "id": 1825848831,
      "node_id": "PRRC_kwDOABII585s1D3_",
      "diff_hunk": "@@ -252,7 +252,7 @@ def get_tx(self):\n         vin = self.valid_txin\n         vin.scriptSig = CScript([opcode])\n         tx.vin.append(vin)\n-        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.vout.append(CTxOut(1000, basic_p2sh))",
      "path": "test/functional/data/invalid_txs.py",
      "position": null,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": 1825284831,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My guess is that previous implementation had a different validation ordering and was causing the case to fail in an unexpected way. Removed.",
      "created_at": "2024-11-01T13:56:33Z",
      "updated_at": "2024-11-01T13:56:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 255,
      "start_side": "LEFT",
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848907",
      "pull_request_review_id": 2410119779,
      "id": 1825848907,
      "node_id": "PRRC_kwDOABII585s1D5L",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": 1825272593,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-11-01T13:56:38Z",
      "updated_at": "2024-11-01T13:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848958",
      "pull_request_review_id": 2410119835,
      "id": 1825848958,
      "node_id": "PRRC_kwDOABII585s1D5-",
      "diff_hunk": "@@ -71,9 +71,39 @@ def test_dust_output(self, node: TestNode, dust_relay_fee: Decimal,\n         # finally send the transaction to avoid running out of MiniWallet UTXOs\n         self.wallet.sendrawtransaction(from_node=node, tx_hex=tx_good_hex)\n \n+    def test_dustrelay(self):\n+        self.log.info(\"Test that small outputs are acceptable when dust relay rate is set to 0 that would otherwise trigger ephemeral dust rules\")\n+\n+        self.restart_node(0, extra_args=[\"-dustrelayfee=0\"])\n+\n+        assert_equal(self.nodes[0].getrawmempool(), [])\n+\n+        # Double dust, both unspent, with fees. Would have failed individual checks.\n+        # Dust is 1 satoshi create_self_transfer_multi disallows 0\n+        dusty_tx = self.wallet.create_self_transfer_multi(fee_per_output=1000, amount_per_output=1, num_outputs=2)\n+        dust_txid = self.nodes[0].rpc.sendrawtransaction(hexstring=dusty_tx[\"hex\"], maxfeerate=0)",
      "path": "test/functional/mempool_dust.py",
      "position": null,
      "original_position": 14,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "191ca0506ca69caa4d24c1f38b6f68742abb84dc",
      "in_reply_to_id": 1825270642,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-11-01T13:56:40Z",
      "updated_at": "2024-11-01T13:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848991",
      "pull_request_review_id": 2410119891,
      "id": 1825848991,
      "node_id": "PRRC_kwDOABII585s1D6f",
      "diff_hunk": "@@ -0,0 +1,12 @@\n+P2P and network changes\n+-----------------------\n+\n+Ephemeral dust is a new concept that allows a single\n+dust output in a transaction, provided the transaction\n+is zero fee. In order to spend any unconfirmed outputs\n+from this transaction, the spender must also spend\n+this dust in addition to any other outputs.\n+\n+In other words, this type of transaction\n+should be created in a transaction package where\n+the dust is both created and spend simultaneously.",
      "path": "doc/release-notes-30239.md",
      "position": null,
      "original_position": 12,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "52b1acd16b1f9e40f6ed286a668835c0bab2e0c4",
      "in_reply_to_id": 1825269811,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-11-01T13:56:42Z",
      "updated_at": "2024-11-01T13:56:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825848991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825848991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825849053",
      "pull_request_review_id": 2410119970,
      "id": 1825849053,
      "node_id": "PRRC_kwDOABII585s1D7d",
      "diff_hunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include<policy/ephemeral_policy.h>\n+#include<policy/policy.h>\n+\n+bool CheckValidEphemeralTx(const CTransactionRef& tx, CFeeRate dust_relay_fee, CAmount base_fee, CAmount mod_fee, TxValidationState& state)\n+{\n+    // We never want to give incentives to mine this transaction alone\n+    if ((base_fee != 0 || mod_fee != 0) &&\n+        std::any_of(tx->vout.cbegin(), tx->vout.cend(), [&](const auto& output) { return IsDust(output, dust_relay_fee); })) {\n+        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"dust\", \"tx with dust output must be 0-fee\");\n+    }\n+\n+    return true;\n+}\n+\n+std::optional<Txid> CheckEphemeralSpends(const Package& package, CFeeRate dust_relay_rate, const CTxMemPool& tx_pool)\n+{\n+    if (!Assume(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}))) {\n+        // Bail out of spend checks if caller gave us an invalid package\n+        return std::nullopt;\n+    }\n+\n+    std::map<Txid, CTransactionRef> map_txid_ref;\n+    for (const auto& tx : package) {\n+        map_txid_ref[tx->GetHash()] = tx;\n+    }\n+\n+    for (const auto& tx : package) {\n+        Txid txid = tx->GetHash();\n+        std::unordered_set<Txid, SaltedTxidHasher> processed_parent_set;\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> unspent_parent_dust;\n+\n+        for (const auto& tx_input : tx->vin) {\n+            const Txid& parent_txid{tx_input.prevout.hash};\n+            // Skip parents we've already checked dust for\n+            if (processed_parent_set.contains(parent_txid)) continue;\n+\n+            // We look for an in-package or in-mempool dependency\n+            CTransactionRef parent_ref = nullptr;\n+            if (map_txid_ref.contains(parent_txid)) {\n+                parent_ref = map_txid_ref[parent_txid];",
      "path": "src/policy/ephemeral_policy.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "92d7ad2b135668cb7f6b0fd32be15fd6dd2f915c",
      "in_reply_to_id": 1825267562,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-11-01T13:56:44Z",
      "updated_at": "2024-11-01T13:56:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1825849053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825849053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": 43,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827125042",
      "pull_request_review_id": 2412016718,
      "id": 1827125042,
      "node_id": "PRRC_kwDOABII585s57cy",
      "diff_hunk": "@@ -141,6 +141,54 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)\n+{\n+    std::vector<uint32_t> dust_indexes;\n+    for (size_t i = 0; i < tx_ref->vout.size(); ++i) {\n+        const auto& output = tx_ref->vout[i];\n+        if (IsDust(output, dust_relay_rate)) dust_indexes.push_back(i);\n+    }\n+\n+    return dust_indexes;\n+}\n+\n+void CheckMempoolEphemeralInvariants(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+\n+        std::vector<uint32_t> dust_indexes = GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate);\n+\n+        Assert(dust_indexes.size() < 2);\n+\n+        if (dust_indexes.empty()) return;",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6fa10b4537b03b1746fd899de20b6f10dd6e15f0",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 6fa10b4537b03b1746fd899de20b6f10dd6e15f0: seems like the ephemeral invariants check could return too early, potentially skipping lots of mempool txs?\r\n```suggestion\r\n        if (dust_indexes.empty()) continue;\r\n```\r\n(same for the no-children condition below)",
      "created_at": "2024-11-04T02:00:32Z",
      "updated_at": "2024-11-04T02:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1827125042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827125042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827857362",
      "pull_request_review_id": 2413275740,
      "id": 1827857362,
      "node_id": "PRRC_kwDOABII585s8uPS",
      "diff_hunk": "@@ -141,6 +141,54 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)\n+{\n+    std::vector<uint32_t> dust_indexes;\n+    for (size_t i = 0; i < tx_ref->vout.size(); ++i) {\n+        const auto& output = tx_ref->vout[i];\n+        if (IsDust(output, dust_relay_rate)) dust_indexes.push_back(i);\n+    }\n+\n+    return dust_indexes;\n+}\n+\n+void CheckMempoolEphemeralInvariants(const CTxMemPool& tx_pool)\n+{\n+    LOCK(tx_pool.cs);\n+    for (const auto& tx_info : tx_pool.infoAll()) {\n+        const auto& entry = *Assert(tx_pool.GetEntry(tx_info.tx->GetHash()));\n+\n+        std::vector<uint32_t> dust_indexes = GetDustIndexes(tx_info.tx, tx_pool.m_opts.dust_relay_feerate);\n+\n+        Assert(dust_indexes.size() < 2);\n+\n+        if (dust_indexes.empty()) return;",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "6fa10b4537b03b1746fd899de20b6f10dd6e15f0",
      "in_reply_to_id": 1827125042,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oof, this was making it a lot harder to hit the various cases! Fixed!",
      "created_at": "2024-11-04T14:48:33Z",
      "updated_at": "2024-11-04T14:48:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1827857362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827857362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828577696",
      "pull_request_review_id": 2414414598,
      "id": 1828577696,
      "node_id": "PRRC_kwDOABII585s_eGg",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without unduly risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:",
      "path": "src/policy/ephemeral_policy.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: missing closing double quote",
      "created_at": "2024-11-05T00:42:53Z",
      "updated_at": "2024-11-05T00:55:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1828577696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828577696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828578790",
      "pull_request_review_id": 2414414598,
      "id": 1828578790,
      "node_id": "PRRC_kwDOABII585s_eXm",
      "diff_hunk": "@@ -141,7 +141,7 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n-std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)\n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef& tx_ref, CFeeRate dust_relay_rate)",
      "path": "src/test/util/txmempool.cpp",
      "position": 4,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d73650d4ce1358f4acf466276954c20bfe110ba3",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: should ideally be already part of the commit that introduces this function for minimal diff (here and in header)",
      "created_at": "2024-11-05T00:44:44Z",
      "updated_at": "2024-11-05T00:55:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1828578790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1828578790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829420178",
      "pull_request_review_id": 2415740658,
      "id": 1829420178,
      "node_id": "PRRC_kwDOABII585tCryS",
      "diff_hunk": "@@ -141,7 +141,7 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n     return std::nullopt;\n }\n \n-std::vector<uint32_t> GetDustIndexes(const CTransactionRef tx_ref, CFeeRate dust_relay_rate)\n+std::vector<uint32_t> GetDustIndexes(const CTransactionRef& tx_ref, CFeeRate dust_relay_rate)",
      "path": "src/test/util/txmempool.cpp",
      "position": 4,
      "original_position": 5,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d73650d4ce1358f4acf466276954c20bfe110ba3",
      "in_reply_to_id": 1828578790,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "that's a mistake, I'll fix if I touch the PR",
      "created_at": "2024-11-05T14:09:33Z",
      "updated_at": "2024-11-05T14:09:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1829420178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829420178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829420263",
      "pull_request_review_id": 2415740782,
      "id": 1829420263,
      "node_id": "PRRC_kwDOABII585tCrzn",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+#define BITCOIN_POLICY_EPHEMERAL_POLICY_H\n+\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+/** These utility functions ensure that ephemeral dust is safely\n+ * created and spent without unduly risking them entering the utxo\n+ * set.\n+\n+ * This is ensured by requiring:\n+ * - CheckValidEphemeralTx checks are respected\n+ * - The parent has no child (and 0-fee as implied above to disincentivize mining)\n+ * - OR the parent transaction has exactly one child, and the dust is spent by that child\n+ *\n+ * Imagine three transactions:\n+ * TxA, 0-fee with two outputs, one non-dust, one dust\n+ * TxB, spends TxA's non-dust\n+ * TxC, spends TxA's dust\n+ *\n+ * All the dust is spent if TxA+TxB+TxC is accepted, but the mining template may just pick\n+ * up TxA+TxB rather than the three \"legal configurations:",
      "path": "src/policy/ephemeral_policy.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "131bed19bdfc922328cad9781fa9122b6810a8fd",
      "original_commit_id": "d5c564a24f96ec384b2de68bf87e6eb3ad9239d2",
      "in_reply_to_id": 1828577696,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "will fixup if I end up touching things",
      "created_at": "2024-11-05T14:09:36Z",
      "updated_at": "2024-11-05T14:09:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30239#discussion_r1829420263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829420263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30239"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    }
  ]
}