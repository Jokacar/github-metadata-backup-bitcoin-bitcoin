{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "id": 545035763,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDM1NzYz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20758.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20758.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/915da49bfeb5c13d13aad6b055712fc990c8ccf2",
    "number": 20758,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "net-processing refactoring -- lose globals, move implementation details from .h to .cpp",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in #20811 :\r\n* Moves implementation details of PeerManager into PeerManagerImpl; moves PeerManagerImpl into .cpp\r\n* Moves struct Peer definition into .cpp\r\n\r\nDone in #20942:\r\n* Moves net_processing globals into PeerManagerImpl.\r\n* Moves a lot of net_processing functions into PeerManagerImpl and simplifies some of their arguments as a result.\r\n\r\nIn #21148:\r\n* Split orphan management into its own module\r\n* More more globals/functions into PeerManagerImpl\r\n\r\nAdditional things in this PR:\r\n* Moves more globals/functions into PeerManagerImpl; simplify their arguments.\r\n* Makes test/denialofservice_tests use the PeerManager api instead of directly accessing net_processing implementation details\r\n* Introduces State(CNode&) and State(Peer&) alternatives to calling State(node.GetId()) all the time.\r\n* Moves CNodeState into Peer as a step towards consolidating state information\r\n* Make NetEventsInterface take a CNode& instead of a CNode*\r\n* Pass ArgsManager into the constructor and collect parameters once rather than calling GetArgs regularly at runtime\r\n\r\nNot done yet:\r\n* Split parts of PeerManager into their own modules a la txrequest (block downloads?)",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2020-12-23T21:25:17Z",
    "updated_at": "2022-08-29T11:10:46Z",
    "closed_at": "2022-08-29T06:55:12Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "ad144626092f8e216dc0aa1cc4779fe658f884a3",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "ajtowns:202012-netproc-refactor",
      "ref": "202012-netproc-refactor",
      "sha": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53941525,
        "node_id": "MDEwOlJlcG9zaXRvcnk1Mzk0MTUyNQ==",
        "name": "bitcoin",
        "full_name": "ajtowns/bitcoin",
        "owner": {
          "login": "ajtowns",
          "id": 127186,
          "node_id": "MDQ6VXNlcjEyNzE4Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ajtowns",
          "html_url": "https://github.com/ajtowns",
          "followers_url": "https://api.github.com/users/ajtowns/followers",
          "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
          "organizations_url": "https://api.github.com/users/ajtowns/orgs",
          "repos_url": "https://api.github.com/users/ajtowns/repos",
          "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ajtowns/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ajtowns/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ajtowns/bitcoin",
        "archive_url": "https://api.github.com/repos/ajtowns/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ajtowns/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ajtowns/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ajtowns/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ajtowns/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ajtowns/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ajtowns/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ajtowns/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ajtowns/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ajtowns/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ajtowns/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ajtowns/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ajtowns/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ajtowns/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ajtowns/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ajtowns/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ajtowns/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ajtowns/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ajtowns/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ajtowns/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ajtowns/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ajtowns/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ajtowns/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ajtowns/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ajtowns/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ajtowns/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ajtowns/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ajtowns/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ajtowns/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ajtowns/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ajtowns/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ajtowns/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ajtowns/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ajtowns/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ajtowns/bitcoin/hooks",
        "svn_url": "https://github.com/ajtowns/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 263761,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-27T02:52:21Z",
        "created_at": "2016-03-15T12:11:24Z",
        "updated_at": "2023-03-19T19:22:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "91d12344b1e51809c1ef6b630b631a6da00267c3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35476,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T20:20:41Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 496,
    "deletions": 458,
    "changed_files": 15,
    "commits": 15,
    "review_comments": 22,
    "comments": 15
  },
  "events": [
    {
      "event": "commented",
      "id": 750483382,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4MzM4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483382",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:37:16Z",
      "updated_at": "2020-12-23T21:37:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Marked as WIP; definitely needs some review/testing.\r\n\r\nThe `move CNodeState into Peer` commit might not be the greatest idea -- the locking issues are a little subtle (assumign I got them right). Not sure the the locking guidelines for Peer make sense (see \"annotate lock guideline violation?\" commit) though (and generally not convinced we need the multiple per-peer state mutexes that Peer has).\r\n\r\nI think it might make sense to have CNode have an opaque Peer pointer member that's provided by net_processing when the connection is first made and passed back to net_processing via the PeerManager interface -- that would obsolete a lot of the \"state for this peer\" lookups, and might simplify locking substantially. Bit complicated to think about, so I stopped at this point, but that was what I was originally looking to explore here.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483382",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "commented",
      "id": 750483525,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4MzUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483525",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:37:50Z",
      "updated_at": "2021-02-16T07:59:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21090 (Default to NODE_WITNESS in nLocalServices by dhruv)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiuttarwar)\n* #21015 (Make all of net_processing (and some of net) use std::chrono types by dhruv)\n* #20966 (banman: save the banlist in a JSON format on disk by vasild)\n* #20721 (Net: Move ping data to net_processing by jnewbery)\n* #20295 (rpc: getblockfrompeer by Sjors)\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "labeled",
      "id": 4145607303,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNDU2MDczMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4145607303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:47:25Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:50:59Z",
      "updated_at": "2020-12-23T21:50:59Z",
      "source": {
        "issue": {
          "id": 771580606,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQzMDYzMTgy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20729",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20729/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20729/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20729/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20729",
          "number": 20729,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: standardize outbound full/block relay connection type naming",
          "body": "We've accumulated many different ways of referring to outbound full relay and outbound block relay connection types in the codebase. In places, it is becoming less clear which type of connection is referred to. This PR proposes standardizing the naming to `outbound-{full, block}-relay` with a scripted diff as follows:\r\n\r\n```\r\n-BEGIN VERIFY SCRIPT-\r\ns() { git grep -l \"$1\" src test/functional doc/files.md doc/reduce-*.md | xargs sed -i \"s/$1/$2/g\"; }\r\n\r\ns 'ConnectionType::OUTBOUND '            'ConnectionType::OUTBOUND_FULL_RELAY '\r\ns 'IsFullOutboundConn'                   'IsOutboundFullRelayConn'\r\ns 'GetExtraFullOutboundCount'            'GetExtraOutboundFullRelayCount'\r\ns 'full_outbound_peers'                  'outbound_full_relay_peers'\r\ns 'GetTryNewOutboundPeer'                'GetTryNewOutboundFullRelayPeer'\r\ns 'SetTryNewOutboundPeer'                'SetTryNewOutboundFullRelayPeer'\r\ns 'm_try_another_outbound_peer'          'm_try_another_outbound_full_relay_peer'\r\ns 'outbound (full-relay)'                'outbound-full-relay'\r\ns 'outbound full-relay'                  'outbound-full-relay'\r\ns 'outbound, full-relay'                 'outbound-full-relay'\r\ns 'outbounds'                            'outbound-full-relay connections'\r\ns 'f\"outbound: '                         'f\"outbound-full-relay: '\r\ns ' full-relay'                          ' outbound-full-relay'\r\ns 'to an extra outbound peer'            'to an extra outbound-full-relay peer'\r\ns 'try another outbound peer'            'try another outbound-full-relay peer'\r\ns '(tx, block, addr) outbound'           '(tx, block, addr)'\r\ns 'we deal with extra outbound peers'    'we deal with extra outbound-full-relay peers'\r\ns 'outbound peers we have in excess'     'outbound-full-relay peers we have in excess'\r\ns 'some outbound connections are not'    'some outbound-full-relay connections are not'\r\ns 'or this is a'                         'or if this is an'\r\n\r\ns 'ConnectionType::BLOCK_RELAY'          'ConnectionType::OUTBOUND_BLOCK_RELAY'\r\ns ' BLOCK_RELAY'                         ' OUTBOUND_BLOCK_RELAY'\r\ns 'IsBlockOnlyConn'                      'IsOutboundBlockRelayConn'\r\ns 'GetExtraBlockRelayCount'              'GetExtraOutboundBlockRelayCount'\r\ns 'block_relay_peers'                    'outbound_block_relay_peers'\r\ns 'MAX_BLOCK_RELAY_ONLY_ANCHORS'         'MAX_OUTBOUND_BLOCK_RELAY_ANCHORS'\r\ns 'MAX_BLOCK_RELAY_ONLY_CONNECTIONS'     'MAX_OUTBOUND_BLOCK_RELAY_CONNECTIONS'\r\ns 'EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL' 'EXTRA_OUTBOUND_BLOCK_RELAY_PEER_INTERVAL'\r\ns 'm_start_extra_block_relay_peers'      'm_start_extra_outbound_block_relay_peers'\r\ns 'outgoing block-relay-only'            'outbound-block-relay'\r\ns 'outbound block-relay-only'            'outbound-block-relay'\r\ns 'outbound block-relay'                 'outbound-block-relay'\r\ns 'block-relay only outbound'            'outbound-block-relay'\r\ns 'block-relay-only outgoing'            'outbound-block-relay'\r\ns 'block-relay only peers'               'outbound-block-relay peers'\r\ns 'block-relay-only'                     'outbound-block-relay'\r\n\r\ns ' a outbound'                          ' an outbound'\r\n-END VERIFY SCRIPT-\r\n```\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20729",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20729",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20729.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20729.patch"
          },
          "closed_at": "2021-05-11T10:12:08Z",
          "created_at": "2020-12-20T12:46:11Z",
          "updated_at": "2022-08-18T18:30:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:52:12Z",
      "updated_at": "2020-12-23T21:52:12Z",
      "source": {
        "issue": {
          "id": 771362614,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQyOTE0MzY4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20721",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20721/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20721/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20721/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20721",
          "number": 20721,
          "state": "closed",
          "state_reason": null,
          "title": "Net: Move ping data to net_processing",
          "body": "This continues the work of moving application layer data into net_processing, by moving all ping data into the new Peer object added in #19607.\r\n\r\nFor motivation, see #19398.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20721",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20721",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20721.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20721.patch"
          },
          "closed_at": "2021-02-16T10:49:27Z",
          "created_at": "2020-12-19T11:24:22Z",
          "updated_at": "2022-08-16T17:12:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:53:45Z",
      "updated_at": "2020-12-23T21:53:45Z",
      "source": {
        "issue": {
          "id": 646725848,
          "node_id": "MDU6SXNzdWU2NDY3MjU4NDg=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19398",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19398/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19398/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19398/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/19398",
          "number": 19398,
          "state": "closed",
          "state_reason": "completed",
          "title": "Move remaining application layer data to net processing",
          "body": "The application layer is any data that is transmitted within P2P message payloads, and the processing of that data. Examples are tx inventory, addr gossiping, ping/pong processing.\r\n\r\n`CNode` currently contains many data and function members that are concerned with the application layer. These should be moved into net processing, so that `CNode` is only concerned with the network layer (sending/receiving bytes, keeping statistics, eviction logic, etc).\r\n\r\nOne blocker to moving these is that the existing peer data structure in net processing is `CNodeState`, which is guarded by cs_main. Moving all application layer data into `CNodeState` would expand where we need to take and hold cs_main locks. Instead, we should create a new data structure in net processing called `Peer` which doesn't require a cs_main lock, and move the application layer data there.\r\n\r\nhttps://github.com/jnewbery/bitcoin/tree/2020-06-cnode-comments is a move/comment only branch that re-orders the `CNode` data members into logical groups and adds comments for each member, including TODOs for members that should be moved to net processing. The branch isn't intended for merging, but is a guide for what I think needs to change in `CNode`.\r\n\r\nhttps://github.com/jnewbery/bitcoin/tree/2020-06-cs-main-split is a branch that implements `Peer` and starts moving application layer data into that structure. I intend to peel off commits from that branch into separate PRs. That branch also starts moving data that doesn't require the cs_main lock from `CNodeState` into `Peer`. Longer term, I believe almost all `CNodeState` data can be moved into `Peer`, greatly reducing the scope that cs_main locks are held in net processing.\r\n\r\nAny help reviewing or implementing these changes would be very much appreciated!\r\n\r\nPRs:\r\n\r\n- [x] #19219 Replace automatic bans with discouragement filter\r\n- [x] #19472 Reduce cs_main scope in MaybeDiscourageAndDisconnect()\r\n- [x] #19583 clean up Misbehaving()\r\n- [x] #19607 Add Peer struct for per-peer data in net processing\r\n- [x] #19910 Move peer_map to PeerManager\r\n- [x] #20624 Remove nStartingHeight check from block relay\r\n- [x] #19829 Move block inventory state to net_processing\r\n- [x] #20651 Make p2p recv buffer timeout 20 minutes for all peers\r\n- [x] #20811 Move net_processing implementation details out of header\r\n- [x] #20927 Clean up InactivityCheck()\r\n- [x] #20721 Move ping data to net_processing\r\n- [x] #21187 Only call PushAddress() from net_processing\r\n- [x] #21236 Extract `addr` send functionality into MaybeSendAddr()\r\n- [x] #21186 Move addr data into net_processing\r\n- [x] #21162 Move RelayTransaction() into PeerManager\r\n- [x] #21160 Move tx data into net_processing\r\n\r\n<details><summary><code>CNode</code> with comments. See TODO comments.</summary>\r\n\r\n```c++\r\n/** Information about a peer */\r\nclass CNode\r\n{\r\n    friend class CConnman;\r\n    friend struct ConnmanTestMsg;\r\n\r\npublic:\r\n    /** A semaphore limits the number of outbound and manual peers. This\r\n     *  CNode holds the grant until the connection is closed, at which point\r\n     *  it's released to allow another connection. */\r\n    CSemaphoreGrant grantOutbound;\r\n    /** Reference count to prevent the CNode from being deleted while there\r\n     *  are still references to it being held.\r\n     *  TODO: replace with std::shared_ptr */\r\n    std::atomic<int> nRefCount{0};\r\n\r\n    /** Socket mutex */\r\n    RecursiveMutex cs_hSocket;\r\n    /** Socket */\r\n    SOCKET hSocket GUARDED_BY(cs_hSocket);\r\n\r\n    /** Send buffer mutex */\r\n    RecursiveMutex cs_vSend;\r\n    /** Send buffer */\r\n    std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\r\n    /** Total size of all vSendMsg entries */\r\n    size_t nSendSize{0};\r\n    /** Offset inside the first vSendMsg already sent */\r\n    size_t nSendOffset{0};\r\n    /** Total bytes sent to this peer */\r\n    uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\r\n    /** Whether the send buffer is full and we should pause sending\r\n     *  data to this peer. */\r\n    std::atomic_bool fPauseSend{false};\r\n\r\n    /** Send processing mutex. Ensures that we don't enter SendMessages()\r\n     *  for this peer on multiple threads */\r\n    RecursiveMutex cs_sendProcessing;\r\n\r\n    /** Receive buffer mutex */\r\n    RecursiveMutex cs_vProcessMsg;\r\n    /** Buffer of deserialized net messages */\r\n    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\r\n    /** Total size of receive buffer mutex */\r\n    size_t nProcessQueueSize{0} GUARDED_BY(cs_vProcessMsg);\r\n    /** Whether the receive buffer is full and we should pause receiving\r\n     *  data from this peer. */\r\n    std::atomic_bool fPauseRecv{false};\r\n\r\n    /** Receive buffer statistics mutex */\r\n    RecursiveMutex cs_vRecv;\r\n    /** Total bytes received from this peer */\r\n    uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\r\n\r\n    /** Address of this peer */\r\n    const CAddress addr;\r\n    /** Bind address of our side of the connection */\r\n    const CAddress addrBind;\r\n    /** Mutex guarding the cleanSubVer field.\r\n     *  TODO: replace with atomic */\r\n    RecursiveMutex cs_SubVer;\r\n    /** Sanitized string of the user agent byte array we read from the wire.\r\n     *  This cleaned string can safely be logged or displayed.  */\r\n    std::string cleanSubVer GUARDED_BY(cs_SubVer){};\r\n    /** Unusued in actual processing, only present for backward compatibility at RPC/QT level */\r\n    bool m_legacyWhitelisted{false};\r\n\r\n    /** If this peer is being used as a short lived feeler. */\r\n    bool fFeeler{false}; \r\n    /** If this peer is being used to fetch addresses and then disconnect */\r\n    bool fOneShot{false};\r\n    /** If this peer is a manual connection added by command-line argument or RPC */\r\n    bool m_manual_connection{false};\r\n    /** If the connection with this peer was initiated by the peer */\r\n    const bool fInbound;\r\n\r\n    /** If the version-verack handshake has successfully completed. */\r\n    std::atomic_bool fSuccessfullyConnected{false};\r\n    /** Setting fDisconnect to true will cause the node to be disconnected the\r\n    / * next time DisconnectNodes() runs */\r\n    std::atomic_bool fDisconnect{false};\r\n\r\n    /** If this peer is a light client (doesn't serve blocks).\r\n     *  TODO: move this application layer data to net processing. */\r\n    bool fClient{false};\r\n    /** If this peer is 'limited' (can only serve recent blocks).\r\n     *  TODO: move this application layer data to net processing. */\r\n    bool m_limited_node{false};\r\n\r\n    /** Whether this peer is preferred for eviction */\r\n    bool m_prefer_evict{false};\r\n    /** The time of the last message sent to this peer. Used in inactivity checks */\r\n    std::atomic<int64_t> nLastSend{0};\r\n    /** The time of the last message received from this peer. Used in inactivity checks */\r\n    std::atomic<int64_t> nLastRecv{0};\r\n    /** Which netgroup this peer is in. Used in eviction logic */\r\n    const uint64_t nKeyedNetGroup;\r\n    /** Last time we accepted a block from this peer. Used in eviction logic */\r\n    std::atomic<int64_t> nLastBlockTime{0};\r\n    /** Last time we accepted a transaction from this peer. Used in eviction logic */\r\n    std::atomic<int64_t> nLastTXTime{0};\r\n    /** Best measured round-trip time for this peer. Used in eviction logic */\r\n    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\r\n\r\n    /** The time that the connection with this node was established. Used in eviction logic */\r\n    const int64_t nTimeConnected;\r\n    /** The difference between the peer's clock and our own. Only used in logging */\r\n    std::atomic<int64_t> nTimeOffset{0};\r\n\r\n    /** The P2P version announced by the peer in its version message.\r\n     *  TODO: this is only used in the application layer. Move to net processing */\r\n    std::atomic<int> nRecvVersion{INIT_PROTO_VERSION};\r\n    /** The P2P version announced by the peer in its version message.\r\n     *  TODO: This seems to largely a duplicate of nRecvVersion. Remove. */\r\n    std::atomic<int> nVersion{0};\r\n    /** The supported services announced by the peer in its version message.\r\n     *  TODO: Move this application layer data to net processing. */\r\n    std::atomic<ServiceFlags> nServices{NODE_NONE};\r\n\r\n    /** Addresses to send to this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::vector<CAddress> vAddrToSend;\r\n    /** Probabilistic filter of addresses that this peer already knows.\r\n     *  TODO: move this application layer data to net processing. */\r\n    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\r\n    /** Whether a GETADDR request is pending from this node.\r\n     *  TODO: move this application layer data to net processing. */\r\n    bool fGetAddr{false};\r\n    /** Timestamp after which we should send the next addr message to this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\r\n    /** Timestamp after which we should advertise our local address to this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\r\n    /** If we've sent an initial ADDR message to this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    bool fSentAddr{false};\r\n\r\n    /** Address relay mutex.\r\n     *  TODO: move this application layer data to net processing. */\r\n    RecursiveMutex cs_inventory;\r\n    /** List of block ids we still have announce.\r\n    / * There is no final sorting before sending, as they are always sent immediately\r\n    / * and in the order requested.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\r\n    /** List of block hashes to relay in headers messages.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\r\n    /** When the peer requests this block, we send an inv that\r\n      * triggers the peer to send a getblocks to fetch the next batch of\r\n      * inventory. Only used for peers that don't do headers-first syncing.\r\n      *  TODO: move this application layer data to net processing. */\r\n    uint256 hashContinue;\r\n    /** This peer's height, as announced in its version message.\r\n      *  TODO: move this application layer data to net processing. */\r\n    std::atomic<int> nStartingHeight{-1};\r\n\r\n    struct TxRelay {\r\n        /** bloom filter mutex */\r\n        mutable RecursiveMutex cs_filter;\r\n        /** We use fRelayTxes for two purposes -\r\n         *  a) it allows us to not relay tx invs before receiving the peer's version message\r\n         *  b) the peer may tell us in its version message that we should not relay tx invs\r\n         *     unless it loads a bloom filter. */\r\n        bool fRelayTxes GUARDED_BY(cs_filter){false};\r\n        /** BIP 31 bloom filter */\r\n        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter){nullptr};\r\n\r\n        /** Transaction relay mutex */\r\n        mutable RecursiveMutex cs_tx_inventory;\r\n        /** Probabilistic filter of txids that the peer already knows */\r\n        CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\r\n        /** Set of transaction ids we still have to announce.\r\n         * They are sorted by the mempool before relay, so the order is not important. */\r\n        std::set<uint256> setInventoryTxToSend;\r\n        /** Timestamp after which we should send the next transaction INV message to this peer */\r\n        std::chrono::microseconds nNextInvSend{0};\r\n\r\n        /** If the peer has a pending BIP 35 MEMPOOL request to us */\r\n        bool fSendMempool GUARDED_BY(cs_tx_inventory){false};\r\n        /** Last time a MEMPOOL request was serviced. */\r\n        std::atomic<std::chrono::seconds> m_last_mempool_req{std::chrono::seconds{0}};\r\n\r\n        /** Feefilter mutex */\r\n        RecursiveMutex cs_feeFilter;\r\n        /** Minimum fee rate with which to filter inv's to this node */\r\n        CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\r\n        /** Last feefilter value we sent to the peer */\r\n        CAmount lastSentFeeFilter{0};\r\n        /** Timestamp after which we should send the next FEEFILTER message to this peer */\r\n        int64_t nextSendTimeFeeFilter{0};\r\n    };\r\n\r\n    /** Transaction relay data for this peer. If m_tx_relay == nullptr then we don't\r\n     *  relay transactions with this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::unique_ptr<TxRelay> m_tx_relay;\r\n\r\n    /** List of inv items requested by this peer in a getdata message.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::deque<CInv> vRecvGetData;\r\n\r\n    /** The pong reply we're expecting, or 0 if no pong expected.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::atomic<uint64_t> nPingNonceSent{0};\r\n    /** Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::atomic<int64_t> nPingUsecStart{0};\r\n    /** Last measured ping round-trip time.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::atomic<int64_t> nPingUsecTime{0};\r\n    /** Whether a ping request is pending to this peer.\r\n     *  TODO: move this application layer data to net processing. */\r\n    std::atomic<bool> fPingQueued{false};\r\n\r\n    /** Orphan transactions to reconsider after the parent was accepted.\r\n     *  TODO: move this application layer data to a global in net processing. */\r\n    std::set<uint256> orphan_work_set;\r\n\r\nprivate:\r\n    /** Unique numeric identifier for this node */\r\n    const NodeId id;\r\n    /** Node name mutex\r\n     *  TODO: replace with atomic */\r\n    mutable RecursiveMutex cs_addrName;\r\n    /** Node name */\r\n    std::string addrName GUARDED_BY(cs_addrName);\r\n    /** This node's permission flags. */\r\n    NetPermissionFlags m_permissionFlags{ PF_NONE };\r\n    /** addrLocal mutex\r\n     *  TODO: replace with atomic */\r\n    mutable RecursiveMutex cs_addrLocal;\r\n    /** Our address, as reported by the peer */\r\n    CService addrLocal GUARDED_BY(cs_addrLocal);\r\n\r\n    /** Random nonce sent in our VERSION message to detect connecting to ourselves.\r\n     *  TODO: move this application layer data to net processing */\r\n    const uint64_t nLocalHostNonce;\r\n    /** Services offered to this peer.\r\n     *\r\n     * This is supplied by the parent CConnman during peer connection\r\n     * (CConnman::ConnectNode()) from its attribute of the same name.\r\n     *\r\n     * This is const because there is no protocol defined for renegotiating\r\n     * services initially offered to a peer. The set of local services we\r\n     * offer should not change after initialization.\r\n     *\r\n     * An interesting example of this is NODE_NETWORK and initial block\r\n     * download: a node which starts up from scratch doesn't have any blocks\r\n     * to serve, but still advertises NODE_NETWORK because it will eventually\r\n     * fulfill this role after IBD completes. P2P code is written in such a\r\n     * way that it can gracefully handle peers who don't make good on their\r\n     * service advertisements.\r\n     *\r\n     * TODO: move this application layer data to net processing. */\r\n    const ServiceFlags nLocalServices;\r\n    /** Our starting height that we advertised to this node in our VERSION message.\r\n     * TODO: this value is not used after sending the version message. We can remove this field. */\r\n    const int nMyStartingHeight;\r\n    /** The version that we advertised to the peer in our VERSION message.\r\n     *  TODO: move this application layer data to net processing */\r\n    int nSendVersion{0};\r\n\r\n    /** Deserializer for messages received over the network. This is a derived\r\n     * class of TransportDeserializer based on the P2P version used with this\r\n     * peer. */\r\n    std::unique_ptr<TransportDeserializer> m_deserializer;\r\n    /** Serializer for messages sent over the network. This is a derived\r\n     * class of TransportDeserializer based on the P2P version used with this\r\n     * peer. */\r\n    std::unique_ptr<TransportSerializer> m_serializer;\r\n\r\n    /** Temporary buffer used by the SocketHandler thread for received messages,\r\n     *  before they're pushed onto the vProcessMsg buffer. */\r\n    std::list<CNetMessage> vRecvMsg;\r\n\r\n    /** Statistics of bytes sent to this peer, broken out by message type */\r\n    mapMsgCmdSize mapSendBytesPerMsgCmd GUARDED_BY(cs_vSend);\r\n    /** Statistics of bytes received from this peer, broken out by message type */\r\n    mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\r\n\r\npublic:\r\n    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn,\r\n          const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn,\r\n          const CAddress &addrBindIn, const std::string &addrNameIn = \"\",\r\n          bool fInboundIn = false, bool block_relay_only = false);\r\n    ~CNode();\r\n    CNode(const CNode&) = delete;\r\n    CNode& operator=(const CNode&) = delete;\r\n\r\n    NodeId GetId() const {\r\n        return id;\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    uint64_t GetLocalNonce() const {return nLocalHostNonce;}\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    int GetMyStartingHeight() const {return nMyStartingHeight;}\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    ServiceFlags GetLocalServices() const { return nLocalServices; }\r\n\r\n    /** TODO: move these application layer functions to net processing */\r\n    void SetRecvVersion(int nVersionIn) { nRecvVersion = nVersionIn; }\r\n    int GetRecvVersion() const { return nRecvVersion; }\r\n    void SetSendVersion(int nVersionIn);\r\n    int GetSendVersion() const;\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    bool IsAddrRelayPeer() const { return m_addr_known != nullptr; }\r\n\r\n    /** TODO: Replace with std::shared_ptr refcounts */\r\n    int GetRefCount() const\r\n    {\r\n        assert(nRefCount >= 0);\r\n        return nRefCount;\r\n    }\r\n\r\n    CNode* AddRef()\r\n    {\r\n        nRefCount++;\r\n        return this;\r\n    }\r\n\r\n    void Release()\r\n    {\r\n        nRefCount--;\r\n    }\r\n\r\n    bool ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete);\r\n\r\n    CService GetAddrLocal() const;\r\n    //! May not be called more than once\r\n    void SetAddrLocal(const CService& addrLocalIn);\r\n\r\n    std::string GetAddrName() const;\r\n    //! Sets the addrName only if it was not previously set\r\n    void MaybeSetAddrName(const std::string& addrNameIn);\r\n\r\n    bool HasPermission(NetPermissionFlags permission) const {\r\n        return NetPermissions::HasFlag(m_permissionFlags, permission);\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void AddAddressKnown(const CAddress& _addr)\r\n    {\r\n        assert(m_addr_known);\r\n        m_addr_known->insert(_addr.GetKey());\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)\r\n    {\r\n        // Known checking here is only to save space from duplicates.\r\n        // SendMessages will filter it again for knowns that were added\r\n        // after addresses were pushed.\r\n        assert(m_addr_known);\r\n        if (_addr.IsValid() && !m_addr_known->contains(_addr.GetKey())) {\r\n            if (vAddrToSend.size() >= MAX_ADDR_TO_SEND) {\r\n                vAddrToSend[insecure_rand.randrange(vAddrToSend.size())] = _addr;\r\n            } else {\r\n                vAddrToSend.push_back(_addr);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void AddInventoryKnown(const CInv& inv)\r\n    {\r\n        if (m_tx_relay != nullptr) {\r\n            LOCK(m_tx_relay->cs_tx_inventory);\r\n            m_tx_relay->filterInventoryKnown.insert(inv.hash);\r\n        }\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void PushTxInventory(const uint256& hash)\r\n    {\r\n        if (m_tx_relay == nullptr) return;\r\n        LOCK(m_tx_relay->cs_tx_inventory);\r\n        if (!m_tx_relay->filterInventoryKnown.contains(hash)) {\r\n            m_tx_relay->setInventoryTxToSend.insert(hash);\r\n        }\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void PushBlockInventory(const uint256& hash)\r\n    {\r\n        LOCK(cs_inventory);\r\n        vInventoryBlockToSend.push_back(hash);\r\n    }\r\n\r\n    /** TODO: move this application layer function to net processing */\r\n    void PushBlockHash(const uint256 &hash)\r\n    {\r\n        LOCK(cs_inventory);\r\n        vBlockHashesToAnnounce.push_back(hash);\r\n    }\r\n\r\n    void CloseSocketDisconnect();\r\n\r\n    void copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap);\r\n};\r\n```\r\n</details>",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 24,
          "closed_at": "2022-06-20T11:15:48Z",
          "created_at": "2020-06-27T17:58:34Z",
          "updated_at": "2023-06-20T10:07:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T21:53:48Z",
      "updated_at": "2020-12-23T21:53:48Z",
      "source": {
        "issue": {
          "id": 771395129,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQyOTM2ODI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20723",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20723/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20723/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20723/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20723",
          "number": 20723,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: improve logging in EvictExtraOutboundPeers()",
          "body": "following up on https://github.com/bitcoin/bitcoin/pull/19858#discussion_r545824316.\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20723",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20723",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20723.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20723.patch"
          },
          "closed_at": "2021-01-03T16:00:40Z",
          "created_at": "2020-12-19T14:54:53Z",
          "updated_at": "2022-08-16T17:11:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T22:07:18Z",
      "updated_at": "2020-12-23T22:07:18Z",
      "source": {
        "issue": {
          "id": 766321948,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTM5Mzc4MjI0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20649",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20649/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20649/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20649/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20649",
          "number": 20649,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Remove nMyStartingHeight from CNode/Connman",
          "body": "CNode and CConnman keep track of the active chain height when CNodes have been created, but apart from serializing the int once (when sending a version message), it is unused. So it can simply be removed in favor of a single int in PeerMan that can do the same.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20649",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20649",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20649.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20649.patch"
          },
          "closed_at": "2021-01-02T12:07:30Z",
          "created_at": "2020-12-14T11:27:51Z",
          "updated_at": "2022-08-16T17:01:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 558261042,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjYxMDQy",
      "url": null,
      "actor": null,
      "commit_id": "7f479a56b775f0ef50005bae3a910f9adc95b1b7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#pullrequestreview-558261042",
      "submitted_at": "2020-12-23T22:49:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T22:53:50Z",
      "updated_at": "2020-12-23T22:53:50Z",
      "source": {
        "issue": {
          "id": 735327352,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTE0NzQwMTM1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20295",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20295/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20295/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20295/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20295",
          "number": 20295,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: getblockfrompeer",
          "body": "This adds an RPC method to fetch a block directly from a peer. This can used to fetch stale blocks with lower proof of work that are normally ignored by the node (`headers-only` in `getchaintips`).\r\n\r\nUsage:\r\n```\r\nbitcoin-cli getblockfrompeer HASH peer_n\r\n```\r\n\r\nCloses #20155\r\n\r\nLimitations:\r\n* you have to specify which peer to fetch the block from\r\n* the node must already have the header",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 57,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20295",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20295",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20295.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20295.patch"
          },
          "closed_at": "2021-12-08T09:41:03Z",
          "created_at": "2020-11-03T13:39:24Z",
          "updated_at": "2023-01-15T10:07:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 750520136,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDUyMDEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750520136",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T22:54:45Z",
      "updated_at": "2020-12-23T22:54:45Z",
      "author_association": "MEMBER",
      "body": "Strong concept ACK. I really like the idea of compilation firewalls and not exposing the innards of net_processing through the header file.\r\n\r\nI don't know where this fits in the sequence of PRs for #19398. Doing it first makes some sense because it means we won't be putting stuff into the header file only to remove it later, but I think this PR will need to be split up into more digestible pieces to be merged.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750520136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T23:00:23Z",
      "updated_at": "2020-12-23T23:00:23Z",
      "source": {
        "issue": {
          "id": 728073037,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4ODQ3MjQ1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20228",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20228/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20228/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20228/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20228",
          "number": 20228,
          "state": "closed",
          "state_reason": null,
          "title": "addrman: Make addrman a top-level component",
          "body": "Addrman is currently a member variable of connman. Make it a top-level component with lifetime owned by node.context, and add a reference to addrman in peerman. This allows us to eliminate some functions in connman that are simply forwarding requests to addrman, and simplifies the connman-peerman interface.\r\n\r\nBy constructing the addrman in init, we can also add parameters to the ctor, which allows us to test it better. See #20233, where we enable consistency checking for addrman in our functional tests.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20228",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20228",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20228.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20228.patch"
          },
          "closed_at": "2021-03-30T10:30:22Z",
          "created_at": "2020-10-23T09:43:07Z",
          "updated_at": "2022-08-16T17:07:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 558274751,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjc0NzUx",
      "url": null,
      "actor": null,
      "commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#pullrequestreview-558274751",
      "submitted_at": "2020-12-23T23:43:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T23:56:14Z",
      "updated_at": "2020-12-23T23:56:14Z",
      "source": {
        "issue": {
          "id": 650699006,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ0MTQwMjU5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19438",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19438/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19438/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19438/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19438",
          "number": 19438,
          "state": "closed",
          "state_reason": null,
          "title": "Introduce deploymentstatus",
          "body": "Introduces helper functions to make it easy to bury future deployments, along the lines of the suggestion from [11398](https://github.com/bitcoin/bitcoin/pull/11398#issuecomment-335599326) \"I would prefer it if a buried deployment wouldn't require all code paths that check the BIP9 status to require changing\".\r\n\r\nThis provides three functions: `DeploymentEnabled()` which tests if a deployment can ever be active, `DeploymentActiveAt()` which checks if a deployment should be enforced in the given block, and `DeploymentActiveAfter()` which checks if a deployment should be enforced in the block following the given block, and overloads all three to work both with buried deployments and versionbits deployments.\r\n\r\nThis adds a dedicated lock for the versionbits cache, which is acquired internally by the versionbits functions, rather than relying on `cs_main`. It also moves moves versionbitscache into deploymentstatus to avoid a circular dependency with validation.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 192202000,
              "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
              "name": "Consensus",
              "color": "009800",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19438",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19438",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19438.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19438.patch"
          },
          "closed_at": "2021-07-01T17:16:23Z",
          "created_at": "2020-07-03T17:03:16Z",
          "updated_at": "2022-08-16T17:25:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 558280880,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjgwODgw",
      "url": null,
      "actor": null,
      "commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "\n",
      "user": {
        "login": "Limpisey168",
        "id": 75303867,
        "node_id": "MDQ6VXNlcjc1MzAzODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/75303867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Limpisey168",
        "html_url": "https://github.com/Limpisey168",
        "followers_url": "https://api.github.com/users/Limpisey168/followers",
        "following_url": "https://api.github.com/users/Limpisey168/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Limpisey168/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Limpisey168/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Limpisey168/subscriptions",
        "organizations_url": "https://api.github.com/users/Limpisey168/orgs",
        "repos_url": "https://api.github.com/users/Limpisey168/repos",
        "events_url": "https://api.github.com/users/Limpisey168/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Limpisey168/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#pullrequestreview-558280880",
      "submitted_at": "2020-12-24T00:14:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
    },
    {
      "event": "reviewed",
      "id": 558468080,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDY4MDgw",
      "url": null,
      "actor": null,
      "commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "There are a few more things that can be deleted from the header file or moved into the cpp file:\r\n\r\n```diff\r\n→ git --no-pager d\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex ca016ec52b..1c7638a774 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -26,6 +26,7 @@\r\n #include <streams.h>\r\n #include <tinyformat.h>\r\n #include <txmempool.h>\r\n+#include <txrequest.h>\r\n #include <util/check.h> // For NDEBUG compile time check\r\n #include <util/strencodings.h>\r\n #include <util/system.h>\r\n@@ -290,6 +291,20 @@ struct CNodeState {\r\n };\r\n } // namespace\r\n \r\n+/**\r\n+ * Data structure for an individual peer. This struct is not protected by\r\n+ * cs_main since it does not contain validation-critical data.\r\n+ *\r\n+ * Memory is owned by shared pointers and this object is destructed when\r\n+ * the refcount drops to zero.\r\n+ *\r\n+ * Mutexes inside this struct must not be held when locking m_peer_mutex.\r\n+ *\r\n+ * Details are all local to net_processing.cpp\r\n+ *\r\n+ * TODO: move most members from CNodeState to this structure.\r\n+ * TODO: move remaining application-layer data members from CNode to this structure.\r\n+ */\r\n struct Peer {\r\n     /** Same id as the CNode object for this peer */\r\n     const NodeId m_id{0};\r\n@@ -334,6 +349,8 @@ struct Peer {\r\n     explicit Peer(NodeId id, CAddress addr, bool is_inbound) : m_id(id),  nodestate(addr, is_inbound) {}\r\n };\r\n \r\n+using PeerRef = std::shared_ptr<Peer>;\r\n+\r\n namespace {\r\n class PeerManagerImpl final : public PeerManager {\r\n public:\r\ndiff --git a/src/net_processing.h b/src/net_processing.h\r\nindex ee34a38178..74eabd6376 100644\r\n--- a/src/net_processing.h\r\n+++ b/src/net_processing.h\r\n@@ -6,19 +6,12 @@\r\n #ifndef BITCOIN_NET_PROCESSING_H\r\n #define BITCOIN_NET_PROCESSING_H\r\n \r\n-#include <consensus/params.h>\r\n #include <net.h>\r\n-#include <sync.h>\r\n-#include <txrequest.h>\r\n #include <validationinterface.h>\r\n \r\n-class BlockTransactionsRequest;\r\n-class BlockValidationState;\r\n-class CBlockHeader;\r\n class CChainParams;\r\n class CTxMemPool;\r\n class ChainstateManager;\r\n-class TxValidationState;\r\n \r\n extern RecursiveMutex cs_main;\r\n extern RecursiveMutex g_cs_orphans;\r\n@@ -40,24 +33,6 @@ struct CNodeStateStats {\r\n     std::vector<int> vHeightInFlight;\r\n };\r\n \r\n-/**\r\n- * Data structure for an individual peer. This struct is not protected by\r\n- * cs_main since it does not contain validation-critical data.\r\n- *\r\n- * Memory is owned by shared pointers and this object is destructed when\r\n- * the refcount drops to zero.\r\n- *\r\n- * Mutexes inside this struct must not be held when locking m_peer_mutex.\r\n- *\r\n- * Details are all local to net_processing.cpp\r\n- *\r\n- * TODO: move most members from CNodeState to this structure.\r\n- * TODO: move remaining application-layer data members from CNode to this structure.\r\n- */\r\n-struct Peer; // body is defined in net_processing.cpp\r\n-\r\n-using PeerRef = std::shared_ptr<Peer>;\r\n-\r\n class PeerManager : public CValidationInterface, public NetEventsInterface {\r\n public:\r\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\r\n\r\n```",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#pullrequestreview-558468080",
      "submitted_at": "2020-12-24T11:40:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
    },
    {
      "event": "subscribed",
      "id": 4147940850,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDc5NDA4NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4147940850",
      "actor": {
        "login": "matinabbasi788",
        "id": 57499886,
        "node_id": "MDQ6VXNlcjU3NDk5ODg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/57499886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/matinabbasi788",
        "html_url": "https://github.com/matinabbasi788",
        "followers_url": "https://api.github.com/users/matinabbasi788/followers",
        "following_url": "https://api.github.com/users/matinabbasi788/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/matinabbasi788/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/matinabbasi788/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/matinabbasi788/subscriptions",
        "organizations_url": "https://api.github.com/users/matinabbasi788/orgs",
        "repos_url": "https://api.github.com/users/matinabbasi788/repos",
        "events_url": "https://api.github.com/users/matinabbasi788/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/matinabbasi788/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T19:06:15Z"
    },
    {
      "event": "subscribed",
      "id": 4147940918,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDc5NDA5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4147940918",
      "actor": {
        "login": "matinabbasi788",
        "id": 57499886,
        "node_id": "MDQ6VXNlcjU3NDk5ODg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/57499886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/matinabbasi788",
        "html_url": "https://github.com/matinabbasi788",
        "followers_url": "https://api.github.com/users/matinabbasi788/followers",
        "following_url": "https://api.github.com/users/matinabbasi788/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/matinabbasi788/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/matinabbasi788/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/matinabbasi788/subscriptions",
        "organizations_url": "https://api.github.com/users/matinabbasi788/orgs",
        "repos_url": "https://api.github.com/users/matinabbasi788/repos",
        "events_url": "https://api.github.com/users/matinabbasi788/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/matinabbasi788/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T19:06:17Z"
    },
    {
      "event": "subscribed",
      "id": 4147941029,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDc5NDEwMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4147941029",
      "actor": {
        "login": "matinabbasi788",
        "id": 57499886,
        "node_id": "MDQ6VXNlcjU3NDk5ODg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/57499886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/matinabbasi788",
        "html_url": "https://github.com/matinabbasi788",
        "followers_url": "https://api.github.com/users/matinabbasi788/followers",
        "following_url": "https://api.github.com/users/matinabbasi788/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/matinabbasi788/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/matinabbasi788/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/matinabbasi788/subscriptions",
        "organizations_url": "https://api.github.com/users/matinabbasi788/orgs",
        "repos_url": "https://api.github.com/users/matinabbasi788/repos",
        "events_url": "https://api.github.com/users/matinabbasi788/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/matinabbasi788/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T19:06:24Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T03:27:55Z",
      "updated_at": "2020-12-25T03:27:55Z",
      "source": {
        "issue": {
          "id": 575726877,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzgzODM3MDY2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
          "number": 18261,
          "state": "closed",
          "state_reason": null,
          "title": "Erlay: bandwidth-efficient transaction relay protocol",
          "body": "This is an implementation of [Erlay](https://arxiv.org/abs/1905.10518), using primitives in the BIP-330 (see the updated spec [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki)). Please refer to these two to understand the design. My talk on the topic is [here](https://youtu.be/YxsjdIl0034?t=670).\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I'll mention them briefly once again here:\r\n- save 40% of the bandwidth consumed by a node\r\n- increase network connectivity for almost no bandwidth or latency cost\r\n- improves privacy as a side-effect\r\n\r\nObviously looking for review, let's try to start with a high-level concerns, and keep nits for later.\r\n\r\nP.S.\r\nPlease don't be scared of 8,000 LOC added. 7,000 of them is minisketch added as a subtree.\r\n\r\nP.P.S.\r\nMy experiments of running this code live (slightly outdated) with a script to replicate the experiment: [here1](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-599241490) and [here2](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543).\r\n",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 38,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18261.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18261.patch"
          },
          "closed_at": "2021-03-23T22:51:05Z",
          "created_at": "2020-03-04T20:01:31Z",
          "updated_at": "2022-08-16T17:22:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 751358315,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTM1ODMxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751358315",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-26T14:01:01Z",
      "updated_at": "2020-12-26T14:01:01Z",
      "author_association": "MEMBER",
      "body": "I've made a branch at https://github.com/jnewbery/bitcoin/tree/pr20758.1 that implements something I've wanted to try for a while. It moves PeerManagerImpl into its own translation unit (net_processing_impl.cpp), with the declaration of PeerManagerImpl in net_processing_impl.h. That header file is only included by net_processing.cpp (so the std::unique_ptr<PeerManagerImpl> can be constructed) and the test files. The tests are updated to use a PeerManagerImpl instead of a PeerManager.\r\n\r\nThe result is that PeerManager and net_processing.h don't need to include any functions that are for test only. That header file and PeerManager's public interface are about as minimal as possible (the only exposed methods are RelayTransaction, GetNodeStateStats and IgnoresIncomingTxs). Meanwhile, everything in PeerManagerImpl can be made public (since it's behind a compilation firewall so effectively everything is hidden from other translation units), and the tests can access any method/data in the class.\r\n\r\nWhat do you think? Is this something we should consider?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751358315",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-27T14:42:04Z",
      "updated_at": "2020-12-27T14:42:04Z",
      "source": {
        "issue": {
          "id": 774450204,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ1Mzc0MTA1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20762",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20762/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20762/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20762/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20762",
          "number": 20762,
          "state": "closed",
          "state_reason": null,
          "title": "doc: Fix some typos",
          "body": "accomodate -> accommodate",
          "user": {
            "login": "eltociear",
            "id": 22633385,
            "node_id": "MDQ6VXNlcjIyNjMzMzg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eltociear",
            "html_url": "https://github.com/eltociear",
            "followers_url": "https://api.github.com/users/eltociear/followers",
            "following_url": "https://api.github.com/users/eltociear/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/eltociear/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/eltociear/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/eltociear/subscriptions",
            "organizations_url": "https://api.github.com/users/eltociear/orgs",
            "repos_url": "https://api.github.com/users/eltociear/repos",
            "events_url": "https://api.github.com/users/eltociear/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/eltociear/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20762",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20762",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20762.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20762.patch"
          },
          "closed_at": "2021-01-04T05:59:02Z",
          "created_at": "2020-12-24T13:38:23Z",
          "updated_at": "2021-02-22T07:22:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 751535311,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTUzNTMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751535311",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-28T00:33:44Z",
      "updated_at": "2020-12-28T00:33:44Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  It moves PeerManagerImpl into its own translation unit\r\n\r\nI think a better approach would be to have `module.h` as the public interface, `module_impl.h` as the white-box testing interface (ie the class definition of `PeerManagerImpl`), and `module.cpp` as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\r\n\r\nI think maybe it'd be even better to focus on making the classes smaller so they can be tested purely via their public interfaces though, and not worry too much about exposing a few extra methods in the meantime?",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751535311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "commented",
      "id": 752140615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjE0MDYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752140615",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-29T16:13:20Z",
      "updated_at": "2020-12-29T16:13:20Z",
      "author_association": "MEMBER",
      "body": "> I think a better approach would be to have module.h as the public interface, module_impl.h as the white-box testing interface (ie the class definition of PeerManagerImpl), and module.cpp as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\r\n\r\nACK. This seems even better!\r\n\r\n> I think maybe it'd be even better to focus on making the classes smaller so they can be tested purely via their public interfaces though, and not worry too much about exposing a few extra methods in the meantime?\r\n\r\nAlso ACK making classes smaller. I think the tx_request module is a great example of how we can make the code clearer and better tested by breaking up the functionality. Perhaps block downloading, orphan handling, addr relay, etc could get similar treatment in future.\r\n\r\nAside: I think 'tested purely via their public interfaces' is an OOP mantra that sounds good in theory, but white-box testing is too useful to throw out entirely, especially when dealing with legacy code that has existing large modules/classes.\r\n\r\nThis can all be left for future work though. I think just implementing the PeerManagerImpl is a great first step. I'd love to help get this reviewed and merged. Perhaps everything up to _move PeerManagerImpl into cpp file_ could be split into a PR for review first?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752140615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-29T20:17:04Z",
      "updated_at": "2020-12-29T20:17:04Z",
      "source": {
        "issue": {
          "id": 775933016,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ2NTE3NTc1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20799",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20799/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20799/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20799/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20799",
          "number": 20799,
          "state": "closed",
          "state_reason": null,
          "title": "net processing: Only support version 2 compact blocks",
          "body": "Compact blocks are used for efficient relay of blocks, either through High Bandwidth or Low Bandwidth mode. See [BIP 152](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki) for full details.\r\n\r\nFor compact block relay to work, the receiver must have a mempool containing transactions which are likely to be included in the block. The receiver uses these transactions to reconstruct the block from the short transaction ids included in the `cmpctblock` message. Compact blocks are therefore only useful for relaying blocks at or near the tip of the block chain. For older blocks, the recipient won't have the transactions in their mempool and so would need to request them using a `getblocktxn` message. In such cases, just requesting the full block is more efficient.\r\n\r\nBIP 152 supports two versions: version 1 (without witnesses) and version 2 (with witnesses). Version 2 is required to reconstruct segwit blocks. Segwit was activated in August 2017, and providing non-witness blocks to peers is no longer useful. Since the witnesses are not included, the peer would not be able to fully validate all the consensus rules on the provided block.\r\n\r\nTherefore, stop supporting version 1 compact blocks. Ignore `sendcmpct` messages with version=1, and don't advertise support by sending `sendcmpct` with version=1. Only send `sendcmpct` to peers with `NODE_WITNESS`. Respond to all requests for compact blocks or blocktxns with witness-serialized blocks and transactions.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": true,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20799",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20799",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20799.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20799.patch"
          },
          "closed_at": "2022-05-16T11:43:23Z",
          "created_at": "2020-12-29T14:54:01Z",
          "updated_at": "2023-02-08T10:58:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 752327389,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjMyNzM4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752327389",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-30T04:54:58Z",
      "updated_at": "2020-12-30T04:54:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Aside: I think 'tested purely via their public interfaces' is an OOP mantra that sounds good in theory, but white-box testing is too useful to throw out entirely, especially when dealing with legacy code that has existing large modules/classes.\r\n\r\nI still think that's white-box testing -- it's just that calling public functions is equivalent to entering at function boundaries, while calling private functions is more like a GOTO into the middle of a function. But I don't mind having test-only sanity check functions (like in txrequest.h)...",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752327389",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T06:51:51Z",
      "updated_at": "2020-12-31T06:51:51Z",
      "source": {
        "issue": {
          "id": 776822754,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ3MjQ3MzIy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20811",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20811/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20811/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20811/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20811",
          "number": 20811,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: move net_processing implementation details out of header",
          "body": "Moves the implementation details of `PeerManager` and all of `struct Peer` into net_processing.cpp.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20811",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20811",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20811.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20811.patch"
          },
          "closed_at": "2021-01-13T08:48:34Z",
          "created_at": "2020-12-31T06:50:36Z",
          "updated_at": "2022-08-16T17:02:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4159061677,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE1OTA2MTY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4159061677",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T06:52:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4159071198,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE1OTA3MTE5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4159071198",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T06:57:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4159668054,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE1OTY2ODA1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4159668054",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T13:20:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4160933896,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE2MDkzMzg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4160933896",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-01T12:51:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4163140138,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE2MzE0MDEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4163140138",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T02:58:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4163880993,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE2Mzg4MDk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4163880993",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T08:33:03Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T17:55:32Z",
      "updated_at": "2021-01-04T17:55:32Z",
      "source": {
        "issue": {
          "id": 777843194,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ4MDM1Nzgz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20842",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20842/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20842/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20842/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20842",
          "number": 20842,
          "state": "closed",
          "state_reason": null,
          "title": "docs: consolidate typo & url fixing",
          "body": "Consolidates / fixes the changes from #20762, #20836, #20810. There is no output when  `test/lint/lint-all.sh` is run.\r\n\r\nCloses #20807.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20842",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20842",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20842.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20842.patch"
          },
          "closed_at": "2021-01-05T10:55:00Z",
          "created_at": "2021-01-04T06:07:38Z",
          "updated_at": "2022-08-16T17:05:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T18:37:44Z",
      "updated_at": "2021-01-04T18:37:44Z",
      "source": {
        "issue": {
          "id": 773195046,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ0MzIzNzAx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20750",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20750/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20750/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20750/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20750",
          "number": 20750,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 2/n] Prune g_chainman usage in mempool-related validation functions",
          "body": "Overall PR: #20158 (tree-wide: De-globalize ChainstateManager)\r\n\r\nNote to reviewers:\r\n1. This bundle may _apparently_ introduce usage of `g_chainman` or `::Chain(state|)Active()` globals, but these are resolved later on in the overall PR. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n2. There may be seemingly obvious local references to `ChainstateManager` or other validation objects which are not being used in callers of the current function in question, this is done intentionally to **_keep each commit centered around one function/method_** to ease review and to make the overall change systematic. We don't assume anything about our callers. Rest assured that once we are considering that particular caller in later commits, we will use the obvious local references. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n3. When changing a function/method that has many callers (e.g. `LookupBlockIndex` with 55 callers), it is sometimes easier (and less error-prone) to use a scripted-diff. When doing so, there will be 3 commits in sequence so that every commit compiles like so:\r\n\t1. Add `new_function`, make `old_function` a wrapper of `new_function`, divert all calls to `old_function` to `new_function` **in the local module only**\r\n\t2. Scripted-diff to divert all calls to `old_function` to `new_function` **in the rest of the codebase**\r\n\t3. Remove `old_function`",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20750",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20750",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20750.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20750.patch"
          },
          "closed_at": "2021-02-20T08:23:11Z",
          "created_at": "2020-12-22T19:35:51Z",
          "updated_at": "2022-08-16T17:04:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T18:39:58Z",
      "updated_at": "2021-01-04T18:39:58Z",
      "source": {
        "issue": {
          "id": 773155422,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ0MjkwODcx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20749",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20749/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20749/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20749/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20749",
          "number": 20749,
          "state": "closed",
          "state_reason": null,
          "title": "[Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex",
          "body": "Overall PR: #20158 (tree-wide: De-globalize ChainstateManager)\r\n\r\nNote to reviewers:\r\n1. This bundle may _apparently_ introduce usage of `g_chainman` or `::Chain(state|)Active()` globals, but these are resolved later on in the overall PR. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n2. There may be seemingly obvious local references to `ChainstateManager` or other validation objects which are not being used in callers of the current function in question, this is done intentionally to **_keep each commit centered around one function/method_** to ease review and to make the overall change systematic. We don't assume anything about our callers. Rest assured that once we are considering that particular caller in later commits, we will use the obvious local references. [Commits of overall PR](https://github.com/bitcoin/bitcoin/pull/20158/commits)\r\n3. When changing a function/method that has many callers (e.g. `LookupBlockIndex` with 55 callers), it is sometimes easier (and less error-prone) to use a scripted-diff. When doing so, there will be 3 commits in sequence so that every commit compiles like so:\r\n\t1. Add `new_function`, make `old_function` a wrapper of `new_function`, divert all calls to `old_function` to `new_function` **in the local module only**\r\n\t2. Scripted-diff to divert all calls to `old_function` to `new_function` **in the rest of the codebase**\r\n\t3. Remove `old_function`",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 21,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20749",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20749",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20749.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20749.patch"
          },
          "closed_at": "2021-02-01T12:10:10Z",
          "created_at": "2020-12-22T18:25:20Z",
          "updated_at": "2022-08-16T17:12:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4167074900,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE2NzA3NDkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4167074900",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-04T22:37:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187056126,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NzA1NjEyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187056126",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T13:46:05Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T17:50:23Z",
      "updated_at": "2021-01-09T17:50:23Z",
      "source": {
        "issue": {
          "id": 778209270,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ4MzM4NTQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20849",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20849/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20849/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20849/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20849",
          "number": 20849,
          "state": "closed",
          "state_reason": null,
          "title": "net: disconnect peers by address without using a subnet",
          "body": "Previously, when disconnecting a peer with a given address we would\r\ncreate a dummy subnet that contains just 1 address (/32 for IPv4 and\r\n/128 for IPv6) and would disconnect all peers that belong to this\r\nsubnet (there may be more than one connection, to a different port).\r\n\r\nThe problem is that for any non-IPv4 and non-IPv6 address we would\r\ncreate an invalid subnet which would later not match any addresses.\r\n\r\nThus, don't use a one-host-subnet, but compare the addresses directly.\r\nThis works for any type of addresses.\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/45",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/45/labels",
            "id": 4914019,
            "node_id": "MDk6TWlsZXN0b25lNDkxNDAxOQ==",
            "number": 45,
            "state": "closed",
            "title": "0.21.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 132,
            "created_at": "2019-12-09T08:39:58Z",
            "updated_at": "2021-01-15T19:50:53Z",
            "closed_at": "2021-01-15T19:50:53Z"
          },
          "locked": true,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20849",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20849",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20849.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20849.patch"
          },
          "closed_at": "2021-01-11T10:29:32Z",
          "created_at": "2021-01-04T16:25:13Z",
          "updated_at": "2021-08-15T09:41:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T18:16:54Z",
      "updated_at": "2021-01-09T18:16:54Z",
      "source": {
        "issue": {
          "id": 771452944,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQyOTc3MTM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20726",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20726/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20726/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20726/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20726",
          "number": 20726,
          "state": "closed",
          "state_reason": null,
          "title": "p2p: Add DISABLETX message for negotiating block-relay-only connections",
          "body": "Implement BIP 338.\r\n\r\nWhen we initiate a block-relay-only connection today, our peer doesn't know that we won't send transactions ourselves, or even that we won't try to turn on transaction relay at some later point during the connection's lifetime.\r\n\r\nThis PR adds a new p2p message, DISABLETX, to be sent between VERSION and VERACK so that peers can signal to each other that they only want blocks/compactblocks/headers to be sent on the link, and not transaction-relay traffic (or addr messages, unless otherwise indicated).",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 55,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20726",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20726",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20726.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20726.patch"
          },
          "closed_at": "2022-05-19T12:47:00Z",
          "created_at": "2020-12-19T20:55:36Z",
          "updated_at": "2023-05-19T10:02:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T20:53:37Z",
      "updated_at": "2021-01-09T20:53:37Z",
      "source": {
        "issue": {
          "id": 609294978,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDEwOTAyMTIx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18819",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18819/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18819/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18819/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/18819",
          "number": 18819,
          "state": "closed",
          "state_reason": null,
          "title": "net: Replace cs_feeFilter with simple std::atomic",
          "body": "A `RecursiveMutex` is overkill for setting or reading a plain integer. Even a `Mutex` is overkill, when a plain `std::atomic` can be used.\r\n\r\nThis removes 11 lines of code. Also, it is cutting down on the number of locks put on the stack at the same time, which complicates review looking out for potential lock contention.",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18819",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/18819",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/18819.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/18819.patch"
          },
          "closed_at": "2021-01-11T02:14:43Z",
          "created_at": "2020-04-29T19:16:02Z",
          "updated_at": "2022-08-16T17:11:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187691698,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NzY5MTY5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187691698",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T05:04:06Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T07:49:56Z",
      "updated_at": "2021-01-10T07:49:56Z",
      "source": {
        "issue": {
          "id": 781905392,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTUxNTU2NDE4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20881",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20881/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20881/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20881/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20881",
          "number": 20881,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: net permission flags in net processing",
          "body": "to increase coverage",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20881",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20881",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20881.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20881.patch"
          },
          "closed_at": "2021-01-10T09:34:52Z",
          "created_at": "2021-01-08T07:12:21Z",
          "updated_at": "2022-08-18T17:14:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T08:30:42Z",
      "updated_at": "2021-01-10T08:30:42Z",
      "source": {
        "issue": {
          "id": 771433762,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQyOTYzOTYy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20724",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20724/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20724/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20724/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20724",
          "number": 20724,
          "state": "closed",
          "state_reason": null,
          "title": "Cleanup of -debug=net log messages",
          "body": "A few changes to -debug=net logging:\r\n\r\n * always log when disconnecting a peer\r\n * only log various connection errors when -debug=net is enabled, since errors from random untrusted peers is completely expected\r\n * log when ignoring a message due to violating protocol (primarily to make it easier to debug other implementations)\r\n * use \"peer=123\" rather than \"from 123\" to make grepping logs a bit easier\r\n * log the value of the bip-37 `fRelay` field in version messages both when sending and receiving a version message",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20724",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20724",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20724.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20724.patch"
          },
          "closed_at": "2021-01-29T06:45:02Z",
          "created_at": "2020-12-19T18:49:51Z",
          "updated_at": "2022-08-16T17:12:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 566823894,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2ODIzODk0",
      "url": null,
      "actor": null,
      "commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just did a first look to understand magnitude of change. I think it's hard to Concept ACK the whole as it's more a bundle of refactoring, maybe you can provide a rational for each subset of changes.\r\n\r\n> Also ACK making classes smaller. I think the tx_request module is a great example of how we can make the code clearer and better tested by breaking up the functionality. Perhaps block downloading, orphan handling, addr relay, etc could get similar treatment in future.\r\n\r\nYes I'm concept ACK on this overall direction!",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#pullrequestreview-566823894",
      "submitted_at": "2021-01-13T02:45:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4200899618,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIwMDg5OTYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4200899618",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T12:09:38Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T13:00:13Z",
      "updated_at": "2021-01-13T13:00:13Z",
      "source": {
        "issue": {
          "id": 785084033,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTU0MTY4Mzc3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20925/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20925",
          "number": 20925,
          "state": "closed",
          "state_reason": null,
          "title": "RFC: Move Peer and PeerManagerImpl declarations to separate header",
          "body": "Not sure whether this is desirable, so marking as a proof of concept.\r\n\r\nThis moves the `Peer` and `PeerManagerImpl` declarations to their own header file, `peerman_impl.h`, which can be included by `net_processing.cpp` and the test/bench/fuzz files.\r\n\r\nThe benefits of this are:\r\n\r\n- `PeerManagerImpl` functions which are exposed through the `PeerManager` interface for testing, but would otherwise be private can be removed from `PeerManager`. That means that `PeerManager` truly is net_processing's minimal interface to expose to the rest of the program.\r\n- If a test needs to directly manipulate `Peer` objects, it can do so, since they're exposed in peerman_impl header. ",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20925",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20925",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20925.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20925.patch"
          },
          "closed_at": "2021-02-15T12:03:12Z",
          "created_at": "2021-01-13T12:59:33Z",
          "updated_at": "2022-08-16T17:04:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 759853026,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTg1MzAyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759853026",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T00:53:41Z",
      "updated_at": "2021-01-14T00:53:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased now #20811 is merged. I think the next step is to split some of the commits moving globals into PeerManagerImpl members into a separate PR.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-759853026",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-15T08:35:33Z",
      "updated_at": "2021-01-15T08:35:33Z",
      "source": {
        "issue": {
          "id": 786710898,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTU1NTQ1NDI2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20942",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20942/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20942/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20942/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20942",
          "number": 20942,
          "state": "closed",
          "state_reason": null,
          "title": "[refactor] Move some net_processing globals into PeerManagerImpl",
          "body": "Turns some globals into member variables, and simplifies the parameter list for some of net_processing's internal functions. Mostly just serves as a code cleanup at this point.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20942",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20942",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20942.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20942.patch"
          },
          "closed_at": "2021-02-15T11:04:13Z",
          "created_at": "2021-01-15T08:34:19Z",
          "updated_at": "2022-08-16T17:07:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4209983360,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIwOTk4MzM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4209983360",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-15T08:37:58Z"
    },
    {
      "event": "commented",
      "id": 760755534,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDc1NTUzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760755534",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-15T08:40:38Z",
      "updated_at": "2021-01-15T08:40:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pulled out some commits (and added one to drop connman from `MaybeSetPeerAsAnnoun...`) into #20942, so that's the next set to review.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-760755534",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-20T08:03:52Z",
      "updated_at": "2021-01-20T08:03:52Z",
      "source": {
        "issue": {
          "id": 656269454,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTk5NjQw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19509",
          "number": 19509,
          "state": "closed",
          "state_reason": null,
          "title": "Per-Peer Message Capture",
          "body": "This PR introduces per-peer message capture into Bitcoin Core.  📓 \r\n\r\n## Purpose\r\n\r\nThe purpose and scope of this feature is intentionally limited.  It answers a question anyone new to Bitcoin's P2P protocol has had: \"Can I see what messages my node is sending and receiving?\".\r\n\r\n## Functionality\r\n\r\nWhen a new debug-only command line argument `capturemessages` is set, any message that the node receives or sends is captured.  The capture occurs in the MessageHandler thread.  When receiving a message, it is captured as soon as the MessageHandler thread takes the message off of the vProcessMsg queue.  When sending, the message is captured just before the message is pushed onto the vSendMsg queue.\r\n\r\nThe message capture is as minimal as possible to reduce the performance impact on the node.  Messages are captured to a new `message_capture` folder in the datadir.  Each node has their own subfolder named with their IP address and port.  Inside, received and sent messages are captured into two binary files, msgs_recv.dat and msgs_sent.dat, like so:\r\n\r\n```\r\nmessage_capture/203.0.113.7:56072/msgs_recv.dat\r\nmessage_capture/203.0.113.7:56072/msgs_sent.dat\r\n```\r\n\r\nBecause the messages are raw binary dumps, included in this PR is a Python parsing tool to convert the binary files into human-readable JSON.  This script has been placed on its own and out of the way in the new `contrib/message-capture` folder.  Its usage is simple and easily discovered by the autogenerated `-h` option.\r\n\r\n## Future Maintenance\r\n\r\nI sympathize greatly with anyone who says \"the best code is no code\".\r\n\r\nThe future maintenance of this feature will be minimal.  The logic to deserialize the payload of the p2p messages exists in our testing framework.  As long as our testing framework works, so will this tool.\r\n\r\nAdditionally, I hope that the simplicity of this tool will mean that it gets used frequently, so that problems will be discovered and solved when they are small.\r\n\r\n## FAQ\r\n\r\n\"Why not just use Wireshark\"\r\n\r\nYes, Wireshark has the ability to filter and decode Bitcoin messages.  However, the purpose of the message capture added in this PR is to assist with debugging, primarily for new developers looking to improve their knowledge of the Bitcoin Protocol.  This drives the design in a different direction than Wireshark, in two different ways.  First, this tool must be convenient and simple to use.  Using an external tool, like Wireshark, requires setup and interpretation of the results.  To a new user who doesn't necessarily know what to expect, this is unnecessary difficulty.  This tool, on the other hand, \"just works\".  Turn on the command line flag, run your node, run the script, read the JSON.  Second, because this tool is being used for debugging, we want it to be as close to the true behavior of the node as possible.  A lot can happen in the SocketHandler thread that would be missed by Wireshark.\r\n\r\nAdditionally, if we are to use Wireshark, we are at the mercy of whoever it maintaining the protocol in Wireshark, both as to it being accurate and recent.  As can be seen by the **many** previous attempts to include Bitcoin in Wireshark (google \"bitcoin dissector\") this is easier said than done.\r\n\r\nLastly, I truly believe that this tool will be used significantly more by being included in the codebase.  It's just that much more discoverable.",
          "user": {
            "login": "troygiorshev",
            "id": 5553787,
            "node_id": "MDQ6VXNlcjU1NTM3ODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/troygiorshev",
            "html_url": "https://github.com/troygiorshev",
            "followers_url": "https://api.github.com/users/troygiorshev/followers",
            "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
            "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
            "repos_url": "https://api.github.com/users/troygiorshev/repos",
            "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 74,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19509",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19509.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19509.patch"
          },
          "closed_at": "2021-02-02T12:12:36Z",
          "created_at": "2020-07-14T02:10:58Z",
          "updated_at": "2023-07-11T10:10:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-20T13:59:40Z",
      "updated_at": "2021-01-20T13:59:40Z",
      "source": {
        "issue": {
          "id": 789282167,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTU3NjQ2OTU1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20966",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20966/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20966/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20966/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20966",
          "number": 20966,
          "state": "closed",
          "state_reason": null,
          "title": "banman: save the banlist in a JSON format on disk",
          "body": "Save the banlist in `banlist.json` instead of `banlist.dat`.\r\n\r\nThis makes it possible to store Tor v3 entries in the banlist on disk\r\n(and any other addresses that cannot be serialized in addrv1 format).\r\n\r\nOnly read `banlist.dat` if it exists and `banlist.json` does not exist (first start after an upgrade).\r\n\r\nSupersedes https://github.com/bitcoin/bitcoin/pull/20904\r\nResolves https://github.com/bitcoin/bitcoin/issues/19748\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/47",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/47/labels",
            "id": 5347322,
            "node_id": "MDk6TWlsZXN0b25lNTM0NzMyMg==",
            "number": 47,
            "state": "closed",
            "title": "22.0",
            "description": "",
            "creator": {
              "login": "MarcoFalke",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/MarcoFalke",
              "html_url": "https://github.com/MarcoFalke",
              "followers_url": "https://api.github.com/users/MarcoFalke/followers",
              "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
              "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
              "repos_url": "https://api.github.com/users/MarcoFalke/repos",
              "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 124,
            "created_at": "2020-04-25T00:14:49Z",
            "updated_at": "2021-09-14T07:16:53Z",
            "closed_at": "2021-09-09T12:47:52Z"
          },
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 43,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20966",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20966",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20966.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20966.patch"
          },
          "closed_at": "2021-06-23T08:04:05Z",
          "created_at": "2021-01-19T19:05:20Z",
          "updated_at": "2022-08-16T17:24:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-23T21:26:46Z",
      "updated_at": "2021-01-23T21:26:46Z",
      "source": {
        "issue": {
          "id": 792629470,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTYwNDc1MDk0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20995",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20995/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20995/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20995/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20995",
          "number": 20995,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Avoid initializing version to less than MIN_PEER_PROTO_VERSION",
          "body": "This fixes a fuzz bug introduced in #20881. Previously the nodes in the fuzz tests had their version initialized to a constant (`PROTOCOL_VERSION`). After #20881, the nodes have their version initialized to an arbitrary signed integer. This is problematic for several reasons:\r\n\r\n* Both `nVersion` and `m_greatest_common_version` may be initialized to `0`. If a `version` message is processed, this leads to a crash, because `m_greatest_common_version` must be `INIT_PROTO_VERSION` while the `version` message is processed. See #20138 \r\n* The \"valid\" range for `nVersion` is `[MIN_PEER_PROTO_VERSION, std::numeric_limits<int32_t>::max()]` (see check in net_processing)\r\n* The \"valid\" range for `m_greatest_common_version` is `std::min(nVersion, PROTOCOL_VERSION)` (see net_processing)\r\n\r\nFix all issues by initializing `nVersion` and `m_greatest_common_version` to their valid ranges.\r\n\r\n-----\r\n\r\nThe crashers, if someone wants to try this at home:\r\n\r\n\r\n```\r\n( echo 'dmVyc2lvbgAWFhYWFhYWFhYWFhYWFhYWFhYWFhZp/29uAPX//xYWFhYWFhYWFhYWFhYWFhYWFhYW\r\nFhYWFhYWaW9uAOr1//8WFhYWFha0ZXJzaW9uAPX//wAAAAAAABAAAAAAAAAAAAC0ZXJzaW9uAPX/\r\n/wBPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT08AAAAAABAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAB2ZXJzaW9uAACDJIO9vXYKAAAAAAAAAAAAAAAAAAAAAAB2ZfS1qmu1qhUVFWs=' | base64 --decode > /tmp/a ) && FUZZ=process_message_version ./src/test/fuzz/fuzz /tmp/a\r\n```\r\n```\r\n( echo 'dmVyc2lvbgD//wAhTmiqN///NDcAAACENDL/iv//8DYAAHL///////79/RtcAJqamhqa/QEAAAD/\r\n///+/f1oZWFkZXJzAAAAAM8BAAAAIAYibkYRGgtZyq8SaGVhZGVycwAAAAD/NDcAAACENDL/iv//\r\n8DYAAHL///////79/RtcAJqamhqa/QEAAAD////+/f1oZWFkZXJzAAAAAM8BAAAAIAYibkYRGgtZ\r\nyq8SaGVhZGVycwAAAADPAQAAACAGIm5GERoLWS1wb3J061u/KMNPOkwFXqZ///b5IgIAAD+5ubkb\r\nXD5hZGRyAJqamhqasP0BAAAAAAAAAP0BAAAAIf39/R0dHQAAAAAAMgAA///7//+gXqZ///b5IgIA\r\nAD+5ubm5ubm5AAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAFgAAAAAAAAAAAAlBmv39/f1/f39B\r\nf39hZGRyAG5vAACaLgAdGzY2zwEAAAAgBiJuRhEaC1ktcG9ydOtbvyjDTzpMBV6mf//2+SICAAA/\r\nubm5G1w+YWRkcgCampoamrD9AQAAAAAAAAD9AQAAACH9/f0dHR0AAAAAADIAAP//+///oF6mf//2\r\n+SICAAA/ubm5ubm5uQAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAABYAAAAAAAAAAAAJQZr9/f39\r\nf39/QX9/YWRkcgBubwAAmi4AHRs2NjY2NjY2NjYCAgI2NgIA/f39/f39Nv39/TUmABxc' | base64 --decode > /tmp/b ) && FUZZ=process_message_version ./src/test/fuzz/fuzz /tmp/b\r\n```",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20995",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20995",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20995.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20995.patch"
          },
          "closed_at": "2021-01-28T14:15:52Z",
          "created_at": "2021-01-23T19:06:57Z",
          "updated_at": "2022-08-18T18:30:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T09:32:39Z",
      "updated_at": "2021-01-26T09:32:39Z",
      "source": {
        "issue": {
          "id": 793926717,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTYxNTI3OTYx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21009",
          "number": 21009,
          "state": "closed",
          "state_reason": null,
          "title": "Remove RewindBlockIndex logic",
          "body": "Closes #17862\r\n\r\nContext from [original comment](https://github.com/bitcoin/bitcoin/issues/17862#issuecomment-744285188) (minor edits):\r\n\r\n`RewindBlockIndex()` is a mechanism to allow nodes to be upgraded after segwit activation, while still keeping their chainstate/datadir in a consistent state. It works as follows:\r\n\r\n- A pre-segwit (i.e. v0.13.0 or older) node is running.\r\n-  Segwit activates. The pre-segwit node remains sync'ed to the tip, but is not enforcing the new segwit rules.\r\n- The user upgrades the node to a segwit-aware version (v0.13.1 or newer).\r\n- On startup, in `AppInitMain()`, `RewindBlockIndex()` is called. This walks the chain backwards from the tip, disconnecting and erasing blocks that from after segwit activation that weren't validated with segwit rules.\r\n- those blocks are then redownloaded (with witness data) and validated with segwit rules.\r\n\r\nThis logic probably isn't required any more since:\r\n\r\n- Segwit activated at height 481824, when the block chain was 130GB and the total number of txs was 250 million. Today, we're at height 667704, the blockchain is over 315GB and the total number of txs is over 600 million. Even if 20% of that added data is witness data (a high estimate), then around 150GB of transactions would need to be rewound to get back to segwit activation height. It'd probably be faster to simply validate from genesis, especially since we won't be validating any scripts before the assumevalid block. It's also unclear whether rewinding 150GB of transactions would even work. It's certainly never been tested.\r\n- Bitcoin Core v0.13 is hardly used any more. https://luke.dashjr.org/programs/bitcoin/files/charts/software.html shows less than 50 nodes running it. The software was EOL on Aug 1st 2018. It's very unlikely that anyone is running 0.13 and will want to upgrade to 0.22.\r\n\r\nThis PR introduces `NeedsRedownload()` which merely checks for insufficiently validated segwit blocks and requests that the user restarts the node with `-reindex`. Reindexing the block files upon restart will make the node rebuild chain state and block index from the `blk*.dat` files on disk. The node won't be able to index the blocks with `BLOCK_OPT_WITNESS`, so they will be missing from the chain and be re-downloaded, with witness data.\r\n\r\nRemoving this code allows the following (done in follow-up #21090):\r\n\r\n- removal of tests using `segwitheight=-1` in `p2p_segwit.py`.\r\n- in turn, that allows us to drop support for `-segwitheight=-1`, which is only supported for that test.\r\n- that allows us to always set `NODE_WITNESS` in our local services. The only reason we don't do that is to support `-segwitheight=-1`.\r\n- that in turn allows us to drop all of the `GetLocalServices() & NODE_WITNESS` checks inside `net_processing.cpp`, since our local services would always include `NODE_WITNESS`\r\n\r\n",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21009",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21009.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21009.patch"
          },
          "closed_at": "2021-04-27T08:15:39Z",
          "created_at": "2021-01-26T04:53:23Z",
          "updated_at": "2022-08-16T17:21:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T01:24:03Z",
      "updated_at": "2021-01-27T01:24:03Z",
      "source": {
        "issue": {
          "id": 794605065,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTYyMDkzNjAy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21015",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21015/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21015/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21015/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21015",
          "number": 21015,
          "state": "closed",
          "state_reason": null,
          "title": "Make all of net_processing (and some of net) use std::chrono types",
          "body": "(Picking up #20044. Rebased against master.)\r\n\r\nThis changes various uses of integers to represent timestamps and durations to `std::chrono` duration types with type-safe conversions, getting rid of various `.count()`, constructors, and conversion factors.",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21015",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21015",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21015.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21015.patch"
          },
          "closed_at": "2021-03-04T12:14:02Z",
          "created_at": "2021-01-26T22:24:40Z",
          "updated_at": "2022-08-16T17:13:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T07:43:30Z",
      "updated_at": "2021-01-28T07:43:30Z",
      "source": {
        "issue": {
          "id": 722569048,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjk2MzUx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20158/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20158",
          "number": 20158,
          "state": "closed",
          "state_reason": null,
          "title": "tree-wide: De-globalize ChainstateManager",
          "body": "## Prelude\r\n\r\n**Note to reviewers**: Currently looking Code Review on Sub-PRs (see below)\r\n\r\nOriginally: #20049\r\n\r\n### Sub-PRs\r\n\r\n_Last updated May 9th, 2020_\r\n\r\n- [x] #20323 | tests: Create or use existing properly initialized NodeContexts\r\n- [x] #20946 | fuzz: Consolidate fuzzing TestingSetup initialization\r\n- [x] #20972 | locks: Annotate CTxMemPool::check to require cs_main\r\n- [x] #20749 | [Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex\r\n- [x] #20750 | [Bundle 2/n] Prune g_chainman usage in mempool-related validation functions\r\n- [x] #21055 | [Bundle 3/n] Prune remaining g_chainman usage in validation functions\r\n- [x] #21270 | [Bundle 4/n] Prune g_chainman usage in validation-adjacent modules\r\n- [x] #21391 | [Bundle 5/n] Prune g_chainman usage in RPC modules\r\n- [x] #21767 | [Bundle 6/n] Prune g_chainman usage in auxiliary modules\r\n- [x] #21866 | [Bundle 7/n] Farewell, global Chainstate!\r\n\r\n### Todo List\r\n\r\n_Last updated Feb 1st, 2020_\r\n\r\n- [x] Address ryanofsky's comments\r\n\t- [x] https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520639845\r\n\r\n## Motivation\r\n\r\n###  Modularizing our consensus engine\r\n\r\nExcerpt from #20049\r\n> From my reading of past conversations and from a few offline chats, it seems that modularizing our consensus engine is a worthwhile first step towards a more complete isolation of said engine from non-consensus code.\r\n> \r\n> Modularizing our consensus engine means that:\r\n> \r\n> 1. We get clearer visibility into what currently lies in consensus codepaths **and** what depends on our consensus engine\r\n> 1. We can coalesce duplicate consensus initialization codepaths, mitigating against bugs that arise out of test/non-test initialization inconsistencies\r\n\r\n### De-globalizing `g_chainman`\r\n\r\nExcerpt from #20049\r\n> In order to modularize our consensus engine, we need to first de-globalize the global `ChainstateManager` -- namely `g_chainman` -- as it and its dependencies are what makes up the bulk of our consensus engine. A few direct references to `g_chainman` have already been removed in #19927, however, its indirect uses (mainly via `::Chain(state|)Active()`) are numerous in our codebase and often used to ~~cheat~~ avoid obtaining a `ChainstateManager` reference.\r\n\r\n## Description\r\n\r\nThis changeset moves the global `ChainstateManger` to `NodeContext` and removes `::Chain{state,}Active()` as a first step towards better modularization of our consensus engine. \r\n\r\nThe commits are ordered as such:\r\n1. Fixes to our existing codebase crucial to subsequent changes in this changeset\r\nhttps://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-10-chainman-fixes\r\n1. Remove all references to `g_chainman`, `::Chain{state,}Active()`\r\n\t1. In `src/validation.{cpp,h}`\r\n\t\t1. In a bundle of functions related to `::LookupBlockIndex` in the call graph\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/2020-10-chainman-fixes...dongcarl:2020-09-libbitcoinruntime-v4\r\n\t\t1. In a bundle of functions that are mempool-related\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-09-libbitcoinruntime-v4...2020-09-reduce-validation-mempool-ccsactiveglobal-usage\r\n\t\t1. In a bundle of functions which do not belong in previous bundles\r\n\t\thttps://github.com/dongcarl/bitcoin/compare/2020-09-reduce-validation-mempool-ccsactiveglobal-usage...dongcarl:2020-09-reduce-validation-ccsactiveglobal-usage\r\n\t1. In \"validation-adjacent\" modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-09-reduce-validation-ccsactiveglobal-usage...2020-09-libbitcoinruntime-v6\r\n\t\t1. In `src/txmempool.cpp`\r\n\t\t1. In `src/miner.cpp`\r\n\t\t1. In `src/node`\r\n\t\t1. In `src/net_processing.cpp`\r\n\t1. In RPC modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/2020-09-libbitcoinruntime-v6...dongcarl:2020-10-libbitcoinruntime-v7\r\n\t\t1. In `src/rpc`\r\n\t\t1. In `src/rest.cpp`\r\n\t1. In auxiliary modules of the codebase\r\n\thttps://github.com/dongcarl/bitcoin/compare/dongcarl:2020-10-libbitcoinruntime-v7...2020-10-libbitcoinruntime-v8\r\n\t\t1. In `src/bench`\r\n\t\t1. In `src/index`\r\n\t1. In initialization codepaths and tests\r\n\thttps://github.com/dongcarl/bitcoin/compare/2020-10-libbitcoinruntime-v8...dongcarl:2020-06-libbitcoinruntime\r\n\t\t1. In `src/init.cpp`\r\n\t\t1. In `src/test`\r\n\t\t1. In `src/wallet/test`\r\n\t\t1. In `src/qt/test`\r\n\r\nA few things to note:\r\n- The above ordering is constructed according to the overall call graph of our codebase such that we avoid touching the same function/module twice. \r\n- Due to the length of this overall change, each commit aims to be trivially-reviewable and only requires the reviewer to reason about the correctness of one function/module at a time.\r\n- There are a lot of review-only assertions which can be used to check for correctness. They are removed in 2236237070a45fe570cd0113f0025b0a46ac89be.\r\n",
          "user": {
            "login": "dongcarl",
            "id": 3445290,
            "node_id": "MDQ6VXNlcjM0NDUyOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dongcarl",
            "html_url": "https://github.com/dongcarl",
            "followers_url": "https://api.github.com/users/dongcarl/followers",
            "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
            "organizations_url": "https://api.github.com/users/dongcarl/orgs",
            "repos_url": "https://api.github.com/users/dongcarl/repos",
            "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dongcarl/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 97470796,
              "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
              "name": "UTXO Db and Indexes",
              "color": "fbca04",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118378960,
              "node_id": "MDU6TGFiZWwxMTgzNzg5NjA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining",
              "name": "Mining",
              "color": "c7def8",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 192202000,
              "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
              "name": "Consensus",
              "color": "009800",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20158",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20158",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20158.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20158.patch"
          },
          "closed_at": "2021-06-16T16:19:42Z",
          "created_at": "2020-10-15T18:28:35Z",
          "updated_at": "2022-11-27T09:59:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4270493564,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI3MDQ5MzU2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4270493564",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-31T16:28:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4270501587,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI3MDUwMTU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4270501587",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-31T16:36:36Z"
    },
    {
      "event": "commented",
      "id": 770410626,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDQxMDYyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770410626",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-31T16:41:53Z",
      "updated_at": "2021-01-31T16:41:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on #20942 and included a set of 10 commits to introduce txorphanage.h and cpp that pulls out (and de-globalises) orphan tracking. The only remaining global there is g_cs_orphans. I think it would make sense to move the orphan work sets from `net_processing.cpp:Peer` into a new map in `txorphanage.h:TxOrphanage` -- that would allow the lock to be moved into the class as well, and might also make it reasonable to do cleverer things like track multiple announcements of orphans (if we need to retry requesting their parents eg).",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-770410626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T03:59:00Z",
      "updated_at": "2021-02-01T03:59:00Z",
      "source": {
        "issue": {
          "id": 777588162,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ3ODQyODI4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20833",
          "number": 20833,
          "state": "closed",
          "state_reason": null,
          "title": "rpc/validation: enable packages through testmempoolaccept",
          "body": "This PR enables validation dry-runs of packages through the `testmempoolaccept` RPC. The expectation is that the results returned from `testmempoolaccept` are what you'd get from test-then-submitting each transaction individually, in that order (this means the package is expected to be sorted in topological order, for now at least). The validation is also atomic: in the case of failure, it immediately halts and may return \"unfinished\" `MempoolAcceptResult`s for transactions that weren't fully validated. The API for 1 transaction stays the same.\r\n\r\n**Motivation:** \r\n- This allows you to test validity for transaction chains (e.g. with multiple spending paths and where you don't want to broadcast yet); closes #18480.\r\n- It's also a first step towards package validation in a minimally invasive way.\r\n- The RPC commit happens to close #21074 by clarifying the \"allowed\" key.\r\n\r\nThere are a few added restrictions on the packages, mostly to simplify the logic for areas that aren't critical to main package use cases:\r\n- No package can have conflicts, i.e. none of them can spend the same inputs, even if it would be a valid BIP125 replacement.\r\n- The package cannot conflict with the mempool, i.e. RBF is disabled.\r\n- The total count of the package cannot exceed 25 (the default descendant count limit), and total size cannot exceed 101KvB (the default descendant size limit).\r\n\r\nIf you're looking for review comments and github isn't loading them, I have a gist compiling some topics of discussion [here](https://gist.github.com/glozow/c3acaf161c95bba491fce31585b2aaf7)\r\n",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20833",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20833.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20833.patch"
          },
          "closed_at": "2021-05-27T20:41:05Z",
          "created_at": "2021-01-03T07:16:31Z",
          "updated_at": "2022-08-18T18:24:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4334073555,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzNDA3MzU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4334073555",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T02:42:58Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T06:23:24Z",
      "updated_at": "2021-02-16T06:23:24Z",
      "source": {
        "issue": {
          "id": 802454737,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTY4NTk1MDE2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21090",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21090/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21090/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21090/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21090",
          "number": 21090,
          "state": "closed",
          "state_reason": null,
          "title": "Default to NODE_WITNESS in nLocalServices",
          "body": "Builds on #21009 and makes progress on remaining items in #17862\r\n\r\nRemoving `RewindBlockIndex()` in #21009 allows the following:\r\n\r\n- removal of tests using `segwitheight=-1` in `p2p_segwit.py`.\r\n- move `test_upgrade_after_activation()` out of `p2p_segwit.py` reducing runtime\r\n- in turn, that allows us to drop support for `-segwitheight=-1`, which is only supported for that test.\r\n- that allows us to always set `NODE_WITNESS` in our local services. The only reason we don't do that is to support `-segwitheight=-1`.\r\n- that in turn allows us to drop all of the `GetLocalServices() & NODE_WITNESS` checks inside `net_processing.cpp`, since our local services would always include `NODE_WITNESS`",
          "user": {
            "login": "dhruv",
            "id": 856960,
            "node_id": "MDQ6VXNlcjg1Njk2MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruv",
            "html_url": "https://github.com/dhruv",
            "followers_url": "https://api.github.com/users/dhruv/followers",
            "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruv/orgs",
            "repos_url": "https://api.github.com/users/dhruv/repos",
            "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dhruv/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21090",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21090",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21090.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21090.patch"
          },
          "closed_at": "2021-07-22T15:37:05Z",
          "created_at": "2021-02-05T20:30:32Z",
          "updated_at": "2022-08-18T19:56:47Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T06:43:53Z",
      "updated_at": "2021-02-16T06:43:53Z",
      "source": {
        "issue": {
          "id": 798844282,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTY1NTkwNjcw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21061/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21061",
          "number": 21061,
          "state": "closed",
          "state_reason": null,
          "title": "[p2p] Introduce node rebroadcast module ",
          "body": "## Status\r\n(this section will be updated as the PR progresses, and eventually removed)\r\n- I'm reworking some of the approach, will mark ready for review once that is done. \r\n\r\n## Motivation:\r\nOur legacy rebroadcast mechanism lives in the wallet code. It rebroadcasts only & all transactions which are “mine”, not discerning if the fee rate indicates the transaction should actually have been confirmed by now. This is bad for privacy because it leaks information that allows spy nodes to link bitcoin addresses with IP addresses, a relationship we aim to obfuscate. \r\n\r\n## PR Overview:\r\nThis PR introduces a rebroadcast mechanism in the node. Instead of only rebroadcasting our own transactions, we will notify the network about _any_ transactions we identified as missing from blocks based on fee rate expectations in our own mempool. \r\n\r\nThe new module is currently behind a configuration flag that defaults to off.\r\n\r\nThe end goal is to enable node rebroadcast by default, and remove wallet rebroadcast. This would improve privacy for a few main reasons: \r\n1. We would no longer eagerly rebroadcast all of our wallet transactions regardless of fee-rate. We add logic to rebroadcast the ones which have a competitive rate according to the current blocks being mined. \r\n2. If a spy observes a bitcoin core node rebroadcasting a transaction, it would no longer know that the node has wallet enabled. \r\n3. If a spy observed a bitcoin core node rebroadcasting a transaction, it would no longer be able to deduce with high confidence that the associated wallet is participating in that transaction.\r\n\r\n## Approach: \r\nConceptually, we want to rebroadcast transactions that we believe “should” have been mined by now.  Since we expect miners to prioritize transactions with the highest package fee rates, we select high fee rate transactions that have been in our mempool for some time, but have not yet been mined. \r\n\r\nThis PR introduces a `txrebroadcast` module that encapsulates the selection logic. When `PeerManager` gets notified that we have received and processed a block, we trigger the rebroadcast logic. The module calculates the highest fee rate mempool packages that meet some additional conditions- the transaction must be > 30 minutes old, and surpass a fee threshold. This threshold is calculated by periodically (every minute) identifying the top block of transactions in our mempool, and caching the fee rate for a package to be included. We eliminate any of these candidates that we have rebroadcasted recently (last 4 hours), or already rebroadcast more than a maximum amount of times (6). We store any remaining candidates on each peer’s `setInventoryTxToSend`, which they will potentially relay next time we hit `SendMessages` for that peer (subject to general transaction relay conditions). \r\n",
          "user": {
            "login": "amitiuttarwar",
            "id": 1500952,
            "node_id": "MDQ6VXNlcjE1MDA5NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amitiuttarwar",
            "html_url": "https://github.com/amitiuttarwar",
            "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
            "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
            "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
            "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
            "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 45,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21061",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21061",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21061.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21061.patch"
          },
          "closed_at": "2022-03-22T14:43:03Z",
          "created_at": "2021-02-02T01:28:53Z",
          "updated_at": "2023-03-22T10:20:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T07:30:41Z",
      "updated_at": "2021-02-17T07:30:41Z",
      "source": {
        "issue": {
          "id": 806015472,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxNTE3MjEy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21148",
          "number": 21148,
          "state": "closed",
          "state_reason": null,
          "title": "Split orphan handling from net_processing into txorphanage",
          "body": "Splits orphan handling into its own module and reduces global usage.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21148",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21148.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21148.patch"
          },
          "closed_at": "2021-03-04T09:17:12Z",
          "created_at": "2021-02-11T01:42:58Z",
          "updated_at": "2022-08-16T17:06:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T10:01:49Z",
      "updated_at": "2021-03-04T10:01:49Z",
      "source": {
        "issue": {
          "id": 812007772,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc2NDQ0OTQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21236",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21236/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21236/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21236/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21236",
          "number": 21236,
          "state": "closed",
          "state_reason": null,
          "title": "net processing: Extract `addr` send functionality into MaybeSendAddr()",
          "body": "This continues the work of moving application layer data into net_processing. It refactors `addr` send functionality into its own function `MaybeSendAddr()` and flattens/simplifies the code. Isolating and simplifying the addr handling code makes subsequent changes (which will move addr data and logic into net processing) easier to review.\r\n\r\nThis is a pure refactor. There are no functional changes.\r\n\r\nFor motivation of the project, see #19398.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21236",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21236",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21236.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21236.patch"
          },
          "closed_at": "2021-04-01T06:33:38Z",
          "created_at": "2021-02-19T13:06:04Z",
          "updated_at": "2022-08-16T17:07:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-10T14:38:12Z",
      "updated_at": "2021-04-10T14:38:12Z",
      "source": {
        "issue": {
          "id": 808479458,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTczNTE0Mjk2",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21186",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21186/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21186/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21186/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21186",
          "number": 21186,
          "state": "closed",
          "state_reason": null,
          "title": "net/net processing: Move addr data into net_processing",
          "body": "This continues the work of moving application layer data into net_processing, by moving all addr data into the new Peer object added in #19607.\r\n\r\nFor motivation, see #19398.",
          "user": {
            "login": "jnewbery",
            "id": 1063656,
            "node_id": "MDQ6VXNlcjEwNjM2NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jnewbery",
            "html_url": "https://github.com/jnewbery",
            "followers_url": "https://api.github.com/users/jnewbery/followers",
            "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
            "organizations_url": "https://api.github.com/users/jnewbery/orgs",
            "repos_url": "https://api.github.com/users/jnewbery/repos",
            "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jnewbery/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21186",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21186",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21186.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21186.patch"
          },
          "closed_at": "2021-05-24T12:28:54Z",
          "created_at": "2021-02-15T12:04:37Z",
          "updated_at": "2022-08-16T17:22:54Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 5760412072,
      "node_id": "LE_lADOABII584uIxPBzwAAAAFXWOmo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5760412072",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T23:18:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 993000533,
      "node_id": "IC_kwDOABII5847L_xV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993000533",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T23:18:56Z",
      "updated_at": "2021-12-13T23:18:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-993000533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "commented",
      "id": 1073871667,
      "node_id": "IC_kwDOABII585AAfsz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073871667",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-21T13:06:56Z",
      "updated_at": "2022-03-21T13:06:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-1073871667",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIzOTc4YzQxYWYwOWNhMWFhNWYwNmFlNGNjYjUyZDc5MDZiYmFmYTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1",
      "tree": {
        "sha": "56d85c936e32de61e0b5e6c530bc9d39fed549ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56d85c936e32de61e0b5e6c530bc9d39fed549ff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
          "sha": "92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/92b7efcf54d3154e4b31c9a6eae60f27e349f45e"
        }
      ],
      "message": "net_processing: move CNodeState definition earlier",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:52:18Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T11:59:48Z"
      },
      "sha": "b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJhYTI0ZWY5NDM1NWMxZmU2MmQ2ODEyMWU5NGQ5MzAzMWFlOTc0OWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa24ef94355c1fe62d68121e94d93031ae9749e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa24ef94355c1fe62d68121e94d93031ae9749e",
      "tree": {
        "sha": "752f35d49d07ea23ca68c0622e440cb8305c7774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/752f35d49d07ea23ca68c0622e440cb8305c7774"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1",
          "sha": "b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b3978c41af09ca1aa5f06ae4ccb52d7906bbafa1"
        }
      ],
      "message": "net_processing: Move UpdatePreferredDownload to PeerManagerImpl\n\nAllows nPreferredDownload to become a member var instead of global.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:54:08Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T11:34:05Z"
      },
      "sha": "2aa24ef94355c1fe62d68121e94d93031ae9749e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVhMjQwYzdhOGJjNThmMDA2ZWJlOWZjY2IyOTg0ZWI3OWQwYTdkOWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f",
      "tree": {
        "sha": "d4343e9ea6e130368d642158a4299e3e757c36e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4343e9ea6e130368d642158a4299e3e757c36e5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa24ef94355c1fe62d68121e94d93031ae9749e",
          "sha": "2aa24ef94355c1fe62d68121e94d93031ae9749e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa24ef94355c1fe62d68121e94d93031ae9749e"
        }
      ],
      "message": "net_processing: move State() into PeerManagerImpl\n\nThis allows making mapNodeState not a global. Requires also moving\nProcessBlockAvailability, UpdateBlockAvailability, RelayTransaction,\nProcessGetBlockData, GetFetchFlags, and UpdateLastBlockAnnounceTime\ninto PeerManagerImpl, as well as removing the const annotation from\nReattemptInitialBroadcast (as they invoke State()).\n\nAlso requires moving RelayTransaction and UpdateLastBlockAnnounceTime\ninto PeerManager.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:06Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T12:00:33Z"
      },
      "sha": "ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlMDBkYjE5NzlmMjBmMWU3ZmI1MGVhZGIxMjk3ZWYwZTAzZjQyZDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e00db1979f20f1e7fb50eadb1297ef0e03f42d7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e00db1979f20f1e7fb50eadb1297ef0e03f42d7",
      "tree": {
        "sha": "b551c78b5dc106960809151e8f93c516257a99e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b551c78b5dc106960809151e8f93c516257a99e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f",
          "sha": "ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ea240c7a8bc58f006ebe9fccb2984eb79d0a7d9f"
        }
      ],
      "message": "net_processing: RelayTransaction no longer needs connman passed in",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:53Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T12:18:16Z"
      },
      "sha": "1e00db1979f20f1e7fb50eadb1297ef0e03f42d7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhhMzRhNTEzMDYyZGVkOTY4MzI3OWE1YmE5YTE4MzRlYmJjZDg0OGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a34a513062ded9683279a5ba9a1834ebbcd848c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8a34a513062ded9683279a5ba9a1834ebbcd848c",
      "tree": {
        "sha": "409f8d2ac56708283040342e3cced2e6675bb88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/409f8d2ac56708283040342e3cced2e6675bb88b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e00db1979f20f1e7fb50eadb1297ef0e03f42d7",
          "sha": "1e00db1979f20f1e7fb50eadb1297ef0e03f42d7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e00db1979f20f1e7fb50eadb1297ef0e03f42d7"
        }
      ],
      "message": "net_processing: move cs_most_recent_block globals into PeerManagerImpl",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T12:26:55Z"
      },
      "sha": "8a34a513062ded9683279a5ba9a1834ebbcd848c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiZGI4ZDUzYjQ3ZDE0NWIyY2Y2ZDFlYTkwMmEyNWZhYTdmNmQyNTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256",
      "tree": {
        "sha": "d09858532351bc7454cf9ba321ec7670ecfdaf06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d09858532351bc7454cf9ba321ec7670ecfdaf06"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a34a513062ded9683279a5ba9a1834ebbcd848c",
          "sha": "8a34a513062ded9683279a5ba9a1834ebbcd848c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8a34a513062ded9683279a5ba9a1834ebbcd848c"
        }
      ],
      "message": "net_processing: annotate local static variables\n\nThese function-local variables are effectively globals; annotate them\nso it's easier to refactor them later.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T11:22:18Z"
      },
      "sha": "2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYzZjg5ZGVlNzk4Y2NjODE3ZGMwYTBjMDMyMGZjNTdjMzAwMTIxMzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63f89dee798ccc817dc0a0c0320fc57c30012131",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/63f89dee798ccc817dc0a0c0320fc57c30012131",
      "tree": {
        "sha": "9f9d337dbe58bb5017a60c7450114175f33f36ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f9d337dbe58bb5017a60c7450114175f33f36ac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256",
          "sha": "2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2bdb8d53b47d145b2cf6d1ea902a25faa7f6d256"
        }
      ],
      "message": "net_processing: move static local variables to PeerManagerImpl members",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T12:45:58Z"
      },
      "sha": "63f89dee798ccc817dc0a0c0320fc57c30012131"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxOGE4ZmM4YjE1NjA5Y2QwNWZmYTJjMDAxYTljMzMwNjllM2VhOGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/918a8fc8b15609cd05ffa2c001a9c33069e3ea8d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/918a8fc8b15609cd05ffa2c001a9c33069e3ea8d",
      "tree": {
        "sha": "f921a35459012570ec6459e380f1a98a58ea5837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f921a35459012570ec6459e380f1a98a58ea5837"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63f89dee798ccc817dc0a0c0320fc57c30012131",
          "sha": "63f89dee798ccc817dc0a0c0320fc57c30012131",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/63f89dee798ccc817dc0a0c0320fc57c30012131"
        }
      ],
      "message": "net_processing: Provide State(CNode&) shortcut",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T14:01:37Z"
      },
      "sha": "918a8fc8b15609cd05ffa2c001a9c33069e3ea8d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdjYjQxMGNmZDkxYzQ4ZDgwMTc1OTQwYjIzZmFlNjI1OTA4MTU1N2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cb410cfd91c48d80175940b23fae6259081557a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7cb410cfd91c48d80175940b23fae6259081557a",
      "tree": {
        "sha": "40097ae255fc74ef5e5418d8d4145c2b29f9d30f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40097ae255fc74ef5e5418d8d4145c2b29f9d30f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/918a8fc8b15609cd05ffa2c001a9c33069e3ea8d",
          "sha": "918a8fc8b15609cd05ffa2c001a9c33069e3ea8d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/918a8fc8b15609cd05ffa2c001a9c33069e3ea8d"
        }
      ],
      "message": "net_processing: move CNodeState into Peer\n\nAlso obsoletes mapNodeState.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-23T13:50:23Z"
      },
      "sha": "7cb410cfd91c48d80175940b23fae6259081557a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU4Yjc3NTUyOTc3N2IxNmIzYWRhOWEwMjcyNjY5NWY4NjMyMDdhZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58b775529777b16b3ada9a02726695f863207ad0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58b775529777b16b3ada9a02726695f863207ad0",
      "tree": {
        "sha": "eb9dabfc4c4ee402744de7b5478b7f6342b9cfad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb9dabfc4c4ee402744de7b5478b7f6342b9cfad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cb410cfd91c48d80175940b23fae6259081557a",
          "sha": "7cb410cfd91c48d80175940b23fae6259081557a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7cb410cfd91c48d80175940b23fae6259081557a"
        }
      ],
      "message": "Make ProcessBlockAvailability take a CNodeState& instead of a NodeId\n\nFixes lock order violations introduced by merging CNodeState into Peer",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-04T07:59:21Z"
      },
      "sha": "58b775529777b16b3ada9a02726695f863207ad0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2NThjN2EwZjQ3MzE3MDQ5YzJhZTE0ODA5ZDcwNmQ4NGYwYzY3NDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5658c7a0f47317049c2ae14809d706d84f0c6748",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5658c7a0f47317049c2ae14809d706d84f0c6748",
      "tree": {
        "sha": "78d084129cb0a87242bed9c195546b10566ee9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78d084129cb0a87242bed9c195546b10566ee9dc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58b775529777b16b3ada9a02726695f863207ad0",
          "sha": "58b775529777b16b3ada9a02726695f863207ad0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/58b775529777b16b3ada9a02726695f863207ad0"
        }
      ],
      "message": "Use Peer::nodestate directly instead of State()\n\nFixes lock order violations caused by merging CNodeState into Peer",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T13:55:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-04T07:59:00Z"
      },
      "sha": "5658c7a0f47317049c2ae14809d706d84f0c6748"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhkOTM4ZWRhNmE0OGNmYTIwNDkzOGE4NGMzYTU3NGFkNjg5YzBkZTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d938eda6a48cfa204938a84c3a574ad689c0de6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8d938eda6a48cfa204938a84c3a574ad689c0de6",
      "tree": {
        "sha": "4bb9fafe58c58d8389233d58c6a8b1b977d4738e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bb9fafe58c58d8389233d58c6a8b1b977d4738e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5658c7a0f47317049c2ae14809d706d84f0c6748",
          "sha": "5658c7a0f47317049c2ae14809d706d84f0c6748",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5658c7a0f47317049c2ae14809d706d84f0c6748"
        }
      ],
      "message": "Make NetEventsInterface take a reference to a peer, since nullptr would be k-razy",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T14:15:08Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-09T13:08:20Z"
      },
      "sha": "8d938eda6a48cfa204938a84c3a574ad689c0de6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5ZGEwY2VlNGUzMzBiYjUwMTBjYzMxNjU5ZGQ1OGU1NDZmMzI1Mjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89da0cee4e330bb5010cc31659dd58e546f32529",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/89da0cee4e330bb5010cc31659dd58e546f32529",
      "tree": {
        "sha": "03b873ea8c6e4dba390eaccfbd4bc6f8e586ea94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03b873ea8c6e4dba390eaccfbd4bc6f8e586ea94"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d938eda6a48cfa204938a84c3a574ad689c0de6",
          "sha": "8d938eda6a48cfa204938a84c3a574ad689c0de6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8d938eda6a48cfa204938a84c3a574ad689c0de6"
        }
      ],
      "message": "wip update PeerManagerImpl doxygen comments",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T14:15:08Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-11T01:39:03Z"
      },
      "sha": "89da0cee4e330bb5010cc31659dd58e546f32529"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwODI1YWJhYTdhOTIzN2UwNTE3ZjljYzUzMDE0NTljOGFkMzIxMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0825abaa7a9237e0517f9cc5301459c8ad32102",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d0825abaa7a9237e0517f9cc5301459c8ad32102",
      "tree": {
        "sha": "0d145771b62ee270a50948acd222308b13ef59ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d145771b62ee270a50948acd222308b13ef59ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89da0cee4e330bb5010cc31659dd58e546f32529",
          "sha": "89da0cee4e330bb5010cc31659dd58e546f32529",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89da0cee4e330bb5010cc31659dd58e546f32529"
        }
      ],
      "message": "net_processing: don't use gArgs directly",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T14:15:08Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-15T17:20:55Z"
      },
      "sha": "d0825abaa7a9237e0517f9cc5301459c8ad32102"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxNWRhNDliZmViNWMxM2QxM2FhZDZiMDU1NzEyZmM5OTBjOGNjZjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "tree": {
        "sha": "0f89e74268c81d9744659f6b44bb313225d6b19b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f89e74268c81d9744659f6b44bb313225d6b19b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0825abaa7a9237e0517f9cc5301459c8ad32102",
          "sha": "d0825abaa7a9237e0517f9cc5301459c8ad32102",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d0825abaa7a9237e0517f9cc5301459c8ad32102"
        }
      ],
      "message": "threadsafety fixup for old code",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T14:15:08Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2022-03-21T14:08:58Z"
      },
      "sha": "915da49bfeb5c13d13aad6b055712fc990c8ccf2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6275948376,
      "node_id": "HRFPE_lADOABII584uIxPBzwAAAAF2E19Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6275948376",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-21T14:18:56Z"
    },
    {
      "event": "commented",
      "id": 1073958858,
      "node_id": "IC_kwDOABII585AA0_K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073958858",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-21T14:21:01Z",
      "updated_at": "2022-03-21T14:21:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hmm, in my head, the next set of changes for this PR are in #24474 and #21527, though I guess they're technically orthogonal. Rebased on top of #21148 merge so there aren't redundant commits at least.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-1073958858",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "commented",
      "id": 1229855782,
      "node_id": "IC_kwDOABII585JThwm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229855782",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T06:55:12Z",
      "updated_at": "2022-08-29T06:55:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closing this. If you'd like it resurrected please help https://github.com/bitcoin/bitcoin/pull/25174 make progress.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-1229855782",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    },
    {
      "event": "closed",
      "id": 7275722566,
      "node_id": "CE_lADOABII584uIxPBzwAAAAGxqrdG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7275722566",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T06:55:12Z"
    },
    {
      "event": "commented",
      "id": 1230138345,
      "node_id": "IC_kwDOABII585JUmvp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230138345",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-29T11:10:46Z",
      "updated_at": "2022-08-29T11:10:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Don't hesitate to ping me to review net and lock related changes like this.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-1230138345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548306663",
      "pull_request_review_id": 558261042,
      "id": 548306663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMwNjY2Mw==",
      "diff_hunk": "@@ -1319,7 +1319,7 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n         LOCK(m_peer_mutex);\n         for (auto& it : m_peer_map) {\n             Peer& peer = *it.second;\n-            LOCK(peer.m_block_inv_mutex);\n+            LOCK(peer.m_block_inv_mutex); // TODO: violates \"Mutexes inside this struct must not be held when locking m_peer_mutex.\" rule??",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "7f479a56b775f0ef50005bae3a910f9adc95b1b7",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're the second person who's been confused by this comment (https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546338754), which tells me that I didn't make it clear enough.\r\n\r\nIt's fine to lock m_peer_mutex and then lock one of the inner mutexes, or even to lock m_peer_mutex, take a shared_ptr to the Peer, release m_peer_mutex and then lock an inner mutex. The only rule is that we don't want to lock an inner mutex and then lock m_peer_mutex.\r\n\r\nIf you have better wording for the comment, I'm very happy to take it.",
      "created_at": "2020-12-23T22:49:28Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548306663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548306663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548321467",
      "pull_request_review_id": 558274751,
      "id": 548321467,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTQ2Nw==",
      "diff_hunk": "@@ -408,18 +288,343 @@ struct CNodeState {\n         m_recently_announced_invs.reset();\n     }\n };\n+} // namespace\n+\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n+    /** Protects block inventory data members */\n+    Mutex m_block_inv_mutex;\n+    /** List of blocks that we'll anounce via an `inv` message.\n+     * There is no final sorting before sending, as they are always sent\n+     * immediately and in the order requested. */\n+    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n+    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n+     * message. If we can't announce via a `headers` message, we'll fall back to\n+     * announcing via `inv`. */\n+    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n+    /** The final block hash that we sent in an `inv` message to this peer.\n+     * When the peer requests this block, we send an `inv` message to trigger\n+     * the peer to request the next sequence of block hashes.\n+     * Most peers use headers-first syncing, which doesn't use this mechanism */\n+    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n+\n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> m_starting_height{-1};\n+\n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Protects m_getdata_requests **/\n+    Mutex m_getdata_requests_mutex;\n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n+\n+    /** Traditional CNodeState info **/\n+    CNodeState nodestate GUARDED_BY(cs_main);\n+\n+    explicit Peer(NodeId id, CAddress addr, bool is_inbound) : m_id(id),  nodestate(addr, is_inbound) {}\n+};\n+\n+namespace {\n+class PeerManagerImpl final : public PeerManager {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't what I was expecting to see. I was assuming that you'd use a pimpl idiom where the `PeerManager` would hold a unique_ptr to the `PeerManagerImpl` rather than have `PeerManagerImpl` inherit from `PeerManager`.\r\n\r\nI'm not saying there's a problem with this way, but I'm curious what made you choose it.",
      "created_at": "2020-12-23T23:43:08Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548321467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548321467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548369699",
      "pull_request_review_id": 558322873,
      "id": 548369699,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2OTY5OQ==",
      "diff_hunk": "@@ -408,18 +288,343 @@ struct CNodeState {\n         m_recently_announced_invs.reset();\n     }\n };\n+} // namespace\n+\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n+    /** Protects block inventory data members */\n+    Mutex m_block_inv_mutex;\n+    /** List of blocks that we'll anounce via an `inv` message.\n+     * There is no final sorting before sending, as they are always sent\n+     * immediately and in the order requested. */\n+    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n+    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n+     * message. If we can't announce via a `headers` message, we'll fall back to\n+     * announcing via `inv`. */\n+    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n+    /** The final block hash that we sent in an `inv` message to this peer.\n+     * When the peer requests this block, we send an `inv` message to trigger\n+     * the peer to request the next sequence of block hashes.\n+     * Most peers use headers-first syncing, which doesn't use this mechanism */\n+    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n+\n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> m_starting_height{-1};\n+\n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Protects m_getdata_requests **/\n+    Mutex m_getdata_requests_mutex;\n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n+\n+    /** Traditional CNodeState info **/\n+    CNodeState nodestate GUARDED_BY(cs_main);\n+\n+    explicit Peer(NodeId id, CAddress addr, bool is_inbound) : m_id(id),  nodestate(addr, is_inbound) {}\n+};\n+\n+namespace {\n+class PeerManagerImpl final : public PeerManager {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": 548321467,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "PeerManager does multiple inheritance already so the virtual overhead's already there, and this avoids two lots of unique pointers?",
      "created_at": "2020-12-24T03:47:58Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548369699",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548369699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498363",
      "pull_request_review_id": 558468080,
      "id": 548498363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5ODM2Mw==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 51,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This alias (and therefore the forward declaration of `Peer` above) don't need to be in the header file. `PeerRef` is only used in net_processing.cpp. I'd also suggest moving the `Peer` comment to the cpp file.",
      "created_at": "2020-12-24T11:18:25Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498945",
      "pull_request_review_id": 558468080,
      "id": 548498945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5ODk0NQ==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 120,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure these additional `public` access specifiers are useful. Just the comments is sufficient.",
      "created_at": "2020-12-24T11:20:18Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499050",
      "pull_request_review_id": 558468080,
      "id": 548499050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5OTA1MA==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 109,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be in the 'exposed for tests' section.",
      "created_at": "2020-12-24T11:20:47Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499689",
      "pull_request_review_id": 558468080,
      "id": 548499689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5OTY4OQ==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+\n+    virtual ~PeerManager() { }\n };\n \n-/** Relay transaction to every node */\n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+std::unique_ptr<PeerManager> make_PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 240,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this be aligned with the `(` above instead of the `<`?",
      "created_at": "2020-12-24T11:23:22Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548504063",
      "pull_request_review_id": 558468080,
      "id": 548504063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUwNDA2Mw==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 232,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be great to eventually move all of this fully inside `PeerManagerImpl`, or break it out into an `OrphansManager` class.",
      "created_at": "2020-12-24T11:39:50Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548504063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548504063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549934388",
      "pull_request_review_id": 559778921,
      "id": 549934388,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNDM4OA==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 51,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": 548498363,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I left `PeerRef` in the header in the hopes of having `net.cpp` manage the state (though in that case it would potentially become a `unique_ptr`)",
      "created_at": "2020-12-30T04:48:54Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549934388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549934388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549935444",
      "pull_request_review_id": 559779941,
      "id": 549935444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNTQ0NA==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 232,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": 548504063,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did spend a few moments trying to break it out, but my first approach didn't work immediately, so I'm leaving it for later",
      "created_at": "2020-12-30T04:56:20Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549935444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549935444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549937241",
      "pull_request_review_id": 559782922,
      "id": 549937241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNzI0MQ==",
      "diff_hunk": "@@ -1319,7 +1319,7 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n         LOCK(m_peer_mutex);\n         for (auto& it : m_peer_map) {\n             Peer& peer = *it.second;\n-            LOCK(peer.m_block_inv_mutex);\n+            LOCK(peer.m_block_inv_mutex); // TODO: violates \"Mutexes inside this struct must not be held when locking m_peer_mutex.\" rule??",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "7f479a56b775f0ef50005bae3a910f9adc95b1b7",
      "in_reply_to_id": 548306663,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, in that case I would describe it as a lock *ordering* constraint -- \"if you need to acquire internal locks from multiple peers, acquire m_peer_mutex first, then acquire the peers' locks and do your work, then release the internal locks, then release m_peer_mutex. If you are already holding an internal lock, you must release it before acquiring m_peer_mutex (eg by calling GetPeerRef)\".\r\n\r\n(It's probably already clear enough on its own; it's just that the above would go unwritten everywhere else in the codebase, so that it's written down here make it sound like there's some stricter requirement going on...)",
      "created_at": "2020-12-30T05:09:11Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549937241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549937241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550411991",
      "pull_request_review_id": 560276627,
      "id": 550411991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMTk5MQ==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 51,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": 548498363,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved now. Trivial to move back if net.cpp ends up owning them.",
      "created_at": "2020-12-31T06:54:27Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550411991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550411991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550412024",
      "pull_request_review_id": 560276648,
      "id": 550412024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAyNA==",
      "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 120,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
      "in_reply_to_id": 548498945,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2020-12-31T06:54:37Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550412024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550412024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556199317",
      "pull_request_review_id": 566823894,
      "id": 556199317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5OTMxNw==",
      "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was already there but it's confusing to employ a verb for a data struct. Also blocks have only one header.",
      "created_at": "2021-01-13T01:13:53Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556199317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556199317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556209688",
      "pull_request_review_id": 566823894,
      "id": 556209688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIwOTY4OA==",
      "diff_hunk": "@@ -1075,7 +1078,7 @@ PeerRef PeerManagerImpl::GetPeerRef(NodeId id) const\n     return it != m_peer_map.end() ? it->second : nullptr;\n }\n \n-PeerRef PeerManagerImpl::RemovePeer(NodeId id)\n+PeerRef PeerManagerImpl::RemovePeer(NodeId id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
      "path": "src/net_processing.cpp",
      "position": 634,
      "original_position": 119,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "77aa3edcb01deeb63b1b5e911b85ea78f32fc281",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Superfluous lock annotation, already present on method declaration in net_processing.h?",
      "created_at": "2021-01-13T01:46:32Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556209688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556209688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1130,
      "original_line": 1130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223603",
      "pull_request_review_id": 566823894,
      "id": 556223603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIyMzYwMw==",
      "diff_hunk": "@@ -601,6 +604,9 @@ class PeerManagerImpl final : public PeerManager\n     /** Number of preferable block download peers. */\n     int nPreferredDownload GUARDED_BY(cs_main) = 0;\n \n+    /** Height of highest fast announce block, updated by NewPoWValidBlock */\n+    int m_height_of_highest_fast_announce GUARDED_BY(cs_main) = 0;",
      "path": "src/net_processing.cpp",
      "position": 343,
      "original_position": 15,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "2c5ae7a9236627403055a0d1fca4b0f4a9a85825",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `m_height_highest_cb_fast_announced`, inducing a unit is always better IMO.",
      "created_at": "2021-01-13T02:30:29Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 614,
      "original_line": 614,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223881",
      "pull_request_review_id": 566823894,
      "id": 556223881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIyMzg4MQ==",
      "diff_hunk": "@@ -769,11 +769,30 @@ class CNode\n class NetEventsInterface\n {\n public:\n-    virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n-    virtual bool SendMessages(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_sendProcessing) = 0;\n+    /** Initialize a peer (setup state, queue any initial messages) */",
      "path": "src/net.h",
      "position": 3,
      "original_position": 6,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "0d246a59b606c51728d10cb70004a6eedb951bca",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe precise that's network-related state, and that we queue ready-to-send messages, not received messages yet.",
      "created_at": "2021-01-13T02:31:30Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 768,
      "original_line": 768,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556256615",
      "pull_request_review_id": 566886750,
      "id": 556256615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1NjYxNQ==",
      "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "in_reply_to_id": 556199317,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're misreading? Should be parsed as \"Whether (this block) has (validated headers)\" not \"Whether (this block) (has validated) headers\". Unless I've messed up, this should just be moving in this PR, so would rather avoid editing it.",
      "created_at": "2021-01-13T04:34:38Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556256615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556256615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556258257",
      "pull_request_review_id": 566888431,
      "id": 556258257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1ODI1Nw==",
      "diff_hunk": "@@ -1075,7 +1078,7 @@ PeerRef PeerManagerImpl::GetPeerRef(NodeId id) const\n     return it != m_peer_map.end() ? it->second : nullptr;\n }\n \n-PeerRef PeerManagerImpl::RemovePeer(NodeId id)\n+PeerRef PeerManagerImpl::RemovePeer(NodeId id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
      "path": "src/net_processing.cpp",
      "position": 634,
      "original_position": 119,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "77aa3edcb01deeb63b1b5e911b85ea78f32fc281",
      "in_reply_to_id": 556209688,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The declaration is in net_processing.cpp. It is redundant, yeah; I'm not 100% convinced the locking changes for including `CNodeState` into `Peer` are adequate (in particular, that it's reasonable to be confident that the interaction with `m_peer_mutex` is okay), so haven't cleaned this up.",
      "created_at": "2021-01-13T04:40:36Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556258257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556258257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1130,
      "original_line": 1130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557787335",
      "pull_request_review_id": 568734225,
      "id": 557787335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4NzMzNQ==",
      "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "in_reply_to_id": 556199317,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Honestly, I'm not native so don't get the semantic difference you're pointing to me :/",
      "created_at": "2021-01-15T00:29:17Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557787335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557787335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557843020",
      "pull_request_review_id": 568795951,
      "id": 557843020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzAyMA==",
      "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "in_reply_to_id": 556199317,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think \"Whether this block has (headers which have been validated)\" is the right interpretation, versus \"Whether this block (has itself taken the action of validating) headers\" while a valid interpretation isn't the intended one. \"has validated\" is ambiguous between being the past tense of the verb to validate, or the present tense of the verb \"to have\" and the adjective \"validated\".",
      "created_at": "2021-01-15T03:40:00Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557843020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557843020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559052738",
      "pull_request_review_id": 569974897,
      "id": 559052738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1MjczOA==",
      "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "915da49bfeb5c13d13aad6b055712fc990c8ccf2",
      "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
      "in_reply_to_id": 556199317,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gotcha, I agree with the interpretation :)",
      "created_at": "2021-01-16T23:31:22Z",
      "updated_at": "2021-02-16T02:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r559052738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559052738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    }
  ]
}