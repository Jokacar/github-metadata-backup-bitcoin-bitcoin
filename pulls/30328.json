{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328",
    "id": 1935933587,
    "node_id": "PR_kwDOABII585zZACT",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30328",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30328.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30328.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f01e56aaf42e0b06f634b799d5eff8599f71df2f",
    "number": 30328,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Remove IsMine from migration code",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The legacy wallet `IsMine` code will be removed with the legacy wallet, but is still partially needed for migration. Instead of using `IsMine` directly in migration, equivalent checks are performed by migration.\r\n\r\nBuilds on #26596 ",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2024-06-24T16:40:47Z",
    "updated_at": "2024-11-16T00:24:29Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "0e46e00edb6fe5d18f2fac95f6216a779d227a64",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:migrate-inline-ismine",
      "ref": "migrate-inline-ismine",
      "sha": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 39,
        "watchers_count": 39,
        "size": 286216,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-14T21:16:28Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2024-10-04T23:43:44Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "2d944e982c473e4ee4b8f99105f6ce7172c401be",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36364,
        "stargazers_count": 79540,
        "watchers_count": 79540,
        "size": 272357,
        "default_branch": "master",
        "open_issues_count": 641,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-15T14:53:26Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-16T00:21:03Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 139,
    "deletions": 27,
    "changed_files": 2,
    "commits": 2,
    "review_comments": 36,
    "comments": 6
  },
  "events": [
    {
      "event": "commented",
      "id": 2186987135,
      "node_id": "IC_kwDOABII586CWsZ_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2186987135",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-24T16:40:50Z",
      "updated_at": "2024-11-15T22:50:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30328.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2196286870) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2186987135",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "labeled",
      "id": 13269106942,
      "node_id": "LE_lADOABII586NTY_uzwAAAAMW5oD-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13269106942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-24T16:40:52Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13355282170,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAAMcCW76",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13355282170",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-01T18:48:15Z"
    },
    {
      "event": "convert_to_draft",
      "id": 13427412885,
      "node_id": "CTDE_lADOABII586NTY_uzwAAAAMgVg-V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13427412885",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T17:29:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13476549068,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAAMjQ9HM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13476549068",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T19:29:41Z"
    },
    {
      "event": "ready_for_review",
      "id": 13476550066,
      "node_id": "RFRE_lADOABII586NTY_uzwAAAAMjQ9Wy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13476550066",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T19:29:48Z"
    },
    {
      "event": "commented",
      "id": 2223723973,
      "node_id": "IC_kwDOABII586Ei1XF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2223723973",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-11T19:30:23Z",
      "updated_at": "2024-07-11T19:30:23Z",
      "author_association": "MEMBER",
      "body": "Ready for review now that #26596 has been merged.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2223723973",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "reviewed",
      "id": 2186531990,
      "node_id": "PRR_kwDOABII586CU9SW",
      "url": null,
      "actor": null,
      "commit_id": "d5d994c02bb54db395da457724ec45539f1c10a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2186531990",
      "submitted_at": "2024-07-18T18:01:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2186871308,
      "node_id": "PRR_kwDOABII586CWQIM",
      "url": null,
      "actor": null,
      "commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2186871308",
      "submitted_at": "2024-07-18T20:41:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2186919023,
      "node_id": "PRR_kwDOABII586CWbxv",
      "url": null,
      "actor": null,
      "commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2186919023",
      "submitted_at": "2024-07-18T21:09:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "labeled",
      "id": 13599857620,
      "node_id": "LE_lADOABII586NTY_uzwAAAAMqnVvU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13599857620",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T11:32:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2242736995,
      "node_id": "IC_kwDOABII586FrXNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2242736995",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T11:32:50Z",
      "updated_at": "2024-07-22T11:32:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27341718423</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2242736995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "unlabeled",
      "id": 13601954814,
      "node_id": "UNLE_lADOABII586NTY_uzwAAAAMqvVv-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13601954814",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T14:07:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2196286870,
      "node_id": "PRR_kwDOABII586C6K2W",
      "url": null,
      "actor": null,
      "commit_id": "d5d994c02bb54db395da457724ec45539f1c10a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, left two code-deduplication nits below",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2196286870",
      "submitted_at": "2024-07-24T10:42:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2201704324,
      "node_id": "PRR_kwDOABII586DO1eE",
      "url": null,
      "actor": null,
      "commit_id": "d5d994c02bb54db395da457724ec45539f1c10a8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Commit message in d5d994c02bb54db395da457724ec45539f1c10a8 incorrectly states:\r\n\"This reverts commit bbb1d51e1240da61db2ca1036f9ec91fd2f36f2d.\"\r\n\r\nI believe that commit ended up being merged as b231f4d556876ae70305e8710e31d53525ded8ae.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2201704324",
      "submitted_at": "2024-07-26T12:21:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "labeled",
      "id": 13750338894,
      "node_id": "LE_lADOABII586NTY_uzwAAAAMzlYVO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13750338894",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-03T15:00:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2266756401,
      "node_id": "IC_kwDOABII586HG_Ux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2266756401",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-03T15:00:08Z",
      "updated_at": "2024-08-03T15:00:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27341718760</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2266756401",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14118147380,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAANJgdU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14118147380",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T16:30:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14205135002,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAANOsSia",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14205135002",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T20:09:53Z"
    },
    {
      "event": "unlabeled",
      "id": 14214342113,
      "node_id": "UNLE_lADOABII586NTY_uzwAAAANPPaXh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14214342113",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-11T11:18:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2345733518,
      "node_id": "IC_kwDOABII586L0Q2O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2345733518",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-12T09:22:37Z",
      "updated_at": "2024-09-12T09:22:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2201704324 still applies to 705d9eb0aef8831891e1cce80c33615440547e90 instead of d5d994c02bb54db395da457724ec45539f1c10a8.\r\n\r\n(Clarified linked comment a bit).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2345733518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14674767400,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAANqry4o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14674767400",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T11:17:15Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRhMTAwOWY5MGUwNWRkZGU0YTdmOTVlNTNmYTE2Yjg1OTAxNDBkYWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "tree": {
        "sha": "cb38364ba1a371b64e634e0fda627e940638d362",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb38364ba1a371b64e634e0fda627e940638d362"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ca1d1bf69ca364393e924cf41becfde1b68126c",
          "sha": "0ca1d1bf69ca364393e924cf41becfde1b68126c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0ca1d1bf69ca364393e924cf41becfde1b68126c"
        }
      ],
      "message": "wallet: Remove IsMine from migration\n\nAs IsMine will be removed, the relevant components of IsMine are inlined\ninto the migration functions.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-10-16T11:33:35Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-05T23:36:24Z"
      },
      "sha": "4a1009f90e05ddde4a7f95e53fa16b8590140dac"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14676206798,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAANqxSTO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14676206798",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-16T11:33:38Z"
    },
    {
      "event": "review_requested",
      "id": 14852588461,
      "node_id": "RRE_lADOABII586NTY_uzwAAAAN1SIOt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14852588461",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T14:20:29Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwMWU1NmFhZjQyZTBiMDZmNjM0Yjc5OWQ1ZWZmODU5OWY3MWRmMmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "tree": {
        "sha": "e21527524635c3207f3c9f1067eca7107c5287cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e21527524635c3207f3c9f1067eca7107c5287cf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a1009f90e05ddde4a7f95e53fa16b8590140dac",
          "sha": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1009f90e05ddde4a7f95e53fa16b8590140dac"
        }
      ],
      "message": "Revert \"wallet: Move LegacyScriptPubKeyMan::IsMine to LegacyDataSPKM\"\n\nThis reverts commit b231f4d556876ae70305e8710e31d53525ded8ae.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-11-14T21:16:10Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-11-14T21:16:10Z"
      },
      "sha": "f01e56aaf42e0b06f634b799d5eff8599f71df2f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15304500193,
      "node_id": "HRFPE_lADOABII586NTY_uzwAAAAOQOCPh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15304500193",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "created_at": "2024-11-14T21:16:30Z"
    },
    {
      "event": "commented",
      "id": 2477425377,
      "node_id": "IC_kwDOABII586TqoLh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2477425377",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T21:16:38Z",
      "updated_at": "2024-11-14T21:16:38Z",
      "author_association": "MEMBER",
      "body": "> Commit message in [d5d994c](https://github.com/bitcoin/bitcoin/commit/d5d994c02bb54db395da457724ec45539f1c10a8) incorrectly states: \"This reverts commit [bbb1d51](https://github.com/bitcoin/bitcoin/commit/bbb1d51e1240da61db2ca1036f9ec91fd2f36f2d).\"\r\n> \r\n> I believe that commit ended up being merged as [b231f4d](https://github.com/bitcoin/bitcoin/commit/b231f4d556876ae70305e8710e31d53525ded8ae).\r\n\r\nIndeed, fixed.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#issuecomment-2477425377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30328"
    },
    {
      "event": "reviewed",
      "id": 2434167216,
      "node_id": "PRR_kwDOABII586RFnGw",
      "url": null,
      "actor": null,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Half way through it. Small comments so far.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2434167216",
      "submitted_at": "2024-11-15T17:47:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2439329600,
      "node_id": "PRR_kwDOABII586RZTdA",
      "url": null,
      "actor": null,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2439329600",
      "submitted_at": "2024-11-15T18:13:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2421497661,
      "node_id": "PRR_kwDOABII586QVR89",
      "url": null,
      "actor": null,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This section of the code is fairly arcane and hard to read. It would help me (and probably other reviewers) if there were more commentary on why things are being done and what is actually happening, especially because a lot of the involved variables are never explicitly denominated.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2421497661",
      "submitted_at": "2024-11-15T19:15:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    },
    {
      "event": "reviewed",
      "id": 2439445784,
      "node_id": "PRR_kwDOABII586RZv0Y",
      "url": null,
      "actor": null,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "There is a bug in the second loop. Before adding the P2WSH program to the spks set, it is necessary to verify that the underlying witness script does not contain any uncompressed keys, as these are prohibited under segwit rules.\r\nCrafted a test exercising the behavior https://github.com/furszy/bitcoin-core/commit/3a0d127343320cc00f13cef96fad7f3b1bd3335a.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#pullrequestreview-2439445784",
      "submitted_at": "2024-11-15T19:24:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683274753",
      "pull_request_review_id": 2186531990,
      "id": 1683274753,
      "node_id": "PRRC_kwDOABII585kVLwB",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "d5d994c02bb54db395da457724ec45539f1c10a8",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // We don't care about these types because they are not spendable\r\n```",
      "created_at": "2024-07-18T18:01:35Z",
      "updated_at": "2024-07-18T18:01:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1683274753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683274753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1728,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683481047",
      "pull_request_review_id": 2186871308,
      "id": 1683481047,
      "node_id": "PRRC_kwDOABII585kV-HX",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash;\n+            CRIPEMD160().Write(sols[0].data(), sols[0].size()).Finalize(hash.begin());\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        case TxoutType::SCRIPTHASH:\n+        {\n+            if (ctx != ScriptContext::TOP) return false;\n+            CScriptID script_id = CScriptID(uint160(sols[0]));\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2SH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+        {\n+            if (ctx == ScriptContext::P2WSH) return false;\n+            CScriptID script_id{RIPEMD160(sols[0])};\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2WSH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            if (ctx == ScriptContext::P2WSH) {\n+                std::vector<valtype> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 153,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 905e22b469a1e09df9ff0e98bf989a55642f301e \"wallet: Remove IsMine from migration\": Just a question, but could it be a vector of `CPubKey` then use `IsCompressed`?",
      "created_at": "2024-07-18T20:41:25Z",
      "updated_at": "2024-07-18T20:41:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1683481047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683481047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683511942",
      "pull_request_review_id": 2186919023,
      "id": 1683511942,
      "node_id": "PRRC_kwDOABII585kWFqG",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 34,
      "original_position": 4,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 905e22b469a1e09df9ff0e98bf989a55642f301e \"wallet: Remove IsMine from migration\": Maybe it's worth updating the documentation?\r\n\r\n```\r\n// For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\r\n```",
      "created_at": "2024-07-18T21:09:38Z",
      "updated_at": "2024-07-18T21:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1683511942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1683511942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689547396",
      "pull_request_review_id": 2196286870,
      "id": 1689547396,
      "node_id": "PRRC_kwDOABII585ktHKE",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash;\n+            CRIPEMD160().Write(sols[0].data(), sols[0].size()).Finalize(hash.begin());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can use the `RIPEMD160` helper here\r\n```suggestion\r\n            uint160 hash{RIPEMD160(sols[0])};\r\n```",
      "created_at": "2024-07-24T10:37:34Z",
      "updated_at": "2024-07-24T10:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1689547396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689547396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": 1790,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689550504",
      "pull_request_review_id": 2196286870,
      "id": 1689550504,
      "node_id": "PRRC_kwDOABII585ktH6o",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: to deduplicate code, could introduce an `all_keys_compressed` helper that is used here and below in the `is_valid_script` lambda, e.g. something like:\r\n\r\n```\r\n    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\r\n        return std::all_of(keys.cbegin(), keys.cend(),\r\n               [](const auto& key) { return key.size() == 33; });\r\n    };\r\n```",
      "created_at": "2024-07-24T10:40:19Z",
      "updated_at": "2024-07-24T10:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1689550504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689550504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": 1768,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802902566",
      "pull_request_review_id": 2372107763,
      "id": 1802902566,
      "node_id": "PRRC_kwDOABII585rdhwm",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash;\n+            CRIPEMD160().Write(sols[0].data(), sols[0].size()).Finalize(hash.begin());\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        case TxoutType::SCRIPTHASH:\n+        {\n+            if (ctx != ScriptContext::TOP) return false;\n+            CScriptID script_id = CScriptID(uint160(sols[0]));\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2SH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+        {\n+            if (ctx == ScriptContext::P2WSH) return false;\n+            CScriptID script_id{RIPEMD160(sols[0])};\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2WSH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            if (ctx == ScriptContext::P2WSH) {\n+                std::vector<valtype> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 153,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": 1683481047,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`HaveKeys` uses `std::vector<valtype>`",
      "created_at": "2024-10-16T11:16:59Z",
      "updated_at": "2024-10-16T11:16:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1802902566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802902566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802902988",
      "pull_request_review_id": 2372108454,
      "id": 1802902988,
      "node_id": "PRRC_kwDOABII585rdh3M",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "d5d994c02bb54db395da457724ec45539f1c10a8",
      "in_reply_to_id": 1683274753,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-10-16T11:17:20Z",
      "updated_at": "2024-10-16T11:17:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1802902988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802902988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1728,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802903174",
      "pull_request_review_id": 2372108723,
      "id": 1802903174,
      "node_id": "PRRC_kwDOABII585rdh6G",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 34,
      "original_position": 4,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": 1683511942,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated the comment.",
      "created_at": "2024-10-16T11:17:29Z",
      "updated_at": "2024-10-16T11:17:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1802903174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802903174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802908802",
      "pull_request_review_id": 2372118601,
      "id": 1802908802,
      "node_id": "PRRC_kwDOABII585rdjSC",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash;\n+            CRIPEMD160().Write(sols[0].data(), sols[0].size()).Finalize(hash.begin());",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": 1689547396,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-10-16T11:22:12Z",
      "updated_at": "2024-10-16T11:22:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1802908802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802908802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": 1790,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1794,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802908907",
      "pull_request_review_id": 2372118795,
      "id": 1802908907,
      "node_id": "PRRC_kwDOABII585rdjTr",
      "diff_hunk": "@@ -1721,37 +1721,157 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care aboue these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                bool allowed = true;\n+                for (const auto& key : keys) {\n+                    if (key.size() != 33) {\n+                        allowed = false;\n+                        break;\n+                    }\n+                }\n+                if (allowed) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "905e22b469a1e09df9ff0e98bf989a55642f301e",
      "in_reply_to_id": 1689550504,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-10-16T11:22:17Z",
      "updated_at": "2024-10-16T11:22:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1802908907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1802908907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": 1768,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832978940",
      "pull_request_review_id": 2421497661,
      "id": 1832978940,
      "node_id": "PRRC_kwDOABII585tQQn8",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 37,
      "original_position": 19,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What does \"sols\" stand for beside solar days on Mars? Is this intended to refer to \"solvers\"? If so, abbreviating that just seems unnecessarily confusing.\r\n\r\n```suggestion\r\n        std::vector<std::vector<unsigned char>> solvers;\r\n```",
      "created_at": "2024-11-07T16:23:28Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1832978940",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832978940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1731,
      "original_line": 1731,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841007320",
      "pull_request_review_id": 2434167216,
      "id": 1841007320,
      "node_id": "PRRC_kwDOABII585tu4rY",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 33,
      "original_position": 15,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\nif you move this to use an structured binding, could use the script id directly instead of calculating it on every ´ScriptHash(script)´ call.\r\n\r\ne.g.\r\n\r\n```c++\r\nfor (const auto& [id, script] : mapScripts) {\r\n   // ... stuff ...\r\n   spks.insert(GetScriptForDestination(ScriptHash(id))); \r\n  // ^^ this does not perform the extra Hash160(script) call.\r\n}\r\n```",
      "created_at": "2024-11-13T18:55:51Z",
      "updated_at": "2024-11-15T17:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1841007320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841007320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1729,
      "original_start_line": 1729,
      "start_side": "RIGHT",
      "line": 1730,
      "original_line": 1730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841132532",
      "pull_request_review_id": 2421497661,
      "id": 1841132532,
      "node_id": "PRRC_kwDOABII585tvXP0",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 47,
      "original_position": 29,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // These are only spendable if the witness script is also spendable as a scriptPubKey\r\n```",
      "created_at": "2024-11-13T20:40:56Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1841132532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841132532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1741,
      "original_line": 1741,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841207696",
      "pull_request_review_id": 2421497661,
      "id": 1841207696,
      "node_id": "PRRC_kwDOABII585tvpmQ",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 69,
      "original_position": 51,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we maybe give a few pointers what’s going on here?\r\n```suggestion\r\n            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\r\n                // Insert the output script for a P2WPKH output\r\n                spks.insert(script);\r\n                // Insert the output script for a P2SH-P2WPKH output\r\n                spks.insert(GetScriptForDestination(ScriptHash(script)));\r\n```\r\n\r\nAgain, mostly guessing. :shrug:",
      "created_at": "2024-11-13T21:40:33Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1841207696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841207696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1757,
      "original_start_line": 1757,
      "start_side": "RIGHT",
      "line": 1759,
      "original_line": 1759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841210613",
      "pull_request_review_id": 2421497661,
      "id": 1841210613,
      "node_id": "PRRC_kwDOABII585tvqT1",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 84,
      "original_position": 66,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are we talking about private keys here? Or public keys? E.g. clearly we would need all three public keys, but only two private keys to spend a 2-of-3 bare multisig.\r\n\r\nThis is talking about bare multisig, right? Would something like this make sense?\r\n\r\n```suggestion\r\n            // Bare multisig outputs are only spendable if we have [public|private|public and private] keys that appear in the output script\r\n```",
      "created_at": "2024-11-13T21:43:17Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1841210613",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841210613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1765,
      "original_line": 1765,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844166304",
      "pull_request_review_id": 2434167216,
      "id": 1844166304,
      "node_id": "PRRC_kwDOABII585t676g",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 110,
      "original_position": 92,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note for reviewers:\r\nThis is because we store scripts (witness programs, witness scripts and redeem scripts) in a map whose key is a `CScriptID` -> which is a Hash160 of the script -> which is a `RIPEMD160(SHA256(script))`.\r\nAs P2WSH are in the form of `OP_0 <SHA256(witness_script)>`, the SHA256 part is already there and we only need to perform the RIPEMD160 calculation to obtain the `CScriptID`.",
      "created_at": "2024-11-15T16:48:09Z",
      "updated_at": "2024-11-15T17:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844166304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844166304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1790,
      "original_start_line": 1790,
      "start_side": "RIGHT",
      "line": 1791,
      "original_line": 1791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844244829",
      "pull_request_review_id": 2434167216,
      "id": 1844244829,
      "node_id": "PRRC_kwDOABII585t7PFd",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 120,
      "original_position": 102,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this being tested? It seems we have P2WSH(multisig) tests inside `ismine_tests.cpp` and `wallet_migration.py` but these type of script should be covered inside the first loop already. Because if the wallet owns the P2WSH, it will also contain the inner multisig script, which will be handled by the first loop.",
      "created_at": "2024-11-15T17:47:20Z",
      "updated_at": "2024-11-15T17:48:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844244829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844244829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1785,
      "original_start_line": 1785,
      "start_side": "RIGHT",
      "line": 1801,
      "original_line": 1801,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844279607",
      "pull_request_review_id": 2439329600,
      "id": 1844279607,
      "node_id": "PRRC_kwDOABII585t7Xk3",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 116,
      "original_position": 116,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "in_reply_to_id": null,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How can we end up with a P2SH or a witness program inside the witness script?",
      "created_at": "2024-11-15T18:13:54Z",
      "updated_at": "2024-11-15T18:13:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844279607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844279607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1795,
      "original_start_line": 1795,
      "start_side": "RIGHT",
      "line": 1797,
      "original_line": 1797,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844300642",
      "pull_request_review_id": 2421497661,
      "id": 1844300642,
      "node_id": "PRRC_kwDOABII585t7cti",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 26,
      "original_position": 8,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was first confused by the snake_case apparently being used as a function below. A comment would have helped me figure this out a bit faster. Maybe something in the vein of:\r\n\r\n```suggestion\r\n    // Assigns an unnamed lambda function which checks that all keys are compressed\r\n    const auto& func_all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\r\n        return std::all_of(keys.cbegin(), keys.cend(),\r\n               [](const auto& key) { return key.size() == 33; });\r\n    };\r\n```",
      "created_at": "2024-11-15T18:31:07Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844300642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844300642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1720,
      "original_start_line": 1720,
      "start_side": "RIGHT",
      "line": 1723,
      "original_line": 1723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844302843",
      "pull_request_review_id": 2421497661,
      "id": 1844302843,
      "node_id": "PRRC_kwDOABII585t7dP7",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 28,
      "original_position": 10,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could this comment please be more specific? What sorts of scripts are being stored in this map? Input scripts, output scripts, redeemscripts, witness programs, witness scripts, all of the above, a subset of the above, etc.?",
      "created_at": "2024-11-15T18:33:31Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844302843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844302843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844305339",
      "pull_request_review_id": 2421497661,
      "id": 1844305339,
      "node_id": "PRRC_kwDOABII585t7d27",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 44,
      "original_position": 26,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // The legacy wallet never had support for P2TR, therefore it’s among the unspendable scripts here\r\n        case TxoutType::WITNESS_V1_TAPROOT:\r\n```",
      "created_at": "2024-11-15T18:36:15Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844305339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844305339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1738,
      "original_line": 1738,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844306218",
      "pull_request_review_id": 2421497661,
      "id": 1844306218,
      "node_id": "PRRC_kwDOABII585t7eEq",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 48,
      "original_position": 30,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment is confusing, because once `spks` refers to the variable, and once \"spks\" seems to refer to output scripts. If I understand this right:\r\n\r\n```suggestion\r\n        // We will check these later after `spks` has been updated with scriptPubKeys from the processed scripts.\r\n```",
      "created_at": "2024-11-15T18:37:12Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844306218",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844306218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1742,
      "original_line": 1742,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844317743",
      "pull_request_review_id": 2421497661,
      "id": 1844317743,
      "node_id": "PRRC_kwDOABII585t7g4v",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 52,
      "original_position": 34,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These two lines of comments are hard to understand. What is a \"P2SH nested spk\"? It would make it easier to understand if references to variables and references to abstract concepts were clearly differentiated.\r\n\r\nAfter staring at this for a while, is the following roughly what is meant here?\r\n\r\n```suggestion\r\n        // P2PK and P2PKH output scripts can already be handled after the the wallet’s keys have been processed above.\r\n        // If we encounter any output scripts that match the P2PKH output script pattern, these are here to handle P2SH-P2WPKH output scripts\r\n```\r\n\r\nOtherwise, please consider my comment evidence that it was hard to understand what is going on here.",
      "created_at": "2024-11-15T18:49:24Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844317743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844317743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1745,
      "original_start_line": 1745,
      "start_side": "RIGHT",
      "line": 1746,
      "original_line": 1746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844326937",
      "pull_request_review_id": 2421497661,
      "id": 1844326937,
      "node_id": "PRRC_kwDOABII585t7jIZ",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 91,
      "original_position": 73,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mean?\r\n\r\n```suggestion\r\n            // We need to have the witness script to consider the P2WSH output script to be spendable.\r\n```\r\n",
      "created_at": "2024-11-15T18:56:46Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844326937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844326937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1772,
      "original_line": 1772,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844333982",
      "pull_request_review_id": 2421497661,
      "id": 1844333982,
      "node_id": "PRRC_kwDOABII585t7k2e",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 110,
      "original_position": 92,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844166304,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could this please be documented in the code?",
      "created_at": "2024-11-15T19:04:02Z",
      "updated_at": "2024-11-15T19:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844333982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844333982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1790,
      "original_start_line": 1790,
      "start_side": "RIGHT",
      "line": 1791,
      "original_line": 1791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844334957",
      "pull_request_review_id": 2421497661,
      "id": 1844334957,
      "node_id": "PRRC_kwDOABII585t7lFt",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 125,
      "original_position": 107,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is a \"TOP\" ScriptContext?",
      "created_at": "2024-11-15T19:05:07Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844334957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844334957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1806,
      "original_line": 1806,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844338459",
      "pull_request_review_id": 2421497661,
      "id": 1844338459,
      "node_id": "PRRC_kwDOABII585t7l8b",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::ANCHOR:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 149,
      "original_position": 131,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is our expectation to be happening when `uint160(sols[0])` is called here? Could we maybe pull apart these three conversations in a conditional statement into two lines where the first line provides some insight on what we are converting here?\r\n\r\nWould I be right in guessing that a `CKeyID` is the hash of a public key?",
      "created_at": "2024-11-15T19:08:35Z",
      "updated_at": "2024-11-15T19:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844338459",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844338459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1829,
      "original_start_line": 1829,
      "start_side": "RIGHT",
      "line": 1830,
      "original_line": 1830,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844342958",
      "pull_request_review_id": 2421497661,
      "id": 1844342958,
      "node_id": "PRRC_kwDOABII585t7nCu",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::ANCHOR:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        case TxoutType::SCRIPTHASH:\n+        {\n+            if (ctx != ScriptContext::TOP) return false;\n+            CScriptID script_id = CScriptID(uint160(sols[0]));\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2SH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+        {\n+            if (ctx == ScriptContext::P2WSH) return false;\n+            CScriptID script_id{RIPEMD160(sols[0])};",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 167,
      "original_position": 149,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wouldn’t all of this be way easier and more readable, if we had explicit types for our various output script components instead of treating them as if they were just numbers and strings?",
      "created_at": "2024-11-15T19:13:08Z",
      "updated_at": "2024-11-15T19:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844342958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844342958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1848,
      "original_line": 1848,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844630125",
      "pull_request_review_id": 2439881600,
      "id": 1844630125,
      "node_id": "PRRC_kwDOABII585t8tJt",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 116,
      "original_position": 116,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "in_reply_to_id": 1844279607,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using `importaddress`, you can import arbitrary scripts that can appear as output scripts. It is thus possible to import a P2WSH script which contains the hash of a P2SH script or a witness program. The user can then use `importaddress` again to import those particular scripts.\r\n\r\nMost of the edge cases revolve around the user doing something insane, but because they were allowed, we have to handle them.",
      "created_at": "2024-11-15T22:46:23Z",
      "updated_at": "2024-11-15T23:01:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844630125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844630125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1795,
      "original_start_line": 1795,
      "start_side": "RIGHT",
      "line": 1797,
      "original_line": 1797,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844642514",
      "pull_request_review_id": 2439898869,
      "id": 1844642514,
      "node_id": "PRRC_kwDOABII585t8wLS",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 37,
      "original_position": 19,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1832978940,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "**sol**ution**s**",
      "created_at": "2024-11-15T22:52:22Z",
      "updated_at": "2024-11-15T22:52:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844642514",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844642514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1731,
      "original_line": 1731,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844644393",
      "pull_request_review_id": 2439901507,
      "id": 1844644393,
      "node_id": "PRRC_kwDOABII585t8wop",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 84,
      "original_position": 66,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1841210613,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Generally \"keys\" refers to private keys and public keys are typically specified as such or as \"pubkey\".\r\n\r\nIn this instance, multisigs are only spendable if we have all of their private keys, regardless of the context the multisig appears in.",
      "created_at": "2024-11-15T22:55:39Z",
      "updated_at": "2024-11-15T22:55:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844644393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844644393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1765,
      "original_line": 1765,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844645672",
      "pull_request_review_id": 2439903121,
      "id": 1844645672,
      "node_id": "PRRC_kwDOABII585t8w8o",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 28,
      "original_position": 10,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844302843,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "All of the above. All types of scripts are stored in mapScripts, without contexts. Thus all scripts in mapScripts can appear in any context. That is the insanity of legacy IsMine.",
      "created_at": "2024-11-15T22:57:57Z",
      "updated_at": "2024-11-15T23:02:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844645672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844645672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1725,
      "original_line": 1725,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844650818",
      "pull_request_review_id": 2439910552,
      "id": 1844650818,
      "node_id": "PRRC_kwDOABII585t8yNC",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 52,
      "original_position": 34,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844317743,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If a P2PK or P2PKH script exists in mapScripts, then the corresponding P2SH-P2PK and P2SH-P2PKH output script is spendable.",
      "created_at": "2024-11-15T23:07:06Z",
      "updated_at": "2024-11-15T23:07:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844650818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844650818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1745,
      "original_start_line": 1745,
      "start_side": "RIGHT",
      "line": 1746,
      "original_line": 1746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844651416",
      "pull_request_review_id": 2439911468,
      "id": 1844651416,
      "node_id": "PRRC_kwDOABII585t8yWY",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 125,
      "original_position": 107,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844334957,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Output script level.",
      "created_at": "2024-11-15T23:08:26Z",
      "updated_at": "2024-11-15T23:08:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844651416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844651416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1806,
      "original_line": 1806,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844652679",
      "pull_request_review_id": 2439913312,
      "id": 1844652679,
      "node_id": "PRRC_kwDOABII585t8yqH",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::ANCHOR:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 149,
      "original_position": 131,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844338459,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's basically just casting types.\r\n\r\n`sols[0]` contains a vector of bytes which represents the hash of a pubkey. This is cast to the `uint160` type, which is then cast to the `CKeyID` type (which is really just a wrapper around `uint160`) which is the type that `GetPubKey` can take. There is no direct conversion from `std::vector<>` to `CKeyID` hence the `uint160` in between.\r\n\r\nIt doesn't make sense to pull this apart since the intermediate types are never used.",
      "created_at": "2024-11-15T23:11:12Z",
      "updated_at": "2024-11-15T23:11:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844652679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844652679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": 1829,
      "original_start_line": 1829,
      "start_side": "RIGHT",
      "line": 1830,
      "original_line": 1830,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844723731",
      "pull_request_review_id": 2440001939,
      "id": 1844723731,
      "node_id": "PRRC_kwDOABII585t9EAT",
      "diff_hunk": "@@ -1717,42 +1717,160 @@ std::unordered_set<CScript, SaltedSipHasher> LegacyDataSPKM::GetScriptPubKeys()\n         spks.insert(GetScriptForDestination(PKHash(pub)));\n     }\n \n-    // For every script in mapScript, only the ISMINE_SPENDABLE ones are being tracked.\n+    const auto& all_keys_compressed = [](const std::vector<valtype>& keys) -> bool {\n+        return std::all_of(keys.cbegin(), keys.cend(),\n+               [](const auto& key) { return key.size() == 33; });\n+    };\n+\n+    // Insert every P2PK, P2PKH, and P2WPKH script. Multisigs are only included if we know\n+    // all of the keys (matches legacy wallet IsMine behavior).\n     // The watchonly ones will be in setWatchOnly which we deal with later\n     // For all keys, if they have segwit scripts, those scripts will end up in mapScripts\n     for (const auto& script_pair : mapScripts) {\n         const CScript& script = script_pair.second;\n-        if (IsMine(script) == ISMINE_SPENDABLE) {\n-            // Add ScriptHash for scripts that are not already P2SH\n-            if (!script.IsPayToScriptHash()) {\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        switch (type) {\n+        // We don't care about these types because they are not spendable\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::SCRIPTHASH:\n+        case TxoutType::ANCHOR:\n+        // These are only spendable if the witness scripts is also spendable as a scriptPubKey\n+        // We will check these later after spks has been updated with spks from scripts.\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+            break;\n+        // These scriptPubKeys have already been handled by dealing with the keys\n+        // However if these scripts are here, then the P2SH nested spk will be spendable if these are also scriptPubKeys\n+        case TxoutType::PUBKEY:\n+        case TxoutType::PUBKEYHASH:\n+            if (spks.count(script) > 0) {\n                 spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-            // For segwit scripts, we only consider them spendable if we have the segwit spk\n-            int wit_ver = -1;\n-            std::vector<unsigned char> witprog;\n-            if (script.IsWitnessProgram(wit_ver, witprog) && wit_ver == 0) {\n+            break;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+        {\n+            CKeyID key_id{uint160(sols[0])};\n+            CPubKey pubkey;\n+            if (GetPubKey(key_id, pubkey) && pubkey.IsCompressed() && HaveKey(key_id)) {\n                 spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n             }\n-        } else {\n-            // Multisigs are special. They don't show up as ISMINE_SPENDABLE unless they are in a P2SH\n-            // So check the P2SH of a multisig to see if we should insert it\n-            std::vector<std::vector<unsigned char>> sols;\n-            TxoutType type = Solver(script, sols);\n-            if (type == TxoutType::MULTISIG) {\n-                CScript ms_spk = GetScriptForDestination(ScriptHash(script));\n-                if (IsMine(ms_spk) != ISMINE_NO) {\n-                    spks.insert(ms_spk);\n+            break;\n+        }\n+        case TxoutType::MULTISIG:\n+        {\n+            // Multisigs are only spendable if we have all of their keys\n+            std::vector<std::vector<unsigned char>> keys(sols.begin() + 1, sols.begin() + sols.size() - 1);\n+            if (!HaveKeys(keys, *this)) {\n+                break;\n+            }\n+            // Multisigs are always spendable inside of P2SH scripts\n+            spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            // We need to have the P2WSH script for the P2WSH to be spendable.\n+            // But the keys also must be compressed\n+            CScript ms_wsh = GetScriptForDestination(WitnessV0ScriptHash(script));\n+            if (HaveCScript(CScriptID(ms_wsh))) {\n+                if (all_keys_compressed(keys)) {\n+                    spks.insert(ms_wsh);\n+                    spks.insert(GetScriptForDestination(ScriptHash(ms_wsh)));\n                 }\n             }\n+            break;\n+        }\n+        }\n+    }\n+    // Iterate again for all the P2WSH scripts\n+    for (const auto& script_pair : mapScripts) {\n+        const CScript& script = script_pair.second;\n+        std::vector<std::vector<unsigned char>> sols;\n+        TxoutType type = Solver(script, sols);\n+        if (type == TxoutType::WITNESS_V0_SCRIPTHASH) {\n+            uint160 hash{RIPEMD160(sols[0])};\n+            CScript witness_script;\n+            int wit_ver = -1;\n+            std::vector<unsigned char> wit_prog;\n+            if (GetCScript(CScriptID(hash), witness_script) &&\n+                !witness_script.IsPayToScriptHash() &&\n+                !witness_script.IsWitnessProgram(wit_ver, wit_prog) &&\n+                spks.count(witness_script) > 0) {\n+                spks.insert(script);\n+                spks.insert(GetScriptForDestination(ScriptHash(script)));\n+            }\n         }\n     }\n \n+    enum class ScriptContext {\n+        TOP,\n+        P2SH,\n+        P2WSH,\n+    };\n+    std::function<bool(const CScript&, const ScriptContext)> is_valid_script = [&](const CScript& script, const ScriptContext ctx) -> bool {\n+        std::vector<valtype> sols;\n+        TxoutType spk_type = Solver(script, sols);\n+\n+        CKeyID keyID;\n+        switch (spk_type) {\n+        case TxoutType::NONSTANDARD:\n+        case TxoutType::NULL_DATA:\n+        case TxoutType::WITNESS_UNKNOWN:\n+        case TxoutType::WITNESS_V1_TAPROOT:\n+        case TxoutType::ANCHOR:\n+            return ctx == ScriptContext::TOP;\n+        case TxoutType::PUBKEY:\n+            if (ctx == ScriptContext::P2WSH && sols[0].size() != 33) return false;\n+            return true;\n+        case TxoutType::WITNESS_V0_KEYHASH:\n+            return ctx != ScriptContext::P2WSH;\n+        case TxoutType::PUBKEYHASH:\n+            if (ctx == ScriptContext::P2WSH) {\n+                CPubKey pubkey;\n+                if (GetPubKey(CKeyID(uint160(sols[0])), pubkey) && !pubkey.IsCompressed()) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        case TxoutType::SCRIPTHASH:\n+        {\n+            if (ctx != ScriptContext::TOP) return false;\n+            CScriptID script_id = CScriptID(uint160(sols[0]));\n+            CScript subscript;\n+            if (GetCScript(script_id, subscript)) {\n+                return is_valid_script(subscript, ScriptContext::P2SH);\n+            }\n+            return true;\n+        }\n+        case TxoutType::WITNESS_V0_SCRIPTHASH:\n+        {\n+            if (ctx == ScriptContext::P2WSH) return false;\n+            CScriptID script_id{RIPEMD160(sols[0])};",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 167,
      "original_position": 149,
      "commit_id": "f01e56aaf42e0b06f634b799d5eff8599f71df2f",
      "original_commit_id": "4a1009f90e05ddde4a7f95e53fa16b8590140dac",
      "in_reply_to_id": 1844342958,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is possible that the solver could be rewritten to pull out all of the components of scripts into structs with proper typing and member names, but that is a much larger refactor that is out of scope for this PR.",
      "created_at": "2024-11-16T00:24:29Z",
      "updated_at": "2024-11-16T00:24:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30328#discussion_r1844723731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1844723731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30328"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1848,
      "original_line": 1848,
      "side": "RIGHT"
    }
  ]
}