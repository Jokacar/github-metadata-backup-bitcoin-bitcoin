{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260",
    "id": 2170572223,
    "node_id": "PR_kwDOABII586BYE2_",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31260",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31260.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31260.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4e33ed4eb054e230436b68c681d978d0e7bea0a1",
    "number": 31260,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "scripted-diff: Type-safe settings retrieval",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR changes the way settings are registered and retrieved to provide more compile-time safety. Currently settings are [registered](https://github.com/ryanofsky/bitcoin/blob/03cff2c1421e5db59963eba1a845ef5dd318c275/src/init.cpp#L504) and [retrieved](https://github.com/ryanofsky/bitcoin/blob/03cff2c1421e5db59963eba1a845ef5dd318c275/src/init.cpp#L173) like:\r\n\r\n```c++\r\n// Register setting\r\nargsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\r\n\r\n// Retrieve setting\r\nargs.GetPathArg(\"-pid\", BITCOIN_PID_FILENAME)\r\n```\r\n\r\nBut this is not ideal because nothing checks that setting names are spelled correctly, or that default values (`BITCOIN_PID_FILENAME`) are used consistently in the help string and retrieval sites, or that settings are retrieved with consistent types (bool, int, string, path, or list). This PR addresses these issues by adding setting [declarations](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init_settings.h#L267-L270) which allow settings to be [registered](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init.cpp#L484) and [retrieved](https://github.com/ryanofsky/bitcoin/blob/416860fc360b3d5aa1a0782ab8f8454b46e6d657/src/init.cpp#L164C38-L164C59) like:\r\n\r\n```c++\r\n// Declare setting\r\nusing PidSetting = common::Setting<\r\n    \"-pid=<file>\", fs::path, {.legacy = true},\r\n    \"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\">\r\n    ::DefaultFn<[] { return BITCOIN_PID_FILENAME; }>;\r\n\r\n// Register setting\r\nPidSetting::Register(argsman);\r\n\r\n// Retrieve setting\r\nPidSetting::Get(args)\r\n```\r\n\r\n---\r\n\r\n#### Suggestions for review\r\n\r\nAll the real changes in this PR are in the last scripted-diff commit:\r\n\r\n- [`4e33ed4eb054` scripted-diff: Replace AddArgs / GetArgs calls with Setting Register / Get calls](https://github.com/bitcoin/bitcoin/pull/31260/commits/4e33ed4eb054e230436b68c681d978d0e7bea0a1)\r\n\r\nIf you take a few minutes to look at the changes applied in this scripted-diff commit, you'll understand everything this PR is doing. A good place to start looking around in this commit is the generated [`src/init_settings.h`](https://github.com/ryanofsky/bitcoin/blob/pr/scripty/src/init_settings.h) file which declares the settings that get registered in [src/init.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/scripty/src/init.cpp). Then you can look at the surrounding diffs and see they are just replacing `AddArg` and `GetArg` calls.\r\n\r\nThe other notable commit is second commit, which implements the `Setting` class:\r\n\r\n- [`655833a83e02` common: Add Setting class to support typed Settings](https://github.com/bitcoin/bitcoin/pull/31260/commits/655833a83e023b4b30cbeaec2ae5b34912461642)\r\n\r\nThe other commits do minor things like moving code or updating linters. The python script that implements the scripted diff is a temporary artifact that gets deleted. The python script is complicated because it does things like parsing c++ code to extract help strings, and figuring out the right types to declare settings with so code compiles. But the entire scope of the script is to (1) generate Setting type definitions, (2) add #includes, and (3) replace `AddArg()` calls with `Register()` calls and `GetArg()` calls with `Get()` calls. So there is not much the script can actually do wrong without triggering build and test failures.\r\n\r\n---\r\n\r\n#### Extensions\r\n\r\nThis PR only adds the ability to declare individual settings with built-in types. It doesn't provide any new runtime behavior, but a branch in issue #22978 extends the `Setting` class implemented here to support runtime setting validation, additional types like `std::variant`, additional conversion options, custom types, custom validation, and groups of settings declared as options structs.\r\n\r\nThis change is mostly orthogonal to #16545. #16545 only provides runtime type checking while this PR only provides compile-time checking with no new runtime behavior. But this change does allow a nicer way of declaring types in #16545, using c++ types like `int` instead of flags like `ALLOW_INT`, or`std::vector<std::string>` instead of `ALLOW_STRING | ALLOW_LIST`.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-11-08T22:34:46Z",
    "updated_at": "2024-11-27T22:28:07Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "d498c41504aedc1f213fe4ae6f6c516bc4c55a57",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/scripty",
      "ref": "pr/scripty",
      "sha": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 14,
        "watchers_count": 14,
        "size": 271350,
        "default_branch": "master",
        "open_issues_count": 3,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-27T21:30:56Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2024-09-28T22:54:37Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7590e93bc73b3bbac641f05d490fd5c984156b33",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36484,
        "stargazers_count": 79877,
        "watchers_count": 79877,
        "size": 272950,
        "default_branch": "master",
        "open_issues_count": 662,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-27T17:34:44Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-11-27T22:16:08Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 2993,
    "deletions": 792,
    "changed_files": 82,
    "commits": 9,
    "review_comments": 20,
    "comments": 7
  },
  "events": [
    {
      "event": "commented",
      "id": 2465853879,
      "node_id": "IC_kwDOABII586S-fG3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465853879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T22:34:49Z",
      "updated_at": "2024-11-26T02:38:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31260.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31295](https://github.com/bitcoin/bitcoin/pull/31295) (refactor: Prepare compile-time check of bilingual format strings by maflcko)\n* [#31250](https://github.com/bitcoin/bitcoin/pull/31250) (wallet: Disable creating and loading legacy wallets by achow101)\n* [#31223](https://github.com/bitcoin/bitcoin/pull/31223) (net, init: derive default onion port if a user specified a -port by mzumsande)\n* [#31215](https://github.com/bitcoin/bitcoin/pull/31215) (rpc: increase the defaults for -rpcthreads and -rpcworkqueue by vasild)\n* [#31212](https://github.com/bitcoin/bitcoin/pull/31212) (util: Improve documentation and negation of args by hodlinator)\n* [#31072](https://github.com/bitcoin/bitcoin/pull/31072) (refactor: Clean up messy strformat and bilingual_str usages by ryanofsky)\n* [#31061](https://github.com/bitcoin/bitcoin/pull/31061) (refactor: Check translatable format strings at compile-time by maflcko)\n* [#30965](https://github.com/bitcoin/bitcoin/pull/30965) (kernel: Move block tree db open to block manager by TheCharlatan)\n* [#30951](https://github.com/bitcoin/bitcoin/pull/30951) (net: option to disallow v1 connection on ipv4 and ipv6 peers by stratospher)\n* [#30727](https://github.com/bitcoin/bitcoin/pull/30727) (rpc: add address_type field in getaddressinfo by jonatack)\n* [#30529](https://github.com/bitcoin/bitcoin/pull/30529) (Fix -norpcwhitelist, -norpcallowip, and similar corner case behavior by ryanofsky)\n* [#30221](https://github.com/bitcoin/bitcoin/pull/30221) (wallet: Ensure best block matches wallet scan state by achow101)\n* [#30157](https://github.com/bitcoin/bitcoin/pull/30157) (Fee Estimation via Fee rate Forecasters by ismaelsadeeq)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#29365](https://github.com/bitcoin/bitcoin/pull/29365) (Extend signetchallenge to set target block spacing by starius)\n* [#29278](https://github.com/bitcoin/bitcoin/pull/29278) (Wallet:  Add `maxfeerate` wallet startup option by ismaelsadeeq)\n* [#28802](https://github.com/bitcoin/bitcoin/pull/28802) (ArgsManager: support subcommand-specific options by ajtowns)\n* [#28792](https://github.com/bitcoin/bitcoin/pull/28792) (Embed default ASMap as binary dump header file by fjahr)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n* [#28463](https://github.com/bitcoin/bitcoin/pull/28463) (p2p: Increase inbound capacity for block-relay only connections by mzumsande)\n* [#26988](https://github.com/bitcoin/bitcoin/pull/26988) (cli: rework -addrinfo cli to use addresses which aren’t filtered for quality/recency by stratospher)\n* [#26966](https://github.com/bitcoin/bitcoin/pull/26966) (index: initial sync speedup, parallelize process by furszy)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25722](https://github.com/bitcoin/bitcoin/pull/25722) (refactor: Use util::Result class for wallet loading by ryanofsky)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result failure values, multiple error and warning messages by ryanofsky)\n* [#24539](https://github.com/bitcoin/bitcoin/pull/24539) (Add a \"tx output spender\" index by sstone)\n* [#16545](https://github.com/bitcoin/bitcoin/pull/16545) (refactor: Implement missing error checking for ArgsManager flags by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2465853879",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "convert_to_draft",
      "id": 15228773100,
      "node_id": "CTDE_lADOABII586drAjCzwAAAAOLtKLs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15228773100",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T22:34:57Z"
    },
    {
      "event": "labeled",
      "id": 15229818220,
      "node_id": "LE_lADOABII586drAjCzwAAAAOLxJVs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15229818220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T23:32:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2465902292,
      "node_id": "IC_kwDOABII586S-q7U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465902292",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T23:36:25Z",
      "updated_at": "2024-11-08T23:36:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Current status of this PR is that `bitcoind` and `test_bitcoin` binaries work and functional and unit tests pass, but there are compile errors in the other binaries that need to be fixed, and this also needs to be rebased. The PR is complete with all functionality described above implemented, but it probably needs more documentation. I also would like to add more commits replacing last remaining GetArg / GetIntArg / GetBoolArg / GetArgs / IsArgSet / IsArgNegated method uses with `Setting::Get` and dropping all those methods.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2465902292",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15273260085,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOW3Q1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273260085",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "47e30b40eca0eabf85d45e91fc247a74f3a346e8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/47e30b40eca0eabf85d45e91fc247a74f3a346e8",
      "created_at": "2024-11-13T00:28:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15273292339,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOW_Iz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273292339",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8a4a0a8f760cf82cc7f71dfbd3140d11db95790",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d8a4a0a8f760cf82cc7f71dfbd3140d11db95790",
      "created_at": "2024-11-13T00:31:38Z"
    },
    {
      "event": "commented",
      "id": 2472025885,
      "node_id": "IC_kwDOABII586TWB8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2472025885",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T00:36:03Z",
      "updated_at": "2024-11-15T21:14:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 416860fc360b3d5aa1a0782ab8f8454b46e6d657 -> 47e30b40eca0eabf85d45e91fc247a74f3a346e8 ([`pr/scripty.1`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.1) -> [`pr/scripty.2`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.1..pr/scripty.2)) getting the remaining binaries (not just test_bitcoin and bitcoind) to build, simplifying the way optional and default values are used, making many other cleanups and fixes.\r\nRebased 47e30b40eca0eabf85d45e91fc247a74f3a346e8 -> d8a4a0a8f760cf82cc7f71dfbd3140d11db95790 ([`pr/scripty.2`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.2) -> [`pr/scripty.3`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.2-rebase..pr/scripty.3)) due to conflicts\r\nUpdated d8a4a0a8f760cf82cc7f71dfbd3140d11db95790 -> ad32a27e966eac118587cf0e03c1eedaf0c051ed ([`pr/scripty.3`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.3) -> [`pr/scripty.4`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.3..pr/scripty.4)) with a fix for the feature_logging.py test that got broken by the previous optional/default changes. Also includes cmake changes to fix some CI build errors.\r\nUpdated ad32a27e966eac118587cf0e03c1eedaf0c051ed -> 534f9713c9a4a12b8c276585ed6ae96a25d4bc09 ([`pr/scripty.4`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.4) -> [`pr/scripty.5`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.4..pr/scripty.5)) replacing IsArgSet calls with Setting::Value().isNull() instead of using std::optional and Setting::Get() to avoid changing any behavior since Get() fully parses the setting and can throw exceptions, and to reduce uses of std::optional which complicated code. Also add basic unit tests and make various script improvements.\r\nRebased 534f9713c9a4a12b8c276585ed6ae96a25d4bc09 -> 7e572376bdf2e13e896a1aa8f87c3701e2446684 ([`pr/scripty.5`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.5) -> [`pr/scripty.6`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.5-rebase..pr/scripty.6)) with a number of changes intended to fix CI errors, and with a fix for silent merge conflict with #31174\r\nRebased 7e572376bdf2e13e896a1aa8f87c3701e2446684 -> 1f243467cfcaa72a8f665141bdb4e5c5af668dfe ([`pr/scripty.6`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.6) -> [`pr/scripty.7`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.6-rebase..pr/scripty.7)) due to conflict #31287 and many workarounds for various compiler issues in CI and fixes for more linters\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "labeled",
      "id": 15273880503,
      "node_id": "LE_lADOABII586drAjCzwAAAAOOZOu3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15273880503",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T01:21:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2472108000,
      "node_id": "IC_kwDOABII586TWV_g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2472108000",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T01:21:21Z",
      "updated_at": "2024-11-13T01:21:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32896439725</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472108000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "unlabeled",
      "id": 15274374736,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOObHZQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15274374736",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T02:01:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15275142184,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOOeCwo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15275142184",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ad32a27e966eac118587cf0e03c1eedaf0c051ed",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ad32a27e966eac118587cf0e03c1eedaf0c051ed",
      "created_at": "2024-11-13T03:21:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15291084109,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOPa21N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15291084109",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "534f9713c9a4a12b8c276585ed6ae96a25d4bc09",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/534f9713c9a4a12b8c276585ed6ae96a25d4bc09",
      "created_at": "2024-11-14T00:40:19Z"
    },
    {
      "event": "labeled",
      "id": 15291424002,
      "node_id": "LE_lADOABII586drAjCzwAAAAOPcJ0C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15291424002",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T01:36:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15301282372,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOQBwpE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15301282372",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e572376bdf2e13e896a1aa8f87c3701e2446684",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7e572376bdf2e13e896a1aa8f87c3701e2446684",
      "created_at": "2024-11-14T16:27:29Z"
    },
    {
      "event": "unlabeled",
      "id": 15301628902,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOQDFPm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15301628902",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T16:50:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15314841174,
      "node_id": "LE_lADOABII586drAjCzwAAAAOQ1e5W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15314841174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T16:13:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15317503635,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOQ_o6T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317503635",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1f243467cfcaa72a8f665141bdb4e5c5af668dfe",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1f243467cfcaa72a8f665141bdb4e5c5af668dfe",
      "created_at": "2024-11-15T21:09:28Z"
    },
    {
      "event": "renamed",
      "id": 15317587143,
      "node_id": "RTE_lADOABII586drAjCzwAAAAOQ_9TH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317587143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:15:00Z",
      "rename": {
        "from": "WIP: scripted-diff: Type-safe settings retrieval",
        "to": "scripted-diff: Type-safe settings retrieval"
      }
    },
    {
      "event": "ready_for_review",
      "id": 15317588909,
      "node_id": "RFRE_lADOABII586drAjCzwAAAAOQ_9ut",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15317588909",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:15:09Z"
    },
    {
      "event": "commented",
      "id": 2479964213,
      "node_id": "IC_kwDOABII586T0UA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2479964213",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T21:32:56Z",
      "updated_at": "2024-11-16T02:17:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a lot of fixes and updates over the past week and marking this PR as no longer wip/draft. This PR is just a refactoring and doesn't change runtime behavior, but it should be a good start to having better defined settings with clear types and default values, avoiding confusion and bugs caused by the current settings API seen in #30529 and #31212 and other PRs, and making API more extensible to support custom types and validation in the future.\r\n\r\n---\r\n\r\nUpdated 1f243467cfcaa72a8f665141bdb4e5c5af668dfe -> c42d27d8c844b721b5aff384b3d014b1e0cc4783 ([`pr/scripty.7`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.7) -> [`pr/scripty.8`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.7..pr/scripty.8)) to fix remaining CI issues.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2479964213",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "unlabeled",
      "id": 15318734489,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOREVaZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15318734489",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T22:37:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320104732,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAORJj8c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320104732",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "created_at": "2024-11-16T02:16:53Z"
    },
    {
      "event": "commented",
      "id": 2487700612,
      "node_id": "IC_kwDOABII586UR0yE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2487700612",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T07:22:03Z",
      "updated_at": "2024-11-20T07:22:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "This needs the tidy CI task issues fixed up",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2487700612",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "labeled",
      "id": 15364971623,
      "node_id": "LE_lADOABII586drAjCzwAAAAOT0txn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15364971623",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T10:28:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2448864512,
      "node_id": "PRR_kwDOABII586R9rUA",
      "url": null,
      "actor": null,
      "commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "High-level review of c42d27d8c844b721b5aff384b3d014b1e0cc4783\r\n\r\nReview instructions are a nice introduction. Feels a bit risky having links to personal branch instead of specific commit, but it's good to keep it flexible until ACKs come in.\r\n\r\n---\r\n\r\n\r\n### Negation?\r\n\r\nI'm curious how you foresee negation checks being done. Having worked on proper handling of negated args recently, to me it feels like user code should have to jump through a hoop on the way to the non-negated value, if an arg supports negation, to encourage conscious negation logic. `common::Disabled` is currently only used in tests, this goes against this comment from #16545:\r\nhttps://github.com/bitcoin/bitcoin/blob/b5ef85497436c3e9e60c760465d8991592efef07/src/common/args.h#L112-L114\r\n\r\n---\r\n\r\n### Impact on compile time from template magic?\r\n\r\nCompiler: GCC 13.3.0\r\nRan `ccache --clear` and deleted cmake `build` directory before each run.\r\n\r\n#### Before\r\n```\r\nRun #1\r\nreal\t5m13.786s\r\nuser\t63m16.112s\r\nsys\t4m18.988s\r\n\r\nRun #2\r\nreal\t5m18.751s\r\nuser\t65m23.916s\r\nsys\t4m29.586s\r\n```\r\n\r\n#### After\r\n\r\n```\r\nRun #1\r\nreal\t5m16.808s\r\nuser\t65m15.770s\r\nsys\t4m27.238s\r\n\r\nRun #2\r\nreal\t5m21.099s\r\nuser\t66m22.265s\r\nsys\t4m32.162s\r\n```\r\n\r\n#### Conclusion\r\n\r\nSlightly faster before, but overlapping timings. Should be okay.\r\n\r\n---\r\n\r\n### Commit message for f310e17e73bd1cea74aa45fd94192f24df122f86:\r\n\r\nTypo: \"headers from being >be< included\"\r\n\r\n---\r\n\r\n### `Value(args).isNull()`\r\n\r\n`DatadirSetting::Value(args).isNull()` vs `DatadirSettingPath::Get(args)` - feels weird to call the former `Value()` ... it's like `std::optional::value()` but in reverse. The fact that settings are backed by `UniValue`s help explain it, but still looks inelegant. I see this style comes from a [latter revision](https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885) to trigger parsing and possible exceptions. Maybe a `DatadirSetting::IsArgSet(args)` wrapper could be added?\r\n\r\n---\r\n\r\n### CamelCasing\r\n\r\nCouldn't we add a dictionary for proper CamelCasing of settings names so that\r\n- `ZmqpubrawtxSetting` -> `ZmqPubRawTxSetting`\r\n- `StopafterblockimportSetting` -> `StopAfterBlockImportSetting`\r\netc?",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2448864512",
      "submitted_at": "2024-11-20T21:35:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ2MzVkNzM5OTJhMGQxYmQwMzBkMjZlMzU3MTkxOTk3MTZmMjJmOTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d635d73992a0d1bd030d26e35719199716f22f90",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d635d73992a0d1bd030d26e35719199716f22f90",
      "tree": {
        "sha": "9f2c7688feb5ca995cfed3c305a42696a4cd7b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f2c7688feb5ca995cfed3c305a42696a4cd7b77"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2638fdb4f934be96b7c798dbac38ea5ab8a6374a",
          "sha": "2638fdb4f934be96b7c798dbac38ea5ab8a6374a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2638fdb4f934be96b7c798dbac38ea5ab8a6374a"
        }
      ],
      "message": "common: expose SettingToPath function",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-22T00:11:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-08T14:25:28Z"
      },
      "sha": "d635d73992a0d1bd030d26e35719199716f22f90"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY1NTgzM2E4M2UwMjNiNGIzMGNiZWFlYzJhZTViMzQ5MTI0NjE2NDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/655833a83e023b4b30cbeaec2ae5b34912461642",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/655833a83e023b4b30cbeaec2ae5b34912461642",
      "tree": {
        "sha": "0316cb4aa4e663f0b4dfca65348bcdf781a3b8e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0316cb4aa4e663f0b4dfca65348bcdf781a3b8e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d635d73992a0d1bd030d26e35719199716f22f90",
          "sha": "d635d73992a0d1bd030d26e35719199716f22f90",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d635d73992a0d1bd030d26e35719199716f22f90"
        }
      ],
      "message": "common: Add Setting class to support typed Settings",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-22T00:11:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-08T21:26:51Z"
      },
      "sha": "655833a83e023b4b30cbeaec2ae5b34912461642"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM1MzIzNWFlNjQ1YzIxMzcwOTcxMDcwNmIyZmE0YjYzNTFhMjYwNDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/353235ae645c213709710706b2fa4b6351a26048",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/353235ae645c213709710706b2fa4b6351a26048",
      "tree": {
        "sha": "1e94d645e310342f3dac17e7ca55814c1c49260c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e94d645e310342f3dac17e7ca55814c1c49260c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/655833a83e023b4b30cbeaec2ae5b34912461642",
          "sha": "655833a83e023b4b30cbeaec2ae5b34912461642",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/655833a83e023b4b30cbeaec2ae5b34912461642"
        }
      ],
      "message": "test: Add test for common::Setting class",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-22T00:11:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-13T16:38:11Z"
      },
      "sha": "353235ae645c213709710706b2fa4b6351a26048"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlOTAwMDhmNGMzMTg5ZGY5ZDgwNjBkYjdhNDk1MzBlOGRlZmE4YjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae90008f4c3189df9d8060db7a49530e8defa8b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ae90008f4c3189df9d8060db7a49530e8defa8b2",
      "tree": {
        "sha": "fb1f8948db3987e861c5fb6d6d91715badc6e616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb1f8948db3987e861c5fb6d6d91715badc6e616"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/353235ae645c213709710706b2fa4b6351a26048",
          "sha": "353235ae645c213709710706b2fa4b6351a26048",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/353235ae645c213709710706b2fa4b6351a26048"
        }
      ],
      "message": "init, refactor: Prepare AddArg calls for scripted-diff\n\nAvoid string concatenation and add missing namespace names so AddArg calls can\nbe moved to header files in an upcoming scripted-diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-22T00:11:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-15T20:26:55Z"
      },
      "sha": "ae90008f4c3189df9d8060db7a49530e8defa8b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0ZGIwODRkNzdmZTQzOTgyNWNkMjcxNDBlMjhlZTE1YmQ3ODhlYmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84db084d77fe439825cd27140e28ee15bd788eba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84db084d77fe439825cd27140e28ee15bd788eba",
      "tree": {
        "sha": "1474f928ea456f6cca04e7932b7ae943c64ea9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1474f928ea456f6cca04e7932b7ae943c64ea9d8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae90008f4c3189df9d8060db7a49530e8defa8b2",
          "sha": "ae90008f4c3189df9d8060db7a49530e8defa8b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ae90008f4c3189df9d8060db7a49530e8defa8b2"
        }
      ],
      "message": "move-only: move AddArg default values to headers\n\nMove constant declarations referenced in AddArg calls to headers so AddArg\ncalls be moved to header files in an upcoming scripted-diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-22T00:11:27Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-05T19:33:09Z"
      },
      "sha": "84db084d77fe439825cd27140e28ee15bd788eba"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15405134111,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOWN7Ef",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405134111",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27083ecbc221095585cfff3bb208850e564723fd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/27083ecbc221095585cfff3bb208850e564723fd",
      "created_at": "2024-11-22T23:16:15Z"
    },
    {
      "event": "unlabeled",
      "id": 15405229418,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOWOSVq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405229418",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T23:28:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2455631901,
      "node_id": "PRR_kwDOABII586SXfgd",
      "url": null,
      "actor": null,
      "commit_id": "27083ecbc221095585cfff3bb208850e564723fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased c42d27d8c844b721b5aff384b3d014b1e0cc4783 -> 27083ecbc221095585cfff3bb208850e564723fd ([`pr/scripty.8`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.8) -> [`pr/scripty.9`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.8-rebase..pr/scripty.9)) to fix conflict with #31317 including suggested changes and some changes to the scripted diff to cover more arguments.\r\nUpdated 27083ecbc221095585cfff3bb208850e564723fd -> b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129 ([`pr/scripty.9`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.9) -> [`pr/scripty.10`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.9..pr/scripty.10)) expanding to cover hidden arguments and fixing temporary bug in early commit to fix for-each-commit job\r\nUpdated b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129 -> 4e33ed4eb054e230436b68c681d978d0e7bea0a1 ([`pr/scripty.10`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.10) -> [`pr/scripty.11`](https://github.com/ryanofsky/bitcoin/commits/pr/scripty.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/scripty.10..pr/scripty.11)) with fix for lint error https://cirrus-ci.com/task/6667770497073152\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2448864512\r\n\r\nThanks for the review and testing! The compiler benchmarking is especially interesting and commit message typo should be fixed now. The camelcasing dictionary is also a great idea and I will definitely implement that.\r\n\r\n> ### Negation?\r\n> I'm curious how you foresee negation checks being done. Having worked on proper handling of negated args recently, to me it feels like user code should have to jump through a hoop on the way to the non-negated value, if an arg supports negation, to encourage conscious negation logic. `common::Disabled` is currently only used in tests, this goes against this comment from #16545:\r\n\r\nIn most cases, it makes sense for negated bool arguments to be false, negated int arguments to be 0, and negated string/path/list arguments to be empty. With the `Setting` class and default types these conversions are made automatically, except that for backward compatibility when `.legacy = true` is set, negated strings are returned as \"0\". In cases where the default behavior doesn't make sense, there is support for `std::variant` in my #22978 branch, where custom negation behavior can be implemented by choosing a setting type like `std::variant<Disabled, T>`.\r\n\r\nFrom https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2265757710: \"`std::variant<Disabled, T>` might be useful for special cases or backwards compatibility to detect negated values and treat them differently from 0 and \"\". For example if you had a `-bwlimit` setting and wanted to treat `-nobwlimit` as \"use unlimited bandwidth\" and `-bwlimit=0` as \"use no bandwidth\" using a variant with a Disabled member allows that.\"\r\n\r\n> ### `Value(args).isNull()`\r\n> `DatadirSetting::Value(args).isNull()` vs `DatadirSettingPath::Get(args)` - feels weird to call the former `Value()` ... it's like `std::optional::value()` but in reverse. The fact that settings are backed by `UniValue`s help explain it, but still looks inelegant. I see this style comes from a [latter revision](https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2472025885) to trigger parsing and possible exceptions.\r\n\r\nI tend to agree but just to explain the thinking, the method is called `Value()` because it returns the JSON `SettingsValue` type, and the name makes some sense because it is returning the raw JSON value without interpreting it as a bool/int/string/path or other type. Using the `Value()` method should be pretty strongly discouraged, so it's not neccesarily a bad thing if usage looks inelegant. This PR is only using `Value()` in the scripted-diff commit to emulate `IsArgSet` and `IsArgNegated` behavior and avoid the parsing exceptions you mentioned which could change behavior of the current code and break compatibility.\r\n\r\nBut all the code using `Value()` would be better off not using it. This could be done by switching to better default values or by switching to `std::optional<>` or `std::variant<>` types. There should be basically be no reason to call `Value()` in new code and your PR #31212 and my #30529 will eliminate a bunch of uses of `Value()` here assuming they are merged before this PR.\r\n\r\n> Maybe a `DatadirSetting::IsArgSet(args)` wrapper could be added?\r\n\r\nI would want to avoid this just because I think the `IsArgSet` function is a footgun. I think it's preferable to use `Default<>` and `DefaultFn<>` to set static defaults whenever possible, and to use to use the `std::optional<>` when dynamic defaults are needed, and to never call `IsArgSet` in any case.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#pullrequestreview-2455631901",
      "submitted_at": "2024-11-22T23:37:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
    },
    {
      "event": "unlabeled",
      "id": 15405517456,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOWPYqQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405517456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T00:11:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15405517645,
      "node_id": "LE_lADOABII586drAjCzwAAAAOWPYtN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405517645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T00:11:27Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE1MTBhODQ0M2NjYWFkNmFlOWIzOGRlM2ZkNTRiMTBkYzYxYWEyNDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a510a8443ccaad6ae9b38de3fd54b10dc61aa243",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a510a8443ccaad6ae9b38de3fd54b10dc61aa243",
      "tree": {
        "sha": "5a88a8dd6093cc21c85ef8a35b94f1e9c7e6abdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a88a8dd6093cc21c85ef8a35b94f1e9c7e6abdb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84db084d77fe439825cd27140e28ee15bd788eba",
          "sha": "84db084d77fe439825cd27140e28ee15bd788eba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84db084d77fe439825cd27140e28ee15bd788eba"
        }
      ],
      "message": "refactor: Prepare AddHiddenArgs call for scripted-diff\n\nDrop hidden_args vector so all AddHiddenArgs calls can be replaced in upcoming\nscripted diff.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "sha": "a510a8443ccaad6ae9b38de3fd54b10dc61aa243"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1NzBkNDAwOTQzODMzYjA1YmYzMWIxYWJhZjBmOGY1NmQ2ZDlmZjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8570d400943833b05bf31b1abaf0f8f56d6d9ff6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8570d400943833b05bf31b1abaf0f8f56d6d9ff6",
      "tree": {
        "sha": "c51ef6e32ec74b297703ea60d3f4a3b262ebf0c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c51ef6e32ec74b297703ea60d3f4a3b262ebf0c1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a510a8443ccaad6ae9b38de3fd54b10dc61aa243",
          "sha": "a510a8443ccaad6ae9b38de3fd54b10dc61aa243",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a510a8443ccaad6ae9b38de3fd54b10dc61aa243"
        }
      ],
      "message": "lint: Fixes for _settings.h headers\n\nLinter changes to deal with _settings.h headers added in the next commit.\n\nIn circular-dependencies.py, prevent _settings.h headers from being included\ntransitively. Add a new check that makes it an error to include _settings.h\nfrom another header file, rather than a .cpp file. Use this fact to avoid\nerrors about .cpp files including _settings.h files being circularly dependent\nbased on each other.\n\nIn lint-format-strings.py, skip _settings.h because they contain lines like\nstrformat(fmt, ...) where fmt is a compile time constant that is checked at\ncompile time by the compiler and can't be checked by this linter.\n\nIn check-doc.py update test to look for Setting::Get and Setting::Register\ninstead of GetArg and AddArg.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-14T12:20:52Z"
      },
      "sha": "8570d400943833b05bf31b1abaf0f8f56d6d9ff6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRmN2IxOTI3YzI0NDA0N2QzNzU1YmM4ODU0YWUxY2VlNmYwNTM3ODg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f7b1927c244047d3755bc8854ae1cee6f053788",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4f7b1927c244047d3755bc8854ae1cee6f053788",
      "tree": {
        "sha": "25f3376a5e3bf1609409370fc9ea1ee13d98a968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25f3376a5e3bf1609409370fc9ea1ee13d98a968"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8570d400943833b05bf31b1abaf0f8f56d6d9ff6",
          "sha": "8570d400943833b05bf31b1abaf0f8f56d6d9ff6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8570d400943833b05bf31b1abaf0f8f56d6d9ff6"
        }
      ],
      "message": "contrib: Add script to replace AddArgs / GetArgs calls with Setting Register / Get calls",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-05T15:05:46Z"
      },
      "sha": "4f7b1927c244047d3755bc8854ae1cee6f053788"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRlMzNlZDRlYjA1NGUyMzA0MzZiNjhjNjgxZDk3OGQwZTdiZWEwYTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "tree": {
        "sha": "36ea2ab4ecadeeddd65d68443525cf82979e44c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36ea2ab4ecadeeddd65d68443525cf82979e44c0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f7b1927c244047d3755bc8854ae1cee6f053788",
          "sha": "4f7b1927c244047d3755bc8854ae1cee6f053788",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4f7b1927c244047d3755bc8854ae1cee6f053788"
        }
      ],
      "message": "scripted-diff: Replace AddArgs / GetArgs calls with Setting Register / Get calls\n\nThis commit is a pure refactoring and does not change behavior in any way.\n\n-BEGIN VERIFY SCRIPT-\npython contrib/devtools/reg-settings.py\ngit add -N src/bench/bench_bitcoin_settings.h src/bitcoin-tx_settings.h src/bitcoin-util_settings.h src/bitcoin-wallet_settings.h src/chainparamsbase_settings.h src/common/args_settings.h src/init/common_settings.h src/init_settings.h src/qt/bitcoin_settings.h src/test/argsman_tests_settings.h src/test/logging_tests_settings.h src/wallet/init_settings.h src/dummywallet_settings.h\ngit rm contrib/devtools/reg-settings.py\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-25T20:02:43Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-12T18:45:58Z"
      },
      "sha": "4e33ed4eb054e230436b68c681d978d0e7bea0a1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15426561313,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOXfqUh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15426561313",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b9628a08df0b64c24ee15fd15cdc3bb3b2c6d129",
      "created_at": "2024-11-25T20:48:20Z"
    },
    {
      "event": "labeled",
      "id": 15427132873,
      "node_id": "LE_lADOABII586drAjCzwAAAAOXh13J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15427132873",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T21:43:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2499096956,
      "node_id": "IC_kwDOABII586U9TF8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2499096956",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T21:43:40Z",
      "updated_at": "2024-11-25T21:43:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33503226227</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#issuecomment-2499096956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31260"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15457802622,
      "node_id": "HRFPE_lADOABII586drAjCzwAAAAOZW1l-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15457802622",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "created_at": "2024-11-27T21:30:57Z"
    },
    {
      "event": "unlabeled",
      "id": 15458169067,
      "node_id": "UNLE_lADOABII586drAjCzwAAAAOZYPDr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15458169067",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T22:28:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850502858",
      "pull_request_review_id": 2448864512,
      "id": 1850502858,
      "node_id": "PRRC_kwDOABII585uTG7K",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;",
      "path": "src/common/setting.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "f9910935c880c782c2b1d35acd38e1e18e6b4ad8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f9910935c880c782c2b1d35acd38e1e18e6b4ad8:\r\nWhat is `StringLiteral(std::nullptr_t) ->`? I take it some kind of template specialization but haven't come across regular braces and arrows being used in this way before.\r\n\r\nEdit:\r\nIt could be a constructor but I would expect `StringLiteral::StringLiteral` as it appears outside the type definition.\r\nIt kind of looks like a function prototype C++11-style return type, but there's no body.\r\nHappy to learn more modern rules for things, I'm a bit out of date.",
      "created_at": "2024-11-20T15:16:04Z",
      "updated_at": "2024-11-22T19:53:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850502858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850502858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850595520",
      "pull_request_review_id": 2448864512,
      "id": 1850595520,
      "node_id": "PRRC_kwDOABII585uTdjA",
      "diff_hunk": "@@ -271,9 +273,14 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n \n fs::path ArgsManager::GetPathArg(std::string arg, const fs::path& default_value) const\n {\n-    if (IsArgNegated(arg)) return fs::path{};\n-    std::string path_str = GetArg(arg, \"\");\n-    if (path_str.empty()) return default_value;\n+    return SettingToPath(GetSetting(arg)).value_or(default_value);\n+}\n+\n+std::optional<fs::path> SettingToPath(const common::SettingsValue& value)\n+{\n+    if (value.isFalse()) return fs::path{};",
      "path": "src/common/args.cpp",
      "position": 23,
      "original_position": 22,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is `isFalse()` equivalent to the former `IsArgNegated()` use?",
      "created_at": "2024-11-20T16:06:07Z",
      "updated_at": "2024-11-20T21:35:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850595520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850595520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 282,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850653892",
      "pull_request_review_id": 2448864512,
      "id": 1850653892,
      "node_id": "PRRC_kwDOABII585uTrzE",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static const std::string DEFAULT_PRIORITY{\"all\"};",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": null,
      "original_position": 17,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b51a156f388926175afdbc50c2d563db404e3b81:\r\nI've learned to accept `static constexpr` (+`inline`...) in headers, but these other non-`constexpr` statics seem like they end up being \"file-local\" static vars in *every compilation unit* that includes them. Seems off?",
      "created_at": "2024-11-20T16:39:57Z",
      "updated_at": "2024-11-20T21:35:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850653892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850653892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850670602",
      "pull_request_review_id": 2448864512,
      "id": 1850670602,
      "node_id": "PRRC_kwDOABII585uTv4K",
      "diff_hunk": "@@ -55,8 +73,19 @@ def module_name(path):\n             if match:\n                 include = match.group(1)\n                 included_module = module_name(include)\n-                if included_module is not None and included_module in deps and included_module != module:\n+                if included_module and included_module in deps and included_module != module:\n                     deps[module].add(included_module)\n+                included_by[include].add(arg)\n+\n+# Trigger an error if any module listed as being nontransitive if ever included",
      "path": "contrib/devtools/circular-dependencies.py",
      "position": null,
      "original_position": 60,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n# Trigger an error if any module listed as being nontransitive is ever included\r\n```",
      "created_at": "2024-11-20T16:50:28Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850670602",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850670602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850692509",
      "pull_request_review_id": 2448864512,
      "id": 1850692509,
      "node_id": "PRRC_kwDOABII585uT1Od",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 613,
      "original_position": 571,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How come we keep the default value in one of the cases here but not the other, both are using `.GetBoolArg` in the original?\r\n\r\nSeems to compile fine when switching `DnsseedSetting` from using `::HelpArgs<DEFAULT_DNSSEED>` to `::Default<DEFAULT_DNSSEED>` like the `ForcednsseedSetting`.",
      "created_at": "2024-11-20T17:03:15Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850692509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850692509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 912,
      "original_line": 912,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850701093",
      "pull_request_review_id": 2448864512,
      "id": 1850701093,
      "node_id": "PRRC_kwDOABII585uT3Ul",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <string>\n+#include <vector>\n+\n+using common::Disabled;\n+using common::Setting;\n+using common::SettingOptions;\n+using common::SettingsValue;\n+using common::Unset;\n+\n+template<typename T>\n+class SettingTest\n+{\n+public:\n+    using S = Setting<\"-s\", T, SettingOptions{.legacy = true}, \"\">;\n+\n+    SettingTest() {\n+        S::Register(m_args);\n+    }\n+\n+    SettingTest& AddArg(std::string arg) {\n+        m_argv.push_back(std::move(arg));\n+        return *this;\n+    }\n+\n+    SettingTest& Parse() {\n+        std::vector<const char*> argv;\n+        for (const auto& arg : m_argv) argv.push_back(arg.c_str());\n+        std::string error;\n+        bool result = m_args.ParseParameters(argv.size(), argv.data(), error);\n+        BOOST_CHECK_EQUAL(result, true);\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        return *this;\n+    }\n+\n+    T Get() {\n+        return S::Get(m_args);\n+    }\n+\n+    SettingsValue Value() {\n+        return S::Value(m_args);\n+    }\n+\n+private:\n+    ArgsManager m_args;\n+    std::vector<std::string> m_argv{\"unused\"};\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(setting_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(GetOptional)\n+{\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.Parse().Get(), std::nullopt);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Get(), 3);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Value().write(), \"\\\"3\\\"\");\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos=1\").Parse().Get(), 0);",
      "path": "src/test/setting_tests.cpp",
      "position": 65,
      "original_position": 64,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe add value-less negation?\r\n```C++\r\nBOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos\").Parse().Get(), 0);\r\n```",
      "created_at": "2024-11-20T17:09:17Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850701093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850701093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850906340",
      "pull_request_review_id": 2448864512,
      "id": 1850906340,
      "node_id": "PRRC_kwDOABII585uUpbk",
      "diff_hunk": "@@ -0,0 +1,593 @@\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    extern_args: list[str] = field(default_factory=list)\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    parens = 0\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            parens += 1\n+        elif c == \")\":\n+            if parens == 0: break\n+            parens -= 1\n+        elif c == \",\" and parens == 0:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2):])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len+1],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end():])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'(!*)\\b((?:\\w|\\.|->)+)(\\.|->)(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5):])\n+            obj_name = match.group(2)\n+            if match.group(3) == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len+1],\n+                obj_name=obj_name,\n+                arg_name=call_args[0].strip().strip('\"'),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            function_name = match.group(4)\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(call.arg_name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flags.add(flag.strip())\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        setting_name = ''.join(word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            key = add.call.context, add.call.arg_name\n+            add_setting_name = setting_name\n+            counter[key] += 1\n+            if counter[key] > 1: add_setting_name += str(counter[key])\n+\n+            for get in setting.gets:\n+                if not add.call.context == get.call.context and not add.call.context == \"main\":\n+                    continue\n+                if get.add is None:\n+                    get.add = add\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults and len(setting_type.defaults) == 1:\n+                    default_value = next(iter(setting_type.defaults))\n+                    assert default_value is not None\n+                    if default_value is not True:\n+                        for pattern, options in ARG_PATTERNS.items():\n+                            if pattern in default_value and options.extern:\n+                                default_value = False\n+                                break\n+                            if pattern == default_value and options.namespace:\n+                                default_value = f\"{options.namespace}::{default_value}\"\n+                    setting_type.default_value = default_value\n+    return settings\n+\n+@dataclass\n+class SettingsHeader:\n+    includes: set[str] = field(default_factory=set)\n+    defs: list[str] = field(default_factory=list)\n+\n+def generate_setting_headers(settings):\n+    headers_content = collections.defaultdict(SettingsHeader)\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header = headers_content[add.include_path]\n+            help_runtime = False\n+            extern = []\n+            for pattern, options in ARG_PATTERNS.items():\n+                if pattern in add.help_text or any(pattern in a for a in add.help_args):\n+                    if options.include_path:\n+                        header.includes.add(options.include_path)\n+                    help_runtime = help_runtime or options.runtime\n+                    if options.extern:\n+                        extern.append(pattern)\n+                        add.extern_args.append(pattern)\n+\n+            for data_type, setting_type in sorted(add.data_types.items(), key=lambda p: p[0]):\n+                ctype = (\"std::vector<std::string>\" if data_type == DataType.STRING_LIST else\n+                         \"std::string\" if data_type == DataType.STRING else\n+                         \"fs::path\" if data_type == DataType.PATH else\n+                         \"int64_t\" if data_type == DataType.INT else\n+                         \"bool\" if data_type == DataType.BOOL else\n+                         \"common::Disabled\" if data_type == DataType.DISABLED else\n+                         \"common::Unset\" if data_type == DataType.UNSET else\n+                         None)\n+                if None in setting_type.defaults:\n+                    ctype = f\"std::optional<{ctype}>\"\n+                help_str = \"\"\n+                if setting_type.primary:\n+                    help_str = f\",\\n    {add.help_text}\"\n+                extra = \"\"\n+                help_args = ', '.join(a for a in add.help_args)\n+                default_arg = (setting_type.default_value if setting_type.default_value is not True else\n+                               '\"\"' if data_type == DataType.STRING else\n+                               \"0\" if data_type == DataType.INT else\n+                               \"false\" if data_type == DataType.BOOL else\n+                               f\"{ctype}{{}}\")\n+                if setting_type.default_value is True and (not help_args or help_args != default_arg):\n+                    default_arg = False\n+                if default_arg:\n+                    default_runtime = False\n+                    for pattern, options in ARG_PATTERNS.items():\n+                        if setting_type.default_value is not True and pattern in setting_type.default_value:\n+                            if options.include_path:\n+                                header.includes.add(options.include_path)\n+                            default_runtime = default_runtime or options.runtime\n+                            assert not options.extern\n+                    if default_runtime:\n+                        extra += f\"\\n    ::DefaultFn<[] {{ return {default_arg}; }}>\"\n+                    else:\n+                        extra += f\"\\n    ::Default<{default_arg}>\"\n+                if ((help_args and setting_type.primary) or default_arg) and help_args != default_arg:\n+                    if help_runtime or extern:\n+                        lambda_args = \", \".join(f\"const auto& {a}\" for a in [\"fmt\"] + extern)\n+                        extra += f\"\\n    ::HelpFn<[]({lambda_args}) {{ return strprintf(fmt, {help_args}); }}>\"\n+                    else:\n+                        extra += f\"\\n    ::HelpArgs<{help_args}>\"\n+                if add.category != \"OptionsCategory::OPTIONS\" and setting_type.primary:\n+                        extra += f\"\\n    ::Category<{add.category}>\"\n+                options = flags_to_options(add.flags)\n+                # Writing common::SettingOptions{...} instead of just {...}\n+                # should be unneccesary because latter is valid initialization\n+                # syntax in C++20, but unfortunately it is only supported as of\n+                # clang 18. clang 17 and early versions do not seem to allow\n+                # using designated initializers to initialize template\n+                # parameters.\n+                options_str = f\"common::SettingOptions{{{', '.join(options)}}}\" if options else \"\"\n+                setting_definition = f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\"\n+                header.defs.append(setting_definition)\n+\n+    for header_file_path, header in headers_content.items():\n+        if not os.path.exists(header_file_path):\n+            guard = \"BITCOIN_\" + re.sub(\"^src/\", \"\", header_file_path).replace('/', '_').replace('.', '_').replace('-', '_').upper()\n+            namespace = get_file_namespace(header_file_path)\n+            namespace_str = \"\"\n+            if namespace:\n+                namespace_str = f\"namespace {namespace} {{\\n}} // namespace {namespace}\\n\"\n+            with open(header_file_path, 'w') as f:\n+                f.write(f\"#ifndef {guard}\\n#define {guard}\\n{namespace_str}\\n#endif // {guard}\\n\")\n+        add_to_file(\n+            header_file_path,\n+            [f\"#include <{include}>\\n\" for include in header.includes | {\"common/setting.h\"}],\n+            [\"#include <string>\\n\", \"#include <vector>\\n\"],\n+            header.defs)\n+\n+def add_to_file(file_path, local_includes, system_includes=(), defs=()):\n+    with open(file_path, 'r') as f:\n+        lines = f.readlines()\n+    # Identify the include blocks and their positions\n+    local_include_start, local_include_end = None, None\n+    system_include_start, system_include_end = None, None\n+    self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\n+    first = last = self = None\n+    for i, line in enumerate(lines):\n+        if line.startswith('#include') and \"IWYU pragma: keep\" not in line and not line.startswith(self_include):\n+            if local_include_start is None:\n+                local_include_start = i\n+            elif system_include_start is None and local_include_end is not None:\n+                system_include_start = i\n+        elif system_include_start is not None and system_include_end is None:\n+            system_include_end = i\n+        elif local_include_start is not None and local_include_end is None:\n+            local_include_end = i\n+        elif line.startswith('#include'):\n+            self = True\n+        if first is None and not line.startswith(\"//\") and not line.startswith(\"#ifndef\") and not line.startswith(\"#define\") and line != \"\\n\":\n+            first = i\n+        if line != \"\\n\" and not line.startswith(\"#endif\") and not line.startswith(\"} // namespace \"):\n+            last = i + 1\n+\n+    if system_include_start is None and system_include_end is None and not self:\n+        system_include_start, system_include_end = local_include_start, local_include_end\n+        local_include_end = system_include_start\n+\n+    lines[last:last] = defs\n+\n+    if system_includes:\n+        head = []\n+        tail = []\n+        if system_include_start is None and system_include_end is None:\n+            system_include_start = system_include_end = min(first, last)\n+            head += [\"\\n\"]\n+            if first < last + 1: tail += [\"\\n\"]\n+        elif local_include_end == system_include_start:\n+            head += [\"\\n\"]\n+        existing_includes = lines[system_include_start:system_include_end]\n+        lines[system_include_start:system_include_end] = head + sorted(set(system_includes) | set(existing_includes)) + tail\n+\n+    if local_includes:\n+        head = []\n+        if local_include_start is None and local_include_end is None:\n+            local_include_start = local_include_end = min(first, last)\n+            if lines[local_include_start-1:local_include_start+1] != [\"\\n\", \"\\n\"]: head = [\"\\n\"]\n+        existing_includes = lines[local_include_start:local_include_end]\n+        lines[local_include_start:local_include_end] = head + sorted(set(local_includes) | set(existing_includes))\n+\n+    with open(file_path, 'w') as f:\n+        f.writelines(lines)\n+\n+def modify_source_files(settings):\n+    includes_to_add = {}\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header_file_path = add.include_path\n+            relative_include = os.path.relpath(header_file_path, start=\"src/\").replace(os.sep, '/')\n+            file_path = add.call.file\n+            if file_path not in includes_to_add:\n+                includes_to_add[file_path] = set()\n+            includes_to_add[file_path].add(f\"#include <{relative_include}>\\n\")\n+            with open(file_path, 'r') as f:\n+                content = f.read()\n+            register_args = \", \".join([add.call.obj_name] + add.extern_args)\n+            default_data_type = min(add.data_types.keys())\n+            new_content = content.replace(\n+                add.call.call_text,\n+                f\"{add.data_types[default_data_type].name}::Register({register_args})\"\n+            )\n+            with open(file_path, 'w') as f:\n+                f.write(new_content)\n+    # map file path -> list (old, new) replacement tuples made so far\n+    replacements = collections.defaultdict(list)\n+    for setting in settings.values():\n+        for get in setting.gets:\n+            # FIXME handle these by generating synthetic AddArg calls without corresponding Register()\n+            if get.add is None:\n+                #import pprint\n+                #print(\"*\"*80)\n+                #print(f\"Bad get call with no corresponding type\")\n+                #pprint.pprint(get)",
      "path": "contrib/devtools/reg-settings.py",
      "position": null,
      "original_position": 446,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "f33c0b1969ee4c1c36475c876f46d9085feee134",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f33c0b1969ee4c1c36475c876f46d9085feee134:\r\nWIP?",
      "created_at": "2024-11-20T19:59:56Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850906340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850906340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 443,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850981914",
      "pull_request_review_id": 2448864512,
      "id": 1850981914,
      "node_id": "PRRC_kwDOABII585uU74a",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;\n+\n+    static void Register(auto& manager, auto&&... register_options)\n+    {\n+        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\n+    }\n+\n+    static T Get(auto& manager)\n+    {\n+        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\n+    }\n+\n+    static value_t Get(auto& manager, const value_t& default_value)\n+    {\n+        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\n+    }\n+\n+    static SettingsValue Value(auto& manager)",
      "path": "src/common/setting.h",
      "position": null,
      "original_position": 66,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f9910935c880c782c2b1d35acd38e1e18e6b4ad8:\r\nBetter to document type? This style of using `auto` as function-arg-type when not necessary feels like the opposite of C++ concepts, potentially leading to downstream compile errors. But interested to hear reasoning behind it.\r\n```suggestion\r\n    static void Register(ArgsManager& manager, auto&&... register_options)\r\n    {\r\n        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\r\n    }\r\n\r\n    static T Get(const ArgsManager& manager)\r\n    {\r\n        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\r\n    }\r\n\r\n    static value_t Get(const ArgsManager& manager, const value_t& default_value)\r\n    {\r\n        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\r\n    }\r\n\r\n    static SettingsValue Value(const ArgsManager& manager)\r\n```",
      "created_at": "2024-11-20T21:07:42Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850981914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850981914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850983219",
      "pull_request_review_id": 2448864512,
      "id": 1850983219,
      "node_id": "PRRC_kwDOABII585uU8Mz",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": null,
      "original_position": 147,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Document types and remove unused `T`?\r\n```suggestion\r\ntemplate<SettingOptions options, auto help>\r\nvoid SettingRegister(ArgsManager& manager, auto summary, OptionsCategory category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\r\n```",
      "created_at": "2024-11-20T21:08:51Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850983219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850983219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850996627",
      "pull_request_review_id": 2448864512,
      "id": 1850996627,
      "node_id": "PRRC_kwDOABII585uU_eT",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(auto& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": null,
      "original_position": 171,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nT SettingGet(const ArgsManager& manager, std::string_view summary, auto default_fn, auto get_fn)\r\n```",
      "created_at": "2024-11-20T21:21:41Z",
      "updated_at": "2024-11-20T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850996627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850996627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854656393",
      "pull_request_review_id": 2455631901,
      "id": 1854656393,
      "node_id": "PRRC_kwDOABII585ui8-J",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;",
      "path": "src/common/setting.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "f9910935c880c782c2b1d35acd38e1e18e6b4ad8",
      "in_reply_to_id": 1850502858,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850502858\r\n\r\n> What is `StringLiteral(std::nullptr_t) ->`?\r\n\r\nThis is a template deduction guide used to be able to pass nullptr_t as a string literal (used for a few settings that are only retrieved and never registered). I could explain more but chatgpt is much more great at this type of question: https://chatgpt.com/share/6740f058-e900-800a-afdf-7b56760db068",
      "created_at": "2024-11-22T21:02:41Z",
      "updated_at": "2024-11-22T23:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854656393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854656393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854659942",
      "pull_request_review_id": 2455631901,
      "id": 1854659942,
      "node_id": "PRRC_kwDOABII585ui91m",
      "diff_hunk": "@@ -271,9 +273,14 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n \n fs::path ArgsManager::GetPathArg(std::string arg, const fs::path& default_value) const\n {\n-    if (IsArgNegated(arg)) return fs::path{};\n-    std::string path_str = GetArg(arg, \"\");\n-    if (path_str.empty()) return default_value;\n+    return SettingToPath(GetSetting(arg)).value_or(default_value);\n+}\n+\n+std::optional<fs::path> SettingToPath(const common::SettingsValue& value)\n+{\n+    if (value.isFalse()) return fs::path{};",
      "path": "src/common/args.cpp",
      "position": 23,
      "original_position": 22,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850595520,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850595520\r\n\r\n> Is `isFalse()` equivalent to the former `IsArgNegated()` use?\r\n\r\nYes exactly,, if you look at the definition of IsArgNegated() it is just returning `isFalse()`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/common/args.cpp#L454\r\n\r\nThis works because of the translation of negated values to `false` in `InterpretValue`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/common/args.cpp#L121\r\n",
      "created_at": "2024-11-22T21:06:36Z",
      "updated_at": "2024-11-22T23:37:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854659942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854659942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 282,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854744728",
      "pull_request_review_id": 2455631901,
      "id": 1854744728,
      "node_id": "PRRC_kwDOABII585ujSiY",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+#define BITCOIN_BENCH_BENCH_BITCOIN_SETTINGS_H\n+\n+#include <common/setting.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+static const char* DEFAULT_BENCH_FILTER = \".*\";\n+static constexpr int64_t DEFAULT_MIN_TIME_MS{10};\n+/** Priority level default value, run \"all\" priority levels */\n+static const std::string DEFAULT_PRIORITY{\"all\"};",
      "path": "src/bench/bench_bitcoin_settings.h",
      "position": null,
      "original_position": 17,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850653892,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850653892\r\n\r\n> In [b51a156](https://github.com/bitcoin/bitcoin/commit/b51a156f388926175afdbc50c2d563db404e3b81): I've learned to accept `static constexpr` (+`inline`...) in headers, but these other non-`constexpr` statics seem like they end up being \"file-local\" static vars in _every compilation unit_ that includes them. Seems off?\r\n\r\nGood catch. I wanted to avoid changing these to keep the commit move-only as much as possible but it doesn't make sense to have std::strings that could do allocations duplicated across translation units, so they are switched to constexpr string literal types now. I think the other static const values should not be a problem since they should just be stripped out if not referenced and not create any symbols, so I did leave those, but could change if preferred.",
      "created_at": "2024-11-22T21:36:57Z",
      "updated_at": "2024-11-22T23:39:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854744728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854744728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854755963",
      "pull_request_review_id": 2455631901,
      "id": 1854755963,
      "node_id": "PRRC_kwDOABII585ujVR7",
      "diff_hunk": "@@ -55,8 +73,19 @@ def module_name(path):\n             if match:\n                 include = match.group(1)\n                 included_module = module_name(include)\n-                if included_module is not None and included_module in deps and included_module != module:\n+                if included_module and included_module in deps and included_module != module:\n                     deps[module].add(included_module)\n+                included_by[include].add(arg)\n+\n+# Trigger an error if any module listed as being nontransitive if ever included",
      "path": "contrib/devtools/circular-dependencies.py",
      "position": null,
      "original_position": 60,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850670602,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850670602\r\n\r\nThanks, fixed comment",
      "created_at": "2024-11-22T21:41:13Z",
      "updated_at": "2024-11-22T23:39:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854755963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854755963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854758000",
      "pull_request_review_id": 2455631901,
      "id": 1854758000,
      "node_id": "PRRC_kwDOABII585ujVxw",
      "diff_hunk": "@@ -926,40 +886,40 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // Signal NODE_P2P_V2 if BIP324 v2 transport is enabled.\n-    if (args.GetBoolArg(\"-v2transport\", DEFAULT_V2_TRANSPORT)) {\n+    if (V2transportSetting::Get(args)) {\n         g_local_services = ServiceFlags(g_local_services | NODE_P2P_V2);\n     }\n \n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n-    if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+    if (PeerblockfiltersSetting::Get(args)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n             return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n         }\n \n         g_local_services = ServiceFlags(g_local_services | NODE_COMPACT_FILTERS);\n     }\n \n-    if (args.GetIntArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n+    if (PruneSetting::Get(args, 0)) {\n+        if (TxindexSetting::Get(args))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-reindex-chainstate\", false)) {\n+        if (ReindexChainstateSetting::Get(args)) {\n             return InitError(_(\"Prune mode is incompatible with -reindex-chainstate. Use full -reindex instead.\"));\n         }\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false\n-    if (args.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED) && !args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)){\n+    if (ForcednsseedSetting::Get(args) && !DnsseedSetting::Get(args, DEFAULT_DNSSEED)){",
      "path": "src/init.cpp",
      "position": 613,
      "original_position": 571,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850692509,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850692509\r\n\r\n> How come we keep the default value in one of the cases here but not the other, both are using .GetBoolArg in the original?\r\n\r\nThe scripted diff will only assign default values to Setting types if the same default value is used every place a setting is retrieved.\r\n\r\nIn this case the `-dnsseed` setting is retrieved 5 different places, and 4 of the places look like `args.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED)` where `DEFAULT_DNSSEED` is `true` and the return value is `bool` but one place looks like [`args.GetBoolArg(\"-dnsseed\")`](https://github.com/bitcoin/bitcoin/blob/2638fdb4f934be96b7c798dbac38ea5ab8a6374a/src/init.cpp#L1498) where the return value is `std::optional<bool>` and the default value is `std::nullopt`. \r\n\r\nLooking at the surrounding code, it seems like this inconsistency is intentional. The code treats an explicitly set `-dnsseed` differently than the default value and triggers an error if it is specified along with with `-onlynet`. Conceptually it seems like the `-dnseed` setting really has three values: \"yes\" \"no\" and \"always\" and the default value is \"yes\" but an explicitly set `-dnsseed` value means \"always\" and triggers an error if it cannot be satisfied.\r\n\r\nA cleaner way to implement support for `-dnsseed` would probably be to define an `Options` struct and interpret `-dnseed` and related settings one place instead of 5 different places. But for the purposes of this PR, no behavior is changing and new code basically looks the same as the old code and shouldn't be much more or much less confusing.",
      "created_at": "2024-11-22T21:43:45Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854758000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854758000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 912,
      "original_line": 912,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854796297",
      "pull_request_review_id": 2455631901,
      "id": 1854796297,
      "node_id": "PRRC_kwDOABII585ujfIJ",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/args.h>\n+#include <common/setting.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <string>\n+#include <vector>\n+\n+using common::Disabled;\n+using common::Setting;\n+using common::SettingOptions;\n+using common::SettingsValue;\n+using common::Unset;\n+\n+template<typename T>\n+class SettingTest\n+{\n+public:\n+    using S = Setting<\"-s\", T, SettingOptions{.legacy = true}, \"\">;\n+\n+    SettingTest() {\n+        S::Register(m_args);\n+    }\n+\n+    SettingTest& AddArg(std::string arg) {\n+        m_argv.push_back(std::move(arg));\n+        return *this;\n+    }\n+\n+    SettingTest& Parse() {\n+        std::vector<const char*> argv;\n+        for (const auto& arg : m_argv) argv.push_back(arg.c_str());\n+        std::string error;\n+        bool result = m_args.ParseParameters(argv.size(), argv.data(), error);\n+        BOOST_CHECK_EQUAL(result, true);\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        return *this;\n+    }\n+\n+    T Get() {\n+        return S::Get(m_args);\n+    }\n+\n+    SettingsValue Value() {\n+        return S::Value(m_args);\n+    }\n+\n+private:\n+    ArgsManager m_args;\n+    std::vector<std::string> m_argv{\"unused\"};\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(setting_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(GetOptional)\n+{\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.Parse().Get(), std::nullopt);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Get(), 3);\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-s=3\").Parse().Value().write(), \"\\\"3\\\"\");\n+    BOOST_CHECK_EQUAL(SettingTest<std::optional<int>>{}.AddArg(\"-nos=1\").Parse().Get(), 0);",
      "path": "src/test/setting_tests.cpp",
      "position": 65,
      "original_position": 64,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850701093,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850701093\r\n\r\n> Maybe add value-less negation?\r\n\r\nThanks! Added. The test is currently very minimal, and I hope to do more with it, especially after this PR when I would like to add support for runtime settings validation.",
      "created_at": "2024-11-22T22:22:56Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854796297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854796297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854804622",
      "pull_request_review_id": 2455631901,
      "id": 1854804622,
      "node_id": "PRRC_kwDOABII585ujhKO",
      "diff_hunk": "@@ -0,0 +1,593 @@\n+import collections\n+import enum\n+import os\n+import re\n+import subprocess\n+from dataclasses import dataclass, field\n+\n+@dataclass\n+class Call:\n+    file: str\n+    position: int\n+    call_text: str\n+    obj_name: str\n+    arg_name: str\n+    context: str\n+    namespace: str\n+\n+class DataType(int, enum.Enum):\n+    STRING_LIST = 1\n+    STRING = 2\n+    PATH = 3\n+    INT = 4\n+    BOOL = 5\n+    DISABLED = 6\n+    UNSET = 7\n+\n+# What default value is returned by a particular GetArg call when the setting is\n+# unset. Either a string containing a c++ expression, or None to indicate that\n+# call returns std::nullopt, or True to indicate it returns whatever the\n+# default-constructed value for the setting type is (e.g. the empty vector, or\n+# string, or path) or False to indicate it doesn't specify any default.\n+DefaultValue = str | bool | None\n+\n+@dataclass\n+class SettingType:\n+    name: str\n+    primary: bool = False\n+    defaults: set[str | None] = field(default_factory=set)\n+    default_value: DefaultValue = False\n+\n+@dataclass\n+class AddArg:\n+    call: Call\n+    summary: str\n+    help_text: str\n+    help_args: tuple[str, ...]\n+    flags: str\n+    category: str\n+    include_path: str | None = None\n+    data_types: dict[DataType, SettingType] = field(default_factory=dict)\n+    extern_args: list[str] = field(default_factory=list)\n+\n+@dataclass\n+class GetArg:\n+    call: Call\n+    function_name: str\n+    data_type: DataType\n+    default_value: DefaultValue\n+    nots: int\n+    add: AddArg | None = None\n+\n+@dataclass\n+class Setting:\n+    arg_name: str\n+    adds: list[AddArg] = field(default_factory=list)\n+    gets: list[GetArg] = field(default_factory=list)\n+\n+def get_files_with_args(src_dir):\n+    # Run git grep to find files containing AddArg/GetArg/GetIntArg/GetBoolArg/GetArgs\n+    result = subprocess.run(\n+        [\n+            \"git\", \"grep\", \"-l\", \"AddArg(\\|GetArg(\\|GetPathArg(\\|GetIntArg(\\|GetBoolArg(\\|GetArgs(\\|IsArgSet(\\|IsArgNegated(\", \"--\", src_dir\n+        ],\n+        capture_output=True,\n+        text=True\n+    )\n+    return result.stdout.splitlines()\n+\n+def parse_function_args(arg_str):\n+    args = []\n+    parens = 0\n+    quot = False\n+    for pos, c in enumerate(arg_str):\n+        if c == '\"':\n+            quot = not quot\n+        if quot:\n+            pass\n+        elif c == \"(\":\n+            parens += 1\n+        elif c == \")\":\n+            if parens == 0: break\n+            parens -= 1\n+        elif c == \",\" and parens == 0:\n+            args.append(\"\")\n+            continue\n+        if not args: args.append(\"\")\n+        args[-1] += c\n+    return pos, args\n+\n+def parse_calls(file_path):\n+    adds = []\n+    gets = []\n+    context = get_file_context(file_path)\n+    namespace = get_file_namespace(file_path)\n+    with open(file_path, 'r') as f:\n+        content = f.read()\n+        for match in re.finditer(r'\\b(\\w+)\\.AddArg\\((\")', content):\n+            call_len, (summary, help_text, flags, category) = parse_function_args(content[match.start(2):])\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(2)+call_len+1],\n+                obj_name=match.group(1),\n+                arg_name=re.match(r'\"([^\"=(]+).*', summary).group(1),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            help_text=help_text.strip()\n+            help_args = []\n+            if m := re.match(r\"strprintf\\(\", help_text):\n+                _, help_args = parse_function_args(help_text[m.end():])\n+                help_text = help_args[0].strip()\n+                help_args = [a.strip() for a in help_args[1:]]\n+            adds.append(AddArg(\n+                call=call,\n+                summary=summary.strip(),\n+                help_text=help_text,\n+                help_args=tuple(help_args),\n+                flags=flags.strip(),\n+                category=category.strip(),\n+            ))\n+        for match in re.finditer(r'(!*)\\b((?:\\w|\\.|->)+)(\\.|->)(GetArg|GetPathArg|GetIntArg|GetBoolArg|GetArgs|IsArgSet|IsArgNegated)\\((.)', content):\n+            call_len, call_args = parse_function_args(content[match.start(5):])\n+            obj_name = match.group(2)\n+            if match.group(3) == \"->\":\n+                obj_name = f\"*{obj_name}\"\n+            call = Call(\n+                file=file_path,\n+                position=match.start(),\n+                call_text=content[match.start():match.start(5)+call_len+1],\n+                obj_name=obj_name,\n+                arg_name=call_args[0].strip().strip('\"'),\n+                context=context,\n+                namespace=namespace,\n+            )\n+            function_name = match.group(4)\n+            data_type = (DataType.STRING_LIST if function_name == \"GetArgs\" else\n+                         DataType.STRING if function_name == \"GetArg\" else\n+                         DataType.PATH if function_name == \"GetPathArg\" else\n+                         DataType.INT if function_name == \"GetIntArg\" else\n+                         DataType.BOOL if function_name == \"GetBoolArg\" else\n+                         DataType.DISABLED if function_name == \"IsArgNegated\" else\n+                         DataType.UNSET if function_name == \"IsArgSet\" else\n+                         None)\n+            default_arg = call_args[1].strip() if len(call_args) > 1 else None\n+            default_value = (\n+                True if data_type == DataType.STRING and default_arg == '\"\"' else\n+                True if data_type == DataType.INT and default_arg == \"0\" else\n+                True if data_type == DataType.BOOL and default_arg == \"false\" else\n+                default_arg if default_arg is not None else\n+                None if data_type in (DataType.STRING, DataType.INT, DataType.BOOL) else\n+                True if data_type in (DataType.PATH, DataType.STRING_LIST) else\n+                False)\n+            gets.append(GetArg(call=call, function_name=function_name, data_type=data_type, default_value=default_value, nots=len(match.group(1))))\n+    return adds, gets\n+\n+def make_setting(settings, call):\n+    name = call.arg_name.lstrip(\"-\")\n+    if name in settings:\n+        setting = settings[name]\n+    else:\n+        setting = settings[name] = Setting(call.arg_name)\n+    return setting\n+\n+def flags_to_options(flag_str):\n+    flags = set()\n+    for flag in flag_str.split(\"|\"):\n+        flags.add(flag.strip())\n+\n+    def pop(flag):\n+        if flag in flags:\n+            flags.remove(flag)\n+            return True\n+        return False\n+\n+    options = [\".legacy = true\"]\n+    if pop(\"ArgsManager::DEBUG_ONLY\"):\n+        options.append(\".debug_only = true\")\n+    if pop(\"ArgsManager::NETWORK_ONLY\"):\n+        options.append(\".network_only = true\")\n+    if pop(\"ArgsManager::SENSITIVE\"):\n+        options.append(\".sensitive = true\")\n+    if pop(\"ArgsManager::DISALLOW_NEGATION\"):\n+      options.append(\".disallow_negation = true\")\n+    if pop(\"ArgsManager::DISALLOW_ELISION\"):\n+        options.append(\".disallow_elision = true\")\n+    pop(\"ArgsManager::ALLOW_ANY\")\n+    if flags:\n+        raise Exception(\"Unknown flags {flags!r}\")\n+    return options\n+\n+def collect_argument_information(src_dir):\n+    files = get_files_with_args(src_dir)\n+    settings: Dict[str, Setting] = {}\n+    for file in files:\n+        adds, gets = parse_calls(file)\n+        for add in adds:\n+            setting = make_setting(settings, add.call)\n+            setting.adds.append(add)\n+        for get in gets:\n+            setting = make_setting(settings, get.call)\n+            setting.gets.append(get)\n+\n+    for arg_name, setting in settings.items():\n+        setting_name = ''.join(word.capitalize() for word in arg_name.split('-')) + \"Setting\"\n+        counter = collections.Counter()\n+\n+        for add in setting.adds:\n+            add.include_path = add.call.file.replace(\".cpp\", \"_settings.h\")\n+            key = add.call.context, add.call.arg_name\n+            add_setting_name = setting_name\n+            counter[key] += 1\n+            if counter[key] > 1: add_setting_name += str(counter[key])\n+\n+            for get in setting.gets:\n+                if not add.call.context == get.call.context and not add.call.context == \"main\":\n+                    continue\n+                if get.add is None:\n+                    get.add = add\n+                if get.data_type in add.data_types:\n+                    setting_type = add.data_types[get.data_type]\n+                else:\n+                    setting_type = add.data_types[get.data_type] = SettingType(add_setting_name)\n+                if get.default_value is not False:\n+                    setting_type.defaults.add(get.default_value)\n+\n+            # Clean up data types. Add if empty, remove if redundant, set primary\n+            if len(add.data_types) == 0:\n+                add.data_types[DataType.UNSET] = SettingType(add_setting_name)\n+            add.data_types[min(add.data_types.keys())].primary = True\n+            for data_type in (DataType.DISABLED, DataType.UNSET):\n+                if data_type in add.data_types and not add.data_types[data_type].primary:\n+                    del add.data_types[data_type]\n+\n+            for data_type, setting_type in add.data_types.items():\n+                # If same setting is retrieved as different types, add suffixes to distinguish setting names\n+                if not setting_type.primary:\n+                    setting_type.name += (\n+                        \"List\" if data_type == DataType.STRING_LIST else\n+                        \"Str\" if data_type == DataType.STRING else\n+                        \"Path\" if data_type == DataType.PATH else\n+                        \"Int\" if data_type == DataType.INT else\n+                        \"Bool\" if data_type == DataType.BOOL else\n+                        \"Disabled\" if data_type == DataType.DISABLED else\n+                        \"Unset\" if data_type == DataType.UNSET else\n+                        None\n+                    )\n+                # Only set ::Default<> if there are no GetArg calls returning\n+                # std::optional and there is a single consistent default.\n+                if None not in setting_type.defaults and len(setting_type.defaults) == 1:\n+                    default_value = next(iter(setting_type.defaults))\n+                    assert default_value is not None\n+                    if default_value is not True:\n+                        for pattern, options in ARG_PATTERNS.items():\n+                            if pattern in default_value and options.extern:\n+                                default_value = False\n+                                break\n+                            if pattern == default_value and options.namespace:\n+                                default_value = f\"{options.namespace}::{default_value}\"\n+                    setting_type.default_value = default_value\n+    return settings\n+\n+@dataclass\n+class SettingsHeader:\n+    includes: set[str] = field(default_factory=set)\n+    defs: list[str] = field(default_factory=list)\n+\n+def generate_setting_headers(settings):\n+    headers_content = collections.defaultdict(SettingsHeader)\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header = headers_content[add.include_path]\n+            help_runtime = False\n+            extern = []\n+            for pattern, options in ARG_PATTERNS.items():\n+                if pattern in add.help_text or any(pattern in a for a in add.help_args):\n+                    if options.include_path:\n+                        header.includes.add(options.include_path)\n+                    help_runtime = help_runtime or options.runtime\n+                    if options.extern:\n+                        extern.append(pattern)\n+                        add.extern_args.append(pattern)\n+\n+            for data_type, setting_type in sorted(add.data_types.items(), key=lambda p: p[0]):\n+                ctype = (\"std::vector<std::string>\" if data_type == DataType.STRING_LIST else\n+                         \"std::string\" if data_type == DataType.STRING else\n+                         \"fs::path\" if data_type == DataType.PATH else\n+                         \"int64_t\" if data_type == DataType.INT else\n+                         \"bool\" if data_type == DataType.BOOL else\n+                         \"common::Disabled\" if data_type == DataType.DISABLED else\n+                         \"common::Unset\" if data_type == DataType.UNSET else\n+                         None)\n+                if None in setting_type.defaults:\n+                    ctype = f\"std::optional<{ctype}>\"\n+                help_str = \"\"\n+                if setting_type.primary:\n+                    help_str = f\",\\n    {add.help_text}\"\n+                extra = \"\"\n+                help_args = ', '.join(a for a in add.help_args)\n+                default_arg = (setting_type.default_value if setting_type.default_value is not True else\n+                               '\"\"' if data_type == DataType.STRING else\n+                               \"0\" if data_type == DataType.INT else\n+                               \"false\" if data_type == DataType.BOOL else\n+                               f\"{ctype}{{}}\")\n+                if setting_type.default_value is True and (not help_args or help_args != default_arg):\n+                    default_arg = False\n+                if default_arg:\n+                    default_runtime = False\n+                    for pattern, options in ARG_PATTERNS.items():\n+                        if setting_type.default_value is not True and pattern in setting_type.default_value:\n+                            if options.include_path:\n+                                header.includes.add(options.include_path)\n+                            default_runtime = default_runtime or options.runtime\n+                            assert not options.extern\n+                    if default_runtime:\n+                        extra += f\"\\n    ::DefaultFn<[] {{ return {default_arg}; }}>\"\n+                    else:\n+                        extra += f\"\\n    ::Default<{default_arg}>\"\n+                if ((help_args and setting_type.primary) or default_arg) and help_args != default_arg:\n+                    if help_runtime or extern:\n+                        lambda_args = \", \".join(f\"const auto& {a}\" for a in [\"fmt\"] + extern)\n+                        extra += f\"\\n    ::HelpFn<[]({lambda_args}) {{ return strprintf(fmt, {help_args}); }}>\"\n+                    else:\n+                        extra += f\"\\n    ::HelpArgs<{help_args}>\"\n+                if add.category != \"OptionsCategory::OPTIONS\" and setting_type.primary:\n+                        extra += f\"\\n    ::Category<{add.category}>\"\n+                options = flags_to_options(add.flags)\n+                # Writing common::SettingOptions{...} instead of just {...}\n+                # should be unneccesary because latter is valid initialization\n+                # syntax in C++20, but unfortunately it is only supported as of\n+                # clang 18. clang 17 and early versions do not seem to allow\n+                # using designated initializers to initialize template\n+                # parameters.\n+                options_str = f\"common::SettingOptions{{{', '.join(options)}}}\" if options else \"\"\n+                setting_definition = f\"\\nusing {setting_type.name} = common::Setting<\\n    {add.summary}, {ctype}, {options_str}{help_str}>{extra};\\n\"\n+                header.defs.append(setting_definition)\n+\n+    for header_file_path, header in headers_content.items():\n+        if not os.path.exists(header_file_path):\n+            guard = \"BITCOIN_\" + re.sub(\"^src/\", \"\", header_file_path).replace('/', '_').replace('.', '_').replace('-', '_').upper()\n+            namespace = get_file_namespace(header_file_path)\n+            namespace_str = \"\"\n+            if namespace:\n+                namespace_str = f\"namespace {namespace} {{\\n}} // namespace {namespace}\\n\"\n+            with open(header_file_path, 'w') as f:\n+                f.write(f\"#ifndef {guard}\\n#define {guard}\\n{namespace_str}\\n#endif // {guard}\\n\")\n+        add_to_file(\n+            header_file_path,\n+            [f\"#include <{include}>\\n\" for include in header.includes | {\"common/setting.h\"}],\n+            [\"#include <string>\\n\", \"#include <vector>\\n\"],\n+            header.defs)\n+\n+def add_to_file(file_path, local_includes, system_includes=(), defs=()):\n+    with open(file_path, 'r') as f:\n+        lines = f.readlines()\n+    # Identify the include blocks and their positions\n+    local_include_start, local_include_end = None, None\n+    system_include_start, system_include_end = None, None\n+    self_include = f\"#include <{file_path.replace('src/', '').replace('.cpp', '.h')}>\"\n+    first = last = self = None\n+    for i, line in enumerate(lines):\n+        if line.startswith('#include') and \"IWYU pragma: keep\" not in line and not line.startswith(self_include):\n+            if local_include_start is None:\n+                local_include_start = i\n+            elif system_include_start is None and local_include_end is not None:\n+                system_include_start = i\n+        elif system_include_start is not None and system_include_end is None:\n+            system_include_end = i\n+        elif local_include_start is not None and local_include_end is None:\n+            local_include_end = i\n+        elif line.startswith('#include'):\n+            self = True\n+        if first is None and not line.startswith(\"//\") and not line.startswith(\"#ifndef\") and not line.startswith(\"#define\") and line != \"\\n\":\n+            first = i\n+        if line != \"\\n\" and not line.startswith(\"#endif\") and not line.startswith(\"} // namespace \"):\n+            last = i + 1\n+\n+    if system_include_start is None and system_include_end is None and not self:\n+        system_include_start, system_include_end = local_include_start, local_include_end\n+        local_include_end = system_include_start\n+\n+    lines[last:last] = defs\n+\n+    if system_includes:\n+        head = []\n+        tail = []\n+        if system_include_start is None and system_include_end is None:\n+            system_include_start = system_include_end = min(first, last)\n+            head += [\"\\n\"]\n+            if first < last + 1: tail += [\"\\n\"]\n+        elif local_include_end == system_include_start:\n+            head += [\"\\n\"]\n+        existing_includes = lines[system_include_start:system_include_end]\n+        lines[system_include_start:system_include_end] = head + sorted(set(system_includes) | set(existing_includes)) + tail\n+\n+    if local_includes:\n+        head = []\n+        if local_include_start is None and local_include_end is None:\n+            local_include_start = local_include_end = min(first, last)\n+            if lines[local_include_start-1:local_include_start+1] != [\"\\n\", \"\\n\"]: head = [\"\\n\"]\n+        existing_includes = lines[local_include_start:local_include_end]\n+        lines[local_include_start:local_include_end] = head + sorted(set(local_includes) | set(existing_includes))\n+\n+    with open(file_path, 'w') as f:\n+        f.writelines(lines)\n+\n+def modify_source_files(settings):\n+    includes_to_add = {}\n+    for setting in settings.values():\n+        for add in setting.adds:\n+            header_file_path = add.include_path\n+            relative_include = os.path.relpath(header_file_path, start=\"src/\").replace(os.sep, '/')\n+            file_path = add.call.file\n+            if file_path not in includes_to_add:\n+                includes_to_add[file_path] = set()\n+            includes_to_add[file_path].add(f\"#include <{relative_include}>\\n\")\n+            with open(file_path, 'r') as f:\n+                content = f.read()\n+            register_args = \", \".join([add.call.obj_name] + add.extern_args)\n+            default_data_type = min(add.data_types.keys())\n+            new_content = content.replace(\n+                add.call.call_text,\n+                f\"{add.data_types[default_data_type].name}::Register({register_args})\"\n+            )\n+            with open(file_path, 'w') as f:\n+                f.write(new_content)\n+    # map file path -> list (old, new) replacement tuples made so far\n+    replacements = collections.defaultdict(list)\n+    for setting in settings.values():\n+        for get in setting.gets:\n+            # FIXME handle these by generating synthetic AddArg calls without corresponding Register()\n+            if get.add is None:\n+                #import pprint\n+                #print(\"*\"*80)\n+                #print(f\"Bad get call with no corresponding type\")\n+                #pprint.pprint(get)",
      "path": "contrib/devtools/reg-settings.py",
      "position": null,
      "original_position": 446,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "f33c0b1969ee4c1c36475c876f46d9085feee134",
      "in_reply_to_id": 1850906340,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850906340\r\n\r\n> WIP?\r\n\r\nUnclear right now. Adding this wasn't as necessary as I initially thought it might be to remove most of the GetArg* calls in the codebase. But I am looking into more ways to expand the PR and maybe drop the GetArg methods methods entirely. Depending on how much work this it could be a follow-up and in any case doesn't need to block anything.",
      "created_at": "2024-11-22T22:33:17Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854804622",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854804622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 443,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806210",
      "pull_request_review_id": 2455631901,
      "id": 1854806210,
      "node_id": "PRRC_kwDOABII585ujhjC",
      "diff_hunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_H\n+#define BITCOIN_COMMON_SETTING_H\n+\n+#include <common/args.h>\n+\n+#include <univalue.h>\n+\n+namespace common {\n+//! State representing a setting that is unset\n+struct Unset {};\n+//! State representing a setting that is enabled without a value (\"-setting\")\n+struct Enabled {};\n+//! State representing a setting that is disabled (\"-nosetting\")\n+struct Disabled {};\n+\n+struct SettingOptions {\n+    bool legacy{false};\n+    bool debug_only{false};\n+    bool network_only{false};\n+    bool sensitive{false};\n+    bool disallow_negation{false};\n+    bool disallow_elision{false};\n+};\n+\n+template<size_t N, typename T=char[N]>\n+struct StringLiteral {\n+    constexpr StringLiteral(const char (&str)[N]) {\n+        std::copy_n(str, N, value);\n+    }\n+    constexpr StringLiteral(std::nullptr_t) {\n+    }\n+    T value{};\n+};\n+\n+StringLiteral(std::nullptr_t) -> StringLiteral<1, std::nullptr_t>;\n+} // namespace common\n+\n+#include <common/setting_internal.h>\n+\n+namespace common {\n+//! Setting template class used to declare compile-time Setting types which are\n+//! used to register and retrieve settings.\n+template<StringLiteral summary, typename T, SettingOptions options = SettingOptions{}, StringLiteral help = nullptr, auto help_fn = nullptr, auto default_fn = nullptr, auto get_fn = nullptr, OptionsCategory category = OptionsCategory::OPTIONS>\n+struct Setting {\n+    using value_t = internal::RemoveOptional<T>::type;\n+\n+    static void Register(auto& manager, auto&&... register_options)\n+    {\n+        internal::SettingRegister<T, options, help>(manager, summary, category, help_fn, default_fn, get_fn, register_options...);\n+    }\n+\n+    static T Get(auto& manager)\n+    {\n+        return internal::SettingGet<T, options>(manager, summary.value, default_fn, get_fn);\n+    }\n+\n+    static value_t Get(auto& manager, const value_t& default_value)\n+    {\n+        return internal::SettingGet<value_t, options>(manager, summary.value, [&] { return default_value; }, get_fn);\n+    }\n+\n+    static SettingsValue Value(auto& manager)",
      "path": "src/common/setting.h",
      "position": null,
      "original_position": 66,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850981914,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reL https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850981914\r\n\r\n> In [f991093](https://github.com/bitcoin/bitcoin/commit/f9910935c880c782c2b1d35acd38e1e18e6b4ad8): Better to document type? This style of using `auto` as function-arg-type when not necessary feels like the opposite of C++ concepts, potentially leading to downstream compile errors. But interested to hear reasoning behind it.\r\n\r\nGood catch, this was just done early in a prototype and I never changed it. Updated to use explicit types now.",
      "created_at": "2024-11-22T22:35:29Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854806210",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806918",
      "pull_request_review_id": 2455631901,
      "id": 1854806918,
      "node_id": "PRRC_kwDOABII585ujhuG",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)",
      "path": "src/common/setting_internal.h",
      "position": null,
      "original_position": 147,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850983219,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reL https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850983219\r\n\r\n> Document types and remove unused `T`?\r\n\r\nThanks! Added types. I do want to keep T around because my changes in #22978 branch adding runtime setting validation need to know the setting type (also so `T` and `options` are available consistently as template parameters).",
      "created_at": "2024-11-22T22:36:46Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854806918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854806918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854807220",
      "pull_request_review_id": 2455631901,
      "id": 1854807220,
      "node_id": "PRRC_kwDOABII585ujhy0",
      "diff_hunk": "@@ -0,0 +1,216 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_SETTING_INTERNAL_H\n+#define BITCOIN_COMMON_SETTING_INTERNAL_H\n+\n+#include <common/args.h>\n+#include <common/settings.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+namespace common {\n+namespace internal {\n+template <typename T>\n+struct RemoveOptional {\n+    using type = T;\n+};\n+template <typename U>\n+struct RemoveOptional<std::optional<U>> {\n+    using type = U;\n+};\n+\n+template<typename T, auto get_fn = nullptr>\n+struct SettingTraitsBase\n+{\n+    using setting_t = T;\n+    static constexpr bool is_list{false};\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        if constexpr (!std::is_same_v<decltype(get_fn), std::nullptr_t>) {\n+            if (auto value{get_fn(setting)}) out = *value;\n+            // For legacy settings, always return true if any value is present.\n+            // Legacy settings are unchecked and untyped and any setting can be\n+            // retrieved as any type through unsafe coercions.\n+            return !setting.isNull();\n+        }\n+        return false;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Unset, options> : SettingTraitsBase<Unset>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isNull(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Enabled, options> : SettingTraitsBase<Enabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isTrue(); }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<Disabled, options> : SettingTraitsBase<Disabled>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t&) { return setting.isFalse(); }\n+};\n+\n+template<typename T>\n+constexpr auto GetPtr(std::optional<T>(*ptr)(const common::SettingsValue&)) { return ptr; }\n+\n+template<SettingOptions options>\n+struct SettingTraits<bool, options> : SettingTraitsBase<bool, GetPtr(SettingToBool)> {};\n+\n+template<typename T, SettingOptions options>\n+requires std::is_integral_v<T>\n+struct SettingTraits<T, options> : SettingTraitsBase<T, GetPtr(SettingToInt)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<std::string, options> : SettingTraitsBase<std::string, GetPtr(SettingToString)> {};\n+\n+template<SettingOptions options>\n+struct SettingTraits<fs::path, options> : SettingTraitsBase<fs::path, &SettingToPath> {};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::optional<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::optional<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{wrapped_t::is_list};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        bool unset{!out};\n+        if (unset) out.emplace();\n+        bool got{wrapped_t::Get(setting, *out)};\n+        if (unset && !got) out.reset();\n+        return got;\n+    }\n+};\n+\n+template<typename T, SettingOptions options>\n+struct SettingTraits<std::vector<T>, options> : SettingTraits<T, options>\n+{\n+    using setting_t = std::vector<T>;\n+    using wrapped_t = SettingTraits<T, options>;\n+    static constexpr bool is_list{true};\n+\n+    static bool Get(const common::SettingsValue& setting, setting_t& out)\n+    {\n+        T elem;\n+        if (wrapped_t::Get(setting, elem)) {\n+            out.emplace_back(std::move(elem));\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+\n+template<SettingOptions options>\n+struct SettingTraits<SettingsValue, options> : SettingTraitsBase<SettingsValue>\n+{\n+    static bool Get(const common::SettingsValue& setting, setting_t& out) { out = setting; return true; }\n+};\n+\n+inline std::string_view SettingName(std::string_view summary)\n+{\n+    return summary.substr(0, summary.find_first_of('='));\n+}\n+\n+template<SettingOptions options>\n+constexpr int SettingFlags()\n+{\n+    int flags = 0;\n+    if (options.debug_only)        flags |= ArgsManager::DEBUG_ONLY;\n+    if (options.network_only)      flags |= ArgsManager::NETWORK_ONLY;\n+    if (options.sensitive)         flags |= ArgsManager::SENSITIVE;\n+    if (options.disallow_negation) flags |= ArgsManager::DISALLOW_NEGATION;\n+    if (options.disallow_elision)  flags |= ArgsManager::DISALLOW_ELISION;\n+    return flags;\n+}\n+\n+template<auto _value>\n+struct Constant {\n+    static constexpr auto value = _value;\n+    using type = decltype(value);\n+    constexpr auto operator()() { return value; }\n+};\n+\n+template<typename T, SettingOptions options, auto help>\n+void SettingRegister(auto& manager, auto summary, auto category, auto help_fn, auto default_fn, auto get_fn, auto&&... register_options)\n+{\n+    std::string help_str;\n+    if constexpr (!std::is_same_v<decltype(help_fn), std::nullptr_t>) {\n+        help_str = help_fn(Constant<help>{}, register_options...);\n+    } else if constexpr (!std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        help_str = strprintf(util::ConstevalFormatString<1>{help.value}, default_fn());\n+    } else {\n+        help_str = help.value;\n+    }\n+    manager.AddArg(summary.value, help_str, SettingFlags<options>(), category);\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingConstruct(auto default_fn)\n+{\n+    if constexpr (std::is_same_v<decltype(default_fn), std::nullptr_t>) {\n+        return {};\n+    } else {\n+        return default_fn();\n+    }\n+}\n+\n+template<typename T, SettingOptions options>\n+T SettingGet(auto& manager, std::string_view summary, auto default_fn, auto get_fn)",
      "path": "src/common/setting_internal.h",
      "position": null,
      "original_position": 171,
      "commit_id": "4e33ed4eb054e230436b68c681d978d0e7bea0a1",
      "original_commit_id": "c42d27d8c844b721b5aff384b3d014b1e0cc4783",
      "in_reply_to_id": 1850996627,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1850996627\r\n\r\nThanks! Applied change.\r\n\r\n",
      "created_at": "2024-11-22T22:37:21Z",
      "updated_at": "2024-11-22T23:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31260#discussion_r1854807220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854807220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31260"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    }
  ]
}