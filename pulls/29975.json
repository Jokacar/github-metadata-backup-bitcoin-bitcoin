{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975",
    "id": 1843531702,
    "node_id": "PR_kwDOABII585t4g-2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29975",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29975.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29975.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6a22eede2083616ecc7558a16d8189c22b46403d",
    "number": 29975,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "blockstorage: Separate reindexing from saving new blocks",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`SaveBlockToDisk` / `FindBlockPos` are used for two purposes, depending on whether they are called during reindexing (`dbp` set,  `fKnown = true`) or in the \"normal\" case when adding new blocks (`dbp == nullptr`,  `fKnown = false`).\r\nThe actual tasks are quite different\r\n- In normal mode, preparations for saving a new block are made, which is then saved: find the correct position on disk (maybe skipping to a new blk file), check for available disk space, update the blockfile info db, save the block.\r\n- during reindex, most of this is not necessary (the block is already on disk after all), only the blockfile info needs to rebuilt because reindex wiped the leveldb it's saved in.\r\n\r\nUsing one function with many conditional statements for this leads to code that is hard to read / understand and bug-prone:\r\n- many code paths in `FindBlockPos` are conditional on `fKnown` or `!fKnown`\r\n- It's not really clear what actually needs to be done during reindex (we don't need to \"save a block to disk\" or \"find a block pos\" as the function names suggest)\r\n- logic that should be applied to only one of the two modes is sometimes applied to both (see first commit, or #27039)\r\n\r\n#24858 and #27039 were recent bugs directly related to the differences between reindexing and normal mode, and in both cases the simple fix took a long time to be reviewed and merged.\r\n\r\nThis PR proposes to clean this code up by splitting out the reindex logic into a separate function (`AddToBlockFileInfo`) which will be called directly from validation. As a result, `SaveBlockToDisk` and `FindBlockPos` only need to cover the non-reindex logic. ",
    "labels": [
      {
        "id": 219890555,
        "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
        "name": "Block storage",
        "color": "000000",
        "default": false
      }
    ],
    "created_at": "2024-04-26T21:30:16Z",
    "updated_at": "2024-05-08T22:32:09Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "bb9743a68ce3fa9cd9a0ce8db5b05e5a5a33ef91",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "mzumsande:202404_blockstorage_split_reindex",
      "ref": "202404_blockstorage_split_reindex",
      "sha": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 187673073,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODc2NzMwNzM=",
        "name": "bitcoin",
        "full_name": "mzumsande/bitcoin",
        "owner": {
          "login": "mzumsande",
          "id": 48763452,
          "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
          "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mzumsande",
          "html_url": "https://github.com/mzumsande",
          "followers_url": "https://api.github.com/users/mzumsande/followers",
          "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
          "organizations_url": "https://api.github.com/users/mzumsande/orgs",
          "repos_url": "https://api.github.com/users/mzumsande/repos",
          "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mzumsande/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mzumsande/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mzumsande/bitcoin",
        "archive_url": "https://api.github.com/repos/mzumsande/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mzumsande/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mzumsande/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mzumsande/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mzumsande/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mzumsande/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mzumsande/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mzumsande/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mzumsande/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mzumsande/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mzumsande/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mzumsande/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mzumsande/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mzumsande/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mzumsande/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mzumsande/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mzumsande/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mzumsande/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mzumsande/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mzumsande/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mzumsande/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mzumsande/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mzumsande/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mzumsande/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mzumsande/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mzumsande/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mzumsande/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mzumsande/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mzumsande/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mzumsande/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mzumsande/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mzumsande/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mzumsande/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mzumsande/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mzumsande/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mzumsande/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mzumsande/bitcoin/hooks",
        "svn_url": "https://github.com/mzumsande/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 239576,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-08T22:22:24Z",
        "created_at": "2019-05-20T16:03:10Z",
        "updated_at": "2023-08-09T06:22:16Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8a45f572b9e0d4681a7e636df338d978841c27a3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35373,
        "stargazers_count": 76292,
        "watchers_count": 76292,
        "size": 258180,
        "default_branch": "master",
        "open_issues_count": 687,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-08T22:40:03Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-05-08T22:40:08Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 135,
    "deletions": 101,
    "changed_files": 5,
    "commits": 4,
    "review_comments": 36,
    "comments": 6
  },
  "events": [
    {
      "event": "commented",
      "id": 2080140998,
      "node_id": "IC_kwDOABII5857_G7G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080140998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:19Z",
      "updated_at": "2024-05-08T22:22:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29975).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080168836), [furszy](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546), [BrandonOdiwuor](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852) |\n| Stale ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2041313158) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29700](https://github.com/bitcoin/bitcoin/pull/29700) (kernel, refactor: return error status on all fatal errors by ryanofsky)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080140998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628633537,
      "node_id": "LE_lADOABII586HGINjzwAAAALwuafB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628633537",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:30:21Z",
      "label": {
        "name": "Block storage",
        "color": "000000"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12628712674,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAALwutzi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628712674",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:29Z"
    },
    {
      "event": "commented",
      "id": 2080156364,
      "node_id": "IC_kwDOABII5857_KrM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080156364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "updated_at": "2024-04-26T21:42:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24317664317</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080156364",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "labeled",
      "id": 12628713229,
      "node_id": "LE_lADOABII586HGINjzwAAAALwut8N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12628713229",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:42:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2080168836,
      "node_id": "IC_kwDOABII5857_NuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080168836",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T21:57:07Z",
      "updated_at": "2024-04-26T21:57:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2080168836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:06:41Z",
      "updated_at": "2024-04-27T02:06:41Z",
      "source": {
        "issue": {
          "id": 2201362078,
          "node_id": "PR_kwDOABII585qbY-z",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29700/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29700",
          "number": 29700,
          "state": "open",
          "state_reason": null,
          "title": "kernel, refactor: return error status on all fatal errors",
          "body": "Return util::Result objects from all functions that can trigger fatal errors.\r\n\r\nThere are many validation functions that handle failures by calling `AbortNode` and triggering shutdowns, without returning error information to their callers. This makes error handling in libbitcoinkernel application code difficult, because the only way to handle these errors is to register for [notification callbacks](https://github.com/bitcoin/bitcoin/blob/master/src/kernel/notifications_interface.h). Improve this by making all functions that trigger fatal errors return util::Result objects with the error information.\r\n\r\nThis PR is a pure refactoring that returns extra result information from functions without changing their behavior. It's a possible alternative to and subset of #29642, which adds similar return information but also makes behavior changes and exposes a FatalError type.\r\n\r\n---\r\n\r\n**This is based on #25665.** The non-base commits are:\r\n\r\n- [`3ce52fc00a0d` refactor, kernel: Add FlushStatus / FlushResult types](https://github.com/bitcoin/bitcoin/pull/29700/commits/3ce52fc00a0d405f006f2e300298ac5e8691546a)\r\n- [`c6bdac1320a2` refactor: Add InfoType field to util::Result](https://github.com/bitcoin/bitcoin/pull/29700/commits/c6bdac1320a2de9cd6b4caaa12e5c08e7e7d6723)\r\n- [`e56a36cc7587` refactor, blockstorage: Return FlushResult from flush methods](https://github.com/bitcoin/bitcoin/pull/29700/commits/e56a36cc7587610e5dc4cd2a75951b8505c978be)\r\n- [`abd7d3622abc` refactor, blockstorage: Return fatal errors from block writes](https://github.com/bitcoin/bitcoin/pull/29700/commits/abd7d3622abc3471892549d44432b1a04f10653e)\r\n- [`2c2134443ccf` refactor, blockstorage: Return fatal error from LoadBlockIndex](https://github.com/bitcoin/bitcoin/pull/29700/commits/2c2134443ccf2d0b131ce93358c1cfc974f0bbd2)\r\n- [`dceb837707b1` refactor, validation: Return fatal errors from FlushStateToDisk](https://github.com/bitcoin/bitcoin/pull/29700/commits/dceb837707b1e3b5d6a1a9e8b03a6330b07a79df)\r\n- [`1acf496ebf82` refactor, validation: Return fatal errors from mempool accept functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/1acf496ebf821b75d22e1e2de8dd1e254902f8d1)\r\n- [`a39b2cdf4a80` refactor, validation: Return fatal errors from assumeutxo snapshot functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/a39b2cdf4a808672b5233f960e881479a0bfad65)\r\n- [`809970373cf5` refactor, validation: Return fatal errors from block connect functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/809970373cf53023e79607a9ce8154ce3ac8f330)\r\n- [`901ccdc42910` refactor, validation: Return fatal errors from activate best chain functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/901ccdc429105925ed861ab01524c15dce3a6d86)\r\n- [`bbb8fec91d37` refactor, validation: Return fatal errors from new block functions](https://github.com/bitcoin/bitcoin/pull/29700/commits/bbb8fec91d37e74bd875ac6c8399cb9c2bee2ea7)\r\n- [`1e29b2eaaff4` refactor, blockstorage: Return fatal error from ImportBlocks](https://github.com/bitcoin/bitcoin/pull/29700/commits/1e29b2eaaff4b09c0e7db2d5f6d1c4c2147440b6)\r\n- [`f65fa8c91130` refactor, validation: Return more errors from VerifyDB](https://github.com/bitcoin/bitcoin/pull/29700/commits/f65fa8c91130931713848a97606d5add0fc9b8c5)",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29700",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29700",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29700.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29700.patch"
          },
          "created_at": "2024-03-21T23:11:56Z",
          "updated_at": "2024-05-02T03:37:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:31:58Z",
      "updated_at": "2024-04-27T02:31:58Z",
      "source": {
        "issue": {
          "id": 2182604130,
          "node_id": "PR_kwDOABII585pbmSj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29641/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
          "number": 29641,
          "state": "open",
          "state_reason": null,
          "title": "scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint",
          "body": "`LogPrintf/LogPrint` are problematic, because:\r\n\r\n* Their name is non-descriptive of what the function does (info logging or debug logging).\r\n* They are deprecated aliases, where code is using either the deprecated or non-deprecated alias, which is inconsistent and confusing.\r\n\r\nFix all issues by replacing the usage.\r\n\r\nWhile the diff is large and may cause merge conflicts or backport conflicts, I don't see the deprecated aliases being kept forever, so this will have to be done at some point. All conflicts should be trivial to solve, in any case.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29641",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29641",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29641.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29641.patch"
          },
          "created_at": "2024-03-12T20:21:40Z",
          "updated_at": "2024-05-08T18:29:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 12629852704,
      "node_id": "UNLE_lADOABII586HGINjzwAAAALwzEIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12629852704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-27T02:46:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2026623423,
      "node_id": "PRR_kwDOABII5854y9G_",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Recreated the change to understand it better, commented on what I've noticed.",
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026623423",
      "submitted_at": "2024-04-27T12:59:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "reviewed",
      "id": 2026654546,
      "node_id": "PRR_kwDOABII5854zEtS",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2026654546",
      "submitted_at": "2024-04-27T14:04:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-28T19:13:30Z",
      "updated_at": "2024-04-28T19:13:30Z",
      "source": {
        "issue": {
          "id": 2077041540,
          "node_id": "PR_kwDOABII585j1CBc",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29231/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29231",
          "number": 29231,
          "state": "closed",
          "state_reason": null,
          "title": "logging: Update to new logging API",
          "body": "Updates various logging calls to the new API from #28318. All commits are scripted diffs, so should be easy to update if needed, and also easy to reuse the scripts to update other code if needed when rebasing it after this is merged. Changes all uses of `LogPrintLevel()` where the level is hardcoded, and changes all `LogPrintf` and `LogPrint` uses in init.cpp.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29231",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29231",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29231.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29231.patch"
          },
          "closed_at": "2024-04-30T12:06:02Z",
          "created_at": "2024-01-11T16:01:53Z",
          "updated_at": "2024-05-02T05:13:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 2028283852,
      "node_id": "PRR_kwDOABII58545SfM",
      "url": null,
      "actor": null,
      "commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n",
      "user": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2028283852",
      "submitted_at": "2024-04-29T11:50:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12648121455,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAALx4wRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648121455",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:32:21Z"
    },
    {
      "event": "commented",
      "id": 2083526332,
      "node_id": "IC_kwDOABII5858MBa8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2083526332",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:12Z",
      "updated_at": "2024-04-29T19:42:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "[39ad8d8 ](https://github.com/bitcoin/bitcoin/commit/39ad8d825e35b7326ad0ea25c37d3fe12ded64c9)to [194e84a](https://github.com/bitcoin/bitcoin/commit/194e84accced947ef63c6db389bc62a2b58cffa3): Addressed review feedback by @paplorinc, thanks!",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2083526332",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "mentioned",
      "id": 12648230656,
      "node_id": "MEE_lADOABII586HGINjzwAAAALx5K8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648230656",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:13Z"
    },
    {
      "event": "subscribed",
      "id": 12648230671,
      "node_id": "SE_lADOABII586HGINjzwAAAALx5K8P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12648230671",
      "actor": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T19:42:13Z"
    },
    {
      "event": "reviewed",
      "id": 2041313158,
      "node_id": "PRR_kwDOABII5855q_eG",
      "url": null,
      "actor": null,
      "commit_id": "194e84accced947ef63c6db389bc62a2b58cffa3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 194e84accced947ef63c6db389bc62a2b58cffa3. I left a lot of comments, but everything looks right here and the code is a lot nicer than before.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#pullrequestreview-2041313158",
      "submitted_at": "2024-05-07T18:02:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
    },
    {
      "event": "review_requested",
      "id": 12733376280,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-cY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376280",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:02Z",
      "requested_reviewer": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12733376472,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-fY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376472",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:03Z",
      "requested_reviewer": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 12733376669,
      "node_id": "RRE_lADOABII586HGINjzwAAAAL29-id",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12733376669",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:03:04Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 2099086073,
      "node_id": "IC_kwDOABII5859HYL5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2099086073",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T18:45:33Z",
      "updated_at": "2024-05-07T18:45:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "With 194e84accced947ef63c6db389bc62a2b58cffa3, since reindexing regenerates undo data, and undo data shouldn't be added until all existing blocks are, it seems like there is no reason for the `AddToBlockFileInfo` function to worry about resetting the `BlockfileCursor::undo_file` field or even accessing the block storage cursors at all. So I think the following simplification would make sense:\r\n\r\n```diff\r\n--- a/src/node/blockstorage.cpp\r\n+++ b/src/node/blockstorage.cpp\r\n@@ -941,22 +941,11 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\r\n void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\r\n {\r\n     LOCK(cs_LastBlockFile);\r\n-\r\n     const unsigned int added_size = ::GetSerializeSize(TX_WITH_WITNESS(block));\r\n-    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\r\n-    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\r\n-    Assume(chain_type == BlockfileType::NORMAL);\r\n-\r\n     const int nFile = pos.nFile;\r\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\r\n         m_blockfile_info.resize(nFile + 1);\r\n     }\r\n-\r\n-    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\r\n-    if (nFile != last_blockfile) {\r\n-        // No undo data yet in the new file, so reset our undo-height tracking.\r\n-        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\r\n-    }\r\n     m_blockfile_info[nFile].AddBlock(nHeight, block.GetBlockTime());\r\n     m_blockfile_info[nFile].nSize = std::max(pos.nPos + added_size, m_blockfile_info[nFile].nSize);\r\n     m_dirty_fileinfo.insert(nFile);\r\n```\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2099086073",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBkMTE0ZTNjYjIwY2I5ZTAzZmM5YmE4ZGFmM2QwMzQzNmI0OTE3NDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
      "tree": {
        "sha": "6eeb9f065c3e3a3b2a12571b08d2afd5fe5071ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eeb9f065c3e3a3b2a12571b08d2afd5fe5071ed"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7973a670915632b75a6aa16f24f98b936865c48f",
          "sha": "7973a670915632b75a6aa16f24f98b936865c48f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7973a670915632b75a6aa16f24f98b936865c48f"
        }
      ],
      "message": "blockstorage: Add Assume for fKnown / snapshot chainstate\n\nfKnown is true during reindex (and only then), which deletes\nany existing snapshot chainstate. As a result, this function can never\nbe called wth fKnown set and a snapshot chainstate.\nAdd an Assume for this, and make the code initializing a blockfile cursor\nfor the snapshot conditional on !fKnown.\n\nThis is a preparation for splitting the reindex logic out of\nFindBlockPos in the following commits.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-08T22:19:47Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:08:40Z"
      },
      "sha": "0d114e3cb20cb9e03fc9ba8daf3d03436b491742"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiNmQyNzRhZjA1MGVhMjFlMzljZTU5YjZhNmIzYjdmYjYxZThjYmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
      "tree": {
        "sha": "f5214f9a6d4ade2a20ccab100124f0e620fdc66e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5214f9a6d4ade2a20ccab100124f0e620fdc66e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
          "sha": "0d114e3cb20cb9e03fc9ba8daf3d03436b491742",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0d114e3cb20cb9e03fc9ba8daf3d03436b491742"
        }
      ],
      "message": "blockstorage: split up FindBlockPos function\n\nFindBlockPos does different things depending on whether the block is known\nor not, as shown by the fact that much of the existing code is conditional on fKnown set or not.\n\nIf the block position is known (during reindex) the function only updates the block info\nstatistics. It doesn't actually find a block position in this case.\n\nThis commit removes fKnown and splits up these two code paths by introducing a separate function\nfor the reindex case when the block position is known.\nIt doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-08T22:19:54Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-03-20T19:05:08Z"
      },
      "sha": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5MTUwOTEyZWZiY2Y5ZGQ0OGZhZGJjMzIwZTBkMDJhZTJlNTE4MDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69150912efbcf9dd48fadbc320e0d02ae2e51800",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/69150912efbcf9dd48fadbc320e0d02ae2e51800",
      "tree": {
        "sha": "2ab7a81729c6709a0b98bf7eacab574fe1962f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab7a81729c6709a0b98bf7eacab574fe1962f00"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
          "sha": "2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6d274af050ea21e39ce59b6a6b3b7fb61e8cbd"
        }
      ],
      "message": "validation, blockstorage: Separate code paths for reindex and saving new blocks\n\nBy calling SaveBlockToDisk only when we actually want to save a new\nblock to disk. In the reindex case, we now call UpdateBlockInfo\ndirectly from validation.\n\nThis commit doesn't change behavior.",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-08T22:19:54Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T19:06:55Z"
      },
      "sha": "69150912efbcf9dd48fadbc320e0d02ae2e51800"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZhMjJlZWRlMjA4MzYxNmVjYzc1NThhMTZkODE4OWMyMmI0NjQwM2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a22eede2083616ecc7558a16d8189c22b46403d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6a22eede2083616ecc7558a16d8189c22b46403d",
      "tree": {
        "sha": "1cc48e8dc60117ec13afadd1d156c40d8a242507",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cc48e8dc60117ec13afadd1d156c40d8a242507"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69150912efbcf9dd48fadbc320e0d02ae2e51800",
          "sha": "69150912efbcf9dd48fadbc320e0d02ae2e51800",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/69150912efbcf9dd48fadbc320e0d02ae2e51800"
        }
      ],
      "message": "doc: Improve documentation of FindBlockPos and SaveBlockToDisk",
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-05-08T22:19:54Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2024-04-26T20:21:06Z"
      },
      "sha": "6a22eede2083616ecc7558a16d8189c22b46403d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12750316961,
      "node_id": "HRFPE_lADOABII586HGINjzwAAAAL3-mWh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750316961",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:22:26Z"
    },
    {
      "event": "commented",
      "id": 2101607833,
      "node_id": "IC_kwDOABII5859Q_2Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2101607833",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:08Z",
      "updated_at": "2024-05-08T22:32:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the detailed review @ryanofsky! \r\nWith the latest push, I addressed the feedback partially, see in particular https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594531344. I will address the remaining comments soon.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#issuecomment-2101607833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29975"
    },
    {
      "event": "mentioned",
      "id": 12750375913,
      "node_id": "MEE_lADOABII586HGINjzwAAAAL3-0vp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750375913",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:09Z"
    },
    {
      "event": "subscribed",
      "id": 12750375923,
      "node_id": "SE_lADOABII586HGINjzwAAAAL3-0vz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12750375923",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-08T22:32:09Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723",
      "pull_request_review_id": 2026623423,
      "id": 1581784723,
      "node_id": "PRRC_kwDOABII585eSB6T",
      "diff_hunk": "@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n     // to block 2 location.\n     CBlockFileInfo* block_data = blockman.GetBlockFileInfo(0);\n     BOOST_CHECK_EQUAL(block_data->nBlocks, 2);\n-    BOOST_CHECK(blockman.SaveBlockToDisk(block3, /*nHeight=*/3, /*dbp=*/&pos2) == pos2);\n+    blockman.AddToBlockFileInfo(block3, /*nHeight=*/3, /*pos=*/pos2);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems to me the related comments needs to be updated in this file (e.g line 184 and 199)",
      "created_at": "2024-04-27T10:00:24Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581784723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581784723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649",
      "pull_request_review_id": 2026623423,
      "id": 1581822649,
      "node_id": "PRRC_kwDOABII585eSLK5",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: is the naming style deliberate here? When is it camel and when snake?",
      "created_at": "2024-04-27T12:28:32Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581822649",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581822649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 945,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896",
      "pull_request_review_id": 2026623423,
      "id": 1581824896,
      "node_id": "PRRC_kwDOABII585eSLuA",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;",
      "path": "src/node/blockstorage.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this reassignment still make sense?",
      "created_at": "2024-04-27T12:41:59Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581824896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581824896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 866,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021",
      "pull_request_review_id": 2026623423,
      "id": 1581825021,
      "node_id": "PRRC_kwDOABII585eSLv9",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    const int nFile = pos.nFile;\n+\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+    if (nFile != last_blockfile) {\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};",
      "path": "src/node/blockstorage.cpp",
      "position": 169,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should we keep the original comment here?",
      "created_at": "2024-04-27T12:42:44Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 961,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604",
      "pull_request_review_id": 2026623423,
      "id": 1581825604,
      "node_id": "PRRC_kwDOABII585eSL5E",
      "diff_hunk": "@@ -155,7 +155,13 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Locates the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     */\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does the comment on line 215 need any update after the change?",
      "created_at": "2024-04-27T12:46:50Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870",
      "pull_request_review_id": 2026623423,
      "id": 1581825870,
      "node_id": "PRRC_kwDOABII585eSL9O",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;\n+            m_blockman.AddToBlockFileInfo(block, pindex->nHeight, *dbp);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we might as well use `blockPos` here\r\n```C++\r\nm_blockman.AddToBlockFileInfo(block, pindex->nHeight, blockPos);\r\n```",
      "created_at": "2024-04-27T12:48:47Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581825870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581825870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711",
      "pull_request_review_id": 2026623423,
      "id": 1581826711,
      "node_id": "PRRC_kwDOABII585eSMKX",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we could move this closer to the usage",
      "created_at": "2024-04-27T12:55:01Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581826711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581826711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125",
      "pull_request_review_id": 2026623423,
      "id": 1581827125,
      "node_id": "PRRC_kwDOABII585eSMQ1",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": 159,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": null,
      "user": {
        "login": "paplorinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paplorinc",
        "html_url": "https://github.com/paplorinc",
        "followers_url": "https://api.github.com/users/paplorinc/followers",
        "following_url": "https://api.github.com/users/paplorinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paplorinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paplorinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paplorinc/subscriptions",
        "organizations_url": "https://api.github.com/users/paplorinc/orgs",
        "repos_url": "https://api.github.com/users/paplorinc/repos",
        "events_url": "https://api.github.com/users/paplorinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paplorinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is the reason why\r\n```C++\r\nif (!m_blockfile_cursors[chain_type]) {\r\n    // If a snapshot is loaded during runtime, we may not have initialized this cursor yet.\r\n    assert(chain_type == BlockfileType::ASSUMED);\r\n    const auto new_cursor = BlockfileCursor{this->MaxBlockfileNum() + 1};\r\n    m_blockfile_cursors[chain_type] = new_cursor;\r\n    LogPrint(BCLog::BLOCKSTORAGE, \"[%s] initializing blockfile cursor to %s\\n\", chain_type, new_cursor);\r\n}\r\n```\r\n is not applicable here, right?\r\n Would it make sense to also assume `m_blockfile_cursors[chain_type]`?",
      "created_at": "2024-04-27T12:57:38Z",
      "updated_at": "2024-04-27T12:59:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1581827125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581827125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583635647",
      "pull_request_review_id": 2029424460,
      "id": 1583635647,
      "node_id": "PRRC_kwDOABII585eZFy_",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n+    const int nFile = pos.nFile;\n+\n+    if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+        m_blockfile_info.resize(nFile + 1);\n+    }\n+    if (nFile != last_blockfile) {\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};",
      "path": "src/node/blockstorage.cpp",
      "position": 169,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825021,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done.",
      "created_at": "2024-04-29T19:35:07Z",
      "updated_at": "2024-04-29T19:35:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583635647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583635647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 961,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583636377",
      "pull_request_review_id": 2029425696,
      "id": 1583636377,
      "node_id": "PRRC_kwDOABII585eZF-Z",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;",
      "path": "src/node/blockstorage.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581824896,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I think so. We later may increase nFile and then compare it to `last_blockfile` (line  `if (nFile != last_blockfile)`)",
      "created_at": "2024-04-29T19:35:51Z",
      "updated_at": "2024-04-29T19:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583636377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583636377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 866,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583637879",
      "pull_request_review_id": 2029428884,
      "id": 1583637879,
      "node_id": "PRRC_kwDOABII585eZGV3",
      "diff_hunk": "@@ -863,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581822649,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I took both from FindBlockPos, snake case is correct, but for historical reasons camel case is still used in lots of places.\r\nBut since this is arguably new code I renamed `nAddSize` to `added_size` ",
      "created_at": "2024-04-29T19:36:48Z",
      "updated_at": "2024-04-29T19:36:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583637879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583637879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 945,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638770",
      "pull_request_review_id": 2029430446,
      "id": 1583638770,
      "node_id": "PRRC_kwDOABII585eZGjy",
      "diff_hunk": "@@ -155,7 +155,13 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    /**\n+     * Helper function performing various preparations before a block can be saved to disk:\n+     * Locates the correct position for the block to be saved, which may be in the current or a new\n+     * block file depending on nAddSize. May flush the previous blockfile to disk if full, updates\n+     * blockfile info, and checks if there is enough disk space to save the block.\n+     */\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);",
      "path": "src/node/blockstorage.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825604,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean the comment \"The ASSUMED state is initialized, when necessary, in FindBlockPos().\"?\r\nThat behavior is unchanged, it's part of the normal usage of `FindBlockPos` and wasn't happening during reindex anyway (see first commit), so I don't think it needs to be updated.",
      "created_at": "2024-04-29T19:37:51Z",
      "updated_at": "2024-04-29T19:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583638770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638866",
      "pull_request_review_id": 2029430636,
      "id": 1583638866,
      "node_id": "PRRC_kwDOABII585eZGlS",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;\n+            m_blockman.AddToBlockFileInfo(block, pindex->nHeight, *dbp);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581825870,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-29T19:37:59Z",
      "updated_at": "2024-04-29T19:37:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583638866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583638866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583639069",
      "pull_request_review_id": 2029430977,
      "id": 1583639069,
      "node_id": "PRRC_kwDOABII585eZGod",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);\n+\n+    const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 167,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581826711,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-04-29T19:38:14Z",
      "updated_at": "2024-04-29T19:38:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583639069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583639069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583640596",
      "pull_request_review_id": 2029433363,
      "id": 1583640596,
      "node_id": "PRRC_kwDOABII585eZHAU",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": 159,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": " Yes. I added this in the first commit, so that the second commit doesn't change behavior.\r\n \r\nAs for your second q: Well, it'd be undefined behavior if `m_blockfile_cursors` didn't haven an element for `BlockfileType::NORMAL`. On the other hand, `m_blockfile_cursors[...]` is used all over the place, I'm not sure if we want to have an assert for each occurence. Other opinions?",
      "created_at": "2024-04-29T19:39:46Z",
      "updated_at": "2024-04-29T19:39:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583640596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583640596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583642139",
      "pull_request_review_id": 2029436933,
      "id": 1583642139,
      "node_id": "PRRC_kwDOABII585eZHYb",
      "diff_hunk": "@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n     // to block 2 location.\n     CBlockFileInfo* block_data = blockman.GetBlockFileInfo(0);\n     BOOST_CHECK_EQUAL(block_data->nBlocks, 2);\n-    BOOST_CHECK(blockman.SaveBlockToDisk(block3, /*nHeight=*/3, /*dbp=*/&pos2) == pos2);\n+    blockman.AddToBlockFileInfo(block3, /*nHeight=*/3, /*pos=*/pos2);",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "39ad8d825e35b7326ad0ea25c37d3fe12ded64c9",
      "in_reply_to_id": 1581784723,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I updated some comments. The entire test setup probably makes a bit less sense after the refactor, users unfamiliar\r\nwith the history might ask themselves why someone could think that `Reindex` / `AddToBlockFileInfo` would change the block files so that we'd require a test making sure it doesn't.",
      "created_at": "2024-04-29T19:40:39Z",
      "updated_at": "2024-04-29T19:41:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583642139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583642139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591338361",
      "pull_request_review_id": 2041313158,
      "id": 1591338361,
      "node_id": "PRRC_kwDOABII585e2eV5",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation, blockstorage: Separate code paths for reindex and saving new blocks\" (a17eacab1f8790afc5f89ba2ee3e34da4c9369e1)\r\n\r\nIt looks like previously there would have been an error here if `dbp->IsNull()` was true, and now there will not be an error. This is probably a good change, since AcceptBlock should not be looking at block positions, just passing them on.",
      "created_at": "2024-05-06T17:32:15Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591338361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591338361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4347,
      "original_line": 4347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591461829",
      "pull_request_review_id": 2041313158,
      "id": 1591461829,
      "node_id": "PRRC_kwDOABII585e28fF",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    if (fKnown) Assume(chain_type == BlockfileType::NORMAL);\n \n-    if (!m_blockfile_cursors[chain_type]) {\n+    if (!fKnown && !m_blockfile_cursors[chain_type]) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: Add Assume for fKnown / snapshot chainstate\" (d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5)\r\n\r\nI don't think changing this `if` statement is good.\r\n\r\nAdding the Assume call above seems good, since it provides information about the context this code is called in and could potentially catch bugs if the code is run in an unanticipated state.\r\n\r\nBut It's less clear what benefit there is to adding the  `!fKnown &&` condition to this if statement. It just makes the logic more complicated without providing any extra explanation. And if outside code were changed such that `fKnown` was false while the cursor was null, undefined behavior would now happen on line 866 below.\r\n\r\nI think this commit would be a clearer if it avoided changing any existing logic and instead just added two Assume statements:\r\n\r\n```c++\r\n// Check that chain type is NORMAL if fKnown is true, because fKnown is only\r\n// true during reindexing, and reindexing deletes snapshot chainstates, so\r\n// chain_type will not be SNAPSHOT. Also check that cursor exists, because\r\n// the normal cursor should never be null.\r\nif (fKnown) {\r\n    Assume(chain_type == BlockfileType::NORMAL);\r\n    Assume(m_blockfile_cursors[chain_type]);    \r\n}\r\n```",
      "created_at": "2024-05-06T19:28:06Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591461829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591463595",
      "pull_request_review_id": 2041313158,
      "id": 1591463595,
      "node_id": "PRRC_kwDOABII585e286r",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: Add Assume for fKnown / snapshot chainstate\" (d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5)\r\n\r\nThis comment seems really disconnected from the statement below it, because the statement does not mention reindexing or the snapshot chainstate at all. I left a suggestion to improve the comment below (https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829).",
      "created_at": "2024-05-06T19:29:58Z",
      "updated_at": "2024-05-07T18:03:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591463595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591463595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591477885",
      "pull_request_review_id": 2041313158,
      "id": 1591477885,
      "node_id": "PRRC_kwDOABII585e3AZ9",
      "diff_hunk": "@@ -865,90 +863,105 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nWould be helpful to clarify with meaning of `true` with `/*fFinalize*/=true`",
      "created_at": "2024-05-06T19:45:17Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591477885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591477885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591485559",
      "pull_request_review_id": 2041313158,
      "id": 1591485559,
      "node_id": "PRRC_kwDOABII585e3CR3",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": 159,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1583640596\r\n\r\n> I'm not sure if we want to have an assert for each occurence. Other opinions?\r\n\r\nNot sure about other places, but it seems worth asserting here to avoid undefined behavior on line 955 and to be able to document assumptions this code is making. I suggested a comment in the previous commit that explains both assumptions and could be reused here (https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591461829).",
      "created_at": "2024-05-06T19:53:29Z",
      "updated_at": "2024-05-07T18:04:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1591485559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1591485559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592707738",
      "pull_request_review_id": 2041313158,
      "id": 1592707738,
      "node_id": "PRRC_kwDOABII585e7sqa",
      "diff_hunk": "@@ -848,15 +848,13 @@ fs::path BlockManager::GetBlockPosFilename(const FlatFilePos& pos) const\n     return BlockFileSeq().FileName(pos);\n }\n \n-bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown)\n+bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime)",
      "path": "src/node/blockstorage.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nTwo suggestions, maybe for later commits or a followup PR:\r\n\r\nNow that `pos` is an output parameter instead of being an in/out parameter, it would be better to just drop it entirely and make `FindBlockPos` return `FlatFilePos` like `SaveBlockToDisk`, instead of returning `bool`. This would make it more obvious what the function inputs and outputs are, and also make sure the output value is consistently initialized.\r\n\r\nAlso, I think it would make sense to rename `FindBlockPos` to `FindNextBlockPos` to be clear this function is only called to find the position where the next block should be written, and no longer has anything to do with positions of existing blocks.",
      "created_at": "2024-05-07T15:45:11Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592707738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592707738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 851,
      "original_line": 851,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592739006",
      "pull_request_review_id": 2041313158,
      "id": 1592739006,
      "node_id": "PRRC_kwDOABII585e70S-",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think this description is technically accurate, but I got confused by it and thought it was wrong because \"the 8 byte serialization header\" sounds like something that is part of `CBlock` serialization, when actually it is referring to separator fields written by `WriteBlockToDisk` *before* the serialized `CBlock`.\r\n\r\nWould suggest changing comment to \"pos: the position of the serialized CBlock on disk. This is the position returned by WriteBlockToDisk pointing at the CBlock, not the separator fields before it.\"\r\n\r\nI would also suggesting adding two more comments to this commit to make it clear what it happening at this stage of the PR.\r\n\r\nIn `WriteBlockToDisk` documentation, \"// The pos argument passed to this function is modified by this call. Before this call, it should point to an unused file location where separator fields will be written followed by the serialized CBlock data. After this call, it will point to the beginning of the serialized CBlock data, after the separator fields\"\r\n\r\nIn `FindBlockPos` documentation, \"// The nAddSize argument passed to this function should include not just the size of the serialized CBlock, but the also size of separator fields which are written before it by WriteBlockToDisk (BLOCK_SERIALIZATION_HEADER_SIZE).",
      "created_at": "2024-05-07T16:08:30Z",
      "updated_at": "2024-05-07T18:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592739006",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592739006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592824870",
      "pull_request_review_id": 2041313158,
      "id": 1592824870,
      "node_id": "PRRC_kwDOABII585e8JQm",
      "diff_hunk": "@@ -1139,17 +1152,17 @@ FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, cons\n     const auto position_known {dbp != nullptr};\n     if (position_known) {\n         blockPos = *dbp;\n+        // During reindex, no blocks need to be written, only the blockfile info database needs to be rebuilt",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think this comment is a little confusing, because it isn't obvious that `position_known` can only be true during reindexing. Could potentially clarify this, though not necessary since this code will be deleted in the next commit.",
      "created_at": "2024-05-07T17:16:04Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592824870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592824870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592833124",
      "pull_request_review_id": 2041313158,
      "id": 1592833124,
      "node_id": "PRRC_kwDOABII585e8LRk",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.\n+     */\n+    void AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 13,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nI think `SaveBlockPos` would be a less ambiguous name for this function than `AddToBlockFileInfo`. It would also be consistent with `FindBlockPos` and I think make the `AcceptBlock` code more obvious (like `if (dbp) SaveBlockPos(...) else SaveBlockToDisk(...)`)\r\n\r\nEDIT: `SaveBlockInfo` or `UpdateBlockInfo` might be a better name than `SaveBlockPos` since block position isn't really what is updated here, other information is just updated based on the position.",
      "created_at": "2024-05-07T17:23:50Z",
      "updated_at": "2024-05-08T14:01:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592833124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592833124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592841734",
      "pull_request_review_id": 2041313158,
      "id": 1592841734,
      "node_id": "PRRC_kwDOABII585e8NYG",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 6,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockstorage: split up FindBlockPos function\" (a2ae0a33c7c30678721d7e7d37d8e6170b013383)\r\n\r\nInstead of adding this method and comment in the private section of the class this commit, and then moving it to the public section of the class in the next commit, and I think it would be better just to add it to the public section initially to make the PR easier to review, since it already makes sense as part of public interface.",
      "created_at": "2024-05-07T17:31:42Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592841734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592841734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592848815",
      "pull_request_review_id": 2041313158,
      "id": 1592848815,
      "node_id": "PRRC_kwDOABII585e8PGv",
      "diff_hunk": "@@ -181,22 +180,19 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n         BOOST_CHECK_EQUAL(read_block.nVersion, 2);\n     }\n \n-    // When FlatFilePos* dbp is given, SaveBlockToDisk() will not write or\n-    // overwrite anything to the flat file block storage. It will, however,\n-    // update the blockfile metadata. This is to facilitate reindexing\n-    // when the user has the blocks on disk but the metadata is being rebuilt.\n+    // During reindex, the flat file block storage will not be written do.",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation, blockstorage: Separate code paths for reindex and saving new blocks\" (a17eacab1f8790afc5f89ba2ee3e34da4c9369e1)\r\n\r\ns/do/to/",
      "created_at": "2024-05-07T17:38:28Z",
      "updated_at": "2024-05-07T18:02:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1592848815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1592848815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594531344",
      "pull_request_review_id": 2046482540,
      "id": 1594531344,
      "node_id": "PRRC_kwDOABII585fCp4Q",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    if (fKnown) Assume(chain_type == BlockfileType::NORMAL);\n \n-    if (!m_blockfile_cursors[chain_type]) {\n+    if (!fKnown && !m_blockfile_cursors[chain_type]) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": 1591461829,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason I added it was to make the following commit, in which every line of code that can be reached with `fKnown==true` is moved into its own function, a mechanical refactor that is easier to review: Lines dependent on `fKnown` move, lines dependent on `!fKnown` stay, independent lines go into both. \r\nWithout it, there would be the question why this block of code does not make it into `AddToBlockFileInfo`.\r\nSo the reason was to move the potential behavior change (which would only be an actual one if our assumptions about reindexing were incorrect) into its own commit.\r\n\r\nHappy to add the suggestion though.",
      "created_at": "2024-05-08T19:28:30Z",
      "updated_at": "2024-05-08T19:29:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594531344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594531344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594573095",
      "pull_request_review_id": 2046551869,
      "id": 1594573095,
      "node_id": "PRRC_kwDOABII585fC0En",
      "diff_hunk": "@@ -4342,10 +4342,16 @@ bool ChainstateManager::AcceptBlock(const std::shared_ptr<const CBlock>& pblock,\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos{m_blockman.SaveBlockToDisk(block, pindex->nHeight, dbp)};\n-        if (blockPos.IsNull()) {\n-            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n-            return false;\n+        FlatFilePos blockPos{};\n+        if (dbp) {\n+            blockPos = *dbp;",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 10,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": 1591338361,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, in the reindex case; In this case the passed dbp isn't changed (it's now a const arg to `AddToBlockFileInfo`). If a dpb was passed to AcceptBlock for which `dbp->IsNull()`, the error message (\"Failed to find position to write new block to disk\") would have been very confusing anyway, because we don't write a block to disk during reindex anyway.",
      "created_at": "2024-05-08T20:11:40Z",
      "updated_at": "2024-05-08T20:11:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594573095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594573095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4347,
      "original_line": 4347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766043",
      "pull_request_review_id": 2046861072,
      "id": 1594766043,
      "node_id": "PRRC_kwDOABII585fDjLb",
      "diff_hunk": "@@ -853,8 +853,10 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     LOCK(cs_LastBlockFile);\n \n     const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "d6b0bb6dd0d26f3e10386d1afbafd8d52a12b2c5",
      "in_reply_to_id": 1591463595,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I extended the comment according to the suggestion above.",
      "created_at": "2024-05-08T22:23:10Z",
      "updated_at": "2024-05-08T22:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594766043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766203",
      "pull_request_review_id": 2046861307,
      "id": 1594766203,
      "node_id": "PRRC_kwDOABII585fDjN7",
      "diff_hunk": "@@ -865,90 +863,105 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 116,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1591477885,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2024-05-08T22:23:26Z",
      "updated_at": "2024-05-08T22:23:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594766203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594766203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767022",
      "pull_request_review_id": 2046862476,
      "id": 1594767022,
      "node_id": "PRRC_kwDOABII585fDjau",
      "diff_hunk": "@@ -865,90 +863,104 @@ bool BlockManager::FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigne\n     }\n     const int last_blockfile = m_blockfile_cursors[chain_type]->file_num;\n \n-    int nFile = fKnown ? pos.nFile : last_blockfile;\n+    int nFile = last_blockfile;\n     if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n         m_blockfile_info.resize(nFile + 1);\n     }\n \n     bool finalize_undo = false;\n-    if (!fKnown) {\n-        unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n-        // Use smaller blockfiles in test-only -fastprune mode - but avoid\n-        // the possibility of having a block not fit into the block file.\n-        if (m_opts.fast_prune) {\n-            max_blockfile_size = 0x10000; // 64kiB\n-            if (nAddSize >= max_blockfile_size) {\n-                // dynamically adjust the blockfile size to be larger than the added size\n-                max_blockfile_size = nAddSize + 1;\n-            }\n+    unsigned int max_blockfile_size{MAX_BLOCKFILE_SIZE};\n+    // Use smaller blockfiles in test-only -fastprune mode - but avoid\n+    // the possibility of having a block not fit into the block file.\n+    if (m_opts.fast_prune) {\n+        max_blockfile_size = 0x10000; // 64kiB\n+        if (nAddSize >= max_blockfile_size) {\n+            // dynamically adjust the blockfile size to be larger than the added size\n+            max_blockfile_size = nAddSize + 1;\n         }\n-        assert(nAddSize < max_blockfile_size);\n-\n-        while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n-            // when the undo file is keeping up with the block file, we want to flush it explicitly\n-            // when it is lagging behind (more blocks arrive than are being connected), we let the\n-            // undo block write case handle it\n-            finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n-                    Assert(m_blockfile_cursors[chain_type])->undo_height);\n-\n-            // Try the next unclaimed blockfile number\n-            nFile = this->MaxBlockfileNum() + 1;\n-            // Set to increment MaxBlockfileNum() for next iteration\n-            m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n-\n-            if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n-                m_blockfile_info.resize(nFile + 1);\n-            }\n+    }\n+    assert(nAddSize < max_blockfile_size);\n+\n+    while (m_blockfile_info[nFile].nSize + nAddSize >= max_blockfile_size) {\n+        // when the undo file is keeping up with the block file, we want to flush it explicitly\n+        // when it is lagging behind (more blocks arrive than are being connected), we let the\n+        // undo block write case handle it\n+        finalize_undo = (static_cast<int>(m_blockfile_info[nFile].nHeightLast) ==\n+                         Assert(m_blockfile_cursors[chain_type])->undo_height);\n+\n+        // Try the next unclaimed blockfile number\n+        nFile = this->MaxBlockfileNum() + 1;\n+        // Set to increment MaxBlockfileNum() for next iteration\n+        m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n+\n+        if (static_cast<int>(m_blockfile_info.size()) <= nFile) {\n+            m_blockfile_info.resize(nFile + 1);\n         }\n-        pos.nFile = nFile;\n-        pos.nPos = m_blockfile_info[nFile].nSize;\n     }\n+    pos.nFile = nFile;\n+    pos.nPos = m_blockfile_info[nFile].nSize;\n \n     if (nFile != last_blockfile) {\n-        if (!fKnown) {\n-            LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n-                last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n-\n-            // Do not propagate the return code. The flush concerns a previous block\n-            // and undo file that has already been written to. If a flush fails\n-            // here, and we crash, there is no expected additional block data\n-            // inconsistency arising from the flush failure here. However, the undo\n-            // data may be inconsistent after a crash if the flush is called during\n-            // a reindex. A flush error might also leave some of the data files\n-            // untrimmed.\n-            if (!FlushBlockFile(last_blockfile, !fKnown, finalize_undo)) {\n-                LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n-                              \"Failed to flush previous block file %05i (finalize=%i, finalize_undo=%i) before opening new block file %05i\\n\",\n-                              last_blockfile, !fKnown, finalize_undo, nFile);\n-            }\n+        LogPrint(BCLog::BLOCKSTORAGE, \"Leaving block file %i: %s (onto %i) (height %i)\\n\",\n+                 last_blockfile, m_blockfile_info[last_blockfile].ToString(), nFile, nHeight);\n+\n+        // Do not propagate the return code. The flush concerns a previous block\n+        // and undo file that has already been written to. If a flush fails\n+        // here, and we crash, there is no expected additional block data\n+        // inconsistency arising from the flush failure here. However, the undo\n+        // data may be inconsistent after a crash if the flush is called during\n+        // a reindex. A flush error might also leave some of the data files\n+        // untrimmed.\n+        if (!FlushBlockFile(last_blockfile, true, finalize_undo)) {\n+            LogPrintLevel(BCLog::BLOCKSTORAGE, BCLog::Level::Warning,\n+                          \"Failed to flush previous block file %05i (finalize=1, finalize_undo=%i) before opening new block file %05i\\n\",\n+                          last_blockfile, finalize_undo, nFile);\n         }\n         // No undo data yet in the new file, so reset our undo-height tracking.\n         m_blockfile_cursors[chain_type] = BlockfileCursor{nFile};\n     }\n \n     m_blockfile_info[nFile].AddBlock(nHeight, nTime);\n-    if (fKnown) {\n-        m_blockfile_info[nFile].nSize = std::max(pos.nPos + nAddSize, m_blockfile_info[nFile].nSize);\n-    } else {\n-        m_blockfile_info[nFile].nSize += nAddSize;\n-    }\n+    m_blockfile_info[nFile].nSize += nAddSize;\n \n-    if (!fKnown) {\n-        bool out_of_space;\n-        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n-        if (out_of_space) {\n-            m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n-            return false;\n-        }\n-        if (bytes_allocated != 0 && IsPruneMode()) {\n-            m_check_for_pruning = true;\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        m_opts.notifications.fatalError(_(\"Disk space is too low!\"));\n+        return false;\n+    }\n+    if (bytes_allocated != 0 && IsPruneMode()) {\n+        m_check_for_pruning = true;\n     }\n \n     m_dirty_fileinfo.insert(nFile);\n     return true;\n }\n \n+\n+void BlockManager::AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos)\n+{\n+    LOCK(cs_LastBlockFile);\n+\n+    unsigned int nAddSize = ::GetSerializeSize(TX_WITH_WITNESS(block));\n+    const BlockfileType chain_type = BlockfileTypeForHeight(nHeight);\n+    // -reindex and -reindex-chainstate delete any snapshot chainstate during init\n+    Assume(chain_type == BlockfileType::NORMAL);",
      "path": "src/node/blockstorage.cpp",
      "position": 159,
      "original_position": 165,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "20efb411bd51ff3bfcb7f4a2cc7bd0d704ad7c26",
      "in_reply_to_id": 1581827125,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the assumptions.",
      "created_at": "2024-05-08T22:24:47Z",
      "updated_at": "2024-05-08T22:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594767022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767896",
      "pull_request_review_id": 2046863837,
      "id": 1594767896,
      "node_id": "PRRC_kwDOABII585fDjoY",
      "diff_hunk": "@@ -1139,17 +1152,17 @@ FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, cons\n     const auto position_known {dbp != nullptr};\n     if (position_known) {\n         blockPos = *dbp;\n+        // During reindex, no blocks need to be written, only the blockfile info database needs to be rebuilt",
      "path": "src/node/blockstorage.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592824870,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added a clarification.",
      "created_at": "2024-05-08T22:26:03Z",
      "updated_at": "2024-05-08T22:26:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594767896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594767896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768464",
      "pull_request_review_id": 2046864594,
      "id": 1594768464,
      "node_id": "PRRC_kwDOABII585fDjxQ",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.\n+     *\n+     * @param[in]  block        the block being processed\n+     * @param[in]  nHeight      the height of the block\n+     * @param[in]  pos          the position of the block on disk. This must point *after* the\n+     *                          8 byte serialization header, at the beginning of the actual block data.\n+     */\n+    void AddToBlockFileInfo(const CBlock& block, unsigned int nHeight, const FlatFilePos& pos);",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 13,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592833124,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `UpdateBlockInfo`",
      "created_at": "2024-05-08T22:26:55Z",
      "updated_at": "2024-05-08T22:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594768464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768654",
      "pull_request_review_id": 2046864927,
      "id": 1594768654,
      "node_id": "PRRC_kwDOABII585fDj0O",
      "diff_hunk": "@@ -155,7 +155,15 @@ class BlockManager\n     /** Return false if undo file flushing fails. */\n     [[nodiscard]] bool FlushUndoFile(int block_file, bool finalize = false);\n \n-    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown);\n+    [[nodiscard]] bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime);\n+    /** Update blockfile info while processing a block during reindex. The block must be available on disk.",
      "path": "src/node/blockstorage.h",
      "position": null,
      "original_position": 6,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a2ae0a33c7c30678721d7e7d37d8e6170b013383",
      "in_reply_to_id": 1592841734,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2024-05-08T22:27:13Z",
      "updated_at": "2024-05-08T22:27:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594768654",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594768654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594769886",
      "pull_request_review_id": 2046866826,
      "id": 1594769886,
      "node_id": "PRRC_kwDOABII585fDkHe",
      "diff_hunk": "@@ -181,22 +180,19 @@ BOOST_AUTO_TEST_CASE(blockmanager_flush_block_file)\n         BOOST_CHECK_EQUAL(read_block.nVersion, 2);\n     }\n \n-    // When FlatFilePos* dbp is given, SaveBlockToDisk() will not write or\n-    // overwrite anything to the flat file block storage. It will, however,\n-    // update the blockfile metadata. This is to facilitate reindexing\n-    // when the user has the blocks on disk but the metadata is being rebuilt.\n+    // During reindex, the flat file block storage will not be written do.",
      "path": "src/test/blockmanager_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "6a22eede2083616ecc7558a16d8189c22b46403d",
      "original_commit_id": "a17eacab1f8790afc5f89ba2ee3e34da4c9369e1",
      "in_reply_to_id": 1592848815,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2024-05-08T22:29:18Z",
      "updated_at": "2024-05-08T22:29:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29975#discussion_r1594769886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594769886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29975"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    }
  ]
}