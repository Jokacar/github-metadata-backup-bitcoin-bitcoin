{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949",
    "id": 67907563,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njc5MDc1NjM=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7949",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/7949.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/7949.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
    "number": 7949,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[RPC] Add RPC long poll notifications",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "#### Reasons for another notification interface\n- Currently there is no interface that could be extended to \"private\" notification secured behind the authorization (like peers connected/disconnected or a new wallet relevant transaction notification)\n- HTTP long poll notifications are very easy to set up and require almost no dependencies\n- HTTP long poll notifications can easily pushed over the internet using httpd reverse proxy together with a popper authentication method (certs or http auth digest) together with TLS.\n- HTTP long poll would allow connecting applications to do all kinds of things with just a single communication channel (currently you need RPC & ZMQ for most use cases which would require VPN or a fancy multi port stunnel connection to broadcast the notification over the internet)\n#### How does it work\n- The listener calls the `pollnotification` RPC command.\n- If no notifications are available, the RPC thread will idle for a given timeout (30s by default)\n- If a notification was fired during the 30 seconds, the longpoll call will be responded with the new notification(s)\n- The client/listener can immediately reconnect and wait again\n- If notifications are already in the queue, the `pollnotification` command will immediately response.\n- Notifications can't get lost (possible to lose them during http transfer and if one exceed the queue limit)\n#### Downsides\n- JSON encoding overhead\n#### New RPC calls\n\n`setregisterednotifications [<notificationtype>]` (possible types are `hashtx` and `hashblock`)\n`getregisterednotifications`\n`pollnotifications`\n#### Missing\n- [ ] More tests\n- [ ] Documentation\n\nI'd like to use a such interface to work on a remote GUI (use case: GUI on your local desktop, node on a VPS).\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 749416508,
        "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
        "name": "Up for grabs",
        "color": "99a810",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-04-26T15:33:04Z",
    "updated_at": "2021-12-16T14:11:51Z",
    "closed_at": "2019-06-17T09:22:20Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "a5b76829224194e688460a87d7c4b8173638fc93",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "jonasschnelli:2016/04/rpc_signals",
      "ref": "2016/04/rpc_signals",
      "sha": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 9264454,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjY0NDU0",
        "name": "bitcoin",
        "full_name": "jonasschnelli/bitcoin",
        "owner": {
          "login": "jonasschnelli",
          "id": 178464,
          "node_id": "MDQ6VXNlcjE3ODQ2NA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonasschnelli",
          "html_url": "https://github.com/jonasschnelli",
          "followers_url": "https://api.github.com/users/jonasschnelli/followers",
          "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
          "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
          "repos_url": "https://api.github.com/users/jonasschnelli/repos",
          "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonasschnelli/bitcoin",
        "fork": true,
        "url": "https://api.github.com/repos/jonasschnelli/bitcoin",
        "archive_url": "https://api.github.com/repos/jonasschnelli/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonasschnelli/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonasschnelli/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonasschnelli/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonasschnelli/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonasschnelli/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonasschnelli/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonasschnelli/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonasschnelli/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonasschnelli/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jonasschnelli/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jonasschnelli/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jonasschnelli/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jonasschnelli/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jonasschnelli/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonasschnelli/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonasschnelli/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonasschnelli/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jonasschnelli/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonasschnelli/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonasschnelli/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonasschnelli/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonasschnelli/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonasschnelli/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jonasschnelli/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jonasschnelli/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonasschnelli/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonasschnelli/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonasschnelli/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonasschnelli/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jonasschnelli/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jonasschnelli/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonasschnelli/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jonasschnelli/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jonasschnelli/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jonasschnelli/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jonasschnelli/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonasschnelli/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jonasschnelli/bitcoin/hooks",
        "svn_url": "https://github.com/jonasschnelli/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 5,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 194164,
        "default_branch": "master",
        "open_issues_count": 5,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2022-08-07T18:33:53Z",
        "created_at": "2013-04-06T18:21:51Z",
        "updated_at": "2023-05-19T06:34:35Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "efae3663a772169f9ef5172d76f938e0bb02eca4",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35475,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 668,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T14:29:40Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T14:31:15Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 505,
    "deletions": 0,
    "changed_files": 8,
    "commits": 2,
    "review_comments": 12,
    "comments": 14
  },
  "events": [
    {
      "event": "commented",
      "id": 214786965,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDc4Njk2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/214786965",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T15:40:03Z",
      "updated_at": "2016-04-26T15:41:43Z",
      "author_association": "MEMBER",
      "body": "I like the concept of being able to listen for events through http, however I think this is severely limited by having server-side state, limiting the number of listeners to only one.\n\nWhat I'd personally prefer is, instead of longpolling, to subscribe to a 'stream' of events (e.g. websocket or just chunked encoding), where the set of events to listen to is in the request. This avoids having to store any client-state in the server - at least for longer than the request lasts.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214786965",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "commented",
      "id": 214789068,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDc4OTA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/214789068",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T15:45:30Z",
      "updated_at": "2016-04-26T15:45:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "> [... ] having server-side state, limiting the number of listeners to only one\n\nRight. The current implementation limits to only one listener. Extending this PR so it would support a client chosen UUID would not be very complicated (a set of queues and a set of registered notification types). Clients could register notification types along with a client-chosen UUID.\nI might extend this PR to support multiple listeners.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214789068",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "labeled",
      "id": 641681332,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDY0MTY4MTMzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/641681332",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T15:45:39Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 214824842,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDgyNDg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/214824842",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T17:45:23Z",
      "updated_at": "2016-04-29T11:33:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added a commit that allows multiple clients at the same time.\n\nThe new RPC commands require now a `clientUUID` parameter (a per client unique string, ideally a UUID after RFC 4122). Bitcoind keeps a queue, sequence numbers and registered types per client.\n\nThere is currently not max client limit and no way to remove clients (though you can unregister all notification types but not empty the current queue).\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-214824842",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 641842833,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjQxODQyODMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/641842833",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T17:47:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 641843795,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjQxODQzNzk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/641843795",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-04-26T17:47:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 652464431,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjUyNDY0NDMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/652464431",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-06T09:52:34Z"
    },
    {
      "event": "commented",
      "id": 217400507,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzQwMDUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217400507",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-06T09:53:11Z",
      "updated_at": "2016-05-06T09:53:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.\nWould be nice to get some concept NACKs/ACKs.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-217400507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA1ODE5MDQ6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "head_ref_force_pushed",
      "id": 652498732,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjUyNDk4NzMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/652498732",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-06T10:28:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 658300300,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NjU4MzAwMzAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/658300300",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-12T09:01:57Z"
    },
    {
      "event": "commented",
      "id": 218724368,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIxODcyNDM2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218724368",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-05-12T10:54:32Z",
      "updated_at": "2016-05-12T10:54:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-218724368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 716954961,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NzE2OTU0OTYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/716954961",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-07-08T12:40:46Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-07-12T22:06:36Z",
      "updated_at": "2016-07-12T22:06:36Z",
      "source": {
        "issue": {
          "id": 164992499,
          "node_id": "MDU6SXNzdWUxNjQ5OTI0OTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8333",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8333/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8333/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8333/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/8333",
          "number": 8333,
          "state": "closed",
          "state_reason": "completed",
          "title": "Block postprocessing is (relatively) slow.",
          "body": "On a system with high uptime and absurdly large dbcache and maxsigcachesize settings the time to remove conflicts is now approximately 50% of the time to process a new block.\n\nThis matters for miners time to switch to the new block.\n\nExample:\n\n```\n2016-07-12 04:27:18.506662   - Load block from disk: 0.00ms [0.02s]\n2016-07-12 04:27:18.506710     - Sanity checks: 0.00ms [0.01s]\n2016-07-12 04:27:18.506759     - Fork checks: 0.05ms [0.03s]\n2016-07-12 04:27:18.534023       - Connect 2977 transactions: 27.23ms (0.009ms/tx, 0.007ms/txin) [13.46s]\n2016-07-12 04:27:18.534892     - Verify 4142 txins: 28.13ms (0.007ms/txin) [35.45s]\n2016-07-12 04:27:18.546111     - Index writing: 11.21ms [4.49s]\n2016-07-12 04:27:18.546149     - Callbacks: 0.05ms [0.03s]\n2016-07-12 04:27:18.546589   - Connect total: 39.93ms [40.08s]\n2016-07-12 04:27:18.551713   - Flush: 5.11ms [3.35s]\n2016-07-12 04:27:18.551766   - Writing chainstate: 0.07ms [0.19s]\n2016-07-12 04:27:18.583436 UpdateTip: new best=000000000000000002576865a40fcb68bc012366d3c08f7ae11a1df793d6eb0c height=420364 version=0x30000000 log2_work=84.974337 tx=141859971 date='2016-07-12 04:27:52' progress=1.000000 cache=770.0MiB(245590tx) warning='6 of last 100 blocks have unexpected version'\n2016-07-12 04:27:18.583641   - Connect postprocess: 31.87ms [13.50s]\n2016-07-12 04:27:18.583658 - Connect block: 76.99ms [57.14s]\n```\n",
          "user": {
            "login": "pstratem",
            "id": 620611,
            "node_id": "MDQ6VXNlcjYyMDYxMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pstratem",
            "html_url": "https://github.com/pstratem",
            "followers_url": "https://api.github.com/users/pstratem/followers",
            "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
            "organizations_url": "https://api.github.com/users/pstratem/orgs",
            "repos_url": "https://api.github.com/users/pstratem/repos",
            "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/pstratem/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            },
            {
              "id": 326918230,
              "node_id": "MDU6TGFiZWwzMjY5MTgyMzA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage",
              "name": "Resource usage",
              "color": "981023",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "closed_at": "2019-06-08T01:59:25Z",
          "created_at": "2016-07-12T04:36:52Z",
          "updated_at": "2021-12-16T14:59:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-09-09T06:26:13Z",
      "updated_at": "2016-09-09T06:26:13Z",
      "source": {
        "issue": {
          "id": 175559954,
          "node_id": "MDExOlB1bGxSZXF1ZXN0ODQzNDA4NDk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8680",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8680/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8680/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8680/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/8680",
          "number": 8680,
          "state": "closed",
          "state_reason": null,
          "title": "Address Travis spurious failures",
          "body": "As discussed in last week's meeting. The failures are annoying.\n\nI'm sure that this isn't the best approach, but these rpcs seem generally useful, and I believe this fixes the current race issue.\n\nThe problem is that the wallet is not yet finished dealing with transactions before getblockcount/getbestblockhash return new values, so assertions about balances are racy. The approach I've taken here is to wait for a signal that the processing is complete, then cache the new height/hash on the rpc side. That allows for blocking in the call rather than polling, and it ensures that we're synced up before it returns. It also means no cs_main locking.\n\nTo fix sync_blocks in particular, wait for height 0 from all nodes. That returns the current height/hash instantly, since it should never actually have to wait. Then, grab the current height from all nodes, take the max, and wait on that height for all nodes. Repeat until all heights match.\n\n@sdaftuar Mentioned that it may be useful to a wait_for_wallet() call, which would presumably work similarly, though I'm afraid it may introduce new race issues. Suggestions on that approach are also welcome.\n",
          "user": {
            "login": "theuni",
            "id": 417043,
            "node_id": "MDQ6VXNlcjQxNzA0Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theuni",
            "html_url": "https://github.com/theuni",
            "followers_url": "https://api.github.com/users/theuni/followers",
            "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
            "organizations_url": "https://api.github.com/users/theuni/orgs",
            "repos_url": "https://api.github.com/users/theuni/repos",
            "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/theuni/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8680",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/8680",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/8680.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/8680.patch"
          },
          "closed_at": "2016-09-09T06:34:12Z",
          "created_at": "2016-09-07T17:23:01Z",
          "updated_at": "2021-09-08T11:22:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 271864278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTg2NDI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/271864278",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-11T13:09:26Z",
      "updated_at": "2017-01-11T13:09:26Z",
      "author_association": "MEMBER",
      "body": "Gah we need to take a look at this again after 0.14 is released.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-271864278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "commented",
      "id": 271867853,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTg2Nzg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/271867853",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-11T13:27:05Z",
      "updated_at": "2017-01-11T13:27:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes. Sure. I'll try to re-base and overhaul this soon.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-271867853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-02-12T14:57:03Z",
      "updated_at": "2017-02-12T14:57:03Z",
      "source": {
        "issue": {
          "id": 207039617,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTA1Nzg1MzUx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9745",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9745/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9745/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9745/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/9745",
          "number": 9745,
          "state": "closed",
          "state_reason": null,
          "title": "[RPC] Getting confirmations command",
          "body": "This is aimed at saving traffic to get transaction confirmations and improve rpc throughput.\r\n\r\nTo check transaction confirmations, we needs to call \"getrawtransaction\" or \"gettransaction\".\r\nBut to check confirmations of huge number of transaction, network is crowded and latency is up.\r\n\"getrawtransaction\" and \"gettransaction\" includes constancy infomation, though confirmations is just changeable field.\r\nI think it is good to split off \"confirmations\" from \"getrawtransaction\".\r\nFor this, add new command \"getconfirmations\" to rpc command.",
          "user": {
            "login": "34ro",
            "id": 2033895,
            "node_id": "MDQ6VXNlcjIwMzM4OTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2033895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/34ro",
            "html_url": "https://github.com/34ro",
            "followers_url": "https://api.github.com/users/34ro/followers",
            "following_url": "https://api.github.com/users/34ro/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/34ro/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/34ro/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/34ro/subscriptions",
            "organizations_url": "https://api.github.com/users/34ro/orgs",
            "repos_url": "https://api.github.com/users/34ro/repos",
            "events_url": "https://api.github.com/users/34ro/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/34ro/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9745",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/9745",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/9745.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/9745.patch"
          },
          "closed_at": "2017-06-05T15:59:22Z",
          "created_at": "2017-02-12T09:38:11Z",
          "updated_at": "2021-09-08T12:02:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "milestoned",
      "id": 986778584,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDk4Njc3ODU4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/986778584",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-03-05T13:21:06Z",
      "milestone": {
        "title": "0.15.0"
      }
    },
    {
      "event": "milestoned",
      "id": 1158781196,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDExNTg3ODExOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1158781196",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-11T13:27:24Z",
      "milestone": {
        "title": "0.16.0"
      }
    },
    {
      "event": "demilestoned",
      "id": 1158781198,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MTE1ODc4MTE5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1158781198",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-07-11T13:27:24Z",
      "milestone": {
        "title": "0.15.0"
      }
    },
    {
      "event": "commented",
      "id": 332896020,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg5NjAyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332896020",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-28T16:47:06Z",
      "updated_at": "2017-09-28T16:47:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Plan on rebasing this, or should just be closed?",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-332896020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "commented",
      "id": 332898896,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg5ODg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332898896",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-28T16:57:42Z",
      "updated_at": "2017-09-28T16:57:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm currently rewriting this... will be ready soon.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-332898896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1302402496,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTMwMjQwMjQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1302402496",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-20T05:57:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1302404063,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTMwMjQwNDA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1302404063",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-20T05:59:49Z"
    },
    {
      "event": "commented",
      "id": 338113926,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzODExMzkyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338113926",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-20T06:02:06Z",
      "updated_at": "2017-10-20T06:02:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Overhauled and rebased.\r\n\r\nThis is still server based (server keeps track of what the client has) queue max size is currently 1024^2 and does only contain hashes of blocks or transactions.\r\nEach notification comes with a sequence number to detect lost transactions (which then should trigger a \"full-client-sync\").",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-338113926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-23T01:26:59Z",
      "updated_at": "2017-10-23T01:26:59Z",
      "source": {
        "issue": {
          "id": 234525473,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTI0NjQ4OTEy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10554",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10554/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10554/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10554/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/10554",
          "number": 10554,
          "state": "closed",
          "state_reason": null,
          "title": "ZMQ: add publishers for wallet transactions.",
          "body": "There is no way to only get real time notifications of transaction that affect the wallet.\r\nYou have to do that manually by enabling zmqrawtx and filter out transactions.\r\n\r\nI'm suggesting adding two new publisers, both for hash and raw wallet transactions.\r\n\r\nAlso topic will indicate if transaction came from mempool or block so developers can handle the transaction accordingly without a RPC round trip to bitcoind.\r\n\r\nTests and documentation are updated.",
          "user": {
            "login": "somdoron",
            "id": 2715638,
            "node_id": "MDQ6VXNlcjI3MTU2Mzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2715638?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/somdoron",
            "html_url": "https://github.com/somdoron",
            "followers_url": "https://api.github.com/users/somdoron/followers",
            "following_url": "https://api.github.com/users/somdoron/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/somdoron/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/somdoron/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/somdoron/subscriptions",
            "organizations_url": "https://api.github.com/users/somdoron/orgs",
            "repos_url": "https://api.github.com/users/somdoron/repos",
            "events_url": "https://api.github.com/users/somdoron/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/somdoron/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 19,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10554",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/10554",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/10554.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/10554.patch"
          },
          "closed_at": "2018-05-05T13:09:57Z",
          "created_at": "2017-06-08T13:21:56Z",
          "updated_at": "2021-09-08T12:29:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTZhM2Y4ODhkZDNmYjhhNDdmYjg1ZDYzYzc2NWFjMDE5MjMxZGZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca6a3f888dd3fb8a47fb85d63c765ac019231dff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ca6a3f888dd3fb8a47fb85d63c765ac019231dff",
      "tree": {
        "sha": "737ec1623128c980b60274aa90859f5fd59ae0ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737ec1623128c980b60274aa90859f5fd59ae0ca"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 737ec1623128c980b60274aa90859f5fd59ae0ca\nparent ff92fbf24739a022eb677daab03c87c5e6971094\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1506573717 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1508722136 -1000\n\nAdd RPC long poll notifications\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlntRdkACgkQHrd2uwPH\nki136Q/9Eso6xKJJBCspLbZlbjZD7j5QLCrBNmjyzQDQTQWVcdwuqZVrz1uT8PrU\nTLS59lXcc+HpHQU0+59whG8E0vtF2TBHxu2GUS0GuzlLgMnUjCAbF8PlFRso0IMc\nXY/BVeUpFH0kBOTPXiaaExVnaE9zdqLHf7CPdTrzVOQcM5fQOmiykPGPiFBw9Fvx\nCZq0Lnum/eof0kwwEhHDWmxOeA6maKnG9v7srJD8fhorzlcXlLTdCe3uv1abkBCO\nUXyRIUMd8R4Hc1tfPDd5XT09MSJxCt9jbcxT9P5+HspJtf34TahnH7PRkkkgsNLR\n1aWhIBGeOmcKermPa11Hy6+Qcoz1Vsuyf3pu6bQhvRzmyfDzWbbbqjPb1RGP7GG8\n2a+Uqd/eXEsobwjOQ2w57zNwoqlkt80QNKyMsDZwrg1mqiBKEp9VCXDyPtZphdV6\nBrPIMNkbGQKIHDGeboYbY4igGuQg2Y/TOyky84UxAl7+OF4ASBjsxW2FJyyDdK5q\nM8EdfkSBIHC7dhHyaFMM5g6pvVDNU9ZRqCG0Rf0rMUPF8McUpQhqP4UPLXFkVveQ\nCU/+1dLJHZKOMX/8bUZNn/39NJyFqhbJkFOn4VxDImGyWKyIGuPV0Ucvs+V3pglP\nONBGZxez1dpSrXTuRxIiSPBMrp25SClfHjxu0k3Y5LtWroSNgVs=\n=Prnt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
          "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
        }
      ],
      "message": "Add RPC long poll notifications",
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-23T01:28:56Z"
      },
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-28T04:41:57Z"
      },
      "sha": "ca6a3f888dd3fb8a47fb85d63c765ac019231dff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjUyYzU1YjdhOGE2NWJiZGI4YWQ3YzA5ZGNiMDk4NzBhYTkxM2Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "tree": {
        "sha": "da4316e0e7210ce4d73d046d7720f8672a74c75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da4316e0e7210ce4d73d046d7720f8672a74c75f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree da4316e0e7210ce4d73d046d7720f8672a74c75f\nparent ca6a3f888dd3fb8a47fb85d63c765ac019231dff\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1508479065 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1508722141 -1000\n\n[QA] Add rpcnotification test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlntRd0ACgkQHrd2uwPH\nki33Cg//VImxDgmUPZ+8nwCnmPufc1qh8D0hFX4RFHkA2KOpLNoymreAJ1BciwMD\ntxQGxuaiESIMA2acgZy9hPDjY3v7UCxU0kIyniiS1/QyoXaWDriFH+v+P3f97MIL\nI26eoRZRZ81eqCTv4dvU+AneiUjwqBlrQ1PNLA12LWm32qQLhr0MInikvTK5Bii7\nozE5G6jQWsX4BIs+3myPXb7wXf5WHkk3wzfkHAJwZSr76khiUMiXCmzb3Cljcw9q\nF5lnVJzC3WYaEABxp4VIl2irIY+Mag3LTNpnIz7Fw5eZSFYaABZbYvJhV/TLKiC1\nUSe+2Mm/brAuFL2S3bbVuLZyYCRKHw8REjO3f/DcytJJP1vAvQmdX2psPVKwbuy0\nTN+arekGP2wTucXvTP31mkYncBFeh+7gzkBeuA8rTncJ+z9T8ydP7ZyLnos++/qu\n/svD6hSFY3zKNircbRsVkbf+qHUt6MU0SWW9KzDDYY8DAndD1U4cL6+Dq3gPavM+\nHBIOkNIGctJUAjsMjyAixnZqgBJPDQqAuhGAQgTbe6ea6q4yaz6frq0XX0N4h7+p\ntz3F/LmrBHs95qwUEcFDqGA0eT4fTFWFMYsgFzsuYKO+DB2Si8scki+EDM5rzHMt\ncljjsJYpK1KCFqQ+EcDysiZhSlLU6W4l7Voqp5l1h2hehJsL5IA=\n=fqfr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca6a3f888dd3fb8a47fb85d63c765ac019231dff",
          "sha": "ca6a3f888dd3fb8a47fb85d63c765ac019231dff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ca6a3f888dd3fb8a47fb85d63c765ac019231dff"
        }
      ],
      "message": "[QA] Add rpcnotification test",
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-23T01:29:01Z"
      },
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-20T05:57:45Z"
      },
      "sha": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1304763343,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTMwNDc2MzM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1304763343",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-23T01:32:34Z"
    },
    {
      "event": "reviewed",
      "id": 74505301,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1MDUzMDE=",
      "url": null,
      "actor": null,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, though should definitely get more general concept review. I think this could use a more explicit register/deregister process eg registernewclient [ThingsClientCaresAbout] -> provides UUID (instead of registering taking a client-provided UUID), then an explicit deregister which removes queues for that client, instead of setting notifications to 0 and the queues for that client simply leaking.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#pullrequestreview-74505301",
      "submitted_at": "2017-11-06T18:51:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
    },
    {
      "event": "commented",
      "id": 342247619,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjI0NzYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/342247619",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-11-06T18:51:37Z",
      "updated_at": "2017-11-06T18:51:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also, looks like the test is failing.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-342247619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T16:10:23Z",
      "updated_at": "2018-01-10T16:10:23Z",
      "source": {
        "issue": {
          "id": 233380393,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTIzODQ4MTA5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10519",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10519/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10519/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10519/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/10519",
          "number": 10519,
          "state": "closed",
          "state_reason": null,
          "title": "[RPC] Remove waitforblock and waitfornewblock",
          "body": "Removed because these RPCs are for tests only and are now unused",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 31,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10519",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/10519",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/10519.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/10519.patch"
          },
          "closed_at": "2018-08-31T10:56:40Z",
          "created_at": "2017-06-03T16:36:30Z",
          "updated_at": "2021-12-16T14:54:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 356650229,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjY1MDIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356650229",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T16:10:46Z",
      "updated_at": "2018-01-10T16:10:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Strong Concept ACK for this one ! \r\n@jonasschnelli any idea if you will bring this one from the dead?",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-356650229",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "mentioned",
      "id": 1417997955,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQxNzk5Nzk1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1417997955",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T16:10:46Z"
    },
    {
      "event": "subscribed",
      "id": 1417997956,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MTc5OTc5NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1417997956",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T16:10:46Z"
    },
    {
      "event": "commented",
      "id": 356699212,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjY5OTIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356699212",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T18:50:10Z",
      "updated_at": "2018-01-10T18:50:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@NicolasDorier \r\nI think there is no consensus about an additional push channel... also, @sipa brought up the idea of having a push channel (could be long poll) that acts similar then `listsinceblock` where the server doesn't need to keep track of clients (keep a queue).\r\nI haven't looked closer at this approach.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-356699212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "mentioned",
      "id": 1418306038,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQxODMwNjAzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1418306038",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T18:50:10Z"
    },
    {
      "event": "subscribed",
      "id": 1418306039,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MTgzMDYwMzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1418306039",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T18:50:10Z"
    },
    {
      "event": "mentioned",
      "id": 1418306041,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQxODMwNjA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1418306041",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T18:50:10Z"
    },
    {
      "event": "subscribed",
      "id": 1418306044,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MTgzMDYwNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1418306044",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-10T18:50:10Z"
    },
    {
      "event": "demilestoned",
      "id": 1420379267,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MTQyMDM3OTI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1420379267",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-11T18:52:30Z",
      "milestone": {
        "title": "0.16.0"
      }
    },
    {
      "event": "milestoned",
      "id": 1420379271,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDE0MjAzNzkyNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1420379271",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-11T18:52:30Z",
      "milestone": {
        "title": "0.17.0"
      }
    },
    {
      "event": "commented",
      "id": 357534439,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzUzNDQzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357534439",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-14T19:15:58Z",
      "updated_at": "2018-01-14T19:18:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "I implemented a similar solution in NBXplorer. Basically there is a `GetUTXOs(xPub)` call, this call replay all the transactions of the xpub in topological order to create the current utxo for this xpub. While playing the transactions, it hashes them along the way (the hash after each transaction is effectively the equivalent of a `bookmark`). Then the bookmark + the UTXO is sent back to the client.\r\n\r\nThe client process the result, then call again `GetUTXOs(xPub, bookmark)`. The server does the same operation, replaying all transactions while calculating bookmarks along the way, when it reaches the bookmark passed by the client, it knows that what is after is a differential to the previous bookmark. If there is no differential, it just long poll. If there is a differential, it sends it back to the client.\r\n\r\nIf the bookmark in parameter was not reached, then the full UTXO is sent back again to the client, with a flag indicating it is not a differential.\r\n\r\nThis solution does not involve server side state.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#issuecomment-357534439",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7949"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-08T21:21:00Z",
      "updated_at": "2018-03-08T21:21:00Z",
      "source": {
        "issue": {
          "id": 303634654,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTczODUyNzcw",
          "url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet/issues/65",
          "repository_url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet",
          "labels_url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet/issues/65/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet/issues/65/comments",
          "events_url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet/issues/65/events",
          "html_url": "https://github.com/nopara73/MagicalCryptoWallet/pull/65",
          "number": 65,
          "state": "closed",
          "state_reason": null,
          "title": "Add waitfor RPC methods",
          "body": "This PR is just in case you @nopara73 decide to go with this approach. I added the methods here because NBitcoin won't accept this methods in its codebase.",
          "user": {
            "login": "lontivero",
            "id": 127973,
            "node_id": "MDQ6VXNlcjEyNzk3Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lontivero",
            "html_url": "https://github.com/lontivero",
            "followers_url": "https://api.github.com/users/lontivero/followers",
            "following_url": "https://api.github.com/users/lontivero/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lontivero/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lontivero/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
            "organizations_url": "https://api.github.com/users/lontivero/orgs",
            "repos_url": "https://api.github.com/users/lontivero/repos",
            "events_url": "https://api.github.com/users/lontivero/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lontivero/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/nopara73/MagicalCryptoWallet/pulls/65",
            "html_url": "https://github.com/nopara73/MagicalCryptoWallet/pull/65",
            "diff_url": "https://github.com/nopara73/MagicalCryptoWallet/pull/65.diff",
            "patch_url": "https://github.com/nopara73/MagicalCryptoWallet/pull/65.patch"
          },
          "closed_at": "2018-03-09T03:54:13Z",
          "created_at": "2018-03-08T21:16:52Z",
          "updated_at": "2018-03-09T03:54:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-17T11:56:34Z",
      "updated_at": "2018-05-17T11:56:34Z",
      "source": {
        "issue": {
          "id": 323991022,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MTg4NzEyNDk3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13262",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13262/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13262/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13262/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/13262",
          "number": 13262,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet/RPC: Add listsincetx method with a stateless (server-side) long polling option",
          "body": "This adds a new wallet RPC call `listsincetx` that allows to list follow-up transactions (in order / `wtxOrdered`) from a specified transaction.\r\n\r\nIf the latest transaction was used as base-point for finding follow-up transactions and the long-polling timeout if set greater then zero, it will wait until new transactions has been found or the timeout has been expired (http push channel). Used together with a https proxy, one can build a very robust wallet transaction push channel (that can bypass NATs, proxys, etc.)\r\n\r\nThis does allow to build a wallet-notify push channel without keeping client-states on the server side.\r\nIt does also allow clients to effectively sync the transaction list.\r\n\r\nA client can simply loop over `listsincetx(<newest_known_txid>, 30/*timeout*/)` and will immediately get new txns once they arrive.\r\n\r\nMitigates #13237 \r\nRelated #7949\r\n\r\nThis (or a similar) approach was once discussed during an IRC meeting (can't find it anymore in the logs).\r\n\r\n* [ ] Needs release notes\r\n* [x] Needs wallet notify example python script",
          "user": {
            "login": "jonasschnelli",
            "id": 178464,
            "node_id": "MDQ6VXNlcjE3ODQ2NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonasschnelli",
            "html_url": "https://github.com/jonasschnelli",
            "followers_url": "https://api.github.com/users/jonasschnelli/followers",
            "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
            "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
            "repos_url": "https://api.github.com/users/jonasschnelli/repos",
            "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13262",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/13262",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/13262.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/13262.patch"
          },
          "closed_at": "2018-10-28T13:41:08Z",
          "created_at": "2018-05-17T11:56:34Z",
          "updated_at": "2021-12-16T14:58:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 1665122286,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE2NjUxMjIyODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1665122286",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-06T02:47:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "demilestoned",
      "id": 1743310898,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MTc0MzMxMDg5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1743310898",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-19T19:02:53Z",
      "milestone": {
        "title": "0.17.0"
      }
    },
    {
      "event": "milestoned",
      "id": 1743310900,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDE3NDMzMTA5MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1743310900",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-19T19:02:53Z",
      "milestone": {
        "title": "0.18.0"
      }
    },
    {
      "event": "reviewed",
      "id": 151629370,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNjI5Mzcw",
      "url": null,
      "actor": null,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#pullrequestreview-151629370",
      "submitted_at": "2018-09-02T18:37:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
    },
    {
      "event": "reviewed",
      "id": 151629390,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNjI5Mzkw",
      "url": null,
      "actor": null,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#pullrequestreview-151629390",
      "submitted_at": "2018-09-02T18:37:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
    },
    {
      "event": "reviewed",
      "id": 173015132,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTczMDE1MTMy",
      "url": null,
      "actor": null,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "@jonasschnelli do you plan to pick this again?",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#pullrequestreview-173015132",
      "submitted_at": "2018-11-30T14:51:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
    },
    {
      "event": "demilestoned",
      "id": 2121602058,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MjEyMTYwMjA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2121602058",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-02-06T15:44:49Z",
      "milestone": {
        "title": "0.18.0"
      }
    },
    {
      "event": "labeled",
      "id": 2416966467,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0MTY5NjY0Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2416966467",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-17T09:22:11Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "closed",
      "id": 2416966876,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjQxNjk2Njg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2416966876",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-17T09:22:20Z"
    },
    {
      "event": "unlabeled",
      "id": 2741499161,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc0MTQ5OTE2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741499161",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T16:52:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-10T06:11:34Z",
      "updated_at": "2019-11-10T06:11:34Z",
      "source": {
        "issue": {
          "id": 518510212,
          "node_id": "MDU6SXNzdWU1MTg1MTAyMTI=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17395",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17395/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17395/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17395/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/17395",
          "number": 17395,
          "state": "closed",
          "state_reason": "completed",
          "title": "GUI: Who is the GUI being designed for and how do we better avoid bikeshedding?",
          "body": "This is a brainstorming issue on the GUI. If I am missing context of past discussions on this please direct me to links (That is certainly possible, there have been years of discussions I am not aware of). I am opening this because I value my time and other contributors' time rather than because I am a regular user of the GUI (Disclaimer: I'm not but I have started reviewing some GUI related PRs and am interested in continuing to do so.)\r\n\r\nI am not a trained UX/UI designer but there appears to be some basic design principles when it comes to designing the GUI and providing feedback on GUI PRs that are being ignored on this project. Ideally we'll get some trained designers to start contributing to the project who can carry out basic feedback exercises to ensure GUI changes are informed and not subject to biases, bikeshedding etc\r\n\r\n1) Who are we designing the GUI for? Long term Core contributors (highly technical) that use the GUI on a regular basis? I don't know how many of these there are. Technically curious who use the GUI when they can't work out how to do something from the command line? Complete Bitcoin beginners? All of these groups? If it is the latter then we should all be under no illusions that compromises are necessary which will mean it is impossible for the design to be optimal for an individual group.\r\n\r\n2) Design preferences are subject to the \"sample size of 1\" trap where those reviewing GUI changes think they are providing feedback on behalf of a group that they don't belong to. A highly technical user just does not know what is optimal for a beginner. The only way you see what is optimal for a beginner is putting alternative GUIs in the hands of a statistically significant group of beginners. \r\n\r\nAn example open PR that motivated this issue is #16966. This is not picking on any of the people involved in that PR. When the project was smaller with fewer contributors there was no alternative other than individuals discussing their personal preferences. But at some stage (and certainly if we want the GUI to be used by greater numbers of users) we need a more effective collective thought process on this.\r\n\r\nI've reached out to some designers in the Bitcoin community and hopefully some of them will get involved in this discussion and/or review of future GUI PRs.\r\n",
          "user": {
            "login": "michaelfolkson",
            "id": 16323900,
            "node_id": "MDQ6VXNlcjE2MzIzOTAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelfolkson",
            "html_url": "https://github.com/michaelfolkson",
            "followers_url": "https://api.github.com/users/michaelfolkson/followers",
            "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
            "repos_url": "https://api.github.com/users/michaelfolkson/repos",
            "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 23,
          "closed_at": "2020-08-10T06:01:17Z",
          "created_at": "2019-11-06T14:32:26Z",
          "updated_at": "2022-02-15T10:46:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Bosch-0",
        "id": 55287964,
        "node_id": "MDQ6VXNlcjU1Mjg3OTY0",
        "avatar_url": "https://avatars.githubusercontent.com/u/55287964?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bosch-0",
        "html_url": "https://github.com/Bosch-0",
        "followers_url": "https://api.github.com/users/Bosch-0/followers",
        "following_url": "https://api.github.com/users/Bosch-0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bosch-0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bosch-0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bosch-0/subscriptions",
        "organizations_url": "https://api.github.com/users/Bosch-0/orgs",
        "repos_url": "https://api.github.com/users/Bosch-0/repos",
        "events_url": "https://api.github.com/users/Bosch-0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bosch-0/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T11:19:20Z",
      "updated_at": "2020-08-05T11:19:20Z",
      "source": {
        "issue": {
          "id": 673461498,
          "node_id": "MDU6SXNzdWU2NzM0NjE0OTg=",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/45",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/45/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/45/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/45/events",
          "html_url": "https://github.com/bitcoin-core/gui/issues/45",
          "number": 45,
          "state": "closed",
          "state_reason": "completed",
          "title": "Who is the GUI being designed for? -Continued Discussion-",
          "body": "I'd like to continue the discussion from [#17395](https://github.com/bitcoin/bitcoin/issues/17395) over at the bitcoin repo started by @michaelfolkson. \r\n\r\nThe two questions posed by Michael a long with summarized replies from the original thread are below. As someone who is interested in contributing to the design of the GUI I've also included some of my own opinions throughout. \r\n\r\n> 1. Who are we designing the GUI for? Long term Core contributors (highly technical) that use the GUI on a regular basis? I don't know how many of these there are. Technically curious who use the GUI when they can't work out how to do something from the command line? Complete Bitcoin beginners? All of these groups? If it is the latter then we should all be under no illusions that compromises are necessary which will mean it is impossible for the design to be optimal for an individual group.\r\n\r\n> 2. Design preferences are subject to the \"sample size of 1\" trap where those reviewing GUI changes think they are providing feedback on behalf of a group that they don't belong to. A highly technical user just does not know what is optimal for a beginner. The only way you see what is optimal for a beginner is putting alternative GUIs in the hands of a statistically significant group of beginners.\r\n\r\n- The GUI is intended for 'power users,' not beginners, intermediate or devs. Power users being those who are technically competent to run their own node, have basic CLI skills, but are still more comfortable with a simpler UI.\r\n\r\nI think devs also fall within the user base albeit not as frequent as the power users (say if the dev wants to do a simple task in a few clicks). Over time and with good design we can include all users (see below).\r\n\r\n- In the future the GUI should also include beginners and intermediate users, although not at the expense of removing important features or negatively impacting security, privacy, control etc. \r\n\r\nI don't see this as an issue as good design should be able to cater to both experienced and inexperienced users. As an example see [this exchange](https://medium.com/lgogroup/introducing-lgos-trading-interface-77967e4e108e) which offers different interfaces for differing user skills - taken from [crypto UX handbook](https://www.cryptouxhandbook.com/user-onboarding). Good usability is synonymous with good security - Casa articulates this much better in their [wealth security protocol.](https://docs.keys.casa/wealth-security-protocol/system-design-principles/usability-is-security) \r\n\r\n- The GUI does not need to be flashy / modern looking.\r\n\r\nI agree with this but this is in many ways unrelated to good design. A flashy look can increase usability is not synonymous with Aesthetics. As long as its fulfills its job thats all the matters. At this stage that job being having any level of user being able to run a node and have a wallet attached to that node (whether wallet features are used in the GUI or \r\n\r\n- Designers need to work within the constraints of Qt.\r\n\r\nGood point to make but I don't think the constraints are as big as made out to be in the original thread. As Christoph Ono, who worked on the designs for the Monero GUI which also uses Qt, pointed out a small team managed to revamp the UI/UX of the GUI over a few years without too many issues, see [here](https://github.com/GBKS/monero-wallet-design). @GBKS \r\n\r\n- Having a modular GUI / multiple implementations to cater to different user bases.\r\n\r\nAs I mentioned above I think good design can cater to all audiences within the same app, having a modular GUI is not an efficient way to go about things in my opinion.  \r\n\r\n- What is the main purpose of the GUI? _\"Note that the GUI is needed for more than just the wallet... right now, it is the only realistic way for a normal end user to run their own node at all.\"_ @luke-jr \r\n\r\nLuke also mentions \"...Bitcoin's security depends on a super-majority of the economy using their own full node.\" This isn't possible without including beginner and intermediate users which can only be done through well articulated design. \r\n\r\nAlthough this will likely be a controversial take, is the discontinuation of the GUI once enough options exist outside of core for users to run a fully validating node an option? Projects such as [Umbrel](https://github.com/getumbrel/umbrel) and [myNode](https://github.com/mynodebtc/mynode) are good examples of non-GUI fully validating nodes. If these become more popular among users for running a node than the GUI, is the resources put into it worthwhile when they could be applied to making bitcoins foundations even stronger?\r\n\r\n- Many usability improvements are being worked on on the technical side - [1](https://github.com/bitcoin/bitcoin/pull/16966) [2](https://github.com/bitcoin/bitcoin/pull/9483) [3](https://github.com/bitcoin/bitcoin/pull/7949)\r\n\r\nWith initiatives such as [Bitcoin Design](https://github.com/BitcoinDesign) and [square crypto design grants](https://medium.com/@squarecrypto/bringing-together-the-bitcoin-design-community-b89e5fbe080f) on offer, many more designers are likely to start contributing to open source bitcoin projects like the GUI. It's important that discussions like this happen so that designers and devs are on the same page. \r\n\r\nI'd encourage devs to join the [bitcoin design slack](https://join.slack.com/t/bitcoindesign/shared_invite/zt-fv00xzev-mfHaAsexPsu~QBlufPxL~g) and for designers to frequent this repo and join in on discussions when they can. \r\n",
          "user": {
            "login": "Bosch-0",
            "id": 55287964,
            "node_id": "MDQ6VXNlcjU1Mjg3OTY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/55287964?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Bosch-0",
            "html_url": "https://github.com/Bosch-0",
            "followers_url": "https://api.github.com/users/Bosch-0/followers",
            "following_url": "https://api.github.com/users/Bosch-0/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Bosch-0/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Bosch-0/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Bosch-0/subscriptions",
            "organizations_url": "https://api.github.com/users/Bosch-0/orgs",
            "repos_url": "https://api.github.com/users/Bosch-0/repos",
            "events_url": "https://api.github.com/users/Bosch-0/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Bosch-0/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 2146203879,
              "node_id": "MDU6TGFiZWwyMTQ2MjAzODc5",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Brainstorming",
              "name": "Brainstorming",
              "description": "",
              "color": "f4e095",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 58,
          "closed_at": "2021-06-03T01:44:36Z",
          "created_at": "2020-08-05T11:19:20Z",
          "updated_at": "2022-08-16T16:58:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "locked",
      "id": 5778622873,
      "node_id": "LOE_lADOABII584JAp9_zwAAAAFYbsmZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778622873",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:11:51Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62311355",
      "pull_request_review_id": null,
      "id": 62311355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzExMzU1",
      "diff_hunk": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python2",
      "path": "qa/rpc-tests/rpcsignals.py",
      "position": null,
      "original_position": 1,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "90b28e41a45ec96a0a11b6f30249438b47762541",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: python3\n",
      "created_at": "2016-05-06T10:10:47Z",
      "updated_at": "2017-10-23T01:32:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r62311355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62311355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62313033",
      "pull_request_review_id": null,
      "id": 62313033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzEzMDMz",
      "diff_hunk": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python2",
      "path": "qa/rpc-tests/rpcsignals.py",
      "position": null,
      "original_position": 1,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "90b28e41a45ec96a0a11b6f30249438b47762541",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.\n",
      "created_at": "2016-05-06T10:29:06Z",
      "updated_at": "2017-10-23T01:32:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r62313033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62313033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155028",
      "pull_request_review_id": 74505301,
      "id": 149155028,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE1NTAyOA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;\n+\n+    NotificationQueue* getQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    NotificationQueue* addQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        m_map_sequence_numbers[clientid] = new NotificationQueue();\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    void NotifyTransaction(const CTransactionRef& ptx)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        for (auto& queueEntry : m_map_sequence_numbers) {\n+            if (!queueEntry.second->isTypeRegistered(NotificationType::Tx)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Tx;\n+            entry.m_notification.setStr(ptx->GetHash().GetHex());\n+            queueEntry.second->addToQueue(entry);\n+        }\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction added in the block\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction removed in block disconnection\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n+    {\n+        LOCK(m_cs_queue_manager);\n+        BOOST_FOREACH (NotificationQueue* queue, m_map_sequence_numbers | boost::adaptors::map_values) {",
      "path": "src/rpc/notifications.cpp",
      "position": 218,
      "original_position": 218,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ugh, can we not use more BOOST_FOREACH garbage? Should be really easy to rewrite this without, no?",
      "created_at": "2017-11-06T17:59:29Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149155028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155354",
      "pull_request_review_id": 74505301,
      "id": 149155354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE1NTM1NA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;\n+\n+    NotificationQueue* getQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    NotificationQueue* addQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        m_map_sequence_numbers[clientid] = new NotificationQueue();\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    void NotifyTransaction(const CTransactionRef& ptx)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        for (auto& queueEntry : m_map_sequence_numbers) {\n+            if (!queueEntry.second->isTypeRegistered(NotificationType::Tx)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Tx;\n+            entry.m_notification.setStr(ptx->GetHash().GetHex());\n+            queueEntry.second->addToQueue(entry);\n+        }\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction added in the block\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction removed in block disconnection\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override",
      "path": "src/rpc/notifications.cpp",
      "position": 215,
      "original_position": 215,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I dont think this is the notification we want  here - dont we want to use BlockConnected/Disconnected to notify clients of all connected blocks, not just new tips after reorgs which potentially connect multiple blocks?",
      "created_at": "2017-11-06T18:00:45Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149155354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 215,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155844",
      "pull_request_review_id": 74505301,
      "id": 149155844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE1NTg0NA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;",
      "path": "src/rpc/notifications.cpp",
      "position": 55,
      "original_position": 55,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I generally prefer 64 bit ints here - sure, its unlikely you'd overflow 32 bits, but if you're online for 3 or 4 years you may start getting closeish.",
      "created_at": "2017-11-06T18:02:48Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149155844",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149155844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149158599",
      "pull_request_review_id": 74505301,
      "id": 149158599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE1ODU5OQ==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");",
      "path": "src/rpc/notifications.cpp",
      "position": 152,
      "original_position": 152,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd be somwhat worried we'd fill someone's drive with debug log entries in case they forget to deregister a listener, here.",
      "created_at": "2017-11-06T18:15:14Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149158599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149158599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149162289",
      "pull_request_review_id": 74505301,
      "id": 149162289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE2MjI4OQ==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;",
      "path": "src/rpc/notifications.cpp",
      "position": 171,
      "original_position": 171,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be great if we could de-duplicate the queues here - no need to have a queue per client, just have a global queue and keep track of how far delayed all the clients are in terms of the sequence number and just clean things up to the furthest-back client.",
      "created_at": "2017-11-06T18:29:11Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149162289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149162289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149163276",
      "pull_request_review_id": 74505301,
      "id": 149163276,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE2MzI3Ng==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;",
      "path": "src/rpc/notifications.cpp",
      "position": 171,
      "original_position": 171,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": 149162289,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, please use unique_ptr here instead of manual management and maybe remove the queue when there are no registered types (and, I suppose, the client is caught up) instead of keeping around a null queue.",
      "created_at": "2017-11-06T18:33:06Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149163276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149163276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149163720",
      "pull_request_review_id": 74505301,
      "id": 149163720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTE2MzcyMA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;\n+\n+    NotificationQueue* getQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    NotificationQueue* addQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        m_map_sequence_numbers[clientid] = new NotificationQueue();\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    void NotifyTransaction(const CTransactionRef& ptx)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        for (auto& queueEntry : m_map_sequence_numbers) {\n+            if (!queueEntry.second->isTypeRegistered(NotificationType::Tx)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Tx;\n+            entry.m_notification.setStr(ptx->GetHash().GetHex());\n+            queueEntry.second->addToQueue(entry);\n+        }\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction added in the block\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction removed in block disconnection\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n+    {\n+        LOCK(m_cs_queue_manager);\n+        BOOST_FOREACH (NotificationQueue* queue, m_map_sequence_numbers | boost::adaptors::map_values) {\n+            if (!queue->isTypeRegistered(NotificationType::Block)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Block;\n+            entry.m_notification.setStr(pindexNew->GetBlockHash().GetHex());\n+            queue->addToQueue(entry);\n+        }\n+    }\n+\n+    void TransactionAddedToMempool(const CTransactionRef& ptx) override\n+    {\n+        NotifyTransaction(ptx);\n+    }\n+};\n+\n+CCriticalSection cs_queueManagerSharedInstance;\n+static NotificationQueueManager* queueManagerSharedInstance = NULL;\n+\n+NotificationQueue* getQueue(const std::string& clientID, bool createIfNotExists)\n+{\n+    LOCK(cs_queueManagerSharedInstance);\n+    NotificationQueue* clientQueue = queueManagerSharedInstance->getQueue(clientID);\n+    if (!clientQueue && !createIfNotExists)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Client UUID not found.\");\n+    if (!clientQueue)\n+        clientQueue = queueManagerSharedInstance->addQueue(clientID);\n+    return clientQueue;\n+}\n+\n+UniValue setregisterednotifications(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 2)\n+        throw std::runtime_error(\n+            \"setregisterednotifications <uuid> [<type>, <type>, ...]\\n\"\n+            \"Register for rpc notification(s).\\n\"\n+            \"Notifications can be polled by calling pollnotifications.\"\n+            \"The client UUID must be unique per client application and will define the used queue.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"uuid\\\"         (string, required) The client uuid\\n\"\n+            \"2. \\\"type\\\"         (string, required) The notification type to register for (\\\"hashblock\\\", \\\"hashtx\\\")\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nRegister for block and transaction notifications\\n\" +\n+            HelpExampleCli(\"setregisterednotifications\", \"\\\"[\\\"hashblock\\\", \\\"hashtx\\\"]\\\" \\\"\") +\n+            \"register for transaction and block signals\\n\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR), true);\n+\n+    NotificationQueue* clientQueue = getQueue(request.params[0].get_str(), true);\n+\n+    /* remove all current registered types */\n+    clientQueue->unregisterAllTypes();\n+\n+    UniValue types = request.params[1].get_array();\n+    BOOST_FOREACH (const UniValue& newType, types.getValues()) {\n+        if (!newType.isStr())\n+            continue;\n+\n+        NotificationType type = clientQueue->stringToType(newType.get_str());\n+        if (type == NotificationType::Unknown) {\n+            /* don't register only for a subset of the requested notifications */\n+            clientQueue->unregisterAllTypes();\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Notification type not found\");\n+        }\n+\n+        clientQueue->registerType(type);\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+UniValue getregisterednotifications(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getregisterednotifications <uuid>\\n\"\n+            \"\\nReturns the currently registered RPC notification types for the given uuid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"uuid\\\"         (string, required) The client uuid\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"[\\\"\\n\"\n+            \"\\\"  \\\"<signal>\\\"             (string) The registered signal\\n\"\n+            \"\\\"  ,...\\n\"\n+            \"\\\"]\\\"\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a transaction\\n\" +\n+            HelpExampleCli(\"getregisterednotifications\", \"\") +\n+            \"Get the registered notification types\\n\" + HelpExampleRpc(\"getregisterednotifications\", \"\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR), true);\n+    NotificationQueue* clientQueue = getQueue(request.params[0].get_str(), false);\n+\n+    UniValue result = UniValue(UniValue::VARR);\n+    BOOST_FOREACH (NotificationType type, clientQueue->m_registered_notification_types)\n+        result.push_back(clientQueue->typeToString(type));\n+\n+    return result;\n+}\n+\n+UniValue pollnotifications(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"pollnotifications <uuid> <timeout>\\n\"\n+            \"\\nLong poll function to get all available notifications for a given uuid (see setregisterednotifications for how to register for notifications).\\n\"\n+            \"The RPC thread will idle for the via <timeout> defined amount of seconds and/or will immediately response if new notifications are available\\n\"\n+            \"Arguments:\\n\"\n+            \"1. \\\"uuid\\\"         (string, required) The client uuid\\n\"\n+            \"2. \\\"timeout\\\"      (numeric, optional) The timeout \\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"[ notification, ... ]\\\"             (object) The notification object\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nPoll notifications for client a8098c1a...\\n\" +\n+            HelpExampleCli(\"pollnotifications\", \"\\\"a8098c1a-f86e-11da-bd1a-00112444be1e\\\" 500\") +\n+            \"Long poll notification (max. 500 seconds)\\n\" + HelpExampleRpc(\"pollnotifications\", \"\\\"a8098c1a-f86e-11da-bd1a-00112444be1e\\\" 500\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM), false);\n+    NotificationQueue* clientQueue = getQueue(request.params[0].get_str(), false);\n+\n+    int64_t timeOut = DEFAULT_POLL_TIMEOUT;\n+    if (request.params.size() == 2)\n+        timeOut = request.params[1].get_int64();\n+\n+    int64_t startTime = GetTime();\n+\n+    UniValue result = UniValue(UniValue::VARR);\n+    // allow long polling\n+    while (!ShutdownRequested()) {\n+        if (clientQueue->elementsAvailable()) {\n+            clientQueue->dequeueElements(result);\n+            break;\n+        }\n+        if (startTime + timeOut + (500 / 1000.0) < GetTime())\n+            break;\n+        MilliSleep(500);",
      "path": "src/rpc/notifications.cpp",
      "position": 352,
      "original_position": 352,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably use a CV and a way for Interrupt to interrupt it instead of calling ShutdownRequested in a 500ms loop.",
      "created_at": "2017-11-06T18:34:53Z",
      "updated_at": "2017-11-06T18:51:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r149163720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149163720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 352,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214549319",
      "pull_request_review_id": 151629370,
      "id": 214549319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU0OTMxOQ==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't",
      "path": "src/rpc/notifications.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo found by `codespell`: becase",
      "created_at": "2018-09-02T18:37:16Z",
      "updated_at": "2018-09-02T18:37:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r214549319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214549319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214549340",
      "pull_request_review_id": 151629390,
      "id": 214549340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU0OTM0MA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting",
      "path": "src/rpc/notifications.cpp",
      "position": 86,
      "original_position": 86,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo found by `codespell`: successfull",
      "created_at": "2018-09-02T18:37:40Z",
      "updated_at": "2018-09-02T18:37:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r214549340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214549340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231934058",
      "pull_request_review_id": 173015132,
      "id": 231934058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTkzNDA1OA==",
      "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"init.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"rpc/server.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validationinterface.h\"\n+\n+#include <univalue.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/range/adaptors.hpp>\n+\n+#include <deque>\n+#include <exception>\n+#include <stdint.h>\n+\n+static const char* MSG_HASHBLOCK = \"hashblock\";\n+static const char* MSG_HASHTX = \"hashtx\";\n+\n+/* keep the max queue size large becase we don't\n+   auto-register for notification on startup */\n+static const size_t MAX_QUEUE_SIZE = 1024 * 1024;\n+static const int DEFAULT_POLL_TIMEOUT = 30;\n+\n+enum class NotificationType {\n+    Unknown,\n+    Block,\n+    Tx\n+};\n+\n+typedef std::pair<size_t, size_t> queueRange_t;\n+typedef std::string clientUUID_t;\n+\n+// class that represents a notification\n+class NotificationEntry\n+{\n+public:\n+    NotificationType m_type;\n+    int32_t m_sequence_number;\n+    UniValue m_notification;\n+};\n+\n+class NotificationQueue\n+{\n+public:\n+    std::deque<NotificationEntry> m_queue;\n+    std::map<NotificationType, int32_t> m_map_sequence_numbers;\n+    std::set<NotificationType> m_registered_notification_types;\n+\n+    CCriticalSection m_cs_notification_queue;\n+\n+    const std::string typeToString(NotificationType type) const\n+    {\n+        switch (type) {\n+        case NotificationType::Block:\n+            return MSG_HASHBLOCK;\n+            break;\n+        case NotificationType::Tx:\n+            return MSG_HASHTX;\n+            break;\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    NotificationType stringToType(const std::string& strType) const\n+    {\n+        if (strType == MSG_HASHBLOCK)\n+            return NotificationType::Block;\n+        else if (strType == MSG_HASHTX)\n+            return NotificationType::Tx;\n+        else\n+            return NotificationType::Unknown;\n+    }\n+\n+    // populates a json object with all notifications in the queue\n+    // returns a range to allow removing the elements from the queue\n+    // after successfull transmitting\n+    queueRange_t weakDequeueNotifications(UniValue& result)\n+    {\n+        size_t firstElement = 0;\n+        size_t elementCount = 0;\n+\n+        LOCK(m_cs_notification_queue);\n+        for (const NotificationEntry& entry : m_queue) {\n+            UniValue obj = UniValue(UniValue::VOBJ);\n+            obj.pushKV(\"type\", typeToString(entry.m_type));\n+            obj.pushKV(\"seq\", entry.m_sequence_number);\n+            obj.pushKV(\"obj\", entry.m_notification);\n+            result.push_back(obj);\n+            elementCount++;\n+        }\n+        return std::make_pair(firstElement, elementCount);\n+    }\n+\n+    // removes notifications in the given range from the queue\n+    void eraseRangeFromQueue(const queueRange_t range)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_queue.erase(m_queue.begin() + range.first, m_queue.begin() + range.first + range.second);\n+    }\n+\n+    // dequeues all notifications from the queue\n+    void dequeueElements(UniValue& result)\n+    {\n+        queueRange_t range = weakDequeueNotifications(result);\n+        eraseRangeFromQueue(range);\n+    }\n+\n+    bool elementsAvailable()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return m_queue.size() > 0;\n+    }\n+\n+    void registerType(NotificationType type)\n+    {\n+        if (type == NotificationType::Unknown)\n+            return;\n+\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.insert(type);\n+    }\n+\n+    void unregisterType(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.erase(type);\n+    }\n+\n+    void unregisterAllTypes()\n+    {\n+        LOCK(m_cs_notification_queue);\n+        m_registered_notification_types.clear();\n+    }\n+\n+    void addToQueue(NotificationEntry entry)\n+    {\n+        LOCK(m_cs_notification_queue);\n+\n+        size_t queueSize = m_queue.size();\n+        if (queueSize > MAX_QUEUE_SIZE) {\n+            m_queue.pop_front();\n+            LogPrintf(\"RPC Notification limit has been reached, dropping oldest element\\n\");\n+        }\n+        m_map_sequence_numbers[entry.m_type]++;\n+        entry.m_sequence_number = m_map_sequence_numbers[entry.m_type];\n+        m_queue.push_back(entry);\n+    }\n+\n+    /* checks if a certain notification type is registered */\n+    bool isTypeRegistered(NotificationType type)\n+    {\n+        LOCK(m_cs_notification_queue);\n+        return (m_registered_notification_types.find(type) != m_registered_notification_types.end());\n+    }\n+};\n+\n+class NotificationQueueManager : public CValidationInterface\n+{\n+public:\n+    CCriticalSection m_cs_queue_manager;\n+    std::map<clientUUID_t, NotificationQueue*> m_map_sequence_numbers;\n+\n+    NotificationQueue* getQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    NotificationQueue* addQueue(const clientUUID_t& clientid)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        m_map_sequence_numbers[clientid] = new NotificationQueue();\n+        return m_map_sequence_numbers[clientid];\n+    }\n+\n+    void NotifyTransaction(const CTransactionRef& ptx)\n+    {\n+        LOCK(m_cs_queue_manager);\n+        for (auto& queueEntry : m_map_sequence_numbers) {\n+            if (!queueEntry.second->isTypeRegistered(NotificationType::Tx)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Tx;\n+            entry.m_notification.setStr(ptx->GetHash().GetHex());\n+            queueEntry.second->addToQueue(entry);\n+        }\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction added in the block\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override\n+    {\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            // Do a normal notify for each transaction removed in block disconnection\n+            NotifyTransaction(ptx);\n+        }\n+    }\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n+    {\n+        LOCK(m_cs_queue_manager);\n+        BOOST_FOREACH (NotificationQueue* queue, m_map_sequence_numbers | boost::adaptors::map_values) {\n+            if (!queue->isTypeRegistered(NotificationType::Block)) continue;\n+\n+            NotificationEntry entry;\n+            entry.m_type = NotificationType::Block;\n+            entry.m_notification.setStr(pindexNew->GetBlockHash().GetHex());\n+            queue->addToQueue(entry);\n+        }\n+    }\n+\n+    void TransactionAddedToMempool(const CTransactionRef& ptx) override\n+    {\n+        NotifyTransaction(ptx);\n+    }\n+};\n+\n+CCriticalSection cs_queueManagerSharedInstance;\n+static NotificationQueueManager* queueManagerSharedInstance = NULL;\n+\n+NotificationQueue* getQueue(const std::string& clientID, bool createIfNotExists)\n+{\n+    LOCK(cs_queueManagerSharedInstance);\n+    NotificationQueue* clientQueue = queueManagerSharedInstance->getQueue(clientID);\n+    if (!clientQueue && !createIfNotExists)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Client UUID not found.\");\n+    if (!clientQueue)\n+        clientQueue = queueManagerSharedInstance->addQueue(clientID);\n+    return clientQueue;\n+}\n+\n+UniValue setregisterednotifications(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 2)\n+        throw std::runtime_error(\n+            \"setregisterednotifications <uuid> [<type>, <type>, ...]\\n\"\n+            \"Register for rpc notification(s).\\n\"\n+            \"Notifications can be polled by calling pollnotifications.\"\n+            \"The client UUID must be unique per client application and will define the used queue.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"uuid\\\"         (string, required) The client uuid\\n\"\n+            \"2. \\\"type\\\"         (string, required) The notification type to register for (\\\"hashblock\\\", \\\"hashtx\\\")\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nRegister for block and transaction notifications\\n\" +\n+            HelpExampleCli(\"setregisterednotifications\", \"\\\"[\\\"hashblock\\\", \\\"hashtx\\\"]\\\" \\\"\") +\n+            \"register for transaction and block signals\\n\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR), true);\n+\n+    NotificationQueue* clientQueue = getQueue(request.params[0].get_str(), true);\n+\n+    /* remove all current registered types */\n+    clientQueue->unregisterAllTypes();\n+\n+    UniValue types = request.params[1].get_array();\n+    BOOST_FOREACH (const UniValue& newType, types.getValues()) {\n+        if (!newType.isStr())\n+            continue;\n+\n+        NotificationType type = clientQueue->stringToType(newType.get_str());\n+        if (type == NotificationType::Unknown) {\n+            /* don't register only for a subset of the requested notifications */\n+            clientQueue->unregisterAllTypes();\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Notification type not found\");\n+        }\n+\n+        clientQueue->registerType(type);\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+UniValue getregisterednotifications(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getregisterednotifications <uuid>\\n\"\n+            \"\\nReturns the currently registered RPC notification types for the given uuid.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"uuid\\\"         (string, required) The client uuid\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"[\\\"\\n\"\n+            \"\\\"  \\\"<signal>\\\"             (string) The registered signal\\n\"\n+            \"\\\"  ,...\\n\"\n+            \"\\\"]\\\"\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a transaction\\n\" +",
      "path": "src/rpc/notifications.cpp",
      "position": 303,
      "original_position": 303,
      "commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "original_commit_id": "2652c55b7a8a65bbdb8ad7c09dcb09870aa913f3",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👀 ",
      "created_at": "2018-11-08T15:28:28Z",
      "updated_at": "2018-11-30T14:51:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/7949#discussion_r231934058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231934058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7949"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 303,
      "original_line": 303,
      "side": "RIGHT"
    }
  ]
}