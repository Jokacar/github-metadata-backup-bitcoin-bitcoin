{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800",
    "id": 313837099,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzEzODM3MDk5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16800",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16800.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16800.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/037e55adc005e9d8253d3d35e7a30b2e8521389c",
    "number": 16800,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Basic Miniscript support in output descriptors",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This pull request introduces support for [miniscript](http://bitcoin.sipa.be/miniscript) in Bitcoin Core.\r\n\r\nThe bulk of the code is in the 3 commits that add the miniscript module, including conversion from/to CScript, converting to and parsing from its engineer-readable string notation, property analysis and ops limit/stack size limit that are necessary to assess the security of arbitrary scripts.\r\n\r\nA number of tests are included, including tests against known scripts, and against randomly generated scripts.\r\n\r\nThe final commit integrates the miniscript module into descriptors. This is only rudimentary, as it is not yet integrated in the signing code. I'm including it here to give something accessible to play with, but if desirable I can move that to a later PR as well.",
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 192202000,
        "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
        "name": "Consensus",
        "color": "009800",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 1392286103,
        "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
        "name": "Needs Conceptual Review",
        "description": "",
        "color": "fef2c0",
        "default": false
      }
    ],
    "created_at": "2019-09-04T02:58:02Z",
    "updated_at": "2023-01-25T10:09:37Z",
    "closed_at": "2022-01-25T15:43:51Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "c996ed9a466f2f02c840d1ebb9fa175a266a6c30",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "sipa:201908_miniscript",
      "ref": "201908_miniscript",
      "sha": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 84,
        "watchers_count": 84,
        "size": 218170,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T19:30:18Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-07-17T18:31:45Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5e202382a987351a59d5cda98ea9f2aee99f61a5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35475,
        "stargazers_count": 70608,
        "watchers_count": 70608,
        "size": 236222,
        "default_branch": "master",
        "open_issues_count": 672,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-02T19:06:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-02T18:21:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1942,
    "deletions": 103,
    "changed_files": 11,
    "commits": 7,
    "review_comments": 8,
    "comments": 23
  },
  "events": [
    {
      "event": "labeled",
      "id": 2605541092,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MDU1NDEwOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605541092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:03:45Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 2605541093,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MDU1NDEwOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605541093",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:03:45Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "labeled",
      "id": 2605541095,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MDU1NDEwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605541095",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:03:45Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2605541097,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MDU1NDEwOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605541097",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:03:45Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2605544870,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNTU0NDg3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605544870",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:06:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2605556548,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNTU1NjU0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605556548",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:16:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2605566878,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNTU2Njg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2605566878",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T03:24:18Z"
    },
    {
      "event": "commented",
      "id": 527731575,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzczMTU3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527731575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T04:11:24Z",
      "updated_at": "2019-10-05T12:29:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17056](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17056.html) (descriptors: Introduce sortedmulti descriptor by achow101)\n* [#16889](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16889.html) (Add some general std::vector utility functions by sipa)\n* [#16887](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16887.html) (Abstract out some of the descriptor Span-parsing helpers by sipa)\n* [#16807](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16807.html) (Let validateaddress locate error in Bech32 address by meshcollider)\n* [#16710](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16710.html) (build: Enable -Wsuggest-override if available by hebasto)\n* [#16440](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16440.html) (BIP-322: Generic signed message format by kallewoof)\n* [#15590](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15590.html) (Descriptor: add GetAddressType() and IsSegWit() by Sjors)\n* [#13751](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13751.html) (Utils and libraries: Drops the boost/algorithm/string/split.hpp dependency by l2a5b1)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-527731575",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 527797423,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzc5NzQyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527797423",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T08:23:16Z",
      "updated_at": "2019-09-04T08:59:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThanks for the great work on miniscript and the C++ implementation!\r\n\r\nThis version seems to deviate somewhat to the version in the [upstream repo](https://github.com/sipa/miniscript) which makes it unclear to me which of the issues I found during my review that have been addressed:\r\n* [Avoid termination due to unhandled exception when parsing invalid arguments to after(...), older(...), thresh(...) and thresh_m(...)](https://github.com/sipa/miniscript/pull/3)\r\n* [Avoid assertion failure on after(k) or older(k) where k < 1 or k >= 0x80000000UL](https://github.com/sipa/miniscript/pull/4)\r\n* [Avoid running out of stack space by limiting recursion depth in Parse(...)](https://github.com/sipa/miniscript/pull/5)\r\n* [Policies with too high nesting depth are not rejected: It is possible to create small inputs that cause extreme memory usage (in practice: OOM kill or std::bad_alloc)](https://github.com/sipa/miniscript/issues/7)\r\n\r\nCould you clarify? :-)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-527797423",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "unlabeled",
      "id": 2606395158,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjYwNjM5NTE1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2606395158",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T09:51:40Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2606395160,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MDYzOTUxNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2606395160",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T09:51:40Z",
      "label": {
        "name": "Needs Conceptual Review",
        "color": "fef2c0"
      }
    },
    {
      "event": "unlabeled",
      "id": 2606395427,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjYwNjM5NTQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2606395427",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T09:51:45Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 283549870,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgzNTQ5ODcw",
      "url": null,
      "actor": null,
      "commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#pullrequestreview-283549870",
      "submitted_at": "2019-09-04T11:38:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2607877062,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNzg3NzA2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607877062",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T17:42:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2607959647,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNzk1OTY0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607959647",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T18:09:22Z"
    },
    {
      "event": "commented",
      "id": 528022659,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyODAyMjY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/528022659",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T18:18:15Z",
      "updated_at": "2019-09-04T18:18:15Z",
      "author_association": "MEMBER",
      "body": "@practicalswift Thanks for reminding me, I had forgotten about those (and wasn't really looking at the miniscript repo while working on this PR). Specifically:\r\n* The overflow/underflow issue and the OOM issue don't apply here, as they're in the compiler code which I'm not PR'ing here.\r\n* The unhandled exception I've fixed independently because `stoul` and friends are locale dependent (both here and upstream).\r\n* The stack depth we need to fix still, I've commented on the issue.\r\n\r\nAlso, this PR should be perfectly in sync with the upstream repo, so if you want to PR fixes, they can go there preferably, and I'll incorporate them here.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-528022659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 2607990302,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjYwNzk5MDMwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607990302",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T18:18:15Z"
    },
    {
      "event": "subscribed",
      "id": 2607990303,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2MDc5OTAzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2607990303",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T18:18:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608158164,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODE1ODE2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608158164",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T19:15:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608475179,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODQ3NTE3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608475179",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T21:04:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608648770,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODY0ODc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608648770",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T22:10:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608699350,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODY5OTM1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608699350",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T22:30:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2608772239,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwODc3MjIzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2608772239",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-04T23:14:54Z"
    },
    {
      "event": "reviewed",
      "id": 283954717,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgzOTU0NzE3",
      "url": null,
      "actor": null,
      "commit_id": "046a0b9cc261f8ded799eeae9f6d11b9095ea03a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#pullrequestreview-283954717",
      "submitted_at": "2019-09-04T23:41:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2611336468,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxMTMzNjQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2611336468",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-05T16:20:28Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzQ2OTE4OTlkMTI4Y2Q0ZDhhOGI2MDUwMzgwM2ZjNTNkNDNlYjlm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc4691899d128cd4d8a8b60503803fc53d43eb9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4691899d128cd4d8a8b60503803fc53d43eb9f",
      "tree": {
        "sha": "eb498027e458e9cb4b6132706dc5601f9219d26d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb498027e458e9cb4b6132706dc5601f9219d26d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e202382a987351a59d5cda98ea9f2aee99f61a5",
          "sha": "5e202382a987351a59d5cda98ea9f2aee99f61a5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5e202382a987351a59d5cda98ea9f2aee99f61a5"
        }
      ],
      "message": "Abstract out some of the descriptor Span-parsing helpers",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T18:42:23Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-07-30T21:53:05Z"
      },
      "sha": "fc4691899d128cd4d8a8b60503803fc53d43eb9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjNkNWU3OTA4ZjAzNDgyNDQ0MzA0MjMyZjhhMDNiNjlkZTI3NzRl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663d5e7908f03482444304232f8a03b69de2774e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/663d5e7908f03482444304232f8a03b69de2774e",
      "tree": {
        "sha": "d225b9b7993c16f8fb4cfb03c5dc31cb0d608023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d225b9b7993c16f8fb4cfb03c5dc31cb0d608023"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc4691899d128cd4d8a8b60503803fc53d43eb9f",
          "sha": "fc4691899d128cd4d8a8b60503803fc53d43eb9f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4691899d128cd4d8a8b60503803fc53d43eb9f"
        }
      ],
      "message": "Add some general std::vector utility functions\n\nAdded are:\n\n* Vector(arg1,arg2,arg3,...) constructs a vector with the specified\n  arguments as elements. The vector's type is derived from the\n  arguments. If some of the arguments are rvalue references, they\n  will be moved into place rather than copied (which can't be achieved\n  using list initialization).\n\n* Cat(vector1,vector2) returns a concatenation of the two vectors,\n  efficiently moving elements when relevant.\n\nVector generalizes (and replaces) the Singleton function in\nsrc/descriptor.cpp, and Cat replaces the Cat function in bech32.cpp",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T18:42:23Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-28T22:12:51Z"
      },
      "sha": "663d5e7908f03482444304232f8a03b69de2774e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2611885778,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxMTg4NTc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2611885778",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-05T18:59:07Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWZiNDhlYmExNjY0NTBjYjkwZDRlYzcxZjIxNzQwN2ZiYjY4ZmZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9fb48eba166450cb90d4ec71f217407fbb68ffe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fb48eba166450cb90d4ec71f217407fbb68ffe",
      "tree": {
        "sha": "8595a31bb0a7285a6d727263059d6d7fede94603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8595a31bb0a7285a6d727263059d6d7fede94603"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663d5e7908f03482444304232f8a03b69de2774e",
          "sha": "663d5e7908f03482444304232f8a03b69de2774e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/663d5e7908f03482444304232f8a03b69de2774e"
        }
      ],
      "message": "Miniscript: type system, script creation, text notation, tests",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T22:31:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-28T23:23:03Z"
      },
      "sha": "f9fb48eba166450cb90d4ec71f217407fbb68ffe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmNkNmY5MDNlMjUyNTA5Nzg5ODRkNDgyOGVhOWNkZGEwMzMwZGEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36cd6f903e25250978984d4828ea9cdda0330da3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/36cd6f903e25250978984d4828ea9cdda0330da3",
      "tree": {
        "sha": "b99ad5ff540c99cd8fb5960eb225cd7ff7569b65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99ad5ff540c99cd8fb5960eb225cd7ff7569b65"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9fb48eba166450cb90d4ec71f217407fbb68ffe",
          "sha": "f9fb48eba166450cb90d4ec71f217407fbb68ffe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fb48eba166450cb90d4ec71f217407fbb68ffe"
        }
      ],
      "message": "Miniscript: conversion from script",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T22:31:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-02T02:31:22Z"
      },
      "sha": "36cd6f903e25250978984d4828ea9cdda0330da3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Yzg2ZWY1ZDE5YWRiYmJmZThiOGJjYWViNGUyNTFkMTJhYmIwZTM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38",
      "tree": {
        "sha": "1018ce5845f0a8168aa324214e45f7694a0b3312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1018ce5845f0a8168aa324214e45f7694a0b3312"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36cd6f903e25250978984d4828ea9cdda0330da3",
          "sha": "36cd6f903e25250978984d4828ea9cdda0330da3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/36cd6f903e25250978984d4828ea9cdda0330da3"
        }
      ],
      "message": "Miniscript: ops limit and stack size computation",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T22:31:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-29T21:16:27Z"
      },
      "sha": "5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzE2MjAzZGU2NjA2MDYwYjUxZjNkMmNjMDY2OTIxMjM4Y2EzZjZj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d316203de6606060b51f3d2cc066921238ca3f6c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d316203de6606060b51f3d2cc066921238ca3f6c",
      "tree": {
        "sha": "305e864faf54684c1c5bda29731cf895f7920e57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/305e864faf54684c1c5bda29731cf895f7920e57"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38",
          "sha": "5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5c86ef5d19adbbbfe8b8bcaeb4e251d12abb0e38"
        }
      ],
      "message": "Abstract out DescriptorImpl::KeyToString",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T22:31:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-31T01:30:35Z"
      },
      "sha": "d316203de6606060b51f3d2cc066921238ca3f6c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzdlNTVhZGMwMDVlOWQ4MjUzZDNkMzVlN2EzMGIyZTg1MjEzODlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "tree": {
        "sha": "bebd71674c8e2b32cc44dbb76fd7ae004926013f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bebd71674c8e2b32cc44dbb76fd7ae004926013f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d316203de6606060b51f3d2cc066921238ca3f6c",
          "sha": "d316203de6606060b51f3d2cc066921238ca3f6c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d316203de6606060b51f3d2cc066921238ca3f6c"
        }
      ],
      "message": "Basic Miniscript support in output descriptors",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-05T22:31:37Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-31T01:32:15Z"
      },
      "sha": "037e55adc005e9d8253d3d35e7a30b2e8521389c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2612543743,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxMjU0Mzc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2612543743",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-05T22:32:27Z"
    },
    {
      "event": "commented",
      "id": 530808234,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDgwODIzNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530808234",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-12T12:46:18Z",
      "updated_at": "2019-09-12T12:57:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm afraid a carefully constructed script is able to trigger a heap out-of-bounds read in `Node::CalcOps` (called indirectly from `miniscript::FromScript`). \r\n\r\n`Node::CalcOps` appears to be reachable  via RPC calls `listunspent`, `scantxoutset` and `getaddressinfo` (see call graph below).\r\n\r\nCode:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/037e55adc005e9d8253d3d35e7a30b2e8521389c/src/script/miniscript.h#L451-L462\r\n\r\nNote that `k` is not necessarily within bounds.\r\n\r\nCall graph:\r\n\r\n* `listunspent/scantxoutset/getaddressinfo` → `InferDescriptor` → `InferScript` → `miniscript::FromScript` → `DecodeMulti` → `DecodeSingle` → `MakeNodeRef` → `Node ctor` → `Node::CalcOps`\r\n\r\n(Also posted to the original repo as https://github.com/sipa/miniscript/issues/12)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530808234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 530871000,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDg3MTAwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530871000",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-12T15:09:20Z",
      "updated_at": "2019-09-12T15:09:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "The smallest Bitcoin script I've been able to construct that triggers this heap out-of-bounds read is `OP_0 OP_2 OP_EQUAL` (`00 52 87`).",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530871000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 530876527,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDg3NjUyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530876527",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-12T15:22:28Z",
      "updated_at": "2019-09-12T15:22:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Found another somewhat related issue: an assertion failure in `ComputeType` is hit when processing the script `OP_0 OP_0 OP_EQUAL` (`00 00 87`).\r\n\r\n```\r\nbitcoin/script/miniscript.cpp:54: \r\n    miniscript::Type miniscript::internal::ComputeType(…):\r\n    Assertion `k > 1 && k < n_subs' failed.\r\n```\r\n\r\nIt is AFAICT reachable via the same code paths as the `Node::CalcOps` discussed above.\r\n\r\n(Also posted to the original repo as https://github.com/sipa/miniscript/issues/13).",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530876527",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 531605482,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTYwNTQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531605482",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-15T22:36:57Z",
      "updated_at": "2019-09-15T22:36:57Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nYou could submit the refactors as separate pulls one by one. For instance, one for fc4691899d128cd4d8a8b60503803fc53d43eb9f which I think is acceptable on its own.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-531605482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-16T17:27:36Z",
      "updated_at": "2019-09-16T17:27:36Z",
      "source": {
        "issue": {
          "id": 494180239,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzE3OTg0ODAw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16887",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16887/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16887/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16887/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16887",
          "number": 16887,
          "state": "closed",
          "state_reason": null,
          "title": "Abstract out some of the descriptor Span-parsing helpers",
          "body": "As suggested here: https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-531605482.\r\n\r\nThis moves the Span parsing functions out of the descriptor module, making them more easily usable for other parsers (in particular, in preparation for miniscript parsing).",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16887",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16887",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16887.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16887.patch"
          },
          "closed_at": "2019-10-10T16:35:01Z",
          "created_at": "2019-09-16T17:27:36Z",
          "updated_at": "2021-12-16T14:03:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-16T17:58:03Z",
      "updated_at": "2019-09-16T17:58:03Z",
      "source": {
        "issue": {
          "id": 494193425,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzE3OTk1MTIy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16889",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16889/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16889/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16889/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/16889",
          "number": 16889,
          "state": "closed",
          "state_reason": null,
          "title": "Add some general std::vector utility functions",
          "body": "This is another general improvement extracted from #16800 .\r\n\r\nTwo functions are added are:\r\n\r\n* Vector(arg1,arg2,arg3,...) constructs a vector with the specified arguments as elements. The vector's type is derived from the arguments. If some of the arguments are rvalue references, they will be moved into place rather than copied (which can't be achieved using list initialization).\r\n* Cat(vector1,vector2) returns a concatenation of the two vectors, efficiently moving elements when relevant.\r\n\r\nVector generalizes (and replaces) the `Singleton` function in src/descriptor.cpp, and `Cat` replaces the function in bech32.cpp\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16889",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/16889",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/16889.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/16889.patch"
          },
          "closed_at": "2019-10-18T13:59:36Z",
          "created_at": "2019-09-16T17:58:02Z",
          "updated_at": "2021-12-16T14:54:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 2672847195,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2NzI4NDcxOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2672847195",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T11:12:37Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "commented",
      "id": 539660256,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY2MDI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539660256",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T19:13:39Z",
      "updated_at": "2019-10-08T19:13:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-539660256",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "labeled",
      "id": 2696562903,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2OTY1NjI5MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2696562903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-08T19:13:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2703407563,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDM0MDc1NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703407563",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "befdef8aee899dcf7e40aa5ea4bc1b0256381cdc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/befdef8aee899dcf7e40aa5ea4bc1b0256381cdc",
      "created_at": "2019-10-10T16:34:48Z"
    },
    {
      "event": "referenced",
      "id": 2704958352,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDQ5NTgzNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2704958352",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a7e4761106bfe69bb273251aecb3711bc8ae2c99",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/a7e4761106bfe69bb273251aecb3711bc8ae2c99",
      "created_at": "2019-10-11T05:19:34Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-13T21:13:06Z",
      "updated_at": "2019-10-13T21:13:06Z",
      "source": {
        "issue": {
          "id": 506383087,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3NTkzOTMz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17129",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17129/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17129/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17129/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17129",
          "number": 17129,
          "state": "closed",
          "state_reason": null,
          "title": "tests: Add fuzzing harness for miniscript::FromScript(...)",
          "body": "Add fuzzing harness for `miniscript::FromScript(...)`.\r\n\r\nBased on sipa's PR #16800 (rebased on current `master`).\r\n\r\n**Testing this PR**\r\n\r\nRun:\r\n\r\n```\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\\r\n      --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ src/test/fuzz/from_script -max_len=3\r\n…\r\n==1011==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000007d30 at pc \r\n    0x564149ae8922 bp 0x7ffdc121bb90 sp 0x7ffdc121b340\r\n…\r\n$ src/test/fuzz/from_script -max_len=3\r\n…\r\nfrom_script: script/miniscript.cpp:51: miniscript::Type \r\n    miniscript::internal::ComputeType(miniscript::NodeType, miniscript::Type, \r\n    miniscript::Type, miniscript::Type, const std::vector<Type> &, uint32_t, size_t,\r\n    size_t, size_t): Assertion `k > 1 && k < n_subs' failed.\r\n…\r\n```\r\n\r\nThe fix to those two issues demonstrated above was submitted a month ago to the upstream repo https://github.com/sipa/miniscript/pull/18 :)\r\n\r\nHere is my suggested patch if you want to try the fuzzer against the fixed version:\r\n\r\n```patch\r\ndiff --git a/src/script/miniscript.h b/src/script/miniscript.h\r\nindex d5bc80f98..9bd3f8426 100644\r\n--- a/src/script/miniscript.h\r\n+++ b/src/script/miniscript.h\r\n@@ -912,6 +912,9 @@ inline NodeRef<Key> DecodeSingle(I& in, I last, const Ctx& ctx) {\r\n     }\r\n     subs.clear();\r\n     if (last - in >= 3 && in[0].first == OP_EQUAL && ParseScriptNumber(in[1], k)) {\r\n+        if (k < 2) {\r\n+            return {};\r\n+        }\r\n         in += 2;\r\n         while (last - in >= 2 && in[0].first == OP_ADD) {\r\n             ++in;\r\n@@ -922,6 +925,9 @@ inline NodeRef<Key> DecodeSingle(I& in, I last, const Ctx& ctx) {\r\n         auto sub = DecodeSingle<Key>(in, last, ctx);\r\n         if (!sub) return {};\r\n         subs.push_back(std::move(sub));\r\n+        if (k >= subs.size()) {\r\n+            return {};\r\n+        }\r\n         std::reverse(subs.begin(), subs.end());\r\n         return MakeNodeRef<Key>(NodeType::THRESH, std::move(subs), k);\r\n     }\r\n```",
          "user": {
            "login": "practicalswift",
            "id": 7826565,
            "node_id": "MDQ6VXNlcjc4MjY1NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/practicalswift",
            "html_url": "https://github.com/practicalswift",
            "followers_url": "https://api.github.com/users/practicalswift/followers",
            "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
            "organizations_url": "https://api.github.com/users/practicalswift/orgs",
            "repos_url": "https://api.github.com/users/practicalswift/repos",
            "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/practicalswift/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17129",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17129",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17129.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17129.patch"
          },
          "closed_at": "2019-11-14T09:12:08Z",
          "created_at": "2019-10-13T21:13:06Z",
          "updated_at": "2022-08-18T18:35:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 2724992370,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MjQ5OTIzNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2724992370",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ff7cd7d0c074448db636bcc73e7879b7e4b21ec",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff7cd7d0c074448db636bcc73e7879b7e4b21ec",
      "created_at": "2019-10-18T13:59:22Z"
    },
    {
      "event": "referenced",
      "id": 2725838627,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MjU4Mzg2Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2725838627",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e432a0902deb30dd6fb257d9bb622c7b24bc0662",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e432a0902deb30dd6fb257d9bb622c7b24bc0662",
      "created_at": "2019-10-18T18:31:49Z"
    },
    {
      "event": "commented",
      "id": 546744758,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njc0NDc1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546744758",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T23:09:53Z",
      "updated_at": "2019-10-27T23:10:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa Would you mind cherry-picking in the `miniscript::FromScript(...)` fuzzer from #17129 in to this PR? That would allow for closing #17129 which is entirely dependent on the merge of this one anyway :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-546744758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 2746959145,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0Njk1OTE0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746959145",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T23:09:53Z"
    },
    {
      "event": "subscribed",
      "id": 2746959146,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDY5NTkxNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746959146",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T23:09:53Z"
    },
    {
      "event": "commented",
      "id": 553057542,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzA1NzU0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553057542",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T18:55:16Z",
      "updated_at": "2019-11-12T18:55:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fanquake Could you add \"Waiting for author\"? :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-553057542",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 2792619050,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc5MjYxOTA1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2792619050",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T18:55:16Z"
    },
    {
      "event": "subscribed",
      "id": 2792619051,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3OTI2MTkwNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2792619051",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T18:55:16Z"
    },
    {
      "event": "commented",
      "id": 553059597,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzA1OTU5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553059597",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T18:59:39Z",
      "updated_at": "2019-11-12T18:59:39Z",
      "author_association": "MEMBER",
      "body": "\"Needs rebase\" implies \"Waiting for author\"",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-553059597",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-22T13:38:13Z",
      "updated_at": "2020-01-22T13:38:13Z",
      "source": {
        "issue": {
          "id": 553003090,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzY1NDA3OTY0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/17975",
          "number": 17975,
          "state": "closed",
          "state_reason": null,
          "title": "TestFramework: Add Python Miniscript Support",
          "body": "This PR introduces basic Miniscript support to the TestFramework. \r\n\r\nI believe this would be useful for:\r\n\r\n- Functional tests with more complex script satisfaction(s)\r\n- Functional tests for future wallet RPC calls which handle Miniscript\r\n- Entry point for developers looking to integrate Miniscript into external wallet projects (ecdsa, SomberNight, dgpv).\r\n\r\n**Usage:**\r\n\r\nMiniscript string constructor.\r\n```\r\n# key, delay in descriptor below must be represented as hex/int.\r\n\r\nexample_desc = “or_b(or_i(n:thresh_m(k,key,key),0),a:or_i(0,older(delay)))”\r\n\r\nminiscript_node = Node.from_desc(example_desc)\r\n```\r\n\r\nMiniscript CScript constructor.\r\n```\r\nminiscript_node = Node.from_script(cscript)\r\n```\r\n\r\nMiniscript type and properties.\r\n```\r\nminiscript_node.p.to_string()\r\n```\r\n\r\n(Dis)satisfaction methods, returns list of tuple-lists.\r\n```\r\n# Canonical (dis)satisfying witnesses\r\nminiscript_node.sat\r\nminiscript_node.dsat\r\n\r\n# Non-canonical (dis)satisfying witnesses\r\nminiscript_node.sat_ncan\r\nminiscript_node.dsat_ncan\r\n```\r\n\r\nEach tuple-list encodes a single, unique satisfying witness:\r\n```\r\n[\r\n\t(SatType, Value),\r\n\t(SatType, Value),\r\n\t(SatType, Value),\r\n\t…\r\n]\r\n```\r\nThe SatType, Value tuples encode the following witness information in correct order. Exception: Time/Delay tuples are not witness elements and will always be positioned at the beginning of the list.\r\n\r\n|  SatType | Value | \r\n|---|---|\r\n| OLDER | Delay int | \r\n| AFTER | Time int |\r\n| SIGNATURE | 33B Key/20B HASH160 Digest  |\r\n| KEY_AND_HASH160_PREIMAGE | 20B HASH160 Digest |\r\n| SHA256_PREIMAGE | 32B SHA256 Digest |\r\n| HASH256_PREIMAGE | 32B HASH256 Digest |\r\n| RIPEMD160_PREIMAGE |  20B RIPEMD160 Digest |\r\n| HASH160_PREIMAGE | 20B HASH160 Digest |\r\n| DATA | Bytes |\r\n\r\nOur example `miniscript_node.sat` above returns the following 2 satisfying witnesses:\r\n```\r\n[\r\n\t[\r\n\t\t(<SatType.DATA: 8>, b'\\x01'), \r\n\t\t(<SatType.DATA: 8>, b''), \r\n\t\t(<SatType.SIGNATURE: 2>,  key_bytes), \r\n\t\t(<SatType.SIGNATURE: 2>,  key_bytes), \r\n\t\t(<SatType.DATA: 8>, b'\\x01')\r\n\t], \r\n\t[\r\n\t\t(<SatType.OLDER: 0>, 45), \r\n\t\t(<SatType.DATA: 8>, b''), \r\n\t\t(<SatType.DATA: 8>, b'')\r\n\t]\r\n]\r\n```\r\n\r\n**Tests:**\r\n\r\nI have included tests in feature_miniscript.py to facilitate potential reviews, but would suggest to omit these if the maintainers decide to merge this PR.\r\n",
          "user": {
            "login": "jachiang",
            "id": 26572234,
            "node_id": "MDQ6VXNlcjI2NTcyMjM0",
            "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jachiang",
            "html_url": "https://github.com/jachiang",
            "followers_url": "https://api.github.com/users/jachiang/followers",
            "following_url": "https://api.github.com/users/jachiang/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jachiang/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jachiang/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
            "organizations_url": "https://api.github.com/users/jachiang/orgs",
            "repos_url": "https://api.github.com/users/jachiang/repos",
            "events_url": "https://api.github.com/users/jachiang/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jachiang/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/17975",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/17975.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/17975.patch"
          },
          "closed_at": "2022-10-12T18:05:48Z",
          "created_at": "2020-01-21T16:52:58Z",
          "updated_at": "2022-10-12T18:05:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-31T13:18:34Z",
      "updated_at": "2020-01-31T13:18:34Z",
      "source": {
        "issue": {
          "id": 558127234,
          "node_id": "MDU6SXNzdWU1NTgxMjcyMzQ=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18040",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18040/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18040/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18040/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18040",
          "number": 18040,
          "state": "closed",
          "state_reason": "completed",
          "title": "RFC: Miniscript integration",
          "body": "Moving the discussion from #17975 here as adding Miniscript support to the TestFramework is only a subset of broader Miniscript integration in Core and shouldn't disrupt review of that PR.\r\n\r\n1. Does Bitcoin Core need to be able to recognize Miniscript in the future? Are the future upsides sufficiently material to introduce it? Presumably Miniscript could always be translated to Script externally to Core at little cost?\r\n\r\nTentatively, there seems to be strong benefits to Core being able to recognize and analyze Miniscript such as the Core wallet being able to [create a valid witness for Miniscript](https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002138.html).\r\n\r\n2. Is this a stepping stone towards greater support for Miniscript (and possibly a policy language too) in Core? What impact does this have on the use and ongoing development of external libraries like the Rust Miniscript library?\r\n\r\nTentatively, I would guess external Miniscript libraries like [rust-miniscript](https://github.com/apoelstra/rust-miniscript) will have more Miniscript capability/features than will be introduced to Core. The [C++ implementation](https://github.com/sipa/miniscript) is \"Core compatible\". I'm assuming the plan is that this will broadly slot into Core (assuming there is consensus, sufficient review) given the open PR #16800. \r\n\r\nDisclaimer: Some of this may be obvious to some (apologies if so!) but at the very least this will be educational for people like me who are curious about what should be in Core and what should be left for external Miniscript libraries. \r\n",
          "user": {
            "login": "michaelfolkson",
            "id": 16323900,
            "node_id": "MDQ6VXNlcjE2MzIzOTAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelfolkson",
            "html_url": "https://github.com/michaelfolkson",
            "followers_url": "https://api.github.com/users/michaelfolkson/followers",
            "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
            "repos_url": "https://api.github.com/users/michaelfolkson/repos",
            "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "closed_at": "2023-03-13T11:45:19Z",
          "created_at": "2020-01-31T13:18:34Z",
          "updated_at": "2023-03-13T11:45:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 583559190,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzU1OTE5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583559190",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-07T19:09:26Z",
      "updated_at": "2020-02-07T19:09:26Z",
      "author_association": "MEMBER",
      "body": "I've noticed that there are some Miniscript functions that may conflict in naming or functionality with existing output descriptors that may cause issues.\r\n\r\n* `multi()` and `thresh_m()` are functionally the same. So the easy thing to do would be to just make `multi()` an alias for `thresh_m()`\r\n* `sortedmulti()` currently has no Miniscript counterpart. But I think that is easily solved by having a `sorted_thresh_m()` which is semantically the same.\r\n* `pkh()` and `pk_h()` are very similar, both in naming and function. `pkh()` is the same as `c:pk_h()` so I think we can just call `pkh()` an alias for `c:pk_h()`. Since `pkh()` and `pk_h()` are named differently, the only other issue is that they may confuse people.\r\n* `pk()` in descriptors directly conflicts with `pk()` in Miniscript. `pk()` in descriptors is `c:pk()` in Miniscript. Because they are named exactly the same but have (slightly) different meanings, this can cause some issues.\r\n  * One solution is to change the meaning of `pk()` depending on its location. If found at the top level or as the direct child of a `sh()` or `wsh()`, it would mean the current meaning today (to preserve compatibility). If found elsewhere, it would have the Miniscript meaning. But this solution is confusing as `pk()` has multiple meanings and it could be easy to mess up.\r\n  * Alternatively we could deprecate and remove the usage of `pk()` and replace it with `c:pk()`. We could add `c:pk()` now (for 0.20) and have it mean the same thing as `pk()` now. Then once Miniscript is merged, remove `pk()`'s descriptor definition and just use the Miniscript definition. We could add warnings in some places as well to let people know that their usage of `pk()` is deprecated. The good thing about this is that `pk()` probably isn't currently being used so this probably won't effect a lot of people.\r\n\r\nWe will still need to preserve the current naming of functions as people may already be using them and changing these would break compatibility. At least most of these are straightforward aliases.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-583559190",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "comment_deleted",
      "id": 3018809943,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQzMDE4ODA5OTQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3018809943",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-07T19:20:36Z"
    },
    {
      "event": "commented",
      "id": 584178250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDE3ODI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584178250",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T15:29:02Z",
      "updated_at": "2020-02-10T15:29:15Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, after many hours of @apoelstra explaining Miniscript and its relation to Output Descriptors :-)\r\n\r\nI like @achow101's suggestion:\r\n>   * Alternatively we could deprecate and remove the usage of `pk()` and replace it with `c:pk()`. We could add `c:pk()` now (for 0.20) and have it mean the same thing as `pk()` now.\r\n\r\nWould be great to get a rebase of this before 0.20 splits off, so we can deprecate other Output Descriptor stuff early on, if needed.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-584178250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 3023185285,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyMzE4NTI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023185285",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T15:29:02Z"
    },
    {
      "event": "subscribed",
      "id": 3023185292,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjMxODUyOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023185292",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T15:29:02Z"
    },
    {
      "event": "mentioned",
      "id": 3023185300,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyMzE4NTMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023185300",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T15:29:02Z"
    },
    {
      "event": "subscribed",
      "id": 3023185309,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjMxODUzMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3023185309",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-10T15:29:02Z"
    },
    {
      "event": "commented",
      "id": 585391070,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTM5MTA3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585391070",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-12T20:00:07Z",
      "updated_at": "2020-02-12T20:02:52Z",
      "author_association": "MEMBER",
      "body": "After a number of discussions, I think this highlights the possibility to decrease the gap between Miniscript and non-Miniscript descriptors.\r\n\r\nMy suggestion is making the following changes to Miniscript:\r\n* Rename `thresh_m` to `multi`.\r\n* Rename `pk` to `pk_k`.\r\n* Add an alias `pk(A)=c:pk_k(A)` (just like `and_n(A,B)=andor(A,B,0)` for example).\r\n* Add an alias `pkh(A)=c:pk_h(A)`.\r\n\r\nThat means that for users, there doesn't need to be a distinction between Miniscript or not, as `pk(A)` and `wsh(pk(A))` would look uniform. Meanwhile, implementations could choose what to deal with at what layer (e.g. top-level `pkh` could be dealt with as a special case, or through a sufficiently generic Miniscript library).\r\n\r\nI prefer this approach as at this stage I'm more comfortable with making some small changes to Miniscript, than to change descriptors in general.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-585391070",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 585586131,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTU4NjEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585586131",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T07:16:18Z",
      "updated_at": "2020-02-13T07:16:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa I would like to continue my robustness testing of this PR. Could you please rebase on `master` and perhaps also pull in my fix for the heap out-of-bounds read present in the current version of this PR: [\"Avoid heap out-of-bounds read in Node::CalcOps (test case: OP_0 OP_2 OP_EQUAL) and assertion failure in ComputeType (test case: OP_0 OP_0 OP_EQUAL)\"](https://github.com/sipa/miniscript/pull/18)? :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-585586131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 3033681988,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAzMzY4MTk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3033681988",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T07:16:19Z"
    },
    {
      "event": "subscribed",
      "id": 3033681990,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMzM2ODE5OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3033681990",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T07:16:19Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-13T20:20:45Z",
      "updated_at": "2020-02-13T20:20:45Z",
      "source": {
        "issue": {
          "id": 564928115,
          "node_id": "MDU6SXNzdWU1NjQ5MjgxMTU=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18142/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/18142",
          "number": 18142,
          "state": "closed",
          "state_reason": "completed",
          "title": "Coordinate multi-sig wallet",
          "body": "Multiple people, or even just one person with multiple devices, want to setup a multi-sig wallet. The end result is a [descriptor wallet](https://github.com/bitcoin/bitcoin/pull/16528), perhaps [miniscript enhanced](https://github.com/bitcoin/bitcoin/pull/16800).\r\n\r\nProblem: how do you coordinate this setup? See Electrum thread about the same issue: https://github.com/spesmilo/electrum/issues/5715\r\n\r\nBonus points: it should also work with a protocol like MuSig that requires more than one round of communication.\r\n\r\n## Current situation\r\n\r\nI made a [tutorial and screencast](https://nthkey.com/tutorial) of a setup flow, in this case using two signers: a ColdCard  and an iOs app that I'm working on. It's based on the flow ColdCard uses to setup a multisig between two of their devices. [Specter wallet](https://github.com/cryptoadvance) uses a similar flow and the same file format, last time I checked.\r\n\r\nThe general idea there is for each cosigner to export a (JSON) file with information about their public keys, and for the other signers to import that. Derivation paths are standardised (see also #16895). All participating devices will derive the same addresses; the user just needs to enter the (same) threshold on all devices.\r\n\r\nThe above is pretty easy to implement.\r\n\r\n## Flexible signer policies\r\n\r\nThe above approach requires everyone to contribute a single key. Individual participants can't do fancy stuff like having their own internal multisig setup or some backup key after a timeout. Yet this could be very useful, e.g. imagine a user with two hardware wallets who wants to use an external service provider as the third key. That service provider may have some super fancy setup, but they don't want to ship custom software to the user, let alone merge their special sauce into Bitcoin Core. What if you could use the Green Address service, but with your favourite orange QT wallet?\r\n\r\nA more flexible setup could use miniscript, where each participant provides a policy language snippet they want to use. These are then aggregated with `thresh(M, policy1, policy2, ... policyN)`. The result is then compiled by a coordinator (one of the participants) and shared with the others. Each participant could use a simple public key, or some super convoluted scheme. The cool thing about miniscript if that each participant can verify, without understanding the policy of the others, that they indeed control 1/Nth.\r\n\r\nIIUC the plan is to [combine](https://github.com/bitcoin/bitcoin/pull/16800) the powers of miniscript and output descriptors, and eventually add that to the wallet. Hopefully this allows for putting xpubs and origin info in both the policy language and the miniscript itself.\r\n\r\nThere is no current plan to add the policy language to miniscript compiler to Bitcoin Core, but we can start with a naive concatenation of participant miniscripts. Also AFAIK existing hardware wallets don't support anything other than plain OP_CHECKMULTISIG (`thresh_m(2, xpub1, xpub2, xpub3))` anyway.\r\n\r\nIn other words, we would use future proof syntax like the policy language, but in practice \"compile\" only to trivial, non-optimized, miniscript(s) that match what we can already do with descriptors.\r\n\r\n## Wallet composer file?\r\n\r\nWhat I have in mind is to (wait for someone else to) design a (binary) format, perhaps similar to PSBT, to compose a wallet interactively.\r\n\r\nIt would start with a coordinator. They populate the file with the \"shape\" of the wallet (YAML for illustrative purposes): \r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: null\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThen the first participant, probably the coordinator, fills in their details. They can also list their (advanced) capabilities, e.g. if they're able to decompile miniscript or only understand very basic policies.\r\n\r\n```yaml\r\n- descriptor: null\r\n- policy: thresh(2, participant_1, participant_2, participant_3))\r\n- participant_1:\r\n   - policy: c:pk([00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*)\r\n   - can_decompile_miniscript: false\r\n- participant_2:\r\n   - policy: null\r\n- participant_3:\r\n   - policy: null\r\n```\r\n\r\nThe file is then passed to participants 2 and 3. Participant 3 will have all the info it needs to construct a final descriptor (set), and it can prompt the user to \"commit\" to that wallet:\r\n\r\n```yaml\r\n- descriptor: multi(2, [00000000]/m/48h/0h/0h/2h/xpub_1/{0,1}/*, ......)\r\n- policy: ...\r\netc...\r\n```\r\n\r\n(`{0,1}` is a fake descriptor syntax; for now you need a separate receive and change descriptor)\r\n\r\nEach participant needs to \"commit\" to the wallet, in the sense of storing it in their memory. This lets them display receive addresses, and it lets them check the change address before signing a transaction.\r\n\r\nIt then passes it to the other participants. If the devices all have screens, the user can now compare the first receive address as a sanity check.\r\n\r\nBitcoin Core should be able to import this a watch-only descriptor wallet (or maybe it has one of the keys).\r\n\r\nIf any of the devices isn't smart / powerful enough to figure out the descriptor, then it needs to go back to the coordinator first. Conversely you could start with a round where each participant announces their capabilities (support for lock times, if they can decompile miniscript and understand their role in the top policy, taproot support, resource limits, etc). A coordinator can then propose a top level policy based on that.\r\n\r\nAdditional fields can be added e.g. to include nonces for a musig pubkey generation ritual. Also additional fields could contain friendly names for the participants.\r\n\r\nIdeally the whole thing is small enough to copy-paste or put in a QR code (e.g. bech32-ish encoded).",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 41,
          "closed_at": "2022-09-06T13:28:17Z",
          "created_at": "2020-02-13T20:20:45Z",
          "updated_at": "2022-09-06T19:28:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T15:55:40Z",
      "updated_at": "2020-03-10T15:55:40Z",
      "source": {
        "issue": {
          "id": 578685024,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjE4NjQz",
          "url": "https://api.github.com/repos/sipa/miniscript/issues/33",
          "repository_url": "https://api.github.com/repos/sipa/miniscript",
          "labels_url": "https://api.github.com/repos/sipa/miniscript/issues/33/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/sipa/miniscript/issues/33/comments",
          "events_url": "https://api.github.com/repos/sipa/miniscript/issues/33/events",
          "html_url": "https://github.com/sipa/miniscript/pull/33",
          "number": 33,
          "state": "closed",
          "state_reason": null,
          "title": "Miniscript language updates",
          "body": "This changes the Miniscript language:\r\n* Rename `pk` to `pk_k`\r\n* Rename `thresh_m` to `multi`\r\n* Add alias `pk(K)` = `c:pk_k(K)`\r\n* Add alias `pkh(K)` = `c:pk_h(K)`\r\n\r\nSee discussion in https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-585391070 for more details.\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/sipa/miniscript/pulls/33",
            "html_url": "https://github.com/sipa/miniscript/pull/33",
            "diff_url": "https://github.com/sipa/miniscript/pull/33.diff",
            "patch_url": "https://github.com/sipa/miniscript/pull/33.patch"
          },
          "closed_at": "2020-07-16T15:43:34Z",
          "created_at": "2020-03-10T15:54:58Z",
          "updated_at": "2020-07-16T15:43:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "subscribed",
      "id": 3330253382,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMzAyNTMzODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3330253382",
      "actor": {
        "login": "takinbo",
        "id": 41004,
        "node_id": "MDQ6VXNlcjQxMDA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/41004?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/takinbo",
        "html_url": "https://github.com/takinbo",
        "followers_url": "https://api.github.com/users/takinbo/followers",
        "following_url": "https://api.github.com/users/takinbo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/takinbo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/takinbo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/takinbo/subscriptions",
        "organizations_url": "https://api.github.com/users/takinbo/orgs",
        "repos_url": "https://api.github.com/users/takinbo/repos",
        "events_url": "https://api.github.com/users/takinbo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/takinbo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-13T04:25:40Z"
    },
    {
      "event": "commented",
      "id": 663517488,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzUxNzQ4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663517488",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T12:37:15Z",
      "updated_at": "2020-07-24T12:37:15Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-663517488",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 890043893,
      "node_id": "IC_kwDOABII5841DP31",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890043893",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-30T17:28:19Z",
      "updated_at": "2021-07-30T17:43:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Scratching the surface on what would be needed to revitalize this PR. Obviously there is a mega rebase to do as it has been sitting here for a while but there have also been some changes since to the [C++ implementation](https://github.com/sipa/miniscript) of Miniscript. Presumably it would make sense to work on the Core rebase first and then the Miniscript updates?\r\n\r\nedit: \r\n\r\n> This version seems to deviate somewhat to the version in the upstream repo which makes it unclear to me which of the issues I found during my review that have been addressed:\r\n\r\nPlus this. Not just Miniscript updates since this PR was opened but deviations before the updates.",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-890043893",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 903211605,
      "node_id": "IC_kwDOABII58411epV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/903211605",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-22T04:27:41Z",
      "updated_at": "2021-08-23T06:05:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "(Just for the information of those wondering what's happening here, there are currently a few things being finished up in the miniscript repository before this PR is rebased, but it is a current WIP so expect something soon-ish!)",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-903211605",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "joemphilips",
        "id": 10084960,
        "node_id": "MDQ6VXNlcjEwMDg0OTYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/10084960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joemphilips",
        "html_url": "https://github.com/joemphilips",
        "followers_url": "https://api.github.com/users/joemphilips/followers",
        "following_url": "https://api.github.com/users/joemphilips/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joemphilips/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joemphilips/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joemphilips/subscriptions",
        "organizations_url": "https://api.github.com/users/joemphilips/orgs",
        "repos_url": "https://api.github.com/users/joemphilips/repos",
        "events_url": "https://api.github.com/users/joemphilips/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joemphilips/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-27T04:46:20Z",
      "updated_at": "2021-10-27T04:46:20Z",
      "source": {
        "issue": {
          "id": 520003343,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4NjY3NDIx",
          "url": "https://api.github.com/repos/MetacoSA/NBitcoin/issues/764",
          "repository_url": "https://api.github.com/repos/MetacoSA/NBitcoin",
          "labels_url": "https://api.github.com/repos/MetacoSA/NBitcoin/issues/764/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/MetacoSA/NBitcoin/issues/764/comments",
          "events_url": "https://api.github.com/repos/MetacoSA/NBitcoin/issues/764/events",
          "html_url": "https://github.com/MetacoSA/NBitcoin/pull/764",
          "number": 764,
          "state": "open",
          "state_reason": null,
          "title": "WIP: Miniscript final version",
          "body": "Previous attempt is in #695 \r\n\r\nSince the spec has changed drastically, I've been re-writing almost everything from scratch :sob: \r\n\r\nI swear to myself, from next time, I will never start coding until the spec is fixed.",
          "user": {
            "login": "joemphilips",
            "id": 10084960,
            "node_id": "MDQ6VXNlcjEwMDg0OTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10084960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joemphilips",
            "html_url": "https://github.com/joemphilips",
            "followers_url": "https://api.github.com/users/joemphilips/followers",
            "following_url": "https://api.github.com/users/joemphilips/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/joemphilips/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/joemphilips/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/joemphilips/subscriptions",
            "organizations_url": "https://api.github.com/users/joemphilips/orgs",
            "repos_url": "https://api.github.com/users/joemphilips/repos",
            "events_url": "https://api.github.com/users/joemphilips/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/joemphilips/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/MetacoSA/NBitcoin/pulls/764",
            "html_url": "https://github.com/MetacoSA/NBitcoin/pull/764",
            "diff_url": "https://github.com/MetacoSA/NBitcoin/pull/764.diff",
            "patch_url": "https://github.com/MetacoSA/NBitcoin/pull/764.patch"
          },
          "created_at": "2019-11-08T13:03:05Z",
          "updated_at": "2022-02-16T06:09:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T10:51:05Z",
      "updated_at": "2021-12-20T10:51:05Z",
      "source": {
        "issue": {
          "id": 1082890362,
          "node_id": "PR_kwDOBawtqs4v_A_q",
          "url": "https://api.github.com/repos/ElementsProject/libwally-core/issues/310",
          "repository_url": "https://api.github.com/repos/ElementsProject/libwally-core",
          "labels_url": "https://api.github.com/repos/ElementsProject/libwally-core/issues/310/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/ElementsProject/libwally-core/issues/310/comments",
          "events_url": "https://api.github.com/repos/ElementsProject/libwally-core/issues/310/events",
          "html_url": "https://github.com/ElementsProject/libwally-core/pull/310",
          "number": 310,
          "state": "closed",
          "state_reason": null,
          "title": "Output descriptors/miniscript support",
          "body": "Based on the excellent work of  @k-matsuzawa in https://github.com/ElementsProject/libwally-core/pull/202 (which this PR replaces).\r\n\r\nThe major changes from the original PR are:\r\n- Move to a parse-first API to support multiple operations/queries without re-parsing.\r\n- Use `wally_map` for variable substitutions.\r\n- Use the new `_n` api call variants to work directly from the input string\r\n- Remove all sub-allocations while parsing\r\n- Remove script generation allocations completely in most cases, otherwise from 1MB to typically less than 1k.\r\n- Expose descriptor canonicalization, network and features\r\n- API support for future ranged descriptors\r\n- Expose to SWIG targets\r\n- Extend the test cases\r\n- Various bug fixes, speedups, simplifications\r\n\r\n@k-matsuzawa I would be very grateful if you could review when you have time.\r\n\r\nNote: This is rebased on https://github.com/ElementsProject/libwally-core/pull/365, and will be updated until that branch is merged to master. Only the last commit is specific to this PR.",
          "user": {
            "login": "jgriffiths",
            "id": 406223,
            "node_id": "MDQ6VXNlcjQwNjIyMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406223?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jgriffiths",
            "html_url": "https://github.com/jgriffiths",
            "followers_url": "https://api.github.com/users/jgriffiths/followers",
            "following_url": "https://api.github.com/users/jgriffiths/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jgriffiths/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jgriffiths/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jgriffiths/subscriptions",
            "organizations_url": "https://api.github.com/users/jgriffiths/orgs",
            "repos_url": "https://api.github.com/users/jgriffiths/repos",
            "events_url": "https://api.github.com/users/jgriffiths/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jgriffiths/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/ElementsProject/libwally-core/pulls/310",
            "html_url": "https://github.com/ElementsProject/libwally-core/pull/310",
            "diff_url": "https://github.com/ElementsProject/libwally-core/pull/310.diff",
            "patch_url": "https://github.com/ElementsProject/libwally-core/pull/310.patch"
          },
          "closed_at": "2023-02-10T13:00:12Z",
          "created_at": "2021-12-17T05:03:18Z",
          "updated_at": "2023-02-10T13:00:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 999541730,
      "node_id": "IC_kwDOABII5847k8vi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999541730",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-22T12:29:33Z",
      "updated_at": "2021-12-22T12:29:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-999541730",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 1002114865,
      "node_id": "IC_kwDOABII5847uw8x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002114865",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-28T13:49:46Z",
      "updated_at": "2021-12-28T13:49:46Z",
      "author_association": "MEMBER",
      "body": "It would be nice to have an up to date version here to compare with ElementsProject/libwally-core#310",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-1002114865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "commented",
      "id": 1002124857,
      "node_id": "IC_kwDOABII5847uzY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002124857",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-28T14:12:13Z",
      "updated_at": "2021-12-28T14:12:13Z",
      "author_association": "MEMBER",
      "body": "The most up-to-date WIP is available here\nhttps://github.com/darosior/bitcoin/pull/2 but for the purpose of reviewing other implementations i'd recommend checking against the C++ implem at sipa/miniscript or the Rust one at rust-bitcoin/rust-miniscript.\n-------- Original Message --------\nOn Dec 28, 2021, 14:49, Sjors Provoost wrote:\n\n> It would be nice to have an up to date version here to compare with [ElementsProject/libwally-core#310](https://github.com/ElementsProject/libwally-core/pull/310)\n>\n> —\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-1002114865), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3FZZZEXPSKKZNKVZ4DTUTG6APANCNFSM4ITMYUUQ).\n> Triage notifications on the go with GitHub Mobile for [iOS](https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675) or [Android](https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub).\n> You are receiving this because you commented.Message ID: ***@***.***>",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-1002124857",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T09:49:38Z",
      "updated_at": "2022-01-25T09:49:38Z",
      "source": {
        "issue": {
          "id": 978117391,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzE4NzYwODg3",
          "url": "https://api.github.com/repos/darosior/bitcoin/issues/2",
          "repository_url": "https://api.github.com/repos/darosior/bitcoin",
          "labels_url": "https://api.github.com/repos/darosior/bitcoin/issues/2/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/darosior/bitcoin/issues/2/comments",
          "events_url": "https://api.github.com/repos/darosior/bitcoin/issues/2/events",
          "html_url": "https://github.com/darosior/bitcoin/pull/2",
          "number": 2,
          "state": "closed",
          "state_reason": null,
          "title": "Miniscript integration",
          "body": " Miniscript is a language for writing (a subset of) Bitcoin Scripts in a structured way.\r\n\r\nMiniscript permits:\r\n- To safely extend the Output Descriptor language to many more scripting features thanks to the typing system (composition).\r\n- Statical analysis of spending conditions, maximum spending cost of each branch, security properties, third-party malleability.\r\n- General satisfaction of any correctly typed (\"valid\" [0]) Miniscript. The satisfaction itself is also analyzable.\r\n- To extend the possibilities of external signers, because of all of the above and since it carries enough metadata.\r\n\r\nMiniscript guarantees:\r\n- That for any statically-analyzed as \"safe\" [0] Script, a witness can be constructed in the bounds of the consensus and standardness rules (standardness complete).\r\n- That unless the conditions of the Miniscript are met, no witness can be created for the Script (consensus sound).\r\n- Third-party malleability protection for the satisfaction of a sane Miniscript, which is too complex to summarize here.\r\n\r\nFor more details around Miniscript (including the specifications), please refer to the [website](https://bitcoin.sipa.be/miniscript/).\r\n\r\nMiniscript was designed by Pieter Wuille, Andrew Poelstra and Sanket Kanjalkar.\r\nThis PR is an updated and rebased version of #16800. See [the commit history of the Miniscript repository](https://github.com/sipa/miniscript/commits/master) for details about the changes made since September 2019 (TL;DR: bugfixes, introduction of timelock conflicts in the type system, `pk()` and `pkh()` aliases, `thresh_m` renamed to `multi`, all recursive algorithms were made non-recursive).\r\n\r\nThis PR is also the first in a series of 3:\r\n- The first one (here) integrates the backbone of Miniscript.\r\n- The second one (#XXXX) introduces support for Miniscript in Output Descriptors, allowing for watch-only support of Miniscript Descriptors in the wallet.\r\n- The third one (#XXX) implements signing for these Miniscript Descriptors, using Miniscript's satisfaction algorithm. \r\n\r\nNote to reviewers:\r\n- Miniscript is currently defined only for P2WSH. No Taproot yet.\r\n- Miniscript is different from the policy language (a high-level logical representation of a spending policy). A policy->Miniscript compiler is not included here.\r\n- The fuzz target included here is more interestingly extended in the 3rd PR to check a script's satisfaction against `VerifyScript`. I think it could be further improved by having custom mutators as we now have for multisig (see https://github.com/bitcoin/bitcoin/issues/23105). A minified corpus of Miniscript Scripts is available at XXX.\r\n\r\n[0] We call \"valid\" any correctly-typed Miniscript. And \"safe\" any sane Miniscript, ie one whose satisfaction isn't malleable, which requires a key for any spending path, etc..",
          "user": {
            "login": "darosior",
            "id": 22457751,
            "node_id": "MDQ6VXNlcjIyNDU3NzUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/darosior",
            "html_url": "https://github.com/darosior",
            "followers_url": "https://api.github.com/users/darosior/followers",
            "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
            "organizations_url": "https://api.github.com/users/darosior/orgs",
            "repos_url": "https://api.github.com/users/darosior/repos",
            "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/darosior/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/darosior/bitcoin/pulls/2",
            "html_url": "https://github.com/darosior/bitcoin/pull/2",
            "diff_url": "https://github.com/darosior/bitcoin/pull/2.diff",
            "patch_url": "https://github.com/darosior/bitcoin/pull/2.patch"
          },
          "closed_at": "2023-03-05T17:32:59Z",
          "created_at": "2021-08-24T13:45:11Z",
          "updated_at": "2023-03-05T17:32:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T10:27:16Z",
      "updated_at": "2022-01-25T10:27:16Z",
      "source": {
        "issue": {
          "id": 1113704433,
          "node_id": "PR_kwDOABII584xjKyl",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24147",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24147/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24147/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24147/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24147",
          "number": 24147,
          "state": "closed",
          "state_reason": null,
          "title": "Miniscript integration",
          "body": " Miniscript is a language for writing (a subset of) Bitcoin Scripts in a structured way.\r\n\r\nMiniscript permits:\r\n- To safely extend the Output Descriptor language to many more scripting features thanks to the typing system (composition).\r\n- Static analysis of spending conditions, maximum spending cost of each branch, security properties, third-party malleability.\r\n- General satisfaction of any correctly typed (\"valid\" [0]) Miniscript. The satisfaction itself is also analyzable.\r\n- To extend the possibilities of external signers, because of all of the above and since it carries enough metadata.\r\n\r\nMiniscript guarantees:\r\n- That for any statically-analyzed as \"safe\" [0] Script, a witness can be constructed in the bounds of the consensus and standardness rules (standardness complete).\r\n- That unless the conditions of the Miniscript are met, no witness can be created for the Script (consensus sound).\r\n- Third-party malleability protection for the satisfaction of a sane Miniscript, which is too complex to summarize here.\r\n\r\nFor more details around Miniscript (including the specifications), please refer to the [website](https://bitcoin.sipa.be/miniscript/).\r\n\r\nMiniscript was designed by Pieter Wuille, Andrew Poelstra and Sanket Kanjalkar.\r\nThis PR is an updated and rebased version of #16800. See [the commit history of the Miniscript repository](https://github.com/sipa/miniscript/commits/master) for details about the changes made since September 2019 (TL;DR: bugfixes, introduction of timelock conflicts in the type system, `pk()` and `pkh()` aliases, `thresh_m` renamed to `multi`, all recursive algorithms were made non-recursive).\r\n\r\nThis PR is also the first in a series of 3:\r\n- The first one (here) integrates the backbone of Miniscript.\r\n- The second one (#24148) introduces support for Miniscript in Output Descriptors, allowing for watch-only support of Miniscript Descriptors in the wallet.\r\n- The third one (#24149) implements signing for these Miniscript Descriptors, using Miniscript's satisfaction algorithm. \r\n\r\nNote to reviewers:\r\n- Miniscript is currently defined only for P2WSH. No Taproot yet.\r\n- Miniscript is different from the policy language (a high-level logical representation of a spending policy). A policy->Miniscript compiler is not included here.\r\n- The fuzz target included here is more interestingly extended in the 3rd PR to check a script's satisfaction against `VerifyScript`. I think it could be further improved by having custom mutators as we now have for multisig (see https://github.com/bitcoin/bitcoin/issues/23105). A minified corpus of Miniscript Scripts is available at https://github.com/bitcoin-core/qa-assets/pull/85.\r\n\r\n[0] We call \"valid\" any correctly-typed Miniscript. And \"safe\" any sane Miniscript, ie one whose satisfaction isn't malleable, which requires a key for any spending path, etc..",
          "user": {
            "login": "darosior",
            "id": 22457751,
            "node_id": "MDQ6VXNlcjIyNDU3NzUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/darosior",
            "html_url": "https://github.com/darosior",
            "followers_url": "https://api.github.com/users/darosior/followers",
            "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
            "organizations_url": "https://api.github.com/users/darosior/orgs",
            "repos_url": "https://api.github.com/users/darosior/repos",
            "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/darosior/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24147",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24147",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24147.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24147.patch"
          },
          "closed_at": "2022-04-05T11:22:48Z",
          "created_at": "2022-01-25T10:27:16Z",
          "updated_at": "2022-08-23T11:50:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1021153830,
      "node_id": "IC_kwDOABII58483ZIm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021153830",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T12:52:24Z",
      "updated_at": "2022-01-25T12:52:24Z",
      "author_association": "MEMBER",
      "body": "@sipa did you want to close this now that #24147 is open?",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-1021153830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "mentioned",
      "id": 5949626432,
      "node_id": "MEE_lADOABII584dJDltzwAAAAFioBhA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5949626432",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T12:52:24Z"
    },
    {
      "event": "subscribed",
      "id": 5949626447,
      "node_id": "SE_lADOABII584dJDltzwAAAAFioBhP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5949626447",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T12:52:24Z"
    },
    {
      "event": "commented",
      "id": 1021322763,
      "node_id": "IC_kwDOABII58484CYL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021322763",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T15:43:51Z",
      "updated_at": "2022-01-25T15:43:51Z",
      "author_association": "MEMBER",
      "body": "Superseded by #24147.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-1021322763",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16800"
    },
    {
      "event": "closed",
      "id": 5950867523,
      "node_id": "CE_lADOABII584dJDltzwAAAAFiswhD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5950867523",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-25T15:43:51Z"
    },
    {
      "event": "referenced",
      "id": 6370381420,
      "node_id": "REFE_lADOABII584dJDltzwAAAAF7tE5s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6370381420",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d492dc1cdaabdc52b0766bf4cba4bd73178325d0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d492dc1cdaabdc52b0766bf4cba4bd73178325d0",
      "created_at": "2022-04-05T11:22:39Z"
    },
    {
      "event": "locked",
      "id": 8353131111,
      "node_id": "LOE_lADOABII584dJDltzwAAAAHx4qpn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8353131111",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-25T10:09:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320708381",
      "pull_request_review_id": 283549870,
      "id": 320708381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDcwODM4MQ==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\"_mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    FALSE,     //!< OP_0\n+    TRUE,      //!< OP_1",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 165,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like these already are macros on mac from `/home/travis/build/bitcoin/bitcoin/depends/SDKs/MacOSX10.11.sdk/usr/include/mach/boolean.h`?\r\n\r\nAnd also in windows: https://travis-ci.org/bitcoin/bitcoin/jobs/580527642#L3384",
      "created_at": "2019-09-04T11:32:07Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320708381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320708381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320709735",
      "pull_request_review_id": 283549870,
      "id": 320709735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDcwOTczNQ==",
      "diff_hunk": "@@ -0,0 +1,351 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <string>\n+\n+#include <test/setup_common.h>\n+#include <boost/test/unit_test.hpp>\n+\n+#include <hash.h>\n+#include <pubkey.h>\n+#include <uint256.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha256.h>\n+#include <script/miniscript.h>\n+\n+namespace {\n+\n+/** TestData groups various kinds of precomputed data necessary in this test. */\n+struct TestData {\n+    //! The only public keys used in this test.\n+    std::vector<CPubKey> pubkeys;\n+    //! A map from the public keys to their CKeyIDs (faster than hashing every time).\n+    std::map<CPubKey, CKeyID> pkhashes;\n+    std::map<CKeyID, CPubKey> pkmap;\n+\n+    // Various precomputed hashes\n+    std::vector<std::vector<unsigned char>> sha256;\n+    std::vector<std::vector<unsigned char>> ripemd160;\n+    std::vector<std::vector<unsigned char>> hash256;\n+    std::vector<std::vector<unsigned char>> hash160;\n+\n+    TestData()\n+    {\n+        // We generate 255 public keys and 255 hashes of each type.\n+        for (int i = 1; i <= 255; ++i) {\n+            // This 32-byte array functions as both private key data and hash preimage (31 zero bytes plus any nonzero byte).\n+            unsigned char keydata[32] = {0};\n+            keydata[31] = i;\n+\n+            // Compute CPubkey and CKeyID\n+            CKey key;\n+            key.Set(keydata, keydata + 32, true);\n+            CPubKey pubkey = key.GetPubKey();\n+            CKeyID keyid = pubkey.GetID();\n+            pubkeys.push_back(pubkey);\n+            pkhashes.emplace(pubkey, keyid);\n+            pkmap.emplace(keyid, pubkey);\n+\n+            // Compute various hashes\n+            std::vector<unsigned char> hash;\n+            hash.resize(32);\n+            CSHA256().Write(keydata, 32).Finalize(hash.data());\n+            sha256.push_back(hash);\n+            CHash256().Write(keydata, 32).Finalize(hash.data());\n+            hash256.push_back(hash);\n+            hash.resize(20);\n+            CRIPEMD160().Write(keydata, 32).Finalize(hash.data());\n+            ripemd160.push_back(hash);\n+            CHash160().Write(keydata, 32).Finalize(hash.data());\n+            hash160.push_back(hash);\n+        }\n+    }\n+};\n+\n+//! Global TestData object\n+std::unique_ptr<const TestData> g_testdata;\n+\n+/** A class encapulating conversion routing for CPubKey. */\n+struct KeyConverter {\n+    typedef CPubKey Key;\n+\n+    //! Public keys in text form are their usual hex notation (no xpubs, ...).\n+    bool ToString(const CPubKey& key, std::string& ret) const { ret = HexStr(key.begin(), key.end()); return true; }\n+\n+    //! Convert a public key to bytes.\n+    std::vector<unsigned char> ToPKBytes(const CPubKey& key) const { return {key.begin(), key.end()}; }\n+\n+    //! Convert a public key to its Hash160 bytes (precomputed).\n+    std::vector<unsigned char> ToPKHBytes(const CPubKey& key) const\n+    {\n+        auto it = g_testdata->pkhashes.find(key);\n+        assert(it != g_testdata->pkhashes.end());\n+        return {it->second.begin(), it->second.end()};\n+    }\n+\n+    //! Parse a public key from a range of hex characters.\n+    template<typename I>\n+    bool FromString(I first, I last, CPubKey& key) const {\n+        auto bytes = ParseHex(std::string(first, last));\n+        key.Set(bytes.begin(), bytes.end());\n+        return key.IsValid();\n+    }\n+\n+    template<typename I>\n+    bool FromPKBytes(I first, I last, CPubKey& key) const {\n+        key.Set(first, last);\n+        return key.IsValid();\n+    }\n+\n+    template<typename I>\n+    bool FromPKHBytes(I first, I last, CPubKey& key) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        auto it = g_testdata->pkmap.find(keyid);\n+        assert(it != g_testdata->pkmap.end());\n+        key = it->second;\n+        return true;\n+    }\n+};\n+\n+//! Singleton instance of KeyConverter.\n+const KeyConverter CONVERTER;",
      "path": "src/test/miniscript_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\ntest/miniscript_tests.cpp:115:20: error: default initialization of an object of const type 'const (anonymous namespace)::KeyConverter' without a user-provided default constructor\r\n```\r\n\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/580527646#L3225",
      "created_at": "2019-09-04T11:35:27Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320709735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320709735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320710696",
      "pull_request_review_id": 283549870,
      "id": 320710696,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDcxMDY5Ng==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\"_mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    FALSE,     //!< OP_0\n+    TRUE,      //!< OP_1\n+    PK,        //!< [key]\n+    PK_H,      //!< OP_DUP OP_HASH160 [keyhash] OP_EQUALVERFIFY\n+    OLDER,     //!< [n] OP_CHECKSEQUENCEVERIFY\n+    AFTER,     //!< [n] OP_CHECKLOCKTIMEVERIFY\n+    SHA256,    //!< OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 [hash] OP_EQUAL\n+    HASH256,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH256 [hash] OP_EQUAL\n+    RIPEMD160, //!< OP_SIZE 32 OP_EQUALVERIFY OP_RIPEMD160 [hash] OP_EQUAL\n+    HASH160,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH160 [hash] OP_EQUAL\n+    WRAP_A,    //!< OP_TOALTSTACK [X] OP_FROMALTSTACK\n+    WRAP_S,    //!< OP_SWAP [X]\n+    WRAP_C,    //!< [X] OP_CHECKSIG\n+    WRAP_D,    //!< OP_DUP OP_IF [X] OP_ENDIF\n+    WRAP_V,    //!< [X] OP_VERIFY (or -VERIFY version of last opcode in X)\n+    WRAP_J,    //!< OP_SIZE OP_0NOTEQUAL OP_IF [X] OP_ENDIF\n+    WRAP_N,    //!< [X] OP_0NOTEQUAL\n+    AND_V,     //!< [X] [Y]\n+    AND_B,     //!< [X] [Y] OP_BOOLAND\n+    OR_B,      //!< [X] [Y] OP_BOOLOR\n+    OR_C,      //!< [X] OP_NOTIF [Y] OP_ENDIF\n+    OR_D,      //!< [X] OP_IFDUP OP_NOTIF [Y] OP_ENDIF\n+    OR_I,      //!< IF [X] OP_ELSE [Y] OP_ENDIF\n+    ANDOR,     //!< [X] OP_NOTIF [Z] OP_ELSE [Y] OP_ENDIF\n+    THRESH,    //!< [X1] ([Xn] OP_ADD)* [k] OP_EQUAL\n+    THRESH_M,  //!< [k] [key_n]* [n] OP_CHECKMULTISIG\n+    // AND_N(X,Y) is represented as ANDOR(X,Y,0)\n+    // WRAP_T(X) is represented as AND_V(X,1)\n+    // WRAP_L(X) is represented as OR_I(0,X)\n+    // WRAP_U(X) is represented as OR_I(X,0)\n+};\n+\n+namespace internal {\n+\n+//! Helper function for Node::CalcType.\n+Type ComputeType(NodeType nodetype, Type x, Type y, Type z, const std::vector<Type>& sub_types, uint32_t k, size_t data_size, size_t n_subs, size_t n_keys);\n+\n+//! Helper function for Node::CalcScriptLen.\n+size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_t k, size_t n_subs, size_t n_keys);\n+\n+//! A helper sanitizer/checker for the output of CalcType.\n+Type SanitizeType(Type x);\n+\n+//! Class whose objects represent the maximum of a list of integers.\n+template<typename I>\n+struct MaxInt {\n+    const bool valid;\n+    const I value;\n+\n+    MaxInt() : valid(false), value(0) {}\n+    MaxInt(I val) : valid(true), value(val) {}\n+\n+    friend MaxInt<I> operator+(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid || !b.valid) return {};\n+        return a.value + b.value;\n+    }\n+\n+    friend MaxInt<I> Choose(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid) return b;\n+        if (!b.valid) return a;\n+        return std::max(a.value, b.value);\n+    }\n+};\n+\n+struct Ops {\n+    //! Non-push opcodes.\n+    uint32_t stat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to satisfy.\n+    MaxInt<uint32_t> sat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to dissatisfy.\n+    MaxInt<uint32_t> dsat;\n+\n+    Ops(uint32_t in_stat, MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : stat(in_stat), sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+struct StackSize {\n+    //! Maximum stack size to satisfy;\n+    MaxInt<uint32_t> sat;\n+    //! Maximum stack size to dissatisfy;\n+    MaxInt<uint32_t> dsat;\n+\n+    StackSize(MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+} // namespace internal\n+\n+//! A node in a miniscript expression.\n+template<typename Key>\n+struct Node {\n+    //! What node type this node is.\n+    const NodeType nodetype;\n+    //! The k parameter (time for OLDER/AFTER, threshold for THRESH(_M))\n+    const uint32_t k = 0;\n+    //! The keys used by this expression (only for PK/PK_H/THRESH_M)\n+    const std::vector<Key> keys;\n+    //! The data bytes in this expression (only for HASH160/HASH256/SHA256/RIPEMD10).\n+    const std::vector<unsigned char> data;\n+    //! Subexpressions (for WRAP_*/AND_*/OR_*/ANDOR/THRESH)\n+    const std::vector<NodeRef<Key>> subs;\n+\n+private:\n+    //! Cached ops counts.\n+    const internal::Ops ops;\n+    //! Cached stack size bounds.\n+    const internal::StackSize ss;\n+    //! Cached expression type (computed by CalcType and fed through SanitizeType).\n+    const Type typ;\n+    //! Cached script length (computed by CalcScriptLen).\n+    const size_t scriptlen;\n+\n+    //! Compute the length of the script for this miniscript (including children).\n+    size_t CalcScriptLen() const {\n+        size_t subsize = 0;\n+        for (const auto& sub : subs) {\n+            subsize += sub->ScriptSize();\n+        }\n+        Type sub0type = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        return internal::ComputeScriptLen(nodetype, sub0type, subsize, k, subs.size(), keys.size());\n+    }\n+\n+    //! Compute the type for this miniscript.\n+    Type CalcType() const {\n+        using namespace internal;\n+\n+        // THRESH has a variable number of subexpression\n+        std::vector<Type> sub_types;\n+        if (nodetype == NodeType::THRESH) {\n+            for (const auto& sub : subs) sub_types.push_back(sub->GetType());\n+        }\n+        // All other nodes than THRESH can be computed just from the types of the 0-3 subexpexpressions.\n+        Type x = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        Type y = subs.size() > 1 ? subs[1]->GetType() : \"\"_mst;\n+        Type z = subs.size() > 2 ? subs[2]->GetType() : \"\"_mst;\n+\n+        return SanitizeType(ComputeType(nodetype, x, y, z, sub_types, k, data.size(), subs.size(), keys.size()));\n+    }\n+\n+    //! Internal code for ToScript.\n+    template<typename Ctx>\n+    CScript MakeScript(const Ctx& ctx, bool verify = false) const {\n+        std::vector<unsigned char> bytes;\n+        switch (nodetype) {\n+            case NodeType::PK: return CScript() << ctx.ToPKBytes(keys[0]);\n+            case NodeType::PK_H: return CScript() << OP_DUP << OP_HASH160 << ctx.ToPKHBytes(keys[0]) << OP_EQUALVERIFY;\n+            case NodeType::OLDER: return CScript() << k << OP_CHECKSEQUENCEVERIFY;\n+            case NodeType::AFTER: return CScript() << k << OP_CHECKLOCKTIMEVERIFY;\n+            case NodeType::SHA256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_SHA256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::RIPEMD160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_RIPEMD160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::WRAP_A: return (CScript() << OP_TOALTSTACK) + subs[0]->MakeScript(ctx) + (CScript() << OP_FROMALTSTACK);\n+            case NodeType::WRAP_S: return (CScript() << OP_SWAP) + subs[0]->MakeScript(ctx, verify);\n+            case NodeType::WRAP_C: return subs[0]->MakeScript(ctx) + CScript() << (verify ? OP_CHECKSIGVERIFY : OP_CHECKSIG);\n+            case NodeType::WRAP_D: return (CScript() << OP_DUP << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_V: return subs[0]->MakeScript(ctx, true) + (subs[0]->GetType() << \"x\"_mst ? (CScript() << OP_VERIFY) : CScript());\n+            case NodeType::WRAP_J: return (CScript() << OP_SIZE << OP_0NOTEQUAL << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_N: return subs[0]->MakeScript(ctx) + CScript() << OP_0NOTEQUAL;\n+            case NodeType::TRUE: return CScript() << OP_1;\n+            case NodeType::FALSE: return CScript() << OP_0;\n+            case NodeType::AND_V: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx, verify);\n+            case NodeType::AND_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLAND);\n+            case NodeType::OR_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLOR);\n+            case NodeType::OR_D: return subs[0]->MakeScript(ctx) + (CScript() << OP_IFDUP << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_C: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_I: return (CScript() << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::ANDOR: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[2]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::THRESH_M: {\n+                CScript script = CScript() << k;\n+                for (const auto& key : keys) {\n+                    script << ctx.ToPKBytes(key);\n+                }\n+                return script << keys.size() << (verify ? OP_CHECKMULTISIGVERIFY : OP_CHECKMULTISIG);\n+            }\n+            case NodeType::THRESH: {\n+                CScript script = subs[0]->MakeScript(ctx);\n+                for (size_t i = 1; i < subs.size(); ++i) {\n+                    script = (script + subs[i]->MakeScript(ctx)) << OP_ADD;\n+                }\n+                return script << k << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            }\n+        }\n+        assert(false);\n+        return {};\n+    }\n+\n+    //! Internal code for ToString.\n+    template<typename Ctx>\n+    std::string MakeString(const Ctx& ctx, bool& success, bool wrapped = false) const {\n+        switch (nodetype) {\n+            case NodeType::WRAP_A: return \"a\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_S: return \"s\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_C: return \"c\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_D: return \"d\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_V: return \"v\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_J: return \"j\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_N: return \"n\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::AND_V:\n+                // t:X is syntactic sugar for and_v(X,1).\n+                if (subs[1]->nodetype == NodeType::TRUE) return \"t\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            case NodeType::OR_I:\n+                if (subs[0]->nodetype == NodeType::FALSE) return \"l\" + subs[1]->MakeString(ctx, success, true);\n+                if (subs[1]->nodetype == NodeType::FALSE) return \"u\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        std::string ret = wrapped ? \":\" : \"\";\n+\n+        switch (nodetype) {\n+            case NodeType::PK: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::PK_H: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk_h(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::AFTER: return std::move(ret) + \"after(\" + std::to_string(k) + \")\";\n+            case NodeType::OLDER: return std::move(ret) + \"older(\" + std::to_string(k) + \")\";\n+            case NodeType::HASH256: return std::move(ret) + \"hash256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::HASH160: return std::move(ret) + \"hash160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::SHA256: return std::move(ret) + \"sha256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::RIPEMD160: return std::move(ret) + \"ripemd160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::TRUE: return std::move(ret) + \"1\";\n+            case NodeType::FALSE: return std::move(ret) + \"0\";\n+            case NodeType::AND_V: return std::move(ret) + \"and_v(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::AND_B: return std::move(ret) + \"and_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_B: return std::move(ret) + \"or_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_D: return std::move(ret) + \"or_d(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_C: return std::move(ret) + \"or_c(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_I: return std::move(ret) + \"or_i(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::ANDOR:\n+                // and_n(X,Y) is syntactic sugar for andor(X,Y,0).\n+                if (subs[2]->nodetype == NodeType::FALSE) return std::move(ret) + \"and_n(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+                return std::move(ret) + \"andor(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \",\" + subs[2]->MakeString(ctx, success) + \")\";\n+            case NodeType::THRESH_M: {\n+                auto str = std::move(ret) + \"thresh_m(\" + std::to_string(k);\n+                for (const auto& key : keys) {\n+                    std::string key_str;\n+                    success &= ctx.ToString(key, key_str);\n+                    str += \",\" + std::move(key_str);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            case NodeType::THRESH: {\n+                auto str = std::move(ret) + \"thresh(\" + std::to_string(k);\n+                for (const auto& sub : subs) {\n+                    str += \",\" + sub->MakeString(ctx, success);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            default: assert(false); // Wrappers should have been handled above\n+        }\n+        return \"\";\n+    }\n+\n+    internal::Ops CalcOps() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {0, 0, 0};\n+            case NodeType::PK_H: return {3, 0, 0};\n+            case NodeType::OLDER: return {1, 0, {}};\n+            case NodeType::AFTER: return {1, 0, {}};\n+            case NodeType::SHA256: return {4, 0, {}};\n+            case NodeType::RIPEMD160: return {4, 0, {}};\n+            case NodeType::HASH256: return {4, 0, {}};\n+            case NodeType::HASH160: return {4, 0, {}};\n+            case NodeType::AND_V: return {subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, {}};\n+            case NodeType::AND_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat + subs[1]->ops.dsat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_D: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_C: return {2 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), {}};\n+            case NodeType::OR_I: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat), Choose(subs[0]->ops.dsat, subs[1]->ops.dsat)};\n+            case NodeType::ANDOR: return {3 + subs[0]->ops.stat + subs[1]->ops.stat + subs[2]->ops.stat, Choose(subs[1]->ops.sat + subs[0]->ops.sat, subs[0]->ops.dsat + subs[2]->ops.sat), subs[0]->ops.dsat + subs[2]->ops.dsat};\n+            case NodeType::THRESH_M: return {1, (uint32_t)keys.size(), (uint32_t)keys.size()};\n+            case NodeType::WRAP_A: return {2 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_S: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_C: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_D: return {3 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_V: return {subs[0]->ops.stat + (subs[0]->GetType() << \"x\"_mst), subs[0]->ops.sat, {}};\n+            case NodeType::WRAP_J: return {4 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_N: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::TRUE: return {0, 0, {}};\n+            case NodeType::FALSE: return {0, {}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t stat = 0, dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    stat += sub->ops.stat + 1;\n+                    dsat += sub->ops.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ops.sat.valid) diffs.push_back((int32_t)sub->ops.sat.value - sub->ops.dsat.value);\n+                }\n+                if (diffs.size() < k) return {stat, {}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {stat, sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {0, {}, {}};\n+    }\n+\n+    internal::StackSize CalcStackSize() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {1, 1};\n+            case NodeType::PK_H: return {2, 2};\n+            case NodeType::OLDER: return {0, {}};\n+            case NodeType::AFTER: return {0, {}};\n+            case NodeType::SHA256: return {1, {}};\n+            case NodeType::RIPEMD160: return {1, {}};\n+            case NodeType::HASH256: return {1, {}};\n+            case NodeType::HASH160: return {1, {}};\n+            case NodeType::ANDOR: return {Choose(subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[2]->ss.sat), subs[0]->ss.dsat + subs[2]->ss.dsat};\n+            case NodeType::AND_V: return {subs[0]->ss.sat + subs[1]->ss.sat, {}};\n+            case NodeType::AND_B: return {subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_B: return {Choose(subs[0]->ss.dsat + subs[1]->ss.sat, subs[0]->ss.sat + subs[1]->ss.dsat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_C: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), {}};\n+            case NodeType::OR_D: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_I: return {Choose(subs[0]->ss.sat + 1, subs[1]->ss.sat + 1), Choose(subs[0]->ss.dsat + 1, subs[1]->ss.dsat + 1)};\n+            case NodeType::THRESH_M: return {(uint32_t)keys.size() + 1, (uint32_t)keys.size() + 1};\n+            case NodeType::WRAP_A: return subs[0]->ss;\n+            case NodeType::WRAP_S: return subs[0]->ss;\n+            case NodeType::WRAP_C: return subs[0]->ss;\n+            case NodeType::WRAP_D: return {1 + subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_V: return {subs[0]->ss.sat, {}};\n+            case NodeType::WRAP_J: return {subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_N: return subs[0]->ss;\n+            case NodeType::TRUE: return {0, {}};\n+            case NodeType::FALSE: return {{}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    dsat += sub->ss.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ss.sat.valid) diffs.push_back((int32_t)sub->ss.sat.value - sub->ss.dsat.value);\n+                }\n+                if (diffs.size() < k) return {{}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {{}, {}};\n+    }\n+\n+public:\n+    //! Return the size of the script for this expression (faster than ToString().size()).\n+    size_t ScriptSize() const { return scriptlen; }\n+\n+    //! Return the maximum number of ops needed to satisfy this script non-malleably.\n+    uint32_t GetOps() const { return ops.stat + ops.sat.value; }\n+\n+    //! Check the ops limit of this script against the consensus limit.\n+    bool CheckOpsLimit() const { return GetOps() <= MAX_OPS_PER_SCRIPT; }\n+\n+    //! Return the maximum number of stack elements needed to satisfy this script non-malleably.\n+    uint32_t GetStackSize() const { return ss.sat.value; }\n+\n+    //! Check the maximum stack size for this script against the policy limit.\n+    bool CheckStackSize() const { return GetStackSize() <= MAX_STANDARD_P2WSH_STACK_ITEMS; }\n+\n+    //! Return the expression type.\n+    Type GetType() const { return typ; }\n+\n+    //! Check whether this node is valid at all.\n+    bool IsValid() const { return !(GetType() == \"\"_mst); }\n+\n+    //! Check whether this node is valid as a script on its own.\n+    bool IsValidTopLevel() const { return GetType() << \"B\"_mst; }\n+\n+    //! Check whether this script can always be satisfied in a non-malleable way.\n+    bool IsNonMalleable() const { return GetType() << \"m\"_mst; }\n+\n+    //! Check whether this script always needs a signature.\n+    bool NeedsSignature() const { return GetType() << \"s\"_mst; }\n+\n+    //! Do all sanity checks.\n+    bool IsSafeTopLevel() const { return GetType() << \"Bms\"_mst && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Construct the script for this miniscript (including subexpressions).\n+    template<typename Ctx>\n+    CScript ToScript(const Ctx& ctx) const { return MakeScript(ctx); }\n+\n+    //! Convert this miniscript to its textual descriptor notation.\n+    template<typename Ctx>\n+    bool ToString(const Ctx& ctx, std::string& out) const {\n+        bool ret = true;\n+        out = MakeString(ctx, ret);\n+        if (!ret) out = \"\";\n+        return ret;\n+    }\n+\n+    //! Equality testing.\n+    bool operator==(const Node<Key>& arg) const\n+    {\n+        if (nodetype != arg.nodetype) return false;\n+        if (k != arg.k) return false;\n+        if (data != arg.data) return false;\n+        if (keys != arg.keys) return false;\n+        if (subs.size() != arg.subs.size()) return false;\n+        for (size_t i = 0; i < subs.size(); ++i) {\n+            if (!(*subs[i] == *arg.subs[i])) return false;\n+        }\n+        assert(scriptlen == arg.scriptlen);\n+        assert(typ == arg.typ);\n+        return true;\n+    }\n+\n+    // Constructors with various argument combinations.\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, std::vector<unsigned char> arg, uint32_t val = 0) : nodetype(nt), k(val), data(std::move(arg)), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<unsigned char> arg, uint32_t val = 0) : nodetype(nt), k(val), data(std::move(arg)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, std::vector<Key> key, uint32_t val = 0) : nodetype(nt), k(val), keys(std::move(key)), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<Key> key, uint32_t val = 0) : nodetype(nt), k(val), keys(std::move(key)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, uint32_t val = 0) : nodetype(nt), k(val), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, uint32_t val = 0) : nodetype(nt), k(val), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+};\n+\n+namespace internal {\n+\n+//! Parse a miniscript from its textual descriptor form.\n+template<typename Key, typename Ctx>\n+inline NodeRef<Key> Parse(Span<const char>& in, const Ctx& ctx) {\n+    auto expr = Expr(in);\n+    // Parse wrappers\n+    for (int i = 0; i < expr.size(); ++i) {\n+        if (expr[i] == ':') {\n+            auto in2 = expr.subspan(i + 1);\n+            auto sub = Parse<Key>(in2, ctx);\n+            if (!sub || in2.size()) return {};\n+            for (size_t j = i; j-- > 0; ) {",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 599,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nRunning tests: miniscript_tests from test/miniscript_tests.cpp\r\nRunning 2 test cases...\r\nTest cases order is shuffled using seed: 1580527639\r\nEntering test module \"Bitcoin Core Test Suite\"\r\ntest/miniscript_tests.cpp(282): Entering test suite \"miniscript_tests\"\r\ntest/miniscript_tests.cpp(322): Entering test case \"random_tests\"\r\nscript/miniscript.h:599:33: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'size_t' (aka 'unsigned long')",
      "created_at": "2019-09-04T11:38:09Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320710696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320710696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 599,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902315",
      "pull_request_review_id": 283801896,
      "id": 320902315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDkwMjMxNQ==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\"_mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    FALSE,     //!< OP_0\n+    TRUE,      //!< OP_1\n+    PK,        //!< [key]\n+    PK_H,      //!< OP_DUP OP_HASH160 [keyhash] OP_EQUALVERFIFY\n+    OLDER,     //!< [n] OP_CHECKSEQUENCEVERIFY\n+    AFTER,     //!< [n] OP_CHECKLOCKTIMEVERIFY\n+    SHA256,    //!< OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 [hash] OP_EQUAL\n+    HASH256,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH256 [hash] OP_EQUAL\n+    RIPEMD160, //!< OP_SIZE 32 OP_EQUALVERIFY OP_RIPEMD160 [hash] OP_EQUAL\n+    HASH160,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH160 [hash] OP_EQUAL\n+    WRAP_A,    //!< OP_TOALTSTACK [X] OP_FROMALTSTACK\n+    WRAP_S,    //!< OP_SWAP [X]\n+    WRAP_C,    //!< [X] OP_CHECKSIG\n+    WRAP_D,    //!< OP_DUP OP_IF [X] OP_ENDIF\n+    WRAP_V,    //!< [X] OP_VERIFY (or -VERIFY version of last opcode in X)\n+    WRAP_J,    //!< OP_SIZE OP_0NOTEQUAL OP_IF [X] OP_ENDIF\n+    WRAP_N,    //!< [X] OP_0NOTEQUAL\n+    AND_V,     //!< [X] [Y]\n+    AND_B,     //!< [X] [Y] OP_BOOLAND\n+    OR_B,      //!< [X] [Y] OP_BOOLOR\n+    OR_C,      //!< [X] OP_NOTIF [Y] OP_ENDIF\n+    OR_D,      //!< [X] OP_IFDUP OP_NOTIF [Y] OP_ENDIF\n+    OR_I,      //!< IF [X] OP_ELSE [Y] OP_ENDIF\n+    ANDOR,     //!< [X] OP_NOTIF [Z] OP_ELSE [Y] OP_ENDIF\n+    THRESH,    //!< [X1] ([Xn] OP_ADD)* [k] OP_EQUAL\n+    THRESH_M,  //!< [k] [key_n]* [n] OP_CHECKMULTISIG\n+    // AND_N(X,Y) is represented as ANDOR(X,Y,0)\n+    // WRAP_T(X) is represented as AND_V(X,1)\n+    // WRAP_L(X) is represented as OR_I(0,X)\n+    // WRAP_U(X) is represented as OR_I(X,0)\n+};\n+\n+namespace internal {\n+\n+//! Helper function for Node::CalcType.\n+Type ComputeType(NodeType nodetype, Type x, Type y, Type z, const std::vector<Type>& sub_types, uint32_t k, size_t data_size, size_t n_subs, size_t n_keys);\n+\n+//! Helper function for Node::CalcScriptLen.\n+size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_t k, size_t n_subs, size_t n_keys);\n+\n+//! A helper sanitizer/checker for the output of CalcType.\n+Type SanitizeType(Type x);\n+\n+//! Class whose objects represent the maximum of a list of integers.\n+template<typename I>\n+struct MaxInt {\n+    const bool valid;\n+    const I value;\n+\n+    MaxInt() : valid(false), value(0) {}\n+    MaxInt(I val) : valid(true), value(val) {}\n+\n+    friend MaxInt<I> operator+(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid || !b.valid) return {};\n+        return a.value + b.value;\n+    }\n+\n+    friend MaxInt<I> Choose(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid) return b;\n+        if (!b.valid) return a;\n+        return std::max(a.value, b.value);\n+    }\n+};\n+\n+struct Ops {\n+    //! Non-push opcodes.\n+    uint32_t stat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to satisfy.\n+    MaxInt<uint32_t> sat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to dissatisfy.\n+    MaxInt<uint32_t> dsat;\n+\n+    Ops(uint32_t in_stat, MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : stat(in_stat), sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+struct StackSize {\n+    //! Maximum stack size to satisfy;\n+    MaxInt<uint32_t> sat;\n+    //! Maximum stack size to dissatisfy;\n+    MaxInt<uint32_t> dsat;\n+\n+    StackSize(MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+} // namespace internal\n+\n+//! A node in a miniscript expression.\n+template<typename Key>\n+struct Node {\n+    //! What node type this node is.\n+    const NodeType nodetype;\n+    //! The k parameter (time for OLDER/AFTER, threshold for THRESH(_M))\n+    const uint32_t k = 0;\n+    //! The keys used by this expression (only for PK/PK_H/THRESH_M)\n+    const std::vector<Key> keys;\n+    //! The data bytes in this expression (only for HASH160/HASH256/SHA256/RIPEMD10).\n+    const std::vector<unsigned char> data;\n+    //! Subexpressions (for WRAP_*/AND_*/OR_*/ANDOR/THRESH)\n+    const std::vector<NodeRef<Key>> subs;\n+\n+private:\n+    //! Cached ops counts.\n+    const internal::Ops ops;\n+    //! Cached stack size bounds.\n+    const internal::StackSize ss;\n+    //! Cached expression type (computed by CalcType and fed through SanitizeType).\n+    const Type typ;\n+    //! Cached script length (computed by CalcScriptLen).\n+    const size_t scriptlen;\n+\n+    //! Compute the length of the script for this miniscript (including children).\n+    size_t CalcScriptLen() const {\n+        size_t subsize = 0;\n+        for (const auto& sub : subs) {\n+            subsize += sub->ScriptSize();\n+        }\n+        Type sub0type = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        return internal::ComputeScriptLen(nodetype, sub0type, subsize, k, subs.size(), keys.size());\n+    }\n+\n+    //! Compute the type for this miniscript.\n+    Type CalcType() const {\n+        using namespace internal;\n+\n+        // THRESH has a variable number of subexpression\n+        std::vector<Type> sub_types;\n+        if (nodetype == NodeType::THRESH) {\n+            for (const auto& sub : subs) sub_types.push_back(sub->GetType());\n+        }\n+        // All other nodes than THRESH can be computed just from the types of the 0-3 subexpexpressions.\n+        Type x = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        Type y = subs.size() > 1 ? subs[1]->GetType() : \"\"_mst;\n+        Type z = subs.size() > 2 ? subs[2]->GetType() : \"\"_mst;\n+\n+        return SanitizeType(ComputeType(nodetype, x, y, z, sub_types, k, data.size(), subs.size(), keys.size()));\n+    }\n+\n+    //! Internal code for ToScript.\n+    template<typename Ctx>\n+    CScript MakeScript(const Ctx& ctx, bool verify = false) const {\n+        std::vector<unsigned char> bytes;\n+        switch (nodetype) {\n+            case NodeType::PK: return CScript() << ctx.ToPKBytes(keys[0]);\n+            case NodeType::PK_H: return CScript() << OP_DUP << OP_HASH160 << ctx.ToPKHBytes(keys[0]) << OP_EQUALVERIFY;\n+            case NodeType::OLDER: return CScript() << k << OP_CHECKSEQUENCEVERIFY;\n+            case NodeType::AFTER: return CScript() << k << OP_CHECKLOCKTIMEVERIFY;\n+            case NodeType::SHA256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_SHA256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::RIPEMD160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_RIPEMD160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::WRAP_A: return (CScript() << OP_TOALTSTACK) + subs[0]->MakeScript(ctx) + (CScript() << OP_FROMALTSTACK);\n+            case NodeType::WRAP_S: return (CScript() << OP_SWAP) + subs[0]->MakeScript(ctx, verify);\n+            case NodeType::WRAP_C: return subs[0]->MakeScript(ctx) + CScript() << (verify ? OP_CHECKSIGVERIFY : OP_CHECKSIG);\n+            case NodeType::WRAP_D: return (CScript() << OP_DUP << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_V: return subs[0]->MakeScript(ctx, true) + (subs[0]->GetType() << \"x\"_mst ? (CScript() << OP_VERIFY) : CScript());\n+            case NodeType::WRAP_J: return (CScript() << OP_SIZE << OP_0NOTEQUAL << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_N: return subs[0]->MakeScript(ctx) + CScript() << OP_0NOTEQUAL;\n+            case NodeType::TRUE: return CScript() << OP_1;\n+            case NodeType::FALSE: return CScript() << OP_0;\n+            case NodeType::AND_V: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx, verify);\n+            case NodeType::AND_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLAND);\n+            case NodeType::OR_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLOR);\n+            case NodeType::OR_D: return subs[0]->MakeScript(ctx) + (CScript() << OP_IFDUP << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_C: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_I: return (CScript() << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::ANDOR: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[2]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::THRESH_M: {\n+                CScript script = CScript() << k;\n+                for (const auto& key : keys) {\n+                    script << ctx.ToPKBytes(key);\n+                }\n+                return script << keys.size() << (verify ? OP_CHECKMULTISIGVERIFY : OP_CHECKMULTISIG);\n+            }\n+            case NodeType::THRESH: {\n+                CScript script = subs[0]->MakeScript(ctx);\n+                for (size_t i = 1; i < subs.size(); ++i) {\n+                    script = (script + subs[i]->MakeScript(ctx)) << OP_ADD;\n+                }\n+                return script << k << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            }\n+        }\n+        assert(false);\n+        return {};\n+    }\n+\n+    //! Internal code for ToString.\n+    template<typename Ctx>\n+    std::string MakeString(const Ctx& ctx, bool& success, bool wrapped = false) const {\n+        switch (nodetype) {\n+            case NodeType::WRAP_A: return \"a\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_S: return \"s\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_C: return \"c\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_D: return \"d\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_V: return \"v\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_J: return \"j\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_N: return \"n\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::AND_V:\n+                // t:X is syntactic sugar for and_v(X,1).\n+                if (subs[1]->nodetype == NodeType::TRUE) return \"t\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            case NodeType::OR_I:\n+                if (subs[0]->nodetype == NodeType::FALSE) return \"l\" + subs[1]->MakeString(ctx, success, true);\n+                if (subs[1]->nodetype == NodeType::FALSE) return \"u\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        std::string ret = wrapped ? \":\" : \"\";\n+\n+        switch (nodetype) {\n+            case NodeType::PK: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::PK_H: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk_h(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::AFTER: return std::move(ret) + \"after(\" + std::to_string(k) + \")\";\n+            case NodeType::OLDER: return std::move(ret) + \"older(\" + std::to_string(k) + \")\";\n+            case NodeType::HASH256: return std::move(ret) + \"hash256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::HASH160: return std::move(ret) + \"hash160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::SHA256: return std::move(ret) + \"sha256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::RIPEMD160: return std::move(ret) + \"ripemd160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::TRUE: return std::move(ret) + \"1\";\n+            case NodeType::FALSE: return std::move(ret) + \"0\";\n+            case NodeType::AND_V: return std::move(ret) + \"and_v(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::AND_B: return std::move(ret) + \"and_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_B: return std::move(ret) + \"or_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_D: return std::move(ret) + \"or_d(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_C: return std::move(ret) + \"or_c(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_I: return std::move(ret) + \"or_i(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::ANDOR:\n+                // and_n(X,Y) is syntactic sugar for andor(X,Y,0).\n+                if (subs[2]->nodetype == NodeType::FALSE) return std::move(ret) + \"and_n(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+                return std::move(ret) + \"andor(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \",\" + subs[2]->MakeString(ctx, success) + \")\";\n+            case NodeType::THRESH_M: {\n+                auto str = std::move(ret) + \"thresh_m(\" + std::to_string(k);\n+                for (const auto& key : keys) {\n+                    std::string key_str;\n+                    success &= ctx.ToString(key, key_str);\n+                    str += \",\" + std::move(key_str);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            case NodeType::THRESH: {\n+                auto str = std::move(ret) + \"thresh(\" + std::to_string(k);\n+                for (const auto& sub : subs) {\n+                    str += \",\" + sub->MakeString(ctx, success);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            default: assert(false); // Wrappers should have been handled above\n+        }\n+        return \"\";\n+    }\n+\n+    internal::Ops CalcOps() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {0, 0, 0};\n+            case NodeType::PK_H: return {3, 0, 0};\n+            case NodeType::OLDER: return {1, 0, {}};\n+            case NodeType::AFTER: return {1, 0, {}};\n+            case NodeType::SHA256: return {4, 0, {}};\n+            case NodeType::RIPEMD160: return {4, 0, {}};\n+            case NodeType::HASH256: return {4, 0, {}};\n+            case NodeType::HASH160: return {4, 0, {}};\n+            case NodeType::AND_V: return {subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, {}};\n+            case NodeType::AND_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat + subs[1]->ops.dsat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_D: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_C: return {2 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), {}};\n+            case NodeType::OR_I: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat), Choose(subs[0]->ops.dsat, subs[1]->ops.dsat)};\n+            case NodeType::ANDOR: return {3 + subs[0]->ops.stat + subs[1]->ops.stat + subs[2]->ops.stat, Choose(subs[1]->ops.sat + subs[0]->ops.sat, subs[0]->ops.dsat + subs[2]->ops.sat), subs[0]->ops.dsat + subs[2]->ops.dsat};\n+            case NodeType::THRESH_M: return {1, (uint32_t)keys.size(), (uint32_t)keys.size()};\n+            case NodeType::WRAP_A: return {2 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_S: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_C: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_D: return {3 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_V: return {subs[0]->ops.stat + (subs[0]->GetType() << \"x\"_mst), subs[0]->ops.sat, {}};\n+            case NodeType::WRAP_J: return {4 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_N: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::TRUE: return {0, 0, {}};\n+            case NodeType::FALSE: return {0, {}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t stat = 0, dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    stat += sub->ops.stat + 1;\n+                    dsat += sub->ops.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ops.sat.valid) diffs.push_back((int32_t)sub->ops.sat.value - sub->ops.dsat.value);\n+                }\n+                if (diffs.size() < k) return {stat, {}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {stat, sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {0, {}, {}};\n+    }\n+\n+    internal::StackSize CalcStackSize() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {1, 1};\n+            case NodeType::PK_H: return {2, 2};\n+            case NodeType::OLDER: return {0, {}};\n+            case NodeType::AFTER: return {0, {}};\n+            case NodeType::SHA256: return {1, {}};\n+            case NodeType::RIPEMD160: return {1, {}};\n+            case NodeType::HASH256: return {1, {}};\n+            case NodeType::HASH160: return {1, {}};\n+            case NodeType::ANDOR: return {Choose(subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[2]->ss.sat), subs[0]->ss.dsat + subs[2]->ss.dsat};\n+            case NodeType::AND_V: return {subs[0]->ss.sat + subs[1]->ss.sat, {}};\n+            case NodeType::AND_B: return {subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_B: return {Choose(subs[0]->ss.dsat + subs[1]->ss.sat, subs[0]->ss.sat + subs[1]->ss.dsat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_C: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), {}};\n+            case NodeType::OR_D: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_I: return {Choose(subs[0]->ss.sat + 1, subs[1]->ss.sat + 1), Choose(subs[0]->ss.dsat + 1, subs[1]->ss.dsat + 1)};\n+            case NodeType::THRESH_M: return {(uint32_t)keys.size() + 1, (uint32_t)keys.size() + 1};\n+            case NodeType::WRAP_A: return subs[0]->ss;\n+            case NodeType::WRAP_S: return subs[0]->ss;\n+            case NodeType::WRAP_C: return subs[0]->ss;\n+            case NodeType::WRAP_D: return {1 + subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_V: return {subs[0]->ss.sat, {}};\n+            case NodeType::WRAP_J: return {subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_N: return subs[0]->ss;\n+            case NodeType::TRUE: return {0, {}};\n+            case NodeType::FALSE: return {{}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    dsat += sub->ss.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ss.sat.valid) diffs.push_back((int32_t)sub->ss.sat.value - sub->ss.dsat.value);\n+                }\n+                if (diffs.size() < k) return {{}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {{}, {}};\n+    }\n+\n+public:\n+    //! Return the size of the script for this expression (faster than ToString().size()).\n+    size_t ScriptSize() const { return scriptlen; }\n+\n+    //! Return the maximum number of ops needed to satisfy this script non-malleably.\n+    uint32_t GetOps() const { return ops.stat + ops.sat.value; }\n+\n+    //! Check the ops limit of this script against the consensus limit.\n+    bool CheckOpsLimit() const { return GetOps() <= MAX_OPS_PER_SCRIPT; }\n+\n+    //! Return the maximum number of stack elements needed to satisfy this script non-malleably.\n+    uint32_t GetStackSize() const { return ss.sat.value; }\n+\n+    //! Check the maximum stack size for this script against the policy limit.\n+    bool CheckStackSize() const { return GetStackSize() <= MAX_STANDARD_P2WSH_STACK_ITEMS; }\n+\n+    //! Return the expression type.\n+    Type GetType() const { return typ; }\n+\n+    //! Check whether this node is valid at all.\n+    bool IsValid() const { return !(GetType() == \"\"_mst); }\n+\n+    //! Check whether this node is valid as a script on its own.\n+    bool IsValidTopLevel() const { return GetType() << \"B\"_mst; }\n+\n+    //! Check whether this script can always be satisfied in a non-malleable way.\n+    bool IsNonMalleable() const { return GetType() << \"m\"_mst; }\n+\n+    //! Check whether this script always needs a signature.\n+    bool NeedsSignature() const { return GetType() << \"s\"_mst; }\n+\n+    //! Do all sanity checks.\n+    bool IsSafeTopLevel() const { return GetType() << \"Bms\"_mst && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Construct the script for this miniscript (including subexpressions).\n+    template<typename Ctx>\n+    CScript ToScript(const Ctx& ctx) const { return MakeScript(ctx); }\n+\n+    //! Convert this miniscript to its textual descriptor notation.\n+    template<typename Ctx>\n+    bool ToString(const Ctx& ctx, std::string& out) const {\n+        bool ret = true;\n+        out = MakeString(ctx, ret);\n+        if (!ret) out = \"\";\n+        return ret;\n+    }\n+\n+    //! Equality testing.\n+    bool operator==(const Node<Key>& arg) const\n+    {\n+        if (nodetype != arg.nodetype) return false;\n+        if (k != arg.k) return false;\n+        if (data != arg.data) return false;\n+        if (keys != arg.keys) return false;\n+        if (subs.size() != arg.subs.size()) return false;\n+        for (size_t i = 0; i < subs.size(); ++i) {\n+            if (!(*subs[i] == *arg.subs[i])) return false;\n+        }\n+        assert(scriptlen == arg.scriptlen);\n+        assert(typ == arg.typ);\n+        return true;\n+    }\n+\n+    // Constructors with various argument combinations.\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, std::vector<unsigned char> arg, uint32_t val = 0) : nodetype(nt), k(val), data(std::move(arg)), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<unsigned char> arg, uint32_t val = 0) : nodetype(nt), k(val), data(std::move(arg)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, std::vector<Key> key, uint32_t val = 0) : nodetype(nt), k(val), keys(std::move(key)), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<Key> key, uint32_t val = 0) : nodetype(nt), k(val), keys(std::move(key)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, std::vector<NodeRef<Key>> sub, uint32_t val = 0) : nodetype(nt), k(val), subs(std::move(sub)), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+    Node(NodeType nt, uint32_t val = 0) : nodetype(nt), k(val), ops(CalcOps()), ss(CalcStackSize()), typ(CalcType()), scriptlen(CalcScriptLen()) {}\n+};\n+\n+namespace internal {\n+\n+//! Parse a miniscript from its textual descriptor form.\n+template<typename Key, typename Ctx>\n+inline NodeRef<Key> Parse(Span<const char>& in, const Ctx& ctx) {\n+    auto expr = Expr(in);\n+    // Parse wrappers\n+    for (int i = 0; i < expr.size(); ++i) {\n+        if (expr[i] == ':') {\n+            auto in2 = expr.subspan(i + 1);\n+            auto sub = Parse<Key>(in2, ctx);\n+            if (!sub || in2.size()) return {};\n+            for (size_t j = i; j-- > 0; ) {",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 599,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": 320710696,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for investigating; fixed.",
      "created_at": "2019-09-04T18:13:21Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 599,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902469",
      "pull_request_review_id": 283802118,
      "id": 320902469,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDkwMjQ2OQ==",
      "diff_hunk": "@@ -0,0 +1,351 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <string>\n+\n+#include <test/setup_common.h>\n+#include <boost/test/unit_test.hpp>\n+\n+#include <hash.h>\n+#include <pubkey.h>\n+#include <uint256.h>\n+#include <crypto/ripemd160.h>\n+#include <crypto/sha256.h>\n+#include <script/miniscript.h>\n+\n+namespace {\n+\n+/** TestData groups various kinds of precomputed data necessary in this test. */\n+struct TestData {\n+    //! The only public keys used in this test.\n+    std::vector<CPubKey> pubkeys;\n+    //! A map from the public keys to their CKeyIDs (faster than hashing every time).\n+    std::map<CPubKey, CKeyID> pkhashes;\n+    std::map<CKeyID, CPubKey> pkmap;\n+\n+    // Various precomputed hashes\n+    std::vector<std::vector<unsigned char>> sha256;\n+    std::vector<std::vector<unsigned char>> ripemd160;\n+    std::vector<std::vector<unsigned char>> hash256;\n+    std::vector<std::vector<unsigned char>> hash160;\n+\n+    TestData()\n+    {\n+        // We generate 255 public keys and 255 hashes of each type.\n+        for (int i = 1; i <= 255; ++i) {\n+            // This 32-byte array functions as both private key data and hash preimage (31 zero bytes plus any nonzero byte).\n+            unsigned char keydata[32] = {0};\n+            keydata[31] = i;\n+\n+            // Compute CPubkey and CKeyID\n+            CKey key;\n+            key.Set(keydata, keydata + 32, true);\n+            CPubKey pubkey = key.GetPubKey();\n+            CKeyID keyid = pubkey.GetID();\n+            pubkeys.push_back(pubkey);\n+            pkhashes.emplace(pubkey, keyid);\n+            pkmap.emplace(keyid, pubkey);\n+\n+            // Compute various hashes\n+            std::vector<unsigned char> hash;\n+            hash.resize(32);\n+            CSHA256().Write(keydata, 32).Finalize(hash.data());\n+            sha256.push_back(hash);\n+            CHash256().Write(keydata, 32).Finalize(hash.data());\n+            hash256.push_back(hash);\n+            hash.resize(20);\n+            CRIPEMD160().Write(keydata, 32).Finalize(hash.data());\n+            ripemd160.push_back(hash);\n+            CHash160().Write(keydata, 32).Finalize(hash.data());\n+            hash160.push_back(hash);\n+        }\n+    }\n+};\n+\n+//! Global TestData object\n+std::unique_ptr<const TestData> g_testdata;\n+\n+/** A class encapulating conversion routing for CPubKey. */\n+struct KeyConverter {\n+    typedef CPubKey Key;\n+\n+    //! Public keys in text form are their usual hex notation (no xpubs, ...).\n+    bool ToString(const CPubKey& key, std::string& ret) const { ret = HexStr(key.begin(), key.end()); return true; }\n+\n+    //! Convert a public key to bytes.\n+    std::vector<unsigned char> ToPKBytes(const CPubKey& key) const { return {key.begin(), key.end()}; }\n+\n+    //! Convert a public key to its Hash160 bytes (precomputed).\n+    std::vector<unsigned char> ToPKHBytes(const CPubKey& key) const\n+    {\n+        auto it = g_testdata->pkhashes.find(key);\n+        assert(it != g_testdata->pkhashes.end());\n+        return {it->second.begin(), it->second.end()};\n+    }\n+\n+    //! Parse a public key from a range of hex characters.\n+    template<typename I>\n+    bool FromString(I first, I last, CPubKey& key) const {\n+        auto bytes = ParseHex(std::string(first, last));\n+        key.Set(bytes.begin(), bytes.end());\n+        return key.IsValid();\n+    }\n+\n+    template<typename I>\n+    bool FromPKBytes(I first, I last, CPubKey& key) const {\n+        key.Set(first, last);\n+        return key.IsValid();\n+    }\n+\n+    template<typename I>\n+    bool FromPKHBytes(I first, I last, CPubKey& key) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        auto it = g_testdata->pkmap.find(keyid);\n+        assert(it != g_testdata->pkmap.end());\n+        key = it->second;\n+        return true;\n+    }\n+};\n+\n+//! Singleton instance of KeyConverter.\n+const KeyConverter CONVERTER;",
      "path": "src/test/miniscript_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": 320709735,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed pedantry by using `const KeyConverter CONVERTER{};` instead.",
      "created_at": "2019-09-04T18:13:43Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902597",
      "pull_request_review_id": 283802289,
      "id": 320902597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDkwMjU5Nw==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\"_mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    FALSE,     //!< OP_0\n+    TRUE,      //!< OP_1",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 165,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "892acd4877e0fbf91157198ef7f0734bd5cd36ac",
      "in_reply_to_id": 320708381,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed by renaming to `JUST_0` and `JUST_1`.",
      "created_at": "2019-09-04T18:13:59Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r320902597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320902597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321021420",
      "pull_request_review_id": 283954717,
      "id": 321021420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTAyMTQyMA==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\" _mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    JUST_0,     //!< OP_0\n+    JUST_1,    //!< OP_1\n+    PK,        //!< [key]\n+    PK_H,      //!< OP_DUP OP_HASH160 [keyhash] OP_EQUALVERFIFY\n+    OLDER,     //!< [n] OP_CHECKSEQUENCEVERIFY\n+    AFTER,     //!< [n] OP_CHECKLOCKTIMEVERIFY\n+    SHA256,    //!< OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 [hash] OP_EQUAL\n+    HASH256,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH256 [hash] OP_EQUAL\n+    RIPEMD160, //!< OP_SIZE 32 OP_EQUALVERIFY OP_RIPEMD160 [hash] OP_EQUAL\n+    HASH160,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH160 [hash] OP_EQUAL\n+    WRAP_A,    //!< OP_TOALTSTACK [X] OP_FROMALTSTACK\n+    WRAP_S,    //!< OP_SWAP [X]\n+    WRAP_C,    //!< [X] OP_CHECKSIG\n+    WRAP_D,    //!< OP_DUP OP_IF [X] OP_ENDIF\n+    WRAP_V,    //!< [X] OP_VERIFY (or -VERIFY version of last opcode in X)\n+    WRAP_J,    //!< OP_SIZE OP_0NOTEQUAL OP_IF [X] OP_ENDIF\n+    WRAP_N,    //!< [X] OP_0NOTEQUAL\n+    AND_V,     //!< [X] [Y]\n+    AND_B,     //!< [X] [Y] OP_BOOLAND\n+    OR_B,      //!< [X] [Y] OP_BOOLOR\n+    OR_C,      //!< [X] OP_NOTIF [Y] OP_ENDIF\n+    OR_D,      //!< [X] OP_IFDUP OP_NOTIF [Y] OP_ENDIF\n+    OR_I,      //!< IF [X] OP_ELSE [Y] OP_ENDIF\n+    ANDOR,     //!< [X] OP_NOTIF [Z] OP_ELSE [Y] OP_ENDIF\n+    THRESH,    //!< [X1] ([Xn] OP_ADD)* [k] OP_EQUAL\n+    THRESH_M,  //!< [k] [key_n]* [n] OP_CHECKMULTISIG\n+    // AND_N(X,Y) is represented as ANDOR(X,Y,0)\n+    // WRAP_T(X) is represented as AND_V(X,1)\n+    // WRAP_L(X) is represented as OR_I(0,X)\n+    // WRAP_U(X) is represented as OR_I(X,0)\n+};\n+\n+namespace internal {\n+\n+//! Helper function for Node::CalcType.\n+Type ComputeType(NodeType nodetype, Type x, Type y, Type z, const std::vector<Type>& sub_types, uint32_t k, size_t data_size, size_t n_subs, size_t n_keys);\n+\n+//! Helper function for Node::CalcScriptLen.\n+size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_t k, size_t n_subs, size_t n_keys);\n+\n+//! A helper sanitizer/checker for the output of CalcType.\n+Type SanitizeType(Type x);\n+\n+//! Class whose objects represent the maximum of a list of integers.\n+template<typename I>\n+struct MaxInt {\n+    const bool valid;\n+    const I value;\n+\n+    MaxInt() : valid(false), value(0) {}\n+    MaxInt(I val) : valid(true), value(val) {}\n+\n+    friend MaxInt<I> operator+(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid || !b.valid) return {};\n+        return a.value + b.value;\n+    }\n+\n+    friend MaxInt<I> Choose(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid) return b;\n+        if (!b.valid) return a;\n+        return std::max(a.value, b.value);\n+    }\n+};\n+\n+struct Ops {\n+    //! Non-push opcodes.\n+    uint32_t stat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to satisfy.\n+    MaxInt<uint32_t> sat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to dissatisfy.\n+    MaxInt<uint32_t> dsat;\n+\n+    Ops(uint32_t in_stat, MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : stat(in_stat), sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+struct StackSize {\n+    //! Maximum stack size to satisfy;\n+    MaxInt<uint32_t> sat;\n+    //! Maximum stack size to dissatisfy;\n+    MaxInt<uint32_t> dsat;\n+\n+    StackSize(MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+} // namespace internal\n+\n+//! A node in a miniscript expression.\n+template<typename Key>\n+struct Node {\n+    //! What node type this node is.\n+    const NodeType nodetype;\n+    //! The k parameter (time for OLDER/AFTER, threshold for THRESH(_M))\n+    const uint32_t k = 0;\n+    //! The keys used by this expression (only for PK/PK_H/THRESH_M)\n+    const std::vector<Key> keys;\n+    //! The data bytes in this expression (only for HASH160/HASH256/SHA256/RIPEMD10).\n+    const std::vector<unsigned char> data;\n+    //! Subexpressions (for WRAP_*/AND_*/OR_*/ANDOR/THRESH)\n+    const std::vector<NodeRef<Key>> subs;\n+\n+private:\n+    //! Cached ops counts.\n+    const internal::Ops ops;\n+    //! Cached stack size bounds.\n+    const internal::StackSize ss;\n+    //! Cached expression type (computed by CalcType and fed through SanitizeType).\n+    const Type typ;\n+    //! Cached script length (computed by CalcScriptLen).\n+    const size_t scriptlen;\n+\n+    //! Compute the length of the script for this miniscript (including children).\n+    size_t CalcScriptLen() const {\n+        size_t subsize = 0;\n+        for (const auto& sub : subs) {\n+            subsize += sub->ScriptSize();\n+        }\n+        Type sub0type = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        return internal::ComputeScriptLen(nodetype, sub0type, subsize, k, subs.size(), keys.size());\n+    }\n+\n+    //! Compute the type for this miniscript.\n+    Type CalcType() const {\n+        using namespace internal;\n+\n+        // THRESH has a variable number of subexpression\n+        std::vector<Type> sub_types;\n+        if (nodetype == NodeType::THRESH) {\n+            for (const auto& sub : subs) sub_types.push_back(sub->GetType());\n+        }\n+        // All other nodes than THRESH can be computed just from the types of the 0-3 subexpexpressions.\n+        Type x = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        Type y = subs.size() > 1 ? subs[1]->GetType() : \"\"_mst;\n+        Type z = subs.size() > 2 ? subs[2]->GetType() : \"\"_mst;\n+\n+        return SanitizeType(ComputeType(nodetype, x, y, z, sub_types, k, data.size(), subs.size(), keys.size()));\n+    }\n+\n+    //! Internal code for ToScript.\n+    template<typename Ctx>\n+    CScript MakeScript(const Ctx& ctx, bool verify = false) const {\n+        std::vector<unsigned char> bytes;\n+        switch (nodetype) {\n+            case NodeType::PK: return CScript() << ctx.ToPKBytes(keys[0]);\n+            case NodeType::PK_H: return CScript() << OP_DUP << OP_HASH160 << ctx.ToPKHBytes(keys[0]) << OP_EQUALVERIFY;\n+            case NodeType::OLDER: return CScript() << k << OP_CHECKSEQUENCEVERIFY;\n+            case NodeType::AFTER: return CScript() << k << OP_CHECKLOCKTIMEVERIFY;\n+            case NodeType::SHA256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_SHA256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::RIPEMD160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_RIPEMD160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::WRAP_A: return (CScript() << OP_TOALTSTACK) + subs[0]->MakeScript(ctx) + (CScript() << OP_FROMALTSTACK);\n+            case NodeType::WRAP_S: return (CScript() << OP_SWAP) + subs[0]->MakeScript(ctx, verify);\n+            case NodeType::WRAP_C: return subs[0]->MakeScript(ctx) + CScript() << (verify ? OP_CHECKSIGVERIFY : OP_CHECKSIG);\n+            case NodeType::WRAP_D: return (CScript() << OP_DUP << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_V: return subs[0]->MakeScript(ctx, true) + (subs[0]->GetType() << \"x\"_mst ? (CScript() << OP_VERIFY) : CScript());\n+            case NodeType::WRAP_J: return (CScript() << OP_SIZE << OP_0NOTEQUAL << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_N: return subs[0]->MakeScript(ctx) + CScript() << OP_0NOTEQUAL;\n+            case NodeType::JUST_1: return CScript() << OP_1;\n+            case NodeType::JUST_0: return CScript() << OP_0;\n+            case NodeType::AND_V: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx, verify);\n+            case NodeType::AND_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLAND);\n+            case NodeType::OR_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLOR);\n+            case NodeType::OR_D: return subs[0]->MakeScript(ctx) + (CScript() << OP_IFDUP << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_C: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_I: return (CScript() << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::ANDOR: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[2]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::THRESH_M: {\n+                CScript script = CScript() << k;\n+                for (const auto& key : keys) {\n+                    script << ctx.ToPKBytes(key);\n+                }\n+                return script << keys.size() << (verify ? OP_CHECKMULTISIGVERIFY : OP_CHECKMULTISIG);\n+            }\n+            case NodeType::THRESH: {\n+                CScript script = subs[0]->MakeScript(ctx);\n+                for (size_t i = 1; i < subs.size(); ++i) {\n+                    script = (script + subs[i]->MakeScript(ctx)) << OP_ADD;\n+                }\n+                return script << k << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            }\n+        }\n+        assert(false);\n+        return {};\n+    }\n+\n+    //! Internal code for ToString.\n+    template<typename Ctx>\n+    std::string MakeString(const Ctx& ctx, bool& success, bool wrapped = false) const {\n+        switch (nodetype) {\n+            case NodeType::WRAP_A: return \"a\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_S: return \"s\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_C: return \"c\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_D: return \"d\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_V: return \"v\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_J: return \"j\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_N: return \"n\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::AND_V:\n+                // t:X is syntactic sugar for and_v(X,1).\n+                if (subs[1]->nodetype == NodeType::JUST_1) return \"t\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            case NodeType::OR_I:\n+                if (subs[0]->nodetype == NodeType::JUST_0) return \"l\" + subs[1]->MakeString(ctx, success, true);\n+                if (subs[1]->nodetype == NodeType::JUST_0) return \"u\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        std::string ret = wrapped ? \":\" : \"\";\n+\n+        switch (nodetype) {\n+            case NodeType::PK: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::PK_H: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk_h(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::AFTER: return std::move(ret) + \"after(\" + std::to_string(k) + \")\";\n+            case NodeType::OLDER: return std::move(ret) + \"older(\" + std::to_string(k) + \")\";\n+            case NodeType::HASH256: return std::move(ret) + \"hash256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::HASH160: return std::move(ret) + \"hash160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::SHA256: return std::move(ret) + \"sha256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::RIPEMD160: return std::move(ret) + \"ripemd160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::JUST_1: return std::move(ret) + \"1\";\n+            case NodeType::JUST_0: return std::move(ret) + \"0\";\n+            case NodeType::AND_V: return std::move(ret) + \"and_v(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::AND_B: return std::move(ret) + \"and_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_B: return std::move(ret) + \"or_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_D: return std::move(ret) + \"or_d(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_C: return std::move(ret) + \"or_c(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_I: return std::move(ret) + \"or_i(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::ANDOR:\n+                // and_n(X,Y) is syntactic sugar for andor(X,Y,0).\n+                if (subs[2]->nodetype == NodeType::JUST_0) return std::move(ret) + \"and_n(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+                return std::move(ret) + \"andor(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \",\" + subs[2]->MakeString(ctx, success) + \")\";\n+            case NodeType::THRESH_M: {\n+                auto str = std::move(ret) + \"thresh_m(\" + std::to_string(k);\n+                for (const auto& key : keys) {\n+                    std::string key_str;\n+                    success &= ctx.ToString(key, key_str);\n+                    str += \",\" + std::move(key_str);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            case NodeType::THRESH: {\n+                auto str = std::move(ret) + \"thresh(\" + std::to_string(k);\n+                for (const auto& sub : subs) {\n+                    str += \",\" + sub->MakeString(ctx, success);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            default: assert(false); // Wrappers should have been handled above\n+        }\n+        return \"\";\n+    }\n+\n+    internal::Ops CalcOps() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {0, 0, 0};\n+            case NodeType::PK_H: return {3, 0, 0};\n+            case NodeType::OLDER: return {1, 0, {}};\n+            case NodeType::AFTER: return {1, 0, {}};\n+            case NodeType::SHA256: return {4, 0, {}};\n+            case NodeType::RIPEMD160: return {4, 0, {}};\n+            case NodeType::HASH256: return {4, 0, {}};\n+            case NodeType::HASH160: return {4, 0, {}};\n+            case NodeType::AND_V: return {subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, {}};\n+            case NodeType::AND_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat + subs[1]->ops.dsat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_D: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_C: return {2 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), {}};\n+            case NodeType::OR_I: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat), Choose(subs[0]->ops.dsat, subs[1]->ops.dsat)};\n+            case NodeType::ANDOR: return {3 + subs[0]->ops.stat + subs[1]->ops.stat + subs[2]->ops.stat, Choose(subs[1]->ops.sat + subs[0]->ops.sat, subs[0]->ops.dsat + subs[2]->ops.sat), subs[0]->ops.dsat + subs[2]->ops.dsat};\n+            case NodeType::THRESH_M: return {1, (uint32_t)keys.size(), (uint32_t)keys.size()};\n+            case NodeType::WRAP_A: return {2 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_S: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_C: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_D: return {3 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_V: return {subs[0]->ops.stat + (subs[0]->GetType() << \"x\"_mst), subs[0]->ops.sat, {}};\n+            case NodeType::WRAP_J: return {4 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_N: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::JUST_1: return {0, 0, {}};\n+            case NodeType::JUST_0: return {0, {}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t stat = 0, dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    stat += sub->ops.stat + 1;\n+                    dsat += sub->ops.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ops.sat.valid) diffs.push_back((int32_t)sub->ops.sat.value - (int32_t)sub->ops.dsat.value);\n+                }\n+                if (diffs.size() < k) return {stat, {}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {stat, sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {0, {}, {}};\n+    }\n+\n+    internal::StackSize CalcStackSize() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {1, 1};\n+            case NodeType::PK_H: return {2, 2};\n+            case NodeType::OLDER: return {0, {}};\n+            case NodeType::AFTER: return {0, {}};\n+            case NodeType::SHA256: return {1, {}};\n+            case NodeType::RIPEMD160: return {1, {}};\n+            case NodeType::HASH256: return {1, {}};\n+            case NodeType::HASH160: return {1, {}};\n+            case NodeType::ANDOR: return {Choose(subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[2]->ss.sat), subs[0]->ss.dsat + subs[2]->ss.dsat};\n+            case NodeType::AND_V: return {subs[0]->ss.sat + subs[1]->ss.sat, {}};\n+            case NodeType::AND_B: return {subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_B: return {Choose(subs[0]->ss.dsat + subs[1]->ss.sat, subs[0]->ss.sat + subs[1]->ss.dsat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_C: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), {}};\n+            case NodeType::OR_D: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_I: return {Choose(subs[0]->ss.sat + 1, subs[1]->ss.sat + 1), Choose(subs[0]->ss.dsat + 1, subs[1]->ss.dsat + 1)};\n+            case NodeType::THRESH_M: return {(uint32_t)keys.size() + 1, (uint32_t)keys.size() + 1};\n+            case NodeType::WRAP_A: return subs[0]->ss;\n+            case NodeType::WRAP_S: return subs[0]->ss;\n+            case NodeType::WRAP_C: return subs[0]->ss;\n+            case NodeType::WRAP_D: return {1 + subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_V: return {subs[0]->ss.sat, {}};\n+            case NodeType::WRAP_J: return {subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_N: return subs[0]->ss;\n+            case NodeType::JUST_1: return {0, {}};\n+            case NodeType::JUST_0: return {{}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    dsat += sub->ss.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ss.sat.valid) diffs.push_back((int32_t)sub->ss.sat.value - (int32_t)sub->ss.dsat.value);\n+                }\n+                if (diffs.size() < k) return {{}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {sat_sum + dsat, dsat};",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 508,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "046a0b9cc261f8ded799eeae9f6d11b9095ea03a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this is still failing on https://bitcoinbuilds.org/index.php?job=e1623137-779c-47dd-8a8a-ebaee60766ec\r\n\r\n```\r\nEntering test module \"Bitcoin Core Test Suite\"\r\ntest/miniscript_tests.cpp(282): Entering test suite \"miniscript_tests\"\r\ntest/miniscript_tests.cpp(284): Entering test case \"fixed_tests\"\r\ntest/miniscript_tests.cpp(284): Leaving test case \"fixed_tests\"; testing time: 35249us\r\ntest/miniscript_tests.cpp(322): Entering test case \"random_tests\"\r\nscript/miniscript.h:508:33: runtime error: unsigned integer overflow: 4294967295 + 11 cannot be represented in type 'unsigned int'\r\n    #0 0x561901402481 in miniscript::Node<CPubKey>::CalcStackSize() const /home/ubuntu/src/src/./script/miniscript.h:508:33",
      "created_at": "2019-09-04T23:41:26Z",
      "updated_at": "2019-09-05T22:32:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r321021420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321021420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321829854",
      "pull_request_review_id": 284991288,
      "id": 321829854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTgyOTg1NA==",
      "diff_hunk": "@@ -0,0 +1,992 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_MINISCRIPT_H\n+#define BITCOIN_SCRIPT_MINISCRIPT_H\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+#include <policy/policy.h>\n+#include <script/script.h>\n+#include <span.h>\n+#include <util/spanparsing.h>\n+#include <util/strencodings.h>\n+#include <util/vector.h>\n+\n+namespace miniscript {\n+\n+/** This type encapsulates the miniscript type system properties.\n+ *\n+ * Every miniscript expression is one of 4 basic types, and additionally has\n+ * a number of boolean type properties.\n+ *\n+ * The basic types are:\n+ * - \"B\" Base:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfied, pushes a nonzero value of up to 4 bytes onto the stack.\n+ *   - When dissatisfied, pushes a 0 onto the stack.\n+ *   - This is used for most expressions, and required for the top level one.\n+ *   - For example: older(n) = <n> OP_CHECKSEQUENCEVERIFY.\n+ * - \"V\" Verify:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - When satisfactied, pushes nothing.\n+ *   - Cannot be dissatisfied.\n+ *   - This is obtained by adding an OP_VERIFY to a B, modifying the last opcode\n+ *     of a B to its -VERIFY version (only for OP_CHECKSIG, OP_CHECKSIGVERIFY\n+ *     and OP_EQUAL), or using IFs where both branches are also Vs.\n+ *   - For example vc:pk(key) = <key> OP_CHECKSIGVERIFY\n+ * - \"K\" Key:\n+ *   - Takes its inputs from the top of the stack.\n+ *   - Becomes a B when followed by OP_CHECKSIG.\n+ *   - Always pushes a public key onto the stack, for which a signature is to be\n+ *     provided to satisfy the expression.\n+ *   - For example pk_h(key) = OP_DUP OP_HASH160 <Hash160(key)> OP_EQUALVERIFY\n+ * - \"W\" Wrapped:\n+ *   - Takes its input from one below the top of the stack.\n+ *   - When satisfied, pushes a nonzero value (like B) on top of the stack, or one below.\n+ *   - When dissatisfied, pushes 0 op top of the stack or one below.\n+ *   - Is always \"OP_SWAP [B]\" or \"OP_TOALTSTACK [B] OP_FROMALTSTACK\".\n+ *   - For example sc:pk(key) = OP_SWAP <key> OP_CHECKSIG\n+ *\n+ * There a type properties that help reasoning about correctness:\n+ * - \"z\" Zero-arg:\n+ *   - Is known to always consume exactly 0 stack elements.\n+ *   - For example after(n) = <n> OP_CHECKLOCKTIMEVERIFY\n+ * - \"o\" One-arg:\n+ *   - Is known to always consume exactly 1 stack element.\n+ *   - Conflicts with property 'z'\n+ *   - For example sha256(hash) = OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 <hash> OP_EQUAL\n+ * - \"n\" Nonzero:\n+ *   - For every way this expression can be satisfied, a satisfaction exists that never needs\n+ *     a zero top stack element.\n+ *   - Conflicts with property 'z' and with type 'W'.\n+ * - \"d\" Dissatisfiable:\n+ *   - There is an easy way to construct a dissatisfaction for this expression.\n+ *   - Conflicts with type 'V'.\n+ * - \"u\" Unit:\n+ *   - In case of satisfaction, an exact 1 is put on the stack (rather than just nonzero).\n+ *   - Conflicts with type 'V'.\n+ *\n+ * Additional type properties help reasoning about nonmalleability:\n+ * - \"e\" Expression:\n+ *   - This implies property 'd', but the dissatisfaction is nonmalleable.\n+ *   - This generally requires 'e' for all subexpressions which are invoked for that\n+ *     dissatifsaction, and property 'f' for the unexecuted subexpressions in that case.\n+ *   - Conflicts with type 'V'.\n+ * - \"f\" Forced:\n+ *   - Dissatisfactions (if any) for this expression always involve at least one signature.\n+ *   - Is always true for type 'V'.\n+ * - \"s\" Safe:\n+ *   - Satisfactions for this expression always involve at least one signature.\n+ * - \"m\" Nonmalleable:\n+ *   - For every way this expression can be satisfied (which may be none),\n+ *     a nonmalleable satisfaction exists.\n+ *   - This generally requires 'm' for all subexpressions, and 'e' for all subexpressions\n+ *     which are dissatisfied when satisfying the parent.\n+ *\n+ * One final type property is an implementation detail:\n+ * - \"x\" Expensive verify:\n+ *   - Expressions with this property have a script whose last opcode is not EQUAL, CHECKSIG, or CHECKMULTISIG.\n+ *   - Not having this property means that it can be converted to a V at no cost (by switching to the\n+ *     -VERIFY version of the last opcode).\n+ *\n+ * For each of these properties the subset rule holds: an expression with properties X, Y, and Z, is also\n+ * valid in places where an X, a Y, a Z, an XY, ... is expected.\n+*/\n+class Type {\n+    //! Internal bitmap of properties (see \"\"_mst operator for details).\n+    uint16_t m_flags;\n+\n+    //! Internal constructed used by the \"\"_mst operator.\n+    explicit constexpr Type(uint16_t flags) : m_flags(flags) {}\n+\n+public:\n+    //! The only way to publicly construct a Type is using this literal operator.\n+    friend constexpr Type operator\"\" _mst(const char* c, size_t l);\n+\n+    //! Compute the type with the union of properties.\n+    constexpr Type operator|(Type x) const { return Type(m_flags | x.m_flags); }\n+\n+    //! Compute the type with the intersection of properties.\n+    constexpr Type operator&(Type x) const { return Type(m_flags & x.m_flags); }\n+\n+    //! Check whether the left hand's properties are superset of the right's (= left is a subtype of right).\n+    constexpr bool operator<<(Type x) const { return (x.m_flags & ~m_flags) == 0; }\n+\n+    //! Comparison operator to enable use in sets/maps (total ordering incompatible with <<).\n+    constexpr bool operator<(Type x) const { return m_flags < x.m_flags; }\n+\n+    //! Equality operator.\n+    constexpr bool operator==(Type x) const { return m_flags == x.m_flags; }\n+\n+    //! The empty type if x is false, itself otherwise.\n+    constexpr Type If(bool x) const { return Type(x ? m_flags : 0); }\n+};\n+\n+//! Literal operator to construct Type objects.\n+inline constexpr Type operator\"\" _mst(const char* c, size_t l) {\n+    return l == 0 ? Type(0) : operator\"\" _mst(c + 1, l - 1) | Type(\n+        *c == 'B' ? 1 << 0 : // Base type\n+        *c == 'V' ? 1 << 1 : // Verify type\n+        *c == 'K' ? 1 << 2 : // Key type\n+        *c == 'W' ? 1 << 3 : // Wrapped type\n+        *c == 'z' ? 1 << 4 : // Zero-arg property\n+        *c == 'o' ? 1 << 5 : // One-arg property\n+        *c == 'n' ? 1 << 6 : // Nonzero arg property\n+        *c == 'd' ? 1 << 7 : // Dissatisfiable property\n+        *c == 'u' ? 1 << 8 : // Unit property\n+        *c == 'e' ? 1 << 9 : // Expression property\n+        *c == 'f' ? 1 << 10 : // Forced property\n+        *c == 's' ? 1 << 11 : // Safe property\n+        *c == 'm' ? 1 << 12 : // Nonmalleable property\n+        *c == 'x' ? 1 << 13 : // Expensive verify\n+        (throw std::logic_error(\"Unknown character in _mst literal\"), 0)\n+    );\n+}\n+\n+template<typename Key> struct Node;\n+template<typename Key> using NodeRef = std::shared_ptr<const Node<Key>>;\n+\n+//! Construct a miniscript node as a shared_ptr.\n+template<typename Key, typename... Args>\n+NodeRef<Key> MakeNodeRef(Args&&... args) { return std::make_shared<const Node<Key>>(std::forward<Args>(args)...); }\n+\n+//! The different node types in miniscript.\n+enum class NodeType {\n+    JUST_0,     //!< OP_0\n+    JUST_1,    //!< OP_1\n+    PK,        //!< [key]\n+    PK_H,      //!< OP_DUP OP_HASH160 [keyhash] OP_EQUALVERFIFY\n+    OLDER,     //!< [n] OP_CHECKSEQUENCEVERIFY\n+    AFTER,     //!< [n] OP_CHECKLOCKTIMEVERIFY\n+    SHA256,    //!< OP_SIZE 32 OP_EQUALVERIFY OP_SHA256 [hash] OP_EQUAL\n+    HASH256,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH256 [hash] OP_EQUAL\n+    RIPEMD160, //!< OP_SIZE 32 OP_EQUALVERIFY OP_RIPEMD160 [hash] OP_EQUAL\n+    HASH160,   //!< OP_SIZE 32 OP_EQUALVERIFY OP_HASH160 [hash] OP_EQUAL\n+    WRAP_A,    //!< OP_TOALTSTACK [X] OP_FROMALTSTACK\n+    WRAP_S,    //!< OP_SWAP [X]\n+    WRAP_C,    //!< [X] OP_CHECKSIG\n+    WRAP_D,    //!< OP_DUP OP_IF [X] OP_ENDIF\n+    WRAP_V,    //!< [X] OP_VERIFY (or -VERIFY version of last opcode in X)\n+    WRAP_J,    //!< OP_SIZE OP_0NOTEQUAL OP_IF [X] OP_ENDIF\n+    WRAP_N,    //!< [X] OP_0NOTEQUAL\n+    AND_V,     //!< [X] [Y]\n+    AND_B,     //!< [X] [Y] OP_BOOLAND\n+    OR_B,      //!< [X] [Y] OP_BOOLOR\n+    OR_C,      //!< [X] OP_NOTIF [Y] OP_ENDIF\n+    OR_D,      //!< [X] OP_IFDUP OP_NOTIF [Y] OP_ENDIF\n+    OR_I,      //!< IF [X] OP_ELSE [Y] OP_ENDIF\n+    ANDOR,     //!< [X] OP_NOTIF [Z] OP_ELSE [Y] OP_ENDIF\n+    THRESH,    //!< [X1] ([Xn] OP_ADD)* [k] OP_EQUAL\n+    THRESH_M,  //!< [k] [key_n]* [n] OP_CHECKMULTISIG\n+    // AND_N(X,Y) is represented as ANDOR(X,Y,0)\n+    // WRAP_T(X) is represented as AND_V(X,1)\n+    // WRAP_L(X) is represented as OR_I(0,X)\n+    // WRAP_U(X) is represented as OR_I(X,0)\n+};\n+\n+namespace internal {\n+\n+//! Helper function for Node::CalcType.\n+Type ComputeType(NodeType nodetype, Type x, Type y, Type z, const std::vector<Type>& sub_types, uint32_t k, size_t data_size, size_t n_subs, size_t n_keys);\n+\n+//! Helper function for Node::CalcScriptLen.\n+size_t ComputeScriptLen(NodeType nodetype, Type sub0typ, size_t subsize, uint32_t k, size_t n_subs, size_t n_keys);\n+\n+//! A helper sanitizer/checker for the output of CalcType.\n+Type SanitizeType(Type x);\n+\n+//! Class whose objects represent the maximum of a list of integers.\n+template<typename I>\n+struct MaxInt {\n+    const bool valid;\n+    const I value;\n+\n+    MaxInt() : valid(false), value(0) {}\n+    MaxInt(I val) : valid(true), value(val) {}\n+\n+    friend MaxInt<I> operator+(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid || !b.valid) return {};\n+        return a.value + b.value;\n+    }\n+\n+    friend MaxInt<I> Choose(const MaxInt<I>& a, const MaxInt<I>& b) {\n+        if (!a.valid) return b;\n+        if (!b.valid) return a;\n+        return std::max(a.value, b.value);\n+    }\n+};\n+\n+struct Ops {\n+    //! Non-push opcodes.\n+    uint32_t stat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to satisfy.\n+    MaxInt<uint32_t> sat;\n+    //! Number of keys in possibly executed OP_CHECKMULTISIG(VERIFY)s to dissatisfy.\n+    MaxInt<uint32_t> dsat;\n+\n+    Ops(uint32_t in_stat, MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : stat(in_stat), sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+struct StackSize {\n+    //! Maximum stack size to satisfy;\n+    MaxInt<uint32_t> sat;\n+    //! Maximum stack size to dissatisfy;\n+    MaxInt<uint32_t> dsat;\n+\n+    StackSize(MaxInt<uint32_t> in_sat, MaxInt<uint32_t> in_dsat) : sat(in_sat), dsat(in_dsat) {};\n+};\n+\n+} // namespace internal\n+\n+//! A node in a miniscript expression.\n+template<typename Key>\n+struct Node {\n+    //! What node type this node is.\n+    const NodeType nodetype;\n+    //! The k parameter (time for OLDER/AFTER, threshold for THRESH(_M))\n+    const uint32_t k = 0;\n+    //! The keys used by this expression (only for PK/PK_H/THRESH_M)\n+    const std::vector<Key> keys;\n+    //! The data bytes in this expression (only for HASH160/HASH256/SHA256/RIPEMD10).\n+    const std::vector<unsigned char> data;\n+    //! Subexpressions (for WRAP_*/AND_*/OR_*/ANDOR/THRESH)\n+    const std::vector<NodeRef<Key>> subs;\n+\n+private:\n+    //! Cached ops counts.\n+    const internal::Ops ops;\n+    //! Cached stack size bounds.\n+    const internal::StackSize ss;\n+    //! Cached expression type (computed by CalcType and fed through SanitizeType).\n+    const Type typ;\n+    //! Cached script length (computed by CalcScriptLen).\n+    const size_t scriptlen;\n+\n+    //! Compute the length of the script for this miniscript (including children).\n+    size_t CalcScriptLen() const {\n+        size_t subsize = 0;\n+        for (const auto& sub : subs) {\n+            subsize += sub->ScriptSize();\n+        }\n+        Type sub0type = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        return internal::ComputeScriptLen(nodetype, sub0type, subsize, k, subs.size(), keys.size());\n+    }\n+\n+    //! Compute the type for this miniscript.\n+    Type CalcType() const {\n+        using namespace internal;\n+\n+        // THRESH has a variable number of subexpression\n+        std::vector<Type> sub_types;\n+        if (nodetype == NodeType::THRESH) {\n+            for (const auto& sub : subs) sub_types.push_back(sub->GetType());\n+        }\n+        // All other nodes than THRESH can be computed just from the types of the 0-3 subexpexpressions.\n+        Type x = subs.size() > 0 ? subs[0]->GetType() : \"\"_mst;\n+        Type y = subs.size() > 1 ? subs[1]->GetType() : \"\"_mst;\n+        Type z = subs.size() > 2 ? subs[2]->GetType() : \"\"_mst;\n+\n+        return SanitizeType(ComputeType(nodetype, x, y, z, sub_types, k, data.size(), subs.size(), keys.size()));\n+    }\n+\n+    //! Internal code for ToScript.\n+    template<typename Ctx>\n+    CScript MakeScript(const Ctx& ctx, bool verify = false) const {\n+        std::vector<unsigned char> bytes;\n+        switch (nodetype) {\n+            case NodeType::PK: return CScript() << ctx.ToPKBytes(keys[0]);\n+            case NodeType::PK_H: return CScript() << OP_DUP << OP_HASH160 << ctx.ToPKHBytes(keys[0]) << OP_EQUALVERIFY;\n+            case NodeType::OLDER: return CScript() << k << OP_CHECKSEQUENCEVERIFY;\n+            case NodeType::AFTER: return CScript() << k << OP_CHECKLOCKTIMEVERIFY;\n+            case NodeType::SHA256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_SHA256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::RIPEMD160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_RIPEMD160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH256: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH256 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::HASH160: return CScript() << OP_SIZE << 32 << OP_EQUALVERIFY << OP_HASH160 << data << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            case NodeType::WRAP_A: return (CScript() << OP_TOALTSTACK) + subs[0]->MakeScript(ctx) + (CScript() << OP_FROMALTSTACK);\n+            case NodeType::WRAP_S: return (CScript() << OP_SWAP) + subs[0]->MakeScript(ctx, verify);\n+            case NodeType::WRAP_C: return subs[0]->MakeScript(ctx) + CScript() << (verify ? OP_CHECKSIGVERIFY : OP_CHECKSIG);\n+            case NodeType::WRAP_D: return (CScript() << OP_DUP << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_V: return subs[0]->MakeScript(ctx, true) + (subs[0]->GetType() << \"x\"_mst ? (CScript() << OP_VERIFY) : CScript());\n+            case NodeType::WRAP_J: return (CScript() << OP_SIZE << OP_0NOTEQUAL << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::WRAP_N: return subs[0]->MakeScript(ctx) + CScript() << OP_0NOTEQUAL;\n+            case NodeType::JUST_1: return CScript() << OP_1;\n+            case NodeType::JUST_0: return CScript() << OP_0;\n+            case NodeType::AND_V: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx, verify);\n+            case NodeType::AND_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLAND);\n+            case NodeType::OR_B: return subs[0]->MakeScript(ctx) + subs[1]->MakeScript(ctx) + (CScript() << OP_BOOLOR);\n+            case NodeType::OR_D: return subs[0]->MakeScript(ctx) + (CScript() << OP_IFDUP << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_C: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::OR_I: return (CScript() << OP_IF) + subs[0]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::ANDOR: return subs[0]->MakeScript(ctx) + (CScript() << OP_NOTIF) + subs[2]->MakeScript(ctx) + (CScript() << OP_ELSE) + subs[1]->MakeScript(ctx) + (CScript() << OP_ENDIF);\n+            case NodeType::THRESH_M: {\n+                CScript script = CScript() << k;\n+                for (const auto& key : keys) {\n+                    script << ctx.ToPKBytes(key);\n+                }\n+                return script << keys.size() << (verify ? OP_CHECKMULTISIGVERIFY : OP_CHECKMULTISIG);\n+            }\n+            case NodeType::THRESH: {\n+                CScript script = subs[0]->MakeScript(ctx);\n+                for (size_t i = 1; i < subs.size(); ++i) {\n+                    script = (script + subs[i]->MakeScript(ctx)) << OP_ADD;\n+                }\n+                return script << k << (verify ? OP_EQUALVERIFY : OP_EQUAL);\n+            }\n+        }\n+        assert(false);\n+        return {};\n+    }\n+\n+    //! Internal code for ToString.\n+    template<typename Ctx>\n+    std::string MakeString(const Ctx& ctx, bool& success, bool wrapped = false) const {\n+        switch (nodetype) {\n+            case NodeType::WRAP_A: return \"a\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_S: return \"s\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_C: return \"c\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_D: return \"d\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_V: return \"v\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_J: return \"j\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::WRAP_N: return \"n\" + subs[0]->MakeString(ctx, success, true);\n+            case NodeType::AND_V:\n+                // t:X is syntactic sugar for and_v(X,1).\n+                if (subs[1]->nodetype == NodeType::JUST_1) return \"t\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            case NodeType::OR_I:\n+                if (subs[0]->nodetype == NodeType::JUST_0) return \"l\" + subs[1]->MakeString(ctx, success, true);\n+                if (subs[1]->nodetype == NodeType::JUST_0) return \"u\" + subs[0]->MakeString(ctx, success, true);\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        std::string ret = wrapped ? \":\" : \"\";\n+\n+        switch (nodetype) {\n+            case NodeType::PK: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::PK_H: {\n+                std::string key_str;\n+                success = ctx.ToString(keys[0], key_str);\n+                return std::move(ret) + \"pk_h(\" + std::move(key_str) + \")\";\n+            }\n+            case NodeType::AFTER: return std::move(ret) + \"after(\" + std::to_string(k) + \")\";\n+            case NodeType::OLDER: return std::move(ret) + \"older(\" + std::to_string(k) + \")\";\n+            case NodeType::HASH256: return std::move(ret) + \"hash256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::HASH160: return std::move(ret) + \"hash160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::SHA256: return std::move(ret) + \"sha256(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::RIPEMD160: return std::move(ret) + \"ripemd160(\" + HexStr(data.begin(), data.end()) + \")\";\n+            case NodeType::JUST_1: return std::move(ret) + \"1\";\n+            case NodeType::JUST_0: return std::move(ret) + \"0\";\n+            case NodeType::AND_V: return std::move(ret) + \"and_v(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::AND_B: return std::move(ret) + \"and_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_B: return std::move(ret) + \"or_b(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_D: return std::move(ret) + \"or_d(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_C: return std::move(ret) + \"or_c(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::OR_I: return std::move(ret) + \"or_i(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+            case NodeType::ANDOR:\n+                // and_n(X,Y) is syntactic sugar for andor(X,Y,0).\n+                if (subs[2]->nodetype == NodeType::JUST_0) return std::move(ret) + \"and_n(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \")\";\n+                return std::move(ret) + \"andor(\" + subs[0]->MakeString(ctx, success) + \",\" + subs[1]->MakeString(ctx, success) + \",\" + subs[2]->MakeString(ctx, success) + \")\";\n+            case NodeType::THRESH_M: {\n+                auto str = std::move(ret) + \"thresh_m(\" + std::to_string(k);\n+                for (const auto& key : keys) {\n+                    std::string key_str;\n+                    success &= ctx.ToString(key, key_str);\n+                    str += \",\" + std::move(key_str);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            case NodeType::THRESH: {\n+                auto str = std::move(ret) + \"thresh(\" + std::to_string(k);\n+                for (const auto& sub : subs) {\n+                    str += \",\" + sub->MakeString(ctx, success);\n+                }\n+                return std::move(str) + \")\";\n+            }\n+            default: assert(false); // Wrappers should have been handled above\n+        }\n+        return \"\";\n+    }\n+\n+    internal::Ops CalcOps() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {0, 0, 0};\n+            case NodeType::PK_H: return {3, 0, 0};\n+            case NodeType::OLDER: return {1, 0, {}};\n+            case NodeType::AFTER: return {1, 0, {}};\n+            case NodeType::SHA256: return {4, 0, {}};\n+            case NodeType::RIPEMD160: return {4, 0, {}};\n+            case NodeType::HASH256: return {4, 0, {}};\n+            case NodeType::HASH160: return {4, 0, {}};\n+            case NodeType::AND_V: return {subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, {}};\n+            case NodeType::AND_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, subs[0]->ops.sat + subs[1]->ops.sat, subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_B: return {1 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat + subs[1]->ops.dsat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_D: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), subs[0]->ops.dsat + subs[1]->ops.dsat};\n+            case NodeType::OR_C: return {2 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat + subs[0]->ops.dsat), {}};\n+            case NodeType::OR_I: return {3 + subs[0]->ops.stat + subs[1]->ops.stat, Choose(subs[0]->ops.sat, subs[1]->ops.sat), Choose(subs[0]->ops.dsat, subs[1]->ops.dsat)};\n+            case NodeType::ANDOR: return {3 + subs[0]->ops.stat + subs[1]->ops.stat + subs[2]->ops.stat, Choose(subs[1]->ops.sat + subs[0]->ops.sat, subs[0]->ops.dsat + subs[2]->ops.sat), subs[0]->ops.dsat + subs[2]->ops.dsat};\n+            case NodeType::THRESH_M: return {1, (uint32_t)keys.size(), (uint32_t)keys.size()};\n+            case NodeType::WRAP_A: return {2 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_S: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_C: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::WRAP_D: return {3 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_V: return {subs[0]->ops.stat + (subs[0]->GetType() << \"x\"_mst), subs[0]->ops.sat, {}};\n+            case NodeType::WRAP_J: return {4 + subs[0]->ops.stat, subs[0]->ops.sat, 0};\n+            case NodeType::WRAP_N: return {1 + subs[0]->ops.stat, subs[0]->ops.sat, subs[0]->ops.dsat};\n+            case NodeType::JUST_1: return {0, 0, {}};\n+            case NodeType::JUST_0: return {0, {}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t stat = 0, dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    stat += sub->ops.stat + 1;\n+                    dsat += sub->ops.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ops.sat.valid) diffs.push_back((int32_t)sub->ops.sat.value - (int32_t)sub->ops.dsat.value);\n+                }\n+                if (diffs.size() < k) return {stat, {}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {stat, sat_sum + dsat, dsat};\n+            }\n+        }\n+        assert(false);\n+        return {0, {}, {}};\n+    }\n+\n+    internal::StackSize CalcStackSize() const {\n+        switch (nodetype) {\n+            case NodeType::PK: return {1, 1};\n+            case NodeType::PK_H: return {2, 2};\n+            case NodeType::OLDER: return {0, {}};\n+            case NodeType::AFTER: return {0, {}};\n+            case NodeType::SHA256: return {1, {}};\n+            case NodeType::RIPEMD160: return {1, {}};\n+            case NodeType::HASH256: return {1, {}};\n+            case NodeType::HASH160: return {1, {}};\n+            case NodeType::ANDOR: return {Choose(subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[2]->ss.sat), subs[0]->ss.dsat + subs[2]->ss.dsat};\n+            case NodeType::AND_V: return {subs[0]->ss.sat + subs[1]->ss.sat, {}};\n+            case NodeType::AND_B: return {subs[0]->ss.sat + subs[1]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_B: return {Choose(subs[0]->ss.dsat + subs[1]->ss.sat, subs[0]->ss.sat + subs[1]->ss.dsat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_C: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), {}};\n+            case NodeType::OR_D: return {Choose(subs[0]->ss.sat, subs[0]->ss.dsat + subs[1]->ss.sat), subs[0]->ss.dsat + subs[1]->ss.dsat};\n+            case NodeType::OR_I: return {Choose(subs[0]->ss.sat + 1, subs[1]->ss.sat + 1), Choose(subs[0]->ss.dsat + 1, subs[1]->ss.dsat + 1)};\n+            case NodeType::THRESH_M: return {(uint32_t)keys.size() + 1, (uint32_t)keys.size() + 1};\n+            case NodeType::WRAP_A: return subs[0]->ss;\n+            case NodeType::WRAP_S: return subs[0]->ss;\n+            case NodeType::WRAP_C: return subs[0]->ss;\n+            case NodeType::WRAP_D: return {1 + subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_V: return {subs[0]->ss.sat, {}};\n+            case NodeType::WRAP_J: return {subs[0]->ss.sat, 1};\n+            case NodeType::WRAP_N: return subs[0]->ss;\n+            case NodeType::JUST_1: return {0, {}};\n+            case NodeType::JUST_0: return {{}, 0};\n+            case NodeType::THRESH: {\n+                uint32_t dsat = 0;\n+                int32_t sat_sum = 0;\n+                std::vector<int32_t> diffs;\n+                for (const auto& sub : subs) {\n+                    dsat += sub->ss.dsat.value; // The type system requires \"d\" for thresh, so dsat must always be valid.\n+                    if (sub->ss.sat.valid) diffs.push_back((int32_t)sub->ss.sat.value - (int32_t)sub->ss.dsat.value);\n+                }\n+                if (diffs.size() < k) return {{}, dsat};\n+                std::sort(diffs.begin(), diffs.end());\n+                for (size_t i = diffs.size() - k; i < diffs.size(); ++i) sat_sum += diffs[i];\n+                return {sat_sum + dsat, dsat};",
      "path": "src/script/miniscript.h",
      "position": null,
      "original_position": 508,
      "commit_id": "037e55adc005e9d8253d3d35e7a30b2e8521389c",
      "original_commit_id": "046a0b9cc261f8ded799eeae9f6d11b9095ea03a",
      "in_reply_to_id": 321021420,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed by switching to a different algorithm.",
      "created_at": "2019-09-06T17:12:38Z",
      "updated_at": "2019-09-06T17:12:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16800#discussion_r321829854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321829854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 508,
      "side": "RIGHT"
    }
  ]
}