{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711",
    "id": 1168231123,
    "node_id": "PR_kwDOABII585FocrT",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26711",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26711.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26711.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
    "number": 26711,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "validate package transactions with their in-package ancestor sets",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This contains everything to make mempool/validation logic ready for package relay (see #27463).\r\n\r\nThe hope here is to end up with the incentive-compatible transactions in our mempool. Prior to this commit, if parents within the package relied on each other, we could end up (1) accepting a low-feerate child or (2) rejecting high-feerate parents. See the \"interdependent parents\" test case for a specific example.\r\n\r\nA description of the package validation logic: https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "created_at": "2022-12-16T11:27:00Z",
    "updated_at": "2023-08-08T17:48:06Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "89bd6623bd8979d0db4037028d0d7834cb88f09e",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:2022-12-subpackages",
      "ref": "2022-12-subpackages",
      "sha": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 9,
        "watchers_count": 9,
        "size": 227616,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-08T17:47:12Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2023-07-18T03:26:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b565485c24c0feacae559a7f6f7b83d7516ca58d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35483,
        "stargazers_count": 70670,
        "watchers_count": 70670,
        "size": 236411,
        "default_branch": "master",
        "open_issues_count": 680,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-08T17:47:20Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-08-08T17:34:40Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 1812,
    "deletions": 364,
    "changed_files": 23,
    "commits": 19,
    "review_comments": 143,
    "comments": 17
  },
  "events": [
    {
      "event": "commented",
      "id": 1354593703,
      "node_id": "IC_kwDOABII585QvXWn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1354593703",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-16T11:27:03Z",
      "updated_at": "2023-08-08T01:10:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Stale ACK | [instagibbs](https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1442724105) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26451](https://github.com/bitcoin/bitcoin/pull/26451) (Enforce incentive compatibility for all RBF replacements by sdaftuar)\n* [#25038](https://github.com/bitcoin/bitcoin/pull/25038) (policy: nVersion=3 and Package RBF by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1354593703",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-16T11:29:59Z",
      "updated_at": "2022-12-16T11:29:59Z",
      "source": {
        "issue": {
          "id": 1478790012,
          "node_id": "PR_kwDOABII585Edw_O",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26646",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26646/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26646/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26646/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26646",
          "number": 26646,
          "state": "closed",
          "state_reason": null,
          "title": "validation, bugfix: provide more info in *MempoolAcceptResult",
          "body": "This PR fixes a bug and improves the mempool accept interface to return information more predictably.\r\n\r\nBug: In package validation, we first try the transactions individually (see doc/policy/packages.md for more explanation) and, if they all failed for missing inputs and policy-related (i.e. fee) reasons, we'll try package validation. Otherwise, we'll just \"quit early\" since, for example, if a transaction had an invalid signature, adding a child will not help make it valid. Currently, when we quit early, we're not setting the `package_state` to be invalid, so the caller might think it succeeded. Also, we're returning no results - it makes more sense to return the individual transaction failure. Thanks instagibbs for catching https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013293248!\r\n\r\nAlso, make the package results interface generally more useful/predictable:\r\n- Always return the feerate at which a transaction was considered for `CheckFeeRate` in `MempoolAcceptResult::m_effective_feerate` when it was successful. This can replace the current `PackageMempoolAcceptResult::m_package_feerate`, which only sometimes exists.\r\n- Always provide an entry for every transaction in `PackageMempoolAcceptResult::m_tx_results` when the error is `PCKG_TX`.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64585,
              "node_id": "MDU6TGFiZWw2NDU4NQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
              "name": "Bug",
              "color": "FBBAAB",
              "default": false
            },
            {
              "id": 118379652,
              "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
              "name": "Validation",
              "color": "6060aa",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26646",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26646",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26646.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26646.patch"
          },
          "closed_at": "2023-01-11T13:26:18Z",
          "created_at": "2022-12-06T10:43:42Z",
          "updated_at": "2023-01-11T13:26:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8071527683,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHhGb0D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8071527683",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T17:24:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8077784671,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHheTZf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8077784671",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-20T12:00:40Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-22T05:51:02Z",
      "updated_at": "2022-12-22T05:51:02Z",
      "source": {
        "issue": {
          "id": 1277080263,
          "node_id": "PR_kwDOABII58459Rfx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25429/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25429",
          "number": 25429,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Avoid UniValue copies",
          "body": "UniValue copies have been a source of performance related bugs and regressions, so it would be good to remove the copy constructors.\r\n\r\nThis is the first change toward the goal. This change uses a `const UniValue&` where possible.\r\n\r\nSee also:\r\n\r\n* https://github.com/bitcoin-core/univalue-subtree/pull/27\r\n* https://github.com/bitcoin/bitcoin/pull/15974",
          "user": {
            "login": "MarcoFalke",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MarcoFalke",
            "html_url": "https://github.com/MarcoFalke",
            "followers_url": "https://api.github.com/users/MarcoFalke/followers",
            "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
            "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
            "repos_url": "https://api.github.com/users/MarcoFalke/repos",
            "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25429",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25429",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25429.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25429.patch"
          },
          "closed_at": "2023-02-23T17:51:57Z",
          "created_at": "2022-06-20T15:17:09Z",
          "updated_at": "2023-02-23T17:52:03Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8201872285,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAHo3qOd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8201872285",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T13:47:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8202040002,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHo4TLC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8202040002",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T14:05:13Z"
    },
    {
      "event": "unlabeled",
      "id": 8203152674,
      "node_id": "UNLE_lADOABII585ZaOSVzwAAAAHo8i0i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8203152674",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T16:00:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8203301444,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHo9HJE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8203301444",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T16:15:45Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T06:53:39Z",
      "updated_at": "2023-01-12T06:53:39Z",
      "source": {
        "issue": {
          "id": 1221671479,
          "node_id": "PR_kwDOABII5843Gzwx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
          "number": 25038,
          "state": "open",
          "state_reason": null,
          "title": "policy: nVersion=3 and Package RBF",
          "body": "See #27463 for overall project tracking.\r\n\r\nThis PR contains 2 projects: v3 policy and package RBF. Mailing list posts: [package RBF 1](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019464.html) and [V3 + package RBF 2](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html). It stems from a long discussion about RBF pinning, across a [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) and [gist](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff).\r\n\r\nV3 Policy: A set of policy rules applied to transactions with their `nVersion` field set to 3. Namely, it allows users to opt in to more restrictive descendant limits for shared transactions. If adopted by many nodes in the network, V3 mitigates various RBF pinning attacks. See doc/policy/version3_transactions.md for the exact rules and rationale, and [these review club notes](bitcoincore.reviews/25038) for more background and discussion. A short-term benefit of V3 is effective \"cluster limit\" of 2 which makes it very cheap to calculate the mining score of a v3 transaction.\r\n\r\nPackage RBF: In addition to allowing a child to pay for its parents within the package, also allow the child to pay for replacing the parent's conflicts. For example, this allows LN users to replace commitment transactions existing in the mempool, simply by broadcasting their respective commitment transactions with a high-fee child. The commitment transactions can be signed with 0 fees, which means no overpaying. This PR allows for package RBF with v3 packages.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25038.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25038.patch"
          },
          "created_at": "2022-04-30T00:24:31Z",
          "updated_at": "2023-08-08T03:34:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8211498813,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHpcYc9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8211498813",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T13:43:43Z"
    },
    {
      "event": "labeled",
      "id": 8211526402,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAHpcfMC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8211526402",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T13:46:56Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "labeled",
      "id": 8211526408,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAHpcfMI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8211526408",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T13:46:56Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8211594673,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHpcv2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8211594673",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-12T13:53:59Z"
    },
    {
      "event": "ready_for_review",
      "id": 8219777679,
      "node_id": "RFRE_lADOABII585ZaOSVzwAAAAHp79qP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8219777679",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-13T11:07:45Z"
    },
    {
      "event": "reviewed",
      "id": 1251451996,
      "node_id": "PRR_kwDOABII585Kl6Rc",
      "url": null,
      "actor": null,
      "commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1251451996",
      "submitted_at": "2023-01-17T12:20:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1251492911,
      "node_id": "PRR_kwDOABII585KmEQv",
      "url": null,
      "actor": null,
      "commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1251492911",
      "submitted_at": "2023-01-17T12:49:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1251548165,
      "node_id": "PRR_kwDOABII585KmRwF",
      "url": null,
      "actor": null,
      "commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1251548165",
      "submitted_at": "2023-01-17T13:25:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "renamed",
      "id": 8246264475,
      "node_id": "RTE_lADOABII585ZaOSVzwAAAAHrhAKb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8246264475",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T14:28:10Z",
      "rename": {
        "from": "[WIP] validate package transactions with their in-package ancestor sets",
        "to": "validate package transactions with their in-package ancestor sets"
      }
    },
    {
      "event": "reviewed",
      "id": 1261683617,
      "node_id": "PRR_kwDOABII585LM8Oh",
      "url": null,
      "actor": null,
      "commit_id": "879b55fa9da3688fb6b85e7f40f9778753a9102f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1261683617",
      "submitted_at": "2023-01-19T12:24:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1260782143,
      "node_id": "PRR_kwDOABII585LJgI_",
      "url": null,
      "actor": null,
      "commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "dropping some initial comments ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1260782143",
      "submitted_at": "2023-01-19T17:25:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8314673040,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAHvl9eQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8314673040",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-19T17:52:42Z"
    },
    {
      "event": "reviewed",
      "id": 1263465719,
      "node_id": "PRR_kwDOABII585LTvT3",
      "url": null,
      "actor": null,
      "commit_id": "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1263465719",
      "submitted_at": "2023-01-20T11:57:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1263473012,
      "node_id": "PRR_kwDOABII585LTxF0",
      "url": null,
      "actor": null,
      "commit_id": "4c4cea3856b1fa2a50de25847b19ae90c4263916",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1263473012",
      "submitted_at": "2023-01-20T12:03:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1263514526,
      "node_id": "PRR_kwDOABII585LT7Oe",
      "url": null,
      "actor": null,
      "commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1263514526",
      "submitted_at": "2023-01-20T12:37:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1263535150,
      "node_id": "PRR_kwDOABII585LUAQu",
      "url": null,
      "actor": null,
      "commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1263535150",
      "submitted_at": "2023-01-20T12:54:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-21T00:30:14Z",
      "updated_at": "2023-01-21T00:30:14Z",
      "source": {
        "issue": {
          "id": 1550856696,
          "node_id": "PR_kwDOABII585INr0Q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26933/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26933",
          "number": 26933,
          "state": "closed",
          "state_reason": null,
          "title": "mempool: disallow txns under min relay fee, even in packages",
          "body": "Part of package relay, see #27463.\r\n\r\nNote that this still allows packages to bump transactions that are below the dynamic mempool minimum feerate, which means this still solves the \"mempool is congested and my presigned 1sat/vB tx is screwed\" problem for all transactions.\r\n\r\nOn master, the package policy (only accessible through regtest-only RPC submitpackage) allows 0-fee (or otherwise below min relay feerate) transactions if they are bumped by a child. However, with default package limits, we don't yet have a DoS-resistant way of ensuring these transactions remain bumped throughout their time in the mempool. Primarily, the fee-bumping child may later be replaced by another transaction that doesn't bump the parent(s). The parent(s) could potentially stay bumped by other transactions, but not enough to ever be selected by the `BlockAssembler` (due to `blockmintxfee`).\r\n\r\nFor example, (tested [here](https://github.com/glozow/bitcoin/commits/26933-motivation)):\r\n- The mempool accepts 24 below-minrelayfeerate transactions (\"0-fee parents\"), all bumped by a single high-fee transaction (\"the fee-bumping child\"). The fee-bumping child also spends a confirmed UTXO.\r\n- Two additional children are added to each 0-fee parent. These children each pay a feerate slightly above the minimum relay feerate (e.g. 1.9sat/vB) such that, for each 0-fee parent, the total fees of its two children divided by the total size of the children and parent is above the minimum relay feerate.\r\n- If a block template is built now, all transactions would be selected.\r\n- A transaction replaces the the fee-bumping child, spending only the confirmed UTXO and not any of the outputs from the 0-fee parents.\r\n - The 0-fee parents now each have 2 children. Their descendant feerates are above minrelayfeerate, which means that they remain in the mempool, even if the mempool evicts all below-minrelayfeerate packages.\r\n - If a block template is built now, none of the 0-fee parents or their children would be selected.\r\n - Even more low-feerate descendants can be added to these below-minrelayfeerate packages and they will not be evicted until they expire or the mempool reaches capacity.\r\n\r\nUnless we have a DoS-resistant way of ensuring package CPFP-bumped transactions are always bumped, allowing package CPFP to bump below-minrelayfeerate transactions can result in these problematic situations. See #27018 which proposes a partial solution with some limitations, and contains discussion about potential improvements to eviction strategy. While no adequate solution exists, for now, avoid these situations by requiring all transactions to meet min relay feerate.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26933",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26933",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26933.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26933.patch"
          },
          "closed_at": "2023-04-26T10:18:31Z",
          "created_at": "2023-01-20T13:33:27Z",
          "updated_at": "2023-04-26T10:18:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-21T03:19:02Z",
      "updated_at": "2023-01-21T03:19:02Z",
      "source": {
        "issue": {
          "id": 1426214940,
          "node_id": "PR_kwDOABII585BsmgJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
          "number": 26403,
          "state": "open",
          "state_reason": null,
          "title": "[POLICY] Ephemeral anchors",
          "body": "Builds on top of https://github.com/bitcoin/bitcoin/pull/25038 for consideration of inclusion to the proposal. Requires V3, for simplicity of reasoning and usage. Implementation of idea written out at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021036.html\r\n\r\nBIP text here: https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 25,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26403",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26403.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26403.patch"
          },
          "created_at": "2022-10-27T20:14:15Z",
          "updated_at": "2023-07-07T20:15:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1266961348,
      "node_id": "PRR_kwDOABII585LhEvE",
      "url": null,
      "actor": null,
      "commit_id": "cea7dcf4388ad65436fcb98c7025b607708e09ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1266961348",
      "submitted_at": "2023-01-24T07:43:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1267024821,
      "node_id": "PRR_kwDOABII585LhUO1",
      "url": null,
      "actor": null,
      "commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1267024821",
      "submitted_at": "2023-01-24T08:23:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1267126406,
      "node_id": "PRR_kwDOABII585LhtCG",
      "url": null,
      "actor": null,
      "commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1267126406",
      "submitted_at": "2023-01-24T09:32:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1267177090,
      "node_id": "PRR_kwDOABII585Lh5aC",
      "url": null,
      "actor": null,
      "commit_id": "936c7f170bc68ec583ae026ddbaf197ca6cd0792",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1267177090",
      "submitted_at": "2023-01-24T10:03:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8389053396,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAH0BsvU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8389053396",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T14:51:23Z"
    },
    {
      "event": "reviewed",
      "id": 1276742818,
      "node_id": "PRR_kwDOABII585MGYyi",
      "url": null,
      "actor": null,
      "commit_id": "132159cc6ae36da7697fcbb90bd5914e02a41386",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1276742818",
      "submitted_at": "2023-01-31T08:58:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1276843630,
      "node_id": "PRR_kwDOABII585MGxZu",
      "url": null,
      "actor": null,
      "commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1276843630",
      "submitted_at": "2023-01-31T09:56:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1276863562,
      "node_id": "PRR_kwDOABII585MG2RK",
      "url": null,
      "actor": null,
      "commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1276863562",
      "submitted_at": "2023-01-31T10:08:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1278872989,
      "node_id": "PRR_kwDOABII585MOg2d",
      "url": null,
      "actor": null,
      "commit_id": "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1278872989",
      "submitted_at": "2023-02-01T10:48:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1340287122,
      "node_id": "PRR_kwDOABII585P4yiS",
      "url": null,
      "actor": null,
      "commit_id": "4a4ae2f12837f3abe93a67bd490213f5a9e82d76",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1340287122",
      "submitted_at": "2023-03-14T21:11:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "commented",
      "id": 1497279995,
      "node_id": "IC_kwDOABII585ZPq37",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497279995",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-05T10:42:35Z",
      "updated_at": "2023-04-05T10:42:35Z",
      "author_association": "MEMBER",
      "body": "Marking as draft for now, will rebase on top of #26933",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1497279995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "convert_to_draft",
      "id": 8933664844,
      "node_id": "CTDE_lADOABII585ZaOSVzwAAAAIUfOhM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8933664844",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-05T10:42:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8988361771,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIXv4Qr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8988361771",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T17:48:33Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T03:19:58Z",
      "updated_at": "2023-04-13T03:19:58Z",
      "source": {
        "issue": {
          "id": 1566660823,
          "node_id": "PR_kwDOABII585JCXFm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27018/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27018",
          "number": 27018,
          "state": "open",
          "state_reason": null,
          "title": "mempool / miner: regularly flush <=0-fee entries and mine everything in the mempool",
          "body": "This was suggested in https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1412320818.\r\n\r\n**The Problem**\r\nPackage CPFP (only accessible through regtest-only RPC submitpackage) allows 0-fee (or otherwise below min relay feerate) transactions if they are bumped by a child. We need to know what to do with these transactions if they lose their sponsor, e.g. due to a replacement that removed the input spending this 0-fee transaction.\r\n\r\nThis is made slightly more complicated by the fact that our \"selection scoring\" (BlockAssembler) is different from our \"eviction scoring.\" Roughly, we select based on ancestor feerate and evict based on descendant feerate. This may lead to [evicting things we would actually want to mine](https://github.com/bitcoin/bitcoin/pull/27018#issuecomment-1424742766) and [not evicting things that we will never mine](https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1400143991).\r\n\r\nThis PR's approach is to remove the 1sat/vB `-blockmintxfee` and have BlockAssembler select anything in the mempool (still based on ancestor packages, but not stopping at 1sat/vB). It also adds logic to `TrimToSize()` to evict anything paying <=0 fees. The idea is, if we're getting to the bottom of our mempool, we scrape up all the sats we can. Anything that pays *some* fee is worth adding to the block template.\r\n\r\nA major advantage of this approach is that 0-fee, non-v3 transactions can be bumped in package CPFP.\r\n\r\nA few observations which may or may not be problematic:\r\n- This increases the potential work after a reorg, since we add an extra step of removing the below-minrelayfeerate entries.\r\n- This increases the number of transactions that may be evicted in a replacement (from the worst case scenario we discussed before, it's up to 2500 entries).\r\n- This means you can remove a transaction from your own mempool by calling prioritisetransaction with a negative value.\r\n",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 118378960,
              "node_id": "MDU6TGFiZWwxMTgzNzg5NjA=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining",
              "name": "Mining",
              "color": "c7def8",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27018",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27018",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27018.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27018.patch"
          },
          "created_at": "2023-02-01T19:11:35Z",
          "updated_at": "2023-08-08T09:37:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T03:59:16Z",
      "updated_at": "2023-04-13T03:59:16Z",
      "source": {
        "issue": {
          "id": 1519092836,
          "node_id": "PR_kwDOABII585Godbn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26812/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26812",
          "number": 26812,
          "state": "open",
          "state_reason": null,
          "title": "test: add end-to-end tests for CConnman and PeerManager",
          "body": "Add fuzz and unit tests that write (fuzzed) data to a mocked socket and inspect what CConnman/PeerManager have written back to the socket, or check the internal state to verify that the behavior is as expected.\r\n\r\nThis is now possible, after most of https://github.com/bitcoin/bitcoin/pull/21878 has been merged - we don't do any syscalls (e.g. `connect()`, `recv()`) from the high level code and using a mocked socket allows testing the entire networking stack without opening actual network connections.",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26812",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26812.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26812.patch"
          },
          "created_at": "2023-01-04T14:39:37Z",
          "updated_at": "2023-08-07T09:14:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-14T11:14:50Z",
      "updated_at": "2023-04-14T11:14:50Z",
      "source": {
        "issue": {
          "id": 1668056618,
          "node_id": "I_kwDOABII585jbIYq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27463",
          "number": 27463,
          "state": "open",
          "state_reason": null,
          "title": "Package Relay Project Tracking",
          "body": "This issue will be edited frequently to reflect the current status of the project.\r\n\r\n**What should I review now?**\r\n:point_down: :point_down: :point_down: :point_down: :point_down: :point_down: :point_down:\r\n#28199 and #26711\r\n:point_up: :point_up: :point_up: :point_up: :point_up: :point_up: :point_up:\r\n**Mempool, Policy, Validation**\r\n\r\n- [x] Enable validation of multiple transactions in ATMP\r\n  - [x] Refactoring #21062, #22675, #23381\r\n  - [x] Multiple transactions in testmempoolaccept #20833\r\n  - [x] Package limits #21800\r\n  - [x] Allow submission of 1 child with parents #22674\r\n- [x] Enable a child to bump parents in a package #24152\r\n- [x] Make package validation interface available through RPC #24836 \r\n- [x] Avoid the risk of below-minrelaytxfee transactions hanging around forever in the mempool (currently only possible through reorgs and replacements after package CPFP). There are multiple options:\r\n   - Don't ever allow v1 and v2 txs below minrelaytxfee (#26933)\r\n   - Mine everything that makes it into in the mempool (default blockmintxfee to 0). Trim descendant packages <=0 fees, even when the mempool is not full (#27018)\r\n   - Other long-term improvements that address this problem, e.g. #27677.\r\n- [ ] Properly assess incentive compatibility, submit transactions with their in-package ancestor sets (#26711)\r\n- (Some existing DoS and incentive compatibility issues are addressed. It is safe to expose this interface on P2P)\r\n- [ ] Handle any arbitrary package, even if unsorted. Relax from child-with-parents to tx-with-ancestors (#26711)\r\n- [ ] Add v3 rules that make transactions/packages easier to work with (#25038)\r\n- [ ] Introduce a Miner Incentive Compatibility Score rule to RBF\r\n  - This is done for v3 transactions in #25038.\r\n  - Cluster-based mempool would allow this for all transactions: #27677.\r\n- [ ] Enable Package RBF for v3 transactions (#25038)\r\n- (Things like LN can sign things 0-fee, add fees at broadcast, and avoid pinning attacks. Assuming package relay is available.)\r\n- [ ] Add Ephemeral Anchors rules for v3 transactions (#26403)\r\n- (LN symmetry and other things can have 0-value anchors.)\r\n- [ ] When loading mempool, keep transactions that are below minimum feerate(s) but are CPFP'd. (#27476 or other)\r\n\r\n**P2P, Net Processing**\r\nFull implementation: #27742\r\n- [ ] BIP 331 (bitcoin/bips/pull/1382)\r\n- [ ] #28031\r\n- (Orphan-handling is more robust)\r\n- [ ] (Milestone 2/3) Negotiate package relay support with peers, gated by config flag (`sendpackages`). Request ancestor package information for orphans (`MSG_ANCPKGINFO`, `ancpkginfo`).\r\n- (Assuming adoption, in most cases, package relay nodes never need to use txid-based relay)\r\n- [ ] (Milestone 3/3) Using package info, request (`getpkgtxns`), download (`pkgtxns`), and submit packages together.\r\n  - [ ] Introduce a mechanism for protecting orphan transactions from eviction.\r\n  - [ ] Avoid telling legacy peers about transactions that depend on below-fee-filter parents.\r\n- [ ] Default `-packagerelay` config flag to true.\r\n- (Assuming adoption, below-mempool min feerate CPFP'd transactions propagate.)",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "created_at": "2023-04-14T11:14:50Z",
          "updated_at": "2023-08-03T14:10:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9026640098,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIaB5ji",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9026640098",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-17T16:13:51Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-17T16:28:02Z",
      "updated_at": "2023-04-17T16:28:02Z",
      "source": {
        "issue": {
          "id": 1671559202,
          "node_id": "PR_kwDOABII585Of17A",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27476",
          "number": 27476,
          "state": "closed",
          "state_reason": null,
          "title": "mempool: keep CPFP'd transactions when loading from mempool.dat",
          "body": "Part of v3 and package relay (see #27463).\r\n\r\n**Problem**\r\nWhen loading mempool.dat, we apply -minrelaytxfee and mempool min feerate on each transaction, meaning we'll reject transactions that may be CPFP'd by later transactions mempool.dat. Even without package relay, we can run into this problem if we are shrinking -maxmempool or raising -minrelaytxfee on a restart.\r\n\r\n**Solution**\r\nWhen loading mempool.dat, use `bypass_limits=true` and then call `TrimToSize()` at the very end.\r\n\r\nAdvantages:\r\n- We definitely keep the \"highest descendant score\" transactions if mempool min feerate rises.\r\n- It's extremely simple implementation-wise.\r\n- It's simple to keep track of what made it in and what didn't.\r\n\r\nDisadvantages:\r\n- If mempool.dat is very large, we can exceed maxmempool by quite a bit.\r\n- This won't be sufficient for ephemeral anchors (unless `bypass_limits` allows not-yet-spent anchors).\r\n",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27476",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27476",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27476.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27476.patch"
          },
          "closed_at": "2023-05-01T20:46:32Z",
          "created_at": "2023-04-17T16:28:02Z",
          "updated_at": "2023-05-03T04:25:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9139437498,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIgwL-6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9139437498",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T20:31:42Z"
    },
    {
      "event": "ready_for_review",
      "id": 9139548949,
      "node_id": "RFRE_lADOABII585ZaOSVzwAAAAIgwnMV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9139548949",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T20:48:49Z"
    },
    {
      "event": "labeled",
      "id": 9139863169,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAIgxz6B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9139863169",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T21:35:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1262442548,
      "node_id": "PRR_kwDOABII585LP1g0",
      "url": null,
      "actor": null,
      "commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "test issue causing failure",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1262442548",
      "submitted_at": "2023-05-02T16:46:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1409760020,
      "node_id": "PRR_kwDOABII585UBzsU",
      "url": null,
      "actor": null,
      "commit_id": "08a07c348d70907951a9225853976f9486665246",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1409760020",
      "submitted_at": "2023-05-02T19:30:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1411070467,
      "node_id": "PRR_kwDOABII585UGzoD",
      "url": null,
      "actor": null,
      "commit_id": "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1411070467",
      "submitted_at": "2023-05-03T14:46:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1417261502,
      "node_id": "PRR_kwDOABII585UebG-",
      "url": null,
      "actor": null,
      "commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Last bit of nitting:\r\n\r\n`AcceptPackage` -> `AcceptAncestorPackage`\r\n`AcceptMultipleTransactions` -> `AcceptSubPackage`\r\n\r\nWith BIP331 I think maybe knowing what an ancestor package is and how it fits\r\ninto this code may become clearer?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1417261502",
      "submitted_at": "2023-05-08T20:32:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-10T19:43:37Z",
      "updated_at": "2023-05-10T19:43:37Z",
      "source": {
        "issue": {
          "id": 1702880480,
          "node_id": "PR_kwDOABII585QI3ui",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27609",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27609/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27609/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27609/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27609",
          "number": 27609,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: allow submitpackage to be called outside of regtest",
          "body": "Permit (restricted topology) submitpackage RPC outside of regtest. Suggested in https://github.com/bitcoin/bitcoin/pull/26933#issuecomment-1510851570\r\n\r\nThis RPC should be safe but still experimental - interface may change, not all features (e.g. package RBF) are implemented, etc. If a miner wants to expose this to people, they can effectively use \"package relay\" before the p2p changes are implemented. However, please note **this is not package relay**; transactions submitted this way will not relay to other nodes if the feerates are below their mempool min fee. Users should put this behind some kind of rate limit or permissions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27609",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27609",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27609.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27609.patch"
          },
          "closed_at": "2023-05-11T17:37:42Z",
          "created_at": "2023-05-09T23:29:51Z",
          "updated_at": "2023-06-15T10:02:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9215899468,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIlT3dM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9215899468",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-10T22:12:14Z"
    },
    {
      "event": "unlabeled",
      "id": 9216175857,
      "node_id": "UNLE_lADOABII585ZaOSVzwAAAAIlU67x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9216175857",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-10T23:20:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9225175197,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIl3QCd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225175197",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T17:43:38Z"
    },
    {
      "event": "labeled",
      "id": 9225997589,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAIl6Y0V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225997589",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T19:22:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1423335249,
      "node_id": "PRR_kwDOABII585U1l9R",
      "url": null,
      "actor": null,
      "commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1423335249",
      "submitted_at": "2023-05-11T19:56:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1427036930,
      "node_id": "PRR_kwDOABII585VDtsC",
      "url": null,
      "actor": null,
      "commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "looking good",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1427036930",
      "submitted_at": "2023-05-15T18:01:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T14:32:19Z",
      "updated_at": "2023-05-16T14:32:19Z",
      "source": {
        "issue": {
          "id": 1712063643,
          "node_id": "PR_kwDOABII585QnjDj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27675",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27675/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27675/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27675/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27675",
          "number": 27675,
          "state": "open",
          "state_reason": null,
          "title": "p2p: Drop m_recently_announced_invs bloom filter",
          "body": "This PR replaces the `m_recently_announced_invs` bloom filter with a simple sequence number tracking the mempool state when we last considered sending an INV message to a node. This saves 33kB per peer (or more if we raise the rate at which we relay transactions over the network, in which case we would need to increase the size of the bloom filter proportionally).\r\n\r\nThe philosophy here (compare with #18861 and #19109) is that we consider the rate limiting on INV messages to only be about saving bandwidth and not protecting privacy, and therefore after you receive an INV message, it's immediately fair game to request any transaction that was in the mempool at the time the INV message was sent. We likewise consider the BIP 133 feefilter and BIP 37 bloom filters to be bandwidth optimisations here, and treat transactions as requestable if they would have been announced without those filters. Given that philosophy, tracking the timestamp of the last INV message and comparing that against the mempool entry time allows removal of each of `m_recently_announced_invs`, `m_last_mempool_req` and `UNCONDITIONAL_RELAY_DELAY` and associated logic.",
          "user": {
            "login": "ajtowns",
            "id": 127186,
            "node_id": "MDQ6VXNlcjEyNzE4Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajtowns",
            "html_url": "https://github.com/ajtowns",
            "followers_url": "https://api.github.com/users/ajtowns/followers",
            "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
            "organizations_url": "https://api.github.com/users/ajtowns/orgs",
            "repos_url": "https://api.github.com/users/ajtowns/repos",
            "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ajtowns/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27675",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27675",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27675.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27675.patch"
          },
          "created_at": "2023-05-16T13:45:18Z",
          "updated_at": "2023-08-07T14:54:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1550285007,
      "node_id": "IC_kwDOABII585cZ3jP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550285007",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T20:02:05Z",
      "updated_at": "2023-05-16T20:04:31Z",
      "author_association": "NONE",
      "body": "What are the current use cases / applications for transaction packages enabled by this PR that are more complicated than child-with-parents-tree-only?",
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550285007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1550292949,
      "node_id": "IC_kwDOABII585cZ5fV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550292949",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T20:08:34Z",
      "updated_at": "2023-05-16T20:08:53Z",
      "author_association": "MEMBER",
      "body": "@joostjager could be as simple as any wallet that does CPFP bumping in their coin selection algorithm(chaining unconfirmed spends). The ideal is to support as many usage patters exist in practice, ancestor packages is just a large-ish subset of that from a CPFP point of view.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550292949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "mentioned",
      "id": 9262107034,
      "node_id": "MEE_lADOABII585ZaOSVzwAAAAIoEIma",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9262107034",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T20:08:34Z"
    },
    {
      "event": "subscribed",
      "id": 9262107051,
      "node_id": "SE_lADOABII585ZaOSVzwAAAAIoEImr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9262107051",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T20:08:34Z"
    },
    {
      "event": "commented",
      "id": 1550315212,
      "node_id": "IC_kwDOABII585cZ-7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550315212",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-16T20:28:00Z",
      "updated_at": "2023-05-16T20:29:58Z",
      "author_association": "NONE",
      "body": "I am trying to get a feel for how big of a problem it is that this PR solves. In Lightning the problem is very real and potentially exposing lots of users to coin loss because of the combination of pre-signed transactions and time sensitivity, but the topology is of the simplest kind. I am not sure if the wallet example that you give is of the same order because RBF is also an option and timing may not be as critical?\r\n\r\nOf course it is great to support as many patterns as possible, but it also makes the system more complex to reason about and maintain. Maybe #27609 takes away 90% of the pain at 10% of the cost?",
      "user": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1550315212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9326563616,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIr6BEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9326563616",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T11:29:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9327180590,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIr8Xsu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9327180590",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T12:34:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9330555486,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAIsJPpe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9330555486",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T17:07:27Z"
    },
    {
      "event": "reviewed",
      "id": 1442702738,
      "node_id": "PRR_kwDOABII585V_eWS",
      "url": null,
      "actor": null,
      "commit_id": "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1442702738",
      "submitted_at": "2023-05-24T20:30:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1442724105,
      "node_id": "PRR_kwDOABII585V_jkJ",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/26711/commits/b234f993da3caa16f7716948fbcd16ab1a500180\r\n\r\nmodulo magic numbers in tests (sorry). Ran the fuzzer for a while again, no issues this time.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1442724105",
      "submitted_at": "2023-05-24T20:46:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "unlabeled",
      "id": 9335706387,
      "node_id": "UNLE_lADOABII585ZaOSVzwAAAAIsc5MT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9335706387",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-25T06:04:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-28T20:45:35Z",
      "updated_at": "2023-05-28T20:45:35Z",
      "source": {
        "issue": {
          "id": 1729419085,
          "node_id": "PR_kwDOABII585RiRvk",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27772",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27772/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27772/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27772/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27772",
          "number": 27772,
          "state": "closed",
          "state_reason": null,
          "title": "Make non-standard tx acceptance a peer option.",
          "body": "Make `-acceptnonstdtxn` apply to peers only and always allow local rpc calls to submit non-standard transactions to the mempool.\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/27768",
          "user": {
            "login": "joostjager",
            "id": 4638168,
            "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/joostjager",
            "html_url": "https://github.com/joostjager",
            "followers_url": "https://api.github.com/users/joostjager/followers",
            "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
            "organizations_url": "https://api.github.com/users/joostjager/orgs",
            "repos_url": "https://api.github.com/users/joostjager/repos",
            "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/joostjager/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27772",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27772",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27772.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27772.patch"
          },
          "closed_at": "2023-05-29T13:50:44Z",
          "created_at": "2023-05-28T11:55:15Z",
          "updated_at": "2023-06-24T01:25:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1465458909,
      "node_id": "PRR_kwDOABII585XWSDd",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Still gathering more context but leaving some first comments.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1465458909",
      "submitted_at": "2023-06-11T19:07:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1473964168,
      "node_id": "PRR_kwDOABII585X2uiI",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1473964168",
      "submitted_at": "2023-06-12T05:03:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1475058004,
      "node_id": "PRR_kwDOABII585X65lU",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1475058004",
      "submitted_at": "2023-06-12T19:44:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1476153957,
      "node_id": "PRR_kwDOABII585X_FJl",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1476153957",
      "submitted_at": "2023-06-13T16:25:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1480312972,
      "node_id": "PRR_kwDOABII585YO8iM",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1480312972",
      "submitted_at": "2023-06-14T22:27:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1481520336,
      "node_id": "PRR_kwDOABII585YTjTQ",
      "url": null,
      "actor": null,
      "commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1481520336",
      "submitted_at": "2023-06-15T20:07:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "convert_to_draft",
      "id": 9566296228,
      "node_id": "CTDE_lADOABII585ZaOSVzwAAAAI6Mhik",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9566296228",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-19T10:00:33Z"
    },
    {
      "event": "commented",
      "id": 1609832143,
      "node_id": "IC_kwDOABII585f9BbP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609832143",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T16:11:33Z",
      "updated_at": "2023-06-27T16:41:05Z",
      "author_association": "MEMBER",
      "body": "I've discussed some of the concerns here with @instagibbs, though haven't reviewed the code or read all the discussion.\r\n\r\nAs I understand it, there are (at least) these two issues to be addressed:\r\n* If a package is received, but its overall feerate is too low, it may still be the case that there are acceptable subpackages (at the top of the graph) we would have liked to accept (and this could happen when e.g. we missed the initial announcement of those subpackages). This is a regression compared to the current non-package relay, as orphan handling may resolve such cases today, though it's not clear to me how serious this is.\r\n* It's also possible that the feerate of the overall package is sufficient to be accepted, but it contains a low-feerate subset (at the \"bottom\" of the graph) that is actually too low, and we would ideally avoid accepting (possibly while still accepting the rest), to avoid cases where low feerate stuff makes it into our mempool (accidentally or maliciously) through the package relay mechanism.\r\n\r\nMy belief is that the second problem, deciding whether a low-feerate subset exists in a package, is actually equivalent to the cluster linearization/chunking problem (see #27677). A special case is a single leaf transaction in the package that's low-fee, but the more general question is much harder.\r\n\r\nIf the \"accepting low-fee stuff\" is considered a problem (as it appears to be, as you're trying to detect it for the last transaction in the package), then my thinking is that we actually may want to address it through a cluster linearization lens (independent of actually making the mempool cluster-based):\r\n* Run some linearization algorithm on the received package (it may be a very dumb one, like just sorting topologically, or the ancestor set feerate based one that the current mempool mining logic is using, or possibly later a much more intelligent one). Given that you're inherently limited to (I think) 25 transaction packages anyway, this ought to be very fast, even for ancestor sets). I'm happy to provide code to do this (I've been working on this problem the past few weeks anyway). The smarter the linearization is, the more capable it'll be at detecting sneaking-in, but even dumb topological sort is sufficient to detect the \"single last bad transaction\" case.\r\n* Run chunking on the linearization. This is a very simple O(n) algorithm that partitions the linearization into chunks, with the property that the combined feerate of the transactions in each consecutive chunk goes down.\r\n* Consider feerate checks of mempool insertion for every chunk separately, and abort as soon as one fails (possibly keeping the previous chunks, if that's easily doable). Given that chunk feerates are monotonously decreasing, if one fails for feerate reasons, the later ones will fail too.\r\n\r\nThis approach does not deal well with (transient) failures for non-feerate reasons, because if some transactions fails checks, if you've already linearized, everything after it may possibly depend on the failing one. It's possible in that case to go back and relinearize, but perhaps it's okay to just give up then?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1609832143",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "mentioned",
      "id": 9654392379,
      "node_id": "MEE_lADOABII585ZaOSVzwAAAAI_clY7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9654392379",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T16:11:34Z"
    },
    {
      "event": "subscribed",
      "id": 9654392404,
      "node_id": "SE_lADOABII585ZaOSVzwAAAAI_clZU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9654392404",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-27T16:11:34Z"
    },
    {
      "event": "commented",
      "id": 1612912372,
      "node_id": "IC_kwDOABII585gIxb0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612912372",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T11:08:26Z",
      "updated_at": "2023-06-29T14:22:43Z",
      "author_association": "MEMBER",
      "body": "> As I understand it, there are (at least) these two issues to be addressed:\r\n\r\nYes, essentially \"the package contains valid transactions, but we should only accept a subset of it due to fees.\" The first one can happen normally if we just came out of IBD or our peer has a lower minfeerate than we do - this PR was initially to address that. It was also to address \"the package contains some invalid transactions, and we should take the subset that is valid\" but I now think of that as a distinct concern.\r\n\r\nFor the second, I believe the worst concerns are due to problems with eviction (i.e. fixed with cluster mempool). But it's also such a waste to validate, accept, and potentially relay them, so I think we should try to reject it as soon as possible.\r\n\r\nMost problems with this PR boil down to how it groups transactions together (each time, just take the not-yet-submitted ancestor set of each tx). It's not smart enough to, for example, find a parent+2children group since every grouping is ancestor set-shaped. It also seems that its retry attempts (specifically the O(n^2) `PreChecks`) are a dealbreaker, so being able to decide on groups earlier is important.\r\n\r\n> My belief is that the second problem, deciding whether a low-feerate subset exists in a package, is actually equivalent to the cluster linearization/chunking problem\r\n\r\nYes! I think using ancestor feerate linearization + chunking method would be a much better way to divide the package into subgroups before validation. I also spent some time whiteboarding whether package RBF could be feasible for non-v3 this way. I haven't found anything I'm happy with yet, but I think incorporating \"cost to RBF conflicts\" into the chunking algorithm could be a start.\r\n\r\nOne thing I want to preserve from the current approach is minimizing groups when we can. For example, when the \"top\" of the package is above minimum feerate, we'll try it by itself before grouping. One goal of that is to prevent any potential regression from legacy orphan handling. Another problem is around granularity of checking ancestor/descendant limits: imagine a diamond shape (grandparent, 2 parents, 1 child) where grandparent has 23 in-mempool ancestors. The child won't make it regardless of fee, since it would have 26 ancestors. So if it's not necessary to chunk all 4 together (i.e. no need to CPFP), we shouldn't. [1]\r\n\r\nSo I think we'd want to use the linearization/chunking algo, but favor smaller chunks whenever possible. And preserve the behavior where, when every transaction's feerate is above our minimums, we just call `AcceptSingleTransaction` on each one. This also allows RBF.\r\n\r\n> This approach does not deal well with (transient) failures for non-feerate reasons, because if some transactions fails checks, if you've already linearized, everything after it may possibly depend on the failing one. It's possible in that case to go back and relinearize, but perhaps it's okay to just give up then?\r\n\r\nI still believe the answer to this is to give up and ensure we do not block an honest peer from relaying it to us later. If a peer is stuffing invalid transactions into a package, we don't waste any time and imo it's reasonable to wait for an honest peer to send the real package to us.\r\n\r\nI've been wondering if we should still try the transactions that are not descendants of the transaction(s) that failed. It seems a shame to just skip validation for a transaction we downloaded and has no dependencies on things we deemed invalid. But this does leave room for weird behavior... for example, we can only take 1 of 2 transactions before hitting descendant limits, so stuffing the package with high-feerate invalid txns can make us accept the lower-feerate one first if we don't re-linearize after we see the invalid tx. One idea is, when something is invalid for non-fee reasons, we skip its descendants but do a re-linearization that's topo-only and randomly tie-broken for everything else? But maybe this is unrealistic and not worth thinking about.\r\n\r\nAnyway, to summarize, the approach I'm going with now is:\r\n1. Basic sanitization. Topological sort.\r\n2. Grab UTXOs and calculate fees. Deduplicate txns already in mempool or seemingly just-confirmed. Drop things with missing inputs.\r\n3. Refine our linearization using the fee information.\r\n4. If each transaction passes `CheckFeeRate` by themselves, just call `AcceptSingleTransaction(tx)` for each tx -> return\r\n5. Chunkify, favoring smaller chunks (i.e. don't chunk together if possible)\r\n6. For each chunk, `AcceptPackageWrappingSingle(chunk)` -> return\r\n\r\nWill see what can be borrowed from the cluster mempool code - thanks!!\r\n\r\n[1] Similarly, since `PackageMempoolChecks` would overestimate each parent's ancestor count the way it's currently implemented (it was written with the assumption that inputs would be tx + ancestors), we should be willing to take one parent and not the other.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1613277774,
      "node_id": "IC_kwDOABII585gKKpO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613277774",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T14:25:58Z",
      "updated_at": "2023-06-29T14:25:58Z",
      "author_association": "MEMBER",
      "body": "> One goal of that is to prevent any potential regression from legacy orphan handling\r\n\r\nSorry can you motivate the issue here explicitly? How would this issue not arise in cluster mempool world?\r\n\r\n> favoring smaller chunks over larger ones.\r\n\r\nI think it'd be good to be explicit what \"favoring\" means here. Is this just individual submissions, then the full chunk on the rest of the chunk on an individual failure?\r\n\r\n> Refine our linearization using the fee information.\r\n\r\nAny thoughts on what algo here? IIUC Pieter should have ancestor-set rate code ready to go so maybe that could be used as good enough for mvp.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1613277774",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1615148105,
      "node_id": "IC_kwDOABII585gRTRJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1615148105",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T20:12:03Z",
      "updated_at": "2023-07-01T02:13:12Z",
      "author_association": "MEMBER",
      "body": "> I also spent some time whiteboarding whether package RBF could be feasible for non-v3 this way. I haven't found anything I'm happy with yet, but I think incorporating \"cost to RBF conflicts\" into the chunking algorithm could be a start.\r\n\r\nI haven't thought hard about this, but package RBF sounds a whole lot more complex - and that's probably something that actually becomes easier to reason about in a post-clustermempool world.\r\n\r\n> One thing I want to preserve from the current approach is minimizing groups when we can. For example, when the \"top\" of the package is above minimum feerate, we'll try it by itself before grouping. One goal of that is to prevent any potential regression from legacy orphan handling. Another problem is around granularity of checking ancestor/descendant limits: imagine a diamond shape (grandparent, 2 parents, 1 child) where grandparent has 23 in-mempool ancestors. The child won't make it regardless of fee, since it would have 26 ancestors. So if it's not necessary to chunk all 4 together (i.e. no need to CPFP), we shouldn't. [1]\r\n\r\nInteresting; ancestor set size limits do complicate things, and do factor into this. Ideally, I think the linearization and chunking just take these limits (including those impacted by existing in-mempool transactions) into account, but that's a lot less trivial. However, for specifically this concern a possibility is just weeding out transactions from the package whose ancestor set size would exceed the limit, before even invoking linearization, because ancestor set size of a transaction is a static property that does not depend on whatever else may be included. They can be ignored, as they're never going to be acceptable, so they shouldn't affect the order of other things that can be. It may be an independently useful optimization.\r\n\r\n> So I think we'd want to use the linearization/chunking algo, but favor smaller chunks whenever possible. And preserve the behavior where, when every transaction's feerate is above our minimums, we just call AcceptSingleTransaction on each one. This also allows RBF.\r\n\r\nAbout minimizing groupings in general, you're right. Chunking (as I had in mind) is actually too aggressive, and it's better to only group things as necessary. I don't think you need to special case individual transactions even, actually. Instead, use this, instead of chunking:\r\n* Start with an empty group of transactions to process.\r\n* Go through the transactions in linearized order, one by one:\r\n  * Add transaction to the group of transactions to process.\r\n  * Compute the combined feerate of that group (total fees divided by total size).\n    * If that feerate is sufficiently high, process the transactions in the group, and clear the group.\n    * If that feerate is not high enough, just leave the transaction in the group and continue with the next one.\n* If the final group is above the acceptable rate, process it. If not, discard it.\r\n\r\nThis will, I think, in most cases just process the transactions one by one, once. Only situations like a CPFP of which the parent alone isn't sufficient will trigger a grouped validation.\r\n\r\n> I still believe the answer to this is to give up and ensure we do not block an honest peer from relaying it to us later. If a peer is stuffing invalid transactions into a package, we don't waste any time and imo it's reasonable to wait for an honest peer to send the real package to us.\r\n\r\nI agree. The goal isn't to make sure that all imaginable unacceptable packages with some acceptable subpackage get considered. If the peer is sending bad things, we're allowed to just give up, as long as we make sure that in honest situations it's recoverable.\r\n\r\n> Anyway, to summarize, the approach I'm going with now is:\r\n\r\n...\r\n\r\nI'd modify step 4-6 to instead use the lazy grouping I described above, and use single transaction processing whenever the group happens to be a single transaction.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1615148105",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1618871642,
      "node_id": "IC_kwDOABII585gfgVa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1618871642",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-03T16:44:26Z",
      "updated_at": "2023-07-03T16:45:02Z",
      "author_association": "MEMBER",
      "body": "Without going full cluster mempool, I think whatever linearization is given out, we should probably ensure that each remaining prefix of the ancestor package is an ancestor package itself, before attempting submission to the mempool. Skip the entry if it's not. Maybe with ancestor set scoring linearizer this is redundant? I can't tell. Ancestor set scoring is probably going to get a lot closer to the ordering you want regardless, as it catches things like https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1229432536 ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1618871642",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1620375694,
      "node_id": "IC_kwDOABII585glPiO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620375694",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T14:39:59Z",
      "updated_at": "2023-07-04T14:39:59Z",
      "author_association": "MEMBER",
      "body": ">  I don't think you need to special case individual transactions even, actually. Instead, use this, instead of chunking:\r\n\r\nI'm not sure about using a group's aggregate feerate without checking their spending relationships, as it may allow unrelated transactions to pay for each other. For example:\r\n```\r\nA(1)  B(3)\r\n   ^   ^ \r\n  C(100)\r\n```\r\nWhere minfeerate is 2sat/vB. Imagine C is invalid (e.g. a fake child created to connect A and B).\r\nThe ancestor score-based linearization I was imagining (i.e. the current `BlockAssembler` algorithm) would be selecting them as part of C's ancestor set, so the result could be ABC or BAC.\r\nIf the linearization is ABC: A is below feerate, but A+B is ok. We've allowed B to \"pay for\" A but they're unrelated.\r\nIf the linearization is BAC we're fine.\r\n\r\n> I think whatever linearization is given out, we should probably ensure that each remaining prefix of the ancestor package is an ancestor package itself, before attempting submission to the mempool. Skip the entry if it's not.\r\n\r\nWe could do lazy grouping but only try groups that are connected (e.g. n-parents-1-child or 1-parent-2-children, etc)? Requiring them to be ancestor set-shaped would miss e.g. the 1-parent-2-children case.\r\n\r\nMaybe we can linearize the selected ancestor sets themselves to guarantee that, in this kind of situation, we'd always look at B before A? I think that would address the \"only one can fit in package limits\" problem as well.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620375694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1620395050,
      "node_id": "IC_kwDOABII585glUQq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620395050",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T14:50:06Z",
      "updated_at": "2023-07-04T14:50:06Z",
      "author_association": "MEMBER",
      "body": "Nothing is perfect, but a linearizer would ideally pick `B` before `A`, yes. So you might get:\r\n\r\n`B, A, C`\r\nor\r\n`B, C, A`\r\n\r\ndepending on if the strategy is greedy. \"topo\" sort may miss this, which is why we should probably be smarter than that?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620395050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T14:52:07Z",
      "updated_at": "2023-07-04T14:52:07Z",
      "source": {
        "issue": {
          "id": 1724281348,
          "node_id": "PR_kwDOABII585RQ35P",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27742",
          "number": 27742,
          "state": "open",
          "state_reason": null,
          "title": "[NO MERGE] BIP331 Ancestor Package Relay",
          "body": "**WORK IN PROGRESS.** Please do not run it for any use other than testing.\r\n  \r\nThis PR is not meant for merge. This branch exists to help reviewers see what package relay would look like all together. I will open separate PRs for these components and expect to add more tests, docs, and polish along the way. This PR contains all of the functionality built in a linear manner. However, since there are pieces in various areas of the codebase and they can make progress in parallel, commits don't necessarily need to be merged in this order.\r\n\r\n**See #27463 for what PR(s) are open for review right now.**\r\n\r\n## Note to Reviewers\r\n\r\nThe major purpose of this PR is to solicit \"approach\" review.\r\n\r\nThis is a large project, and the first few p2p commits essentially define the interface. I'd like to get rough consensus on approach before we start looking at code details and merging PRs, because I believe it will help us \"get useful stuff in\" faster and avoid premature optimizations.\r\n\r\nHere are some questions I hope are answered before we try to merge anything (originally https://github.com/bitcoin/bitcoin/pull/27742#issuecomment-1572205313):\r\n\r\n1. Does the proposed protocol look sound?\r\n2. Are these 3 milestones appropriate?\r\n3. Is there important functionality that is in the \"todo improvements\" section but should be included in one of the 3 milestones? Alternatively, is there not-that-important stuff in the milestones that we should defer until later?\r\n4. Does it make sense to have this PeerManager <-> TxPackageTracker <-> TxOrphanage relationship?\r\n\r\n\r\nComments about naming, typos, code details, etc. are also appreciated but please note I may wait until their respective PRs are open to incorporate your comments. Thank you for your patience.\r\n\r\n## Project Structure\r\n\r\n### 3 Major Milestones\r\n\r\nThis project is split into 3 milestones, each of which gives us something useful.\r\n\r\n1. Modularize and improve orphan-handling (also some refactoring).\r\n\t- Introduce a `TxPackageTracker` class, responsible for orphan handling. It starts out as a wrapper for the `TxOrphanage`.\r\n\t- Use all announcers as potential candidates for resolving an orphan. Add a `TxRequestTracker` Orphan Request Tracker which helps track orphans we need to resolve. Preferentially request orphan resolution from outbounds, preferred relay, etc., over inbounds.\r\n\r\n2. When package relay peers are available, use `ancpkginfo` instead of missing parents when handling orphans.\r\n\t- Add `sendpackages` negotiation logic.\r\n\t- Add a separate rejections filter for transactions that are eligible for reconsideration when validated together as a package, so that children of low-feerate transactions are still considered.\r\n\t- Send `getdata(MSG_ANCPKGINFO)` to package relay peers for orphan resolution. Use `ancpkginfo` to request missing ancestors through normal individual transaction relay.\r\n\r\n3. Download and validate ancestor packages using `getpkgtxns` and `pkgtxns`.\r\n\t- Add support for `getpkgtxns` and `pkgtxns`. Send a `pkgtxns` using the list of missing transactions from `ancpkginfo`.\r\n\t- Ensure we can process \"normal\" orphans even if a peer is trying to overwhelm/churn our orphanage. Do this by \"opportunistically\" protecting orphans from random eviction if they were sent by package relay peers, and redownloading orphans if we cannot afford to protect them. Each peer is allocated a certain amount of orphans they can protect at a time (\"token bucket\" style but the number of tokens is static for now). Outbound peers get more than inbounds.\r\n\t- If a transaction's parent(s) are below the fee filter, don't announce it (save the bandwidth of legacy nodes).\r\n\r\n###  Todo improvements \r\nThese could be added to the milestones or deferred until basic functionality is deployed.\r\n- Store orphans serialized instead of as CTransactionRefs to significantly reduce their memory usage.\r\n- Perhaps try to keep orphans in disk and/or process them asynchronously, given the incredibly DoSable nature of orphan handling.\r\n- Dynamically allocate tokens for orphan protection. For example, if a long-standing inbound peer continuously provides good packages for orphans, they should have more tokens. If a peer is obviously serving us garbage, reduce their tokens.\r\n- Detect when we have received all the transactions for a package, regardless of how (individual or block or other), and return `PackageToValidate`  in `GetTxToReconsider`.\r\n- New format for mempool.dat, packages instead of transactions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27742",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27742",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27742.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27742.patch"
          },
          "created_at": "2023-05-24T15:38:55Z",
          "updated_at": "2023-07-25T21:43:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1620413203,
      "node_id": "IC_kwDOABII585glYsT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620413203",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T15:03:18Z",
      "updated_at": "2023-07-04T15:47:41Z",
      "author_association": "MEMBER",
      "body": "@glozow You're right; I didn't think this through.\r\n\r\n@instagibbs To a limited extent better linearization can help here (though within-chunk optimization isn't something I've been looking at, as it doesn't matter for mining/eviction) but I think you can construct more complex examples where even a \"perfect\" linearization results in grouping of things that should not pay for each other.\r\n\r\nI'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well. I'll try to think about this more.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620413203",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "mentioned",
      "id": 9722941057,
      "node_id": "MEE_lADOABII585ZaOSVzwAAAAJDiE6B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9722941057",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T15:03:18Z"
    },
    {
      "event": "subscribed",
      "id": 9722941070,
      "node_id": "SE_lADOABII585ZaOSVzwAAAAJDiE6O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9722941070",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T15:03:19Z"
    },
    {
      "event": "mentioned",
      "id": 9722941087,
      "node_id": "MEE_lADOABII585ZaOSVzwAAAAJDiE6f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9722941087",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T15:03:19Z"
    },
    {
      "event": "subscribed",
      "id": 9722941102,
      "node_id": "SE_lADOABII585ZaOSVzwAAAAJDiE6u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9722941102",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T15:03:19Z"
    },
    {
      "event": "commented",
      "id": 1620538136,
      "node_id": "IC_kwDOABII585gl3MY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620538136",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T16:56:30Z",
      "updated_at": "2023-07-04T16:56:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well. I'll try to think about this more.\r\n\r\nI don't think handling multiple-children-pay-for-parent cases perfectly should be a goal here -- we're not fixing eviction (or changing the mining algo) at this point, so we'll still have imperfect corner cases anyway. Just getting \"high feerate child pays for below minfee ancestors\" mostly working, without introducing a DoS or breaking existing functional tx patterns, should be enough of a win IMO.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1620538136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "commented",
      "id": 1622227095,
      "node_id": "IC_kwDOABII585gsTiX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622227095",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T17:59:22Z",
      "updated_at": "2023-07-05T17:59:22Z",
      "author_association": "MEMBER",
      "body": "@ajtowns Yes, I don't think we have any requirement or even strong desire to go beyond ancestor-set-based linearization quality (= sufficient for single child pay for parent) in general, so anything beyond that would be \"extra\". Just trying ancestor sets of consecutive linearization elements (whenever their joint feerate is high enough) sounds sufficient to me, but I'm still wondering about:\r\n* whether something simpler is possible that's equally good.\r\n* whether there is a more general way to think about this - imagine we have access to an optimal linearization algorithm, is there are tractable optimal solution to this problem too? If so, that may inform how to think about this.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1622227095",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "mentioned",
      "id": 9734748562,
      "node_id": "MEE_lADOABII585ZaOSVzwAAAAJEPHmS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9734748562",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T17:59:22Z"
    },
    {
      "event": "subscribed",
      "id": 9734748593,
      "node_id": "SE_lADOABII585ZaOSVzwAAAAJEPHmx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9734748593",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T17:59:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9865594885,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAJMCQgF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9865594885",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T18:00:35Z"
    },
    {
      "event": "labeled",
      "id": 9866694023,
      "node_id": "LE_lADOABII585ZaOSVzwAAAAJMGc2H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9866694023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T19:39:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T07:49:31Z",
      "updated_at": "2023-07-20T07:49:31Z",
      "source": {
        "issue": {
          "id": 1436104730,
          "node_id": "PR_kwDOABII585CNk-9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26451/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26451",
          "number": 26451,
          "state": "open",
          "state_reason": null,
          "title": "Enforce incentive compatibility for all RBF replacements",
          "body": "Opening this for discussion.\r\n\r\nCurrently it's possible in our RBF rules to evict a transaction with higher mining score from our mempool, in favor of a transaction with a higher total fee but lower feerate.  This patch would fix this incentive incompatibility, by requiring that any new transaction have a mining score (as defined by the minimum of its feerate and its feerate including ancestors) to be greater than the individual feerates of all transactions that would be evicted.\r\n\r\nBecause this new feerate criteria includes the ancestors of a new transaction in the score, we are able to eliminate the prohibition against including new unconfirmed parents in a replacement transaction, a slight relaxation of the prior rules.",
          "user": {
            "login": "sdaftuar",
            "id": 7463573,
            "node_id": "MDQ6VXNlcjc0NjM1NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sdaftuar",
            "html_url": "https://github.com/sdaftuar",
            "followers_url": "https://api.github.com/users/sdaftuar/followers",
            "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
            "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
            "repos_url": "https://api.github.com/users/sdaftuar/repos",
            "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 33,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26451",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26451",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26451.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26451.patch"
          },
          "created_at": "2022-11-04T13:50:15Z",
          "updated_at": "2023-08-08T01:56:27Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzZThiNzhjMGFhMWYyZGNiNjU0Zjc3YmYyZTA1NjU2NDNjY2FmZTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2",
      "tree": {
        "sha": "b32442a7ff11097fb794e5e2c0dd546b9e1cde8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b32442a7ff11097fb794e5e2c0dd546b9e1cde8e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac7c1772f9a07585a3433173c3677b014d92feaf",
          "sha": "ac7c1772f9a07585a3433173c3677b014d92feaf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac7c1772f9a07585a3433173c3677b014d92feaf"
        }
      ],
      "message": "MOVEONLY: move package checks into helper functions\n\nThis allows IsSorted() and IsConsistent() to be used by themselves.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T08:32:53Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-09-16T15:49:24Z"
      },
      "sha": "f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk3MWU0MTM5YTEyNjEwZDk3ZmJlYzRkOTQ4ZDQ5ZGUzOTEzY2RlZjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/971e4139a12610d97fbec4d948d49de3913cdef7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/971e4139a12610d97fbec4d948d49de3913cdef7",
      "tree": {
        "sha": "3cbaaadd0563b719902bc1387840b849557e918f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cbaaadd0563b719902bc1387840b849557e918f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2",
          "sha": "f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3e8b78c0aa1f2dcb654f77bf2e0565643ccafe2"
        }
      ],
      "message": "scripted-diff: rename CheckPackage to IsPackageWellFormed\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/CheckPackage(/IsPackageWellFormed(/g' $(git grep -l CheckPackage)\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T08:32:53Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-19T17:31:58Z"
      },
      "sha": "971e4139a12610d97fbec4d948d49de3913cdef7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9883185378,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAJNFXDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9883185378",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T09:10:49Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhODQ2YWE1YTZhMmQ4ZTk0OGYyYTRkYTQ1MjYyYmM2NThlNDI1ZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa846aa5a6a2d8e948f2a4da45262bc658e425e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa846aa5a6a2d8e948f2a4da45262bc658e425e0",
      "tree": {
        "sha": "5b881ec767d2ed1f2af186ad6516d3de9b08aaa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b881ec767d2ed1f2af186ad6516d3de9b08aaa7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/971e4139a12610d97fbec4d948d49de3913cdef7",
          "sha": "971e4139a12610d97fbec4d948d49de3913cdef7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/971e4139a12610d97fbec4d948d49de3913cdef7"
        }
      ],
      "message": "[test util] CreateValidTransaction multi-in/out, configurable feerate, signal BIP125\n\nSupport the creation of a transaction with multiple specified inputs or\noutputs. Also accept a target feerate and return the fee paid.\n\nAlso, signal BIP125 by default - a subsequent commit needs to RBF\nsomething.\n\nCo-authored-by: Andrew Chow <achow101@gmail.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T15:02:30Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-10-03T09:56:00Z"
      },
      "sha": "aa846aa5a6a2d8e948f2a4da45262bc658e425e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmM2JlNDk2YjcxYWQzNzg3MTVmMzAzYjRmMjBiY2IwYzcxOGQzNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef3be496b71ad378715f303b4f20bcb0c718d377",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3be496b71ad378715f303b4f20bcb0c718d377",
      "tree": {
        "sha": "086c1a33442af9cacd012148ecdcfa0d9210ae18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/086c1a33442af9cacd012148ecdcfa0d9210ae18"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa846aa5a6a2d8e948f2a4da45262bc658e425e0",
          "sha": "aa846aa5a6a2d8e948f2a4da45262bc658e425e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa846aa5a6a2d8e948f2a4da45262bc658e425e0"
        }
      ],
      "message": "[unit test] normal RBF within a package\n\nEven though package RBF is not enabled, it's important that submitting a\ntransaction as part of a package does not block it from doing a normal\nreplacement.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T15:02:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-19T14:37:20Z"
      },
      "sha": "ef3be496b71ad378715f303b4f20bcb0c718d377"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY3M2VmY2QxNzExM2IwNGFhODg1ODJiZTZhYWM4MmMxNzc3ODU3OGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f73efcd17113b04aa88582be6aac82c17778578c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f73efcd17113b04aa88582be6aac82c17778578c",
      "tree": {
        "sha": "04a172b85703682c20bd3dd5adf01115a232bc37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04a172b85703682c20bd3dd5adf01115a232bc37"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef3be496b71ad378715f303b4f20bcb0c718d377",
          "sha": "ef3be496b71ad378715f303b4f20bcb0c718d377",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3be496b71ad378715f303b4f20bcb0c718d377"
        }
      ],
      "message": "[validation] add TxValidationResult::TX_SINGLE_FAILURE, TX_UNKNOWN\n\nWith package validation rules, transactions that fail individually may\nsometimes be eligible for reconsideration if submitted as part of a\npackage. For now, that includes trasactions that failed for being too\nlow fee(rate).  Add a new TxValidationResult type to distinguish these\nfailures from others.  In the next commits, we will abort package\nvalidation if a tx fails for any other reason. In the future, we will\nalso decide how to cache failures in recent_rejects based on this\nresult.\n\nPackage validation also sometimes elects to skip some transactions when\nit knows the package will not be submitted in order to quit sooner.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T15:02:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-09-12T09:43:33Z"
      },
      "sha": "f73efcd17113b04aa88582be6aac82c17778578c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2ZTU1NmFkZDk2NDRmNjZhN2M5NmIyMmVlN2QzZmFiOTQyYjlmYTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86e556add9644f66a7c96b22ee7d3fab942b9fa9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86e556add9644f66a7c96b22ee7d3fab942b9fa9",
      "tree": {
        "sha": "60ae6e837b29142776e368eae14e713c456bd930",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60ae6e837b29142776e368eae14e713c456bd930"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f73efcd17113b04aa88582be6aac82c17778578c",
          "sha": "f73efcd17113b04aa88582be6aac82c17778578c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f73efcd17113b04aa88582be6aac82c17778578c"
        }
      ],
      "message": "[validation] call AcceptSingleTransaction when only 1 package tx left\n\nAvoid calling PackageMempoolChecks() when there is only 1 transaction.\nNote to reviewers: there is a slight change in the error type returned,\nas shown in the txpackage_tests change.  When a transaction is the last\none left in the package and its fee is too low, this returns a PCKG_TX\ninstead of PCKG_POLICY. This interface is clearer;\n\"package-fee-too-low\" for 1 transaction would be a bit misleading.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T15:02:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-12-15T18:00:04Z"
      },
      "sha": "86e556add9644f66a7c96b22ee7d3fab942b9fa9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZmYzJiZDNjNjliYWY3OThlNDVjZTkzMjhmNzlmNThhODE5MmNlN2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
      "tree": {
        "sha": "2ecbb9df08be184a7c5fb0e01b16ede42e5feb72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ecbb9df08be184a7c5fb0e01b16ede42e5feb72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86e556add9644f66a7c96b22ee7d3fab942b9fa9",
          "sha": "86e556add9644f66a7c96b22ee7d3fab942b9fa9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/86e556add9644f66a7c96b22ee7d3fab942b9fa9"
        }
      ],
      "message": "[refactor] fill in results for every tx in AcceptPackage\n\nRefactor the code that consolidates submission_result, results_final, and\nindividual_results_nonfinal into the returned PackageMempoolAcceptResult.\n\nBehavior change: always return a result for each transaction in\nm_tx_results, regardless of what the PackageValidationResult is.\nPreviously, we would only guarantee this for PCKG_TX.\n\nIf transactions weren't validated, use TX_UNKNOWN.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T15:02:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-17T15:26:07Z"
      },
      "sha": "6fc2bd3c69baf798e45ce9328f79f58a8192ce7f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9886615139,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAJNScZj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886615139",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T15:33:23Z"
    },
    {
      "event": "commented",
      "id": 1647523520,
      "node_id": "IC_kwDOABII585iMzbA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647523520",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T09:12:39Z",
      "updated_at": "2023-07-24T09:12:39Z",
      "author_association": "MEMBER",
      "body": "> I'm starting to think that something closer to your idea here is right: trying ancestor sets of every transaction in the linearization in order, if the ancestor set feerate is suffiicently high. This indeed won't deal with multiple-children-pay-for-parent cases perfectly, but including everything connected may be too much as well.\r\n\r\n> I don't think handling multiple-children-pay-for-parent cases perfectly should be a goal here\r\n\r\nI agree that the non-ancestor-set-shaped submission is not something we should try to do right now.\r\n\r\nOutline of approach I've just pushed (lmk what y'all think?):\r\n\r\n- Basic sanitization. Linearize (Topological sort only)\r\n- **PreChecks loop** For each tx, grab UTXOs to calculate fees and filter out anything we should skip:\r\n    - If already in mempool (or same txid in mempool), mark as skip\r\n    - If missing inputs or conflict [2], record this failure and mark this and all descendants as skip.\r\n    - If no failures or TX_SINGLE_FAILURE [3], continue\r\n    - Otherwise, record this failure and mark that we will `quit_early`.\r\n- Refine our linearization using the fee information [4]\r\n- **Subpackage validation loop** For each transaction in the new linearized order:\r\n    - Get the transaction's ancestor subpackage.\r\n    - If the feerate of this transaction is insufficient, continue; [5]\r\n    - If the feerate of this subpackage is insufficient, continue;\r\n    - Otherwise, try to submit the subpackage, using `AcceptSingleTransaction()` if it's just 1 tx [6]\r\n    - if at any point we get a non-fee-related error, abort all.\r\n- Backfill results:\r\n\t- Try to use results from the subpackage validation loop.\r\n\t- If that doesn't exist (i.e. we quit early), use results from prechecks loop.\r\n\t- If that doesn't exist (i.e. it depends on something missing inputs), fill with `TX_UNKNOWN`.\r\n\r\nThis means we will call `PreChecks` for each transaction 2 times (fewer if we quit early), and run all other validation checks at most 1 time. A transaction shouldn't be validated in the subpackage validation loop more than once. Note that UTXOs are cached in `m_view` so there is not repeated loading the second time we call `PreChecks`.\r\n\r\n[1]  I'm using `PreChecks` for this in order to keep the anti-DoS fail-fast checks. These checks are very cheap and I don't think we should skip them before loading UTXOs. For example, something larger than max standard size could cause us to load a lot of UTXOs. But we could discuss using something more minimal than `PreChecks`. I also think the things done in `PreChecks()` like calculating ancestors and in-mempool conflicts can be used to refine some of the logic. For example, we could quickly see that a tx conflicts with something it can't replace and skip it.\r\n[2] i.e. `TX_MISSING_INPUTS` or `TX_CONFLICT`. This includes missing inputs and txn-already-known (something we guess is already confirmed). I special case'd these as something we should be more tolerant of (i.e. skip instead of abort) because I can imagine them happening in honest cases when we have a different chainstate from our peer, and it's fairly easy to skip over them.\r\n[3] This includes fee-related errors, but only the ones that can be bypassed by package validation. Unless we remove the rule from  #26933, something below min relay feerate would not fall in this category. And since we have no package RBF, not meeting fee-related RBF requirements is not in this category. I've documented these in the code.\r\n[4] I'm using a slightly modified `MiniMiner` here to get the order in which these transactions would be mined. It does not pull the mempool ancestors/cluster since there is no limit to how large that cluster might be.\r\n[5] This naturally resolves the \"package feerate is ok but the bottom tx isn't\" issue.\r\n[6] Rationale https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372\r\n",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-25T16:36:08Z",
      "updated_at": "2023-07-25T16:36:08Z",
      "source": {
        "issue": {
          "id": 1820713481,
          "node_id": "PR_kwDOABII585WWox_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28152",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28152/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28152/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28152/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28152",
          "number": 28152,
          "state": "open",
          "state_reason": null,
          "title": "Add benchmark for miniminer",
          "body": "Directly ripped off from the fuzztest\r\n\r\nIdeally used to inform design decisions for package relay work: https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28152",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28152",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28152.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28152.patch"
          },
          "created_at": "2023-07-25T16:36:07Z",
          "updated_at": "2023-07-25T18:29:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1650184694,
      "node_id": "IC_kwDOABII585iW9H2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650184694",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-25T16:45:11Z",
      "updated_at": "2023-07-25T16:45:11Z",
      "author_association": "MEMBER",
      "body": "new approach seems in line with what we've discussed previously. Basically https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231092018 AJ's suggestion, minus retries, plus using explicit linearization step.\r\n\r\nObvious point but including miniminer dependency means we'll likely have increased review surface, even if it ends up making a lot of sense in this case. From my basic experimentation in https://github.com/bitcoin/bitcoin/pull/28152 it looks like the performance hit is negligible, with 15k ops/s with cluster sizes of 25, and maybe that's an underestimate since it's constructing a more general cluster instead of a ancestor package.\r\n\r\nI noticed at least two nice cleanups based on this strategy, but I'm going to let more approach feedback come back before leaving more in-depth feedback.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1650184694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26711"
    },
    {
      "event": "reviewed",
      "id": 1553164118,
      "node_id": "PRR_kwDOABII585ck2dW",
      "url": null,
      "actor": null,
      "commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1553164118",
      "submitted_at": "2023-07-29T02:46:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1555725722,
      "node_id": "PRR_kwDOABII585cun2a",
      "url": null,
      "actor": null,
      "commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1555725722",
      "submitted_at": "2023-07-31T20:58:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "reviewed",
      "id": 1558055733,
      "node_id": "PRR_kwDOABII585c3gs1",
      "url": null,
      "actor": null,
      "commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1558055733",
      "submitted_at": "2023-08-02T02:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10000807384,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAJUGDXY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10000807384",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T16:06:09Z"
    },
    {
      "event": "unlabeled",
      "id": 10001829304,
      "node_id": "UNLE_lADOABII585ZaOSVzwAAAAJUJ824",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10001829304",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T18:07:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUxODM2ZGQyZDBkZDg4OTI0YTEzZWZjMjA4OGFmYzMxNDUwYWFiYzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1836dd2d0dd88924a13efc2088afc31450aabc7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e1836dd2d0dd88924a13efc2088afc31450aabc7",
      "tree": {
        "sha": "46cec1cedd4b8555e829dce936f6532a28c27056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46cec1cedd4b8555e829dce936f6532a28c27056"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
          "sha": "6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc2bd3c69baf798e45ce9328f79f58a8192ce7f"
        }
      ],
      "message": "[MiniMiner] enable manually created MiniMinerMempoolEntrys, track sequence\n\nTrack the order in which transactions are added to the block template,\nwhich is what a linearization algorithm would be interested in.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:36:49Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-14T10:28:00Z"
      },
      "sha": "e1836dd2d0dd88924a13efc2088afc31450aabc7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI0MTY3ZDJiZGJkM2YyYmE4NGRlOTNmY2IzODM4YWU3YmU5Y2UxMGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b",
      "tree": {
        "sha": "9a882f9cc44eddbe9e48f5fd49cf8d1b39afb2ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a882f9cc44eddbe9e48f5fd49cf8d1b39afb2ce"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1836dd2d0dd88924a13efc2088afc31450aabc7",
          "sha": "e1836dd2d0dd88924a13efc2088afc31450aabc7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e1836dd2d0dd88924a13efc2088afc31450aabc7"
        }
      ],
      "message": "[txpackages] add AncestorPackage for linearizing packages\n\nWe cannot require that peers send topologically sorted lists, because we\ncannot check for this property without ensuring we have the same chain\ntip and ensuring we have the full ancestor set. Instead, add the ability\nto handle arbitrarily ordered transaction lists.\nThe AncestorPackage ctor linearizes the transactions topologically. If\nfee and vsize information is added, it uses MiniMiner to refine the\nlinearization using the ancestor score-based algorithm.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-09-16T15:51:36Z"
      },
      "sha": "b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAxZmU4OGNhZmM2YmJjN2MxMDJmZmI3MWZlODlmYzI5ZGVkYjc4Yzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7",
      "tree": {
        "sha": "c04ef5e78525a6d07c9acc925826163060e02e83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c04ef5e78525a6d07c9acc925826163060e02e83"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b",
          "sha": "b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b4167d2bdbd3f2ba84de93fcb3838ae7be9ce10b"
        }
      ],
      "message": "[bench] AncestorPackage and linearization using fees",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2023-07-25T16:25:45Z"
      },
      "sha": "01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM3YjUzMTAwYzczZTk2NjdiZjFlZjFjNmI0NjU0MGQ3YTQ0NGRmOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b53100c73e9667bf1ef1c6b46540d7a444df94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b53100c73e9667bf1ef1c6b46540d7a444df94",
      "tree": {
        "sha": "905731053490a5d36ad1054f2b8f3d2f61bc3a08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/905731053490a5d36ad1054f2b8f3d2f61bc3a08"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7",
          "sha": "01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/01fe88cafc6bbc7c102ffb71fe89fc29dedb78c7"
        }
      ],
      "message": "[fuzz] AncestorPackage",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-02-16T15:31:44Z"
      },
      "sha": "c7b53100c73e9667bf1ef1c6b46540d7a444df94"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVkMGVlNTk0ZDJkZWZjMjIxNzkzZjI0ZWU2ZTZiMzdmNWM4YzA1NjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0ee594d2defc221793f24ee6e6b37f5c8c0565",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0ee594d2defc221793f24ee6e6b37f5c8c0565",
      "tree": {
        "sha": "1cd98152060abaf4d7eff8b9b51396390ee7c057",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd98152060abaf4d7eff8b9b51396390ee7c057"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b53100c73e9667bf1ef1c6b46540d7a444df94",
          "sha": "c7b53100c73e9667bf1ef1c6b46540d7a444df94",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b53100c73e9667bf1ef1c6b46540d7a444df94"
        }
      ],
      "message": "[validation] fully abort package validation for non-TX_SINGLE_FAILURE failures\n\nWhen a package contains an invalid transaction, we may continue in order\nto capture some valid subset of transaction(s), but we should be very\nconservative about the amount of work we do.\n- if a tx (or same txid) is already in mempool, skip and continue.\n- if we get a TX_SINGLE_FAILURE, this tx might be CPFP'd by a\nsubsequent transaction in the package, so continue.\n- if we get TX_CONFLICT or TX_MISSING_INPUTS, skip the affected\ntransaction(s) and try the others. This is to try our best to handle\na situation in which we have different chainstate from our peer(s).\n- for all other failures, abort the whole thing.\n\nAdds usage of AncestorPackage to linearize transactions and gracefully\nskip transactions. This linearization is just topological for now, but a\nsubsequent commit will add logic to gather fee information and use that\nto refine the linearization. Even though packages are currently required\nto be sorted, the order may be changed, since AncestorPackage can\nproduce a different but valid topological sort.\n\nSince AncestorPackage knows the size of a transaction's in-package\nancestor set, we can skip individual submission of those with in-package\ndependencies, as we know they will fail for missing inputs.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-17T17:15:39Z"
      },
      "sha": "ed0ee594d2defc221793f24ee6e6b37f5c8c0565"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY0NjYxMzkwZGRlYjk0ZTI4MTQ5MGRmNDdhNTM4ZTkzMmM4OTczODk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64661390ddeb94e281490df47a538e932c897389",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/64661390ddeb94e281490df47a538e932c897389",
      "tree": {
        "sha": "3cba4caed5343b66ed6d6f6c57e4d0ab11bd4ddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cba4caed5343b66ed6d6f6c57e4d0ab11bd4ddd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0ee594d2defc221793f24ee6e6b37f5c8c0565",
          "sha": "ed0ee594d2defc221793f24ee6e6b37f5c8c0565",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0ee594d2defc221793f24ee6e6b37f5c8c0565"
        }
      ],
      "message": "[refactor] specify what transactions were too low feerate\n\nWith subpackage evaluation and de-duplication, it's not always the\nentire package that is used in CheckFeerate.\n\nInstead of PCKG_POLICY (which is supposed to be for package-wide\nerrors), use PCKG_TX. Also, to be more helpful to the caller, specify\nwhich transactions were included in the evaluation and what the package\nfeerate was.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-21T12:51:34Z"
      },
      "sha": "64661390ddeb94e281490df47a538e932c897389"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcxNDhjODY3Y2ZkNWU4MjlkMWYxY2VkNTc4ZmIxYmFhNTgyZmEyZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7148c867cfd5e829d1f1ced578fb1baa582fa2ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7148c867cfd5e829d1f1ced578fb1baa582fa2ed",
      "tree": {
        "sha": "f6282bf0dccca2a49f778a6e2e5ac669d9ddb8ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6282bf0dccca2a49f778a6e2e5ac669d9ddb8ef"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64661390ddeb94e281490df47a538e932c897389",
          "sha": "64661390ddeb94e281490df47a538e932c897389",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/64661390ddeb94e281490df47a538e932c897389"
        }
      ],
      "message": "[validation] add a PreChecks loop to linearize by fee and find obvious errors\n\nLinearization helps us understand which transactions need to be grouped\ntogether as CPFPs. Alternative approaches:\n(1) validate each transaction with its ancestor set, and allow retries\nlater (in another transaction's ancestor set) if they fail for being too\nlow fee. This results in O(n^2) validation costs if, for example, we\nhave a chain of 24 low-feerate transactions with a fee-bumping\ndescendant at the bottom.\n(2) use a function other than PreChecks to grab UTXOs and calculate\nfees. This results in skipping some of the anti-DoS fail-fast logic in\nPreChecks, such as tx too big (which could mean loading a lot of UTXOs).\nIn the future, we may also be interested in using information like the\ntransaction's mempool conflicts and ancestor set (calculated in\nPreChecks) in the linearization or quit early logic. So PreChecks is\nbest for this purpose.\n\nLinearization also helps us try to accept the highest feerate subset of\nthe package when we don't don't have room for all of it. For example, if\neach of the transactions in the package share an ancestor whose\ndescendant limits only permit one, we should try the highest feerate\ntransaction(s) first.\n\nOne of the unit tests needs to be edited so the child pays below\nmempoolminfee instead of 0 fees, otherwise the whole package is aborted.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-17T17:13:15Z"
      },
      "sha": "7148c867cfd5e829d1f1ced578fb1baa582fa2ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE5MTM1YmM5MTQ0MmIxZDgwMDZlN2MyM2RiNmNhMjFjNzExNTU4M2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9135bc91442b1d8006e7c23db6ca21c7115583e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a9135bc91442b1d8006e7c23db6ca21c7115583e",
      "tree": {
        "sha": "9bb6b6c8d9be1321f2d29ea67c676c68dcd91ae9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bb6b6c8d9be1321f2d29ea67c676c68dcd91ae9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7148c867cfd5e829d1f1ced578fb1baa582fa2ed",
          "sha": "7148c867cfd5e829d1f1ced578fb1baa582fa2ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7148c867cfd5e829d1f1ced578fb1baa582fa2ed"
        }
      ],
      "message": "[validation] submit ancestor subpackages",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-17T18:01:36Z"
      },
      "sha": "a9135bc91442b1d8006e7c23db6ca21c7115583e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiOTM0YWUwZTRmZGQ0MDAzYjE0OWUxYmM3MTMyMzUxMjYxOGJkNjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab934ae0e4fdd4003b149e1bc71323512618bd61",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ab934ae0e4fdd4003b149e1bc71323512618bd61",
      "tree": {
        "sha": "5870ac9535893ab9321b25662e3fc2ef5de2fc0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5870ac9535893ab9321b25662e3fc2ef5de2fc0e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9135bc91442b1d8006e7c23db6ca21c7115583e",
          "sha": "a9135bc91442b1d8006e7c23db6ca21c7115583e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a9135bc91442b1d8006e7c23db6ca21c7115583e"
        }
      ],
      "message": "[policy] allow any ancestor package, not just child-with-unconfirmed-parents\n\nWe can safely allow any ancestor package since AncestorPackage can\nlinearize things that are out of order. Remove the check that \"all\nunconfirmed parents are present\" because, even if a tx is missing\ninputs, the other transactions may be worth validating.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-02-17T13:42:52Z"
      },
      "sha": "ab934ae0e4fdd4003b149e1bc71323512618bd61"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjMTcxMDlkMDk3MWE0NTFlZDE2NDViNzgwYTE0ZDMxNjQ3NjRkNDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac17109d0971a451ed1645b780a14d3164764d42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac17109d0971a451ed1645b780a14d3164764d42",
      "tree": {
        "sha": "676001f4fcfe2889fa8c915e15ba42f1b1a5d50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676001f4fcfe2889fa8c915e15ba42f1b1a5d50d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab934ae0e4fdd4003b149e1bc71323512618bd61",
          "sha": "ab934ae0e4fdd4003b149e1bc71323512618bd61",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ab934ae0e4fdd4003b149e1bc71323512618bd61"
        }
      ],
      "message": "[test] CheckPackageMempoolAcceptResult",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:25:40Z"
      },
      "sha": "ac17109d0971a451ed1645b780a14d3164764d42"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM0ZmRhM2IxMTI3NWJmYmQyMWQ3YWIzOTUxZGU3ZGY4NDg4NGFkOWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4fda3b11275bfbd21d7ab3951de7df84884ad9d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4fda3b11275bfbd21d7ab3951de7df84884ad9d",
      "tree": {
        "sha": "52a10b70a28578eab2e034ec0ac00fddd773b7fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52a10b70a28578eab2e034ec0ac00fddd773b7fd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac17109d0971a451ed1645b780a14d3164764d42",
          "sha": "ac17109d0971a451ed1645b780a14d3164764d42",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac17109d0971a451ed1645b780a14d3164764d42"
        }
      ],
      "message": "[unit test] package validation subsets and subpackages\n\n- Interdependent parents.\n- Allow normal RBF for individual transactions that don't require\n  in-package CPFP.\n- Diamond where bottom of package is low feerate.\n\nCo-authored-by: Andrew Chow <achow101@gmail.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-09-29T10:22:28Z"
      },
      "sha": "c4fda3b11275bfbd21d7ab3951de7df84884ad9d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhYTllZGRlZmRiMTM1NGJhMTkzZjI5ZDg1ZGMxOGJlZTE0ZTBjYjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "tree": {
        "sha": "0079d61fb0174211c11a9e92f8a431b09ca53e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0079d61fb0174211c11a9e92f8a431b09ca53e90"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4fda3b11275bfbd21d7ab3951de7df84884ad9d",
          "sha": "c4fda3b11275bfbd21d7ab3951de7df84884ad9d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c4fda3b11275bfbd21d7ab3951de7df84884ad9d"
        }
      ],
      "message": "[refactor] use CheckPackageMempoolAcceptResult in previous tests",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:46:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-08T17:26:00Z"
      },
      "sha": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10038446898,
      "node_id": "HRFPE_lADOABII585ZaOSVzwAAAAJWVosy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10038446898",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T17:47:19Z"
    },
    {
      "event": "reviewed",
      "id": 1543557301,
      "node_id": "PRR_kwDOABII585cANC1",
      "url": null,
      "actor": null,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "dropping the comments since I haven't seen any approach pushback yet, and I don't want to lose these comments accidentally ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#pullrequestreview-1543557301",
      "submitted_at": "2023-08-08T17:48:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072139558",
      "pull_request_review_id": 1251451996,
      "id": 1072139558,
      "node_id": "PRRC_kwDOABII584_540m",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\nLet's add an Assume checking `tx == package.end()`?",
      "created_at": "2023-01-17T12:20:04Z",
      "updated_at": "2023-01-17T12:29:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072139558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072139558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072167416",
      "pull_request_review_id": 1251492911,
      "id": 1072167416,
      "node_id": "PRRC_kwDOABII584_5_n4",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\n\r\nWhat you're saying in the commit message is true only for `TxValidationResult::TX_MEMPOOL_POLICY` or `TxValidationResult::TX_MISSING_INPUTS`? In other failures, we won't validate the child for the second time (because it would trigger quit_early)\r\n\r\nWhat's even worse than a mistake in the commit message, you won't be able to catch other kinds of failures here (because you don't set `quit_early` here), so you might do some extra work which should have been avoided otherwise, no?",
      "created_at": "2023-01-17T12:49:10Z",
      "updated_at": "2023-01-17T12:50:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072167416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072167416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072204405",
      "pull_request_review_id": 1251548165,
      "id": 1072204405,
      "node_id": "PRRC_kwDOABII584_6Ip1",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cb065422e58be7558e6c2ad9eadfa885bb48c708\r\n\r\nAfter this change it's impossible to hit `quit_early=false` and `txns_package_eval.empty()`, which was possible before.\r\nIt means that even if everything was either (valid, already in the mempool, or invalid due to a subset of failures) — you will force the checks again? (before this change, it could have terminated early)\r\n\r\nMaybe related [to the other comment i left](https://github.com/bitcoin/bitcoin/pull/26711/commits/cb065422e58be7558e6c2ad9eadfa885bb48c708#r1072167416).",
      "created_at": "2023-01-17T13:25:21Z",
      "updated_at": "2023-01-17T13:25:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1072204405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072204405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073438932",
      "pull_request_review_id": 1253331561,
      "id": 1073438932,
      "node_id": "PRRC_kwDOABII584_-2DU",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072204405,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> After this change it's impossible to hit quit_early=false and txns_package_eval.empty(), which was possible before.\r\n\r\nRight, `quit_early=false && txns_package_eval.empty()` means everything so far has been valid or txid already in mempool.\r\n\r\n> It means that even if everything was either (valid, already in the mempool, or invalid due to a subset of failures) — you will force the checks again? (before this change, it could have terminated early)\r\n\r\nOk I will try to break down all the possibilities in this scenario. If we get to the child and `quit_early=false && txns_package_eval.empty()`, everything else has been valid, and we should validate the child. It doesn't matter if we do it inside or outside this loop, but it's better to only do it 1 time.\r\nThe child's result can be: valid, policy/missing inputs, or other failure. If txid already in mempool we would have already exited the loop.\r\n\r\nBefore the commit:\r\n- If valid: the tx was validated 1 time, inside the loop.\r\n- If policy/missing inputs: the tx was validated 2 times, both inside the loop and with `AcceptMultipleTransactions(txns_package_eval)` outside the loop.\r\n- If other failure: the tx was validated 1 time, inside the loop.\r\n\r\nRight after the loop, `quit_early || txns_package_eval.empty()` hits, but none of them terminated without validating the child. \r\n\r\nAfter the commit:\r\n- If valid: the tx is validated 1 time, outside the loop.\r\n- If policy/missing inputs: the tx is validated 1 time, outside the loop.\r\n- If other failure: the tx is validated 1 time, outside the loop.\r\n\r\nRight after the loop, `quit_early || txns_package_eval.empty()` does not hit. The tx is validated, and then the results returned. The function returns at a later line of code, but that doesn't mean more work was done.",
      "created_at": "2023-01-18T11:53:24Z",
      "updated_at": "2023-01-18T11:53:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1073438932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073438932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080563611",
      "pull_request_review_id": 1260782143,
      "id": 1080563611,
      "node_id": "PRRC_kwDOABII585AaBeb",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072139558,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would help for reading clarity if nothing else, agreed",
      "created_at": "2023-01-18T21:14:52Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080563611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080563611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080581849",
      "pull_request_review_id": 1260782143,
      "id": 1080581849,
      "node_id": "PRRC_kwDOABII585AaF7Z",
      "diff_hunk": "@@ -15,21 +15,8 @@\n #include <numeric>\n #include <unordered_set>\n \n-bool CheckPackage(const Package& txns, PackageValidationState& state)\n+bool IsSorted(const Package& txns)\n {\n-    const unsigned int package_count = txns.size();\n-\n-    if (package_count > MAX_PACKAGE_COUNT) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n-    }\n-\n-    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n-                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n-    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n-    }\n-\n     // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n     // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rest of this comment seems appropriate elsewhere now that its put in its own subroutine.\r\n",
      "created_at": "2023-01-18T21:37:49Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080581849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080581849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080595370",
      "pull_request_review_id": 1260782143,
      "id": 1080595370,
      "node_id": "PRRC_kwDOABII585AaJOq",
      "diff_hunk": "@@ -65,6 +56,26 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While we're here: `CheckPackageWellFormed`",
      "created_at": "2023-01-18T21:54:55Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080595370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080595370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080599515",
      "pull_request_review_id": 1260782143,
      "id": 1080599515,
      "node_id": "PRRC_kwDOABII585AaKPb",
      "diff_hunk": "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 24,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/so/to/",
      "created_at": "2023-01-18T21:58:32Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080599515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080599515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080602237",
      "pull_request_review_id": 1260782143,
      "id": 1080602237,
      "node_id": "PRRC_kwDOABII585AaK59",
      "diff_hunk": "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:\n+     * - there are no conflicts\n+     * - the number of transactions is reasonable (e.g. within MAX_PACKAGE_COUNT)\n+     */\n+    Packageifier(const Package& txns);\n+    /** Returns the transactions, in ascending order of number of in-package ancestors. */\n+    Package Txns() const { return txns; }\n+    /** Get the ancestor subpackage for a transaction. */\n+    std::vector<CTransactionRef> GetAncestorSet(const CTransactionRef& tx);\n+    /** From now on, exclude these transactions from GetAncestorSet(). */\n+    void Exclude(const CTransactionRef& transaction);\n+    /** Mark a transaction as \"banned.\" From now on, if this transaction is present in the ancestor\n+     * set, return an empty vector instead. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "when calling Txns()",
      "created_at": "2023-01-18T22:00:46Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1080602237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080602237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081158729",
      "pull_request_review_id": 1261633680,
      "id": 1081158729,
      "node_id": "PRRC_kwDOABII585AcSxJ",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072204405,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you for this elaborate analysis!\r\n\r\nSo in `if valid` and `if other failure` cases, it's not just inside vs outside the loop, right?\r\nBecause \"outside the loop\" also means re-validating other transactions, not just the child (`AcceptMultipleTransactions` call).\r\n(Note that I'm look only at the first commit so far)",
      "created_at": "2023-01-19T11:51:24Z",
      "updated_at": "2023-01-19T11:51:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081158729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081158729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081194260",
      "pull_request_review_id": 1261683617,
      "id": 1081194260,
      "node_id": "PRRC_kwDOABII585AcbcU",
      "diff_hunk": "@@ -1439,15 +1455,16 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n+        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID ||\n+               mempoolaccept_res.m_state.GetResult() == TxValidationResult::TX_MISSING_INPUTS);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "879b55fa9da3688fb6b85e7f40f9778753a9102f",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "879b55fa9da3688fb6b85e7f40f9778753a9102f\r\n\r\nAccording to this change, it should now be possible to hit `mempoolaccept_res.m_result_type == INVALID`, but only when [...].\r\n\r\nHowever, I don't see how the `AcceptPackageWrappingSingle` code change touches `mempoolaccept_res` at all. So it's unclear why the Assume is changed here.\r\n\r\n",
      "created_at": "2023-01-19T12:24:51Z",
      "updated_at": "2023-01-19T12:25:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081194260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081194260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081209483",
      "pull_request_review_id": 1261706834,
      "id": 1081209483,
      "node_id": "PRRC_kwDOABII585AcfKL",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072204405,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What I'm talking about seems to be fixed in the next commit 879b55fa9da3688fb6b85e7f40f9778753a9102f.\r\nIf my understanding is correct, I'd suggest mentioning this in the commit message.",
      "created_at": "2023-01-19T12:41:23Z",
      "updated_at": "2023-01-19T12:41:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081209483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081209483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081549166",
      "pull_request_review_id": 1260782143,
      "id": 1081549166,
      "node_id": "PRRC_kwDOABII585AdyFu",
      "diff_hunk": "@@ -59,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     * Expects that:\r\n```",
      "created_at": "2023-01-19T16:51:07Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081549166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081549166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081574207",
      "pull_request_review_id": 1260782143,
      "id": 1081574207,
      "node_id": "PRRC_kwDOABII585Ad4M_",
      "diff_hunk": "@@ -1363,14 +1371,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // the new transactions. This ensures we don't double-count transaction counts and sizes when\n     // checking ancestor/descendant limits, or double-count transaction fees for fee-related policy.\n     ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    const auto AcceptPackageWrappingSingle = [&](const std::vector<CTransactionRef>& subpackage)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_pool.cs) {\n+        AssertLockHeld(::cs_main);\n+        AssertLockHeld(m_pool.cs);\n+        if (subpackage.size() > 1) {\n+            return AcceptMultipleTransactions(subpackage, args);\n+        }\n+        const auto& tx = subpackage.front();\n+        const auto single_res = AcceptSingleTransaction(tx, single_args);\n+        PackageValidationState package_state_wrapper;\n+        if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            package_state_wrapper.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        return PackageMempoolAcceptResult(package_state_wrapper, {{tx->GetWitnessHash(), single_res}});\n+    };\n+    Packageifier packageified(package);\n     // Results from individual validation. \"Nonfinal\" because if a transaction fails by itself but\n     // succeeds later (i.e. when evaluated with a fee-bumping child), the result changes (though not\n     // reflected in this map). If a transaction fails more than once, we want to return the first\n     // result, when it was considered on its own. So changes will only be from invalid -> valid.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n     bool quit_early{false};",
      "path": "src/validation.cpp",
      "position": 229,
      "original_position": 40,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe we can get rid of `quit_early` and have Packagifier contain a `HasBan` function?",
      "created_at": "2023-01-19T17:12:54Z",
      "updated_at": "2023-01-19T17:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081574207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081574207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1406,
      "original_line": 1406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081588430",
      "pull_request_review_id": 1260782143,
      "id": 1081588430,
      "node_id": "PRRC_kwDOABII585Ad7rO",
      "diff_hunk": "@@ -1393,56 +1417,93 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (subpackage.empty()) {\n+                Assume(quit_early);\n+                // Quit early; this transaction depends on a \"banned\" tx (failed for a non-policy\n+                // and non-missing-inputs reason), so this transaction will be invalid due to\n+                // missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                // Unless we're quitting early (child would have exited already since this is an\n+                // ancestor package), validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage);\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map.\n+            for (const auto& subpackage_tx : subpackage) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // Note that it's possible for transactions to have been submitted to the mempool even\n+            // if subpackage_result.m_state.IsInvalid(). If IsValid(), fine to move on.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. To minimize the amount of repeated work, unless the transaction fails\n+                    // due to feerate or missing inputs (its parent is a previous transaction in the\n+                    // package that failed due to feerate), don't run package validation. Note that this\n+                    // decision might not make sense if different types of packages are allowed in the\n+                    // future.  Continue individually validating the rest of the transactions, because\n+                    // some of them may still be valid.\n+                    quit_early = true;\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n     // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n+    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n+    // the other transactions in the package are as well. We check for the child by txid because\n+    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n+    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we change `GetAncestorSet` to an optional and store banned-ness, then we can use it to check if there is nothing left to be submitted directly by calling `txns_package_eval.empty()`.\r\n\r\n```suggestion\r\n    if (packageified.HasBan() || txns_package_eval.empty()) {\r\n```\r\n\r\nOr, if we keep GetAncestorSet as is, just do `txns_package_eval.empty()` only? It will be empty in both the cases where it has a banned input, or where all transactions have been excluded?\r\n\r\nThen we can just get rid of quit_early and don't need to track if we've banned anything?",
      "created_at": "2023-01-19T17:20:49Z",
      "updated_at": "2023-01-19T17:27:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081588430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081588430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081618834",
      "pull_request_review_id": 1262313397,
      "id": 1081618834,
      "node_id": "PRRC_kwDOABII585AeDGS",
      "diff_hunk": "@@ -65,6 +56,26 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "in_reply_to_id": 1080595370,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Going with `IsPackageWellFormed` to follow the `Is*` pattern, if that's ok",
      "created_at": "2023-01-19T17:49:01Z",
      "updated_at": "2023-01-19T17:49:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081618834",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081618834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081624953",
      "pull_request_review_id": 1262320655,
      "id": 1081624953,
      "node_id": "PRRC_kwDOABII585AeEl5",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072167416,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in the commit message that, specifically if the failure is policy or missing inputs, it was validated twice. Thanks",
      "created_at": "2023-01-19T17:54:18Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081624953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081624953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1455,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081625789",
      "pull_request_review_id": 1262320655,
      "id": 1081625789,
      "node_id": "PRRC_kwDOABII585AeEy9",
      "diff_hunk": "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:\n+     * - there are no conflicts\n+     * - the number of transactions is reasonable (e.g. within MAX_PACKAGE_COUNT)\n+     */\n+    Packageifier(const Package& txns);\n+    /** Returns the transactions, in ascending order of number of in-package ancestors. */\n+    Package Txns() const { return txns; }\n+    /** Get the ancestor subpackage for a transaction. */\n+    std::vector<CTransactionRef> GetAncestorSet(const CTransactionRef& tx);\n+    /** From now on, exclude these transactions from GetAncestorSet(). */\n+    void Exclude(const CTransactionRef& transaction);\n+    /** Mark a transaction as \"banned.\" From now on, if this transaction is present in the ancestor\n+     * set, return an empty vector instead. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "in_reply_to_id": 1080602237,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Only when calling `GetAncestorSet()`*, added comment that `Txns()` is unchanged.",
      "created_at": "2023-01-19T17:55:01Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081625789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081625789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081626065",
      "pull_request_review_id": 1262320655,
      "id": 1081626065,
      "node_id": "PRRC_kwDOABII585AeE3R",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072139558,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-01-19T17:55:16Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081626065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081626065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627149",
      "pull_request_review_id": 1262320655,
      "id": 1081627149,
      "node_id": "PRRC_kwDOABII585AeFIN",
      "diff_hunk": "@@ -1394,6 +1394,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cb065422e58be7558e6c2ad9eadfa885bb48c708",
      "in_reply_to_id": 1072204405,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you yes, it makes more sense to switch the commits around. Switched their order and made the commit messages more descriptive",
      "created_at": "2023-01-19T17:56:14Z",
      "updated_at": "2023-01-19T17:59:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627681",
      "pull_request_review_id": 1262320655,
      "id": 1081627681,
      "node_id": "PRRC_kwDOABII585AeFQh",
      "diff_hunk": "@@ -1439,15 +1455,16 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n+        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID ||\n+               mempoolaccept_res.m_state.GetResult() == TxValidationResult::TX_MISSING_INPUTS);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "879b55fa9da3688fb6b85e7f40f9778753a9102f",
      "in_reply_to_id": 1081194260,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops yes, I've removed this",
      "created_at": "2023-01-19T17:56:36Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081627681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081627681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628019",
      "pull_request_review_id": 1262320655,
      "id": 1081628019,
      "node_id": "PRRC_kwDOABII585AeFVz",
      "diff_hunk": "@@ -15,21 +15,8 @@\n #include <numeric>\n #include <unordered_set>\n \n-bool CheckPackage(const Package& txns, PackageValidationState& state)\n+bool IsSorted(const Package& txns)\n {\n-    const unsigned int package_count = txns.size();\n-\n-    if (package_count > MAX_PACKAGE_COUNT) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n-    }\n-\n-    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n-                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n-    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n-    }\n-\n     // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n     // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "67f7b2c84a4c1c137ff3e6894e35ac87656137e1",
      "in_reply_to_id": 1080581849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved back to `IsPackageWellFormed()`",
      "created_at": "2023-01-19T17:56:52Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628126",
      "pull_request_review_id": 1262320655,
      "id": 1081628126,
      "node_id": "PRRC_kwDOABII585AeFXe",
      "diff_hunk": "@@ -62,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 24,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "ed4272c85e0cb21aec411408c4f2402519e2c5b2",
      "in_reply_to_id": 1080599515,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-01-19T17:56:57Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628217",
      "pull_request_review_id": 1262320655,
      "id": 1081628217,
      "node_id": "PRRC_kwDOABII585AeFY5",
      "diff_hunk": "@@ -59,4 +65,37 @@ bool CheckPackage(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions so exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects that basic sanitization checks have passed:",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": 1081549166,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-01-19T17:57:02Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081628217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081628217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081629094",
      "pull_request_review_id": 1262320655,
      "id": 1081629094,
      "node_id": "PRRC_kwDOABII585AeFmm",
      "diff_hunk": "@@ -1393,56 +1417,93 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (subpackage.empty()) {\n+                Assume(quit_early);\n+                // Quit early; this transaction depends on a \"banned\" tx (failed for a non-policy\n+                // and non-missing-inputs reason), so this transaction will be invalid due to\n+                // missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                // Unless we're quitting early (child would have exited already since this is an\n+                // ancestor package), validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage);\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map.\n+            for (const auto& subpackage_tx : subpackage) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // Note that it's possible for transactions to have been submitted to the mempool even\n+            // if subpackage_result.m_state.IsInvalid(). If IsValid(), fine to move on.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. To minimize the amount of repeated work, unless the transaction fails\n+                    // due to feerate or missing inputs (its parent is a previous transaction in the\n+                    // package that failed due to feerate), don't run package validation. Note that this\n+                    // decision might not make sense if different types of packages are allowed in the\n+                    // future.  Continue individually validating the rest of the transactions, because\n+                    // some of them may still be valid.\n+                    quit_early = true;\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n     // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n+    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n+    // the other transactions in the package are as well. We check for the child by txid because\n+    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n+    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": 1081588430,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, got rid of quit_early and exists(). Using txns_package_eval std::nullopt or empty",
      "created_at": "2023-01-19T17:57:48Z",
      "updated_at": "2023-01-19T17:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081629094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081629094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081632204",
      "pull_request_review_id": 1262329505,
      "id": 1081632204,
      "node_id": "PRRC_kwDOABII585AeGXM",
      "diff_hunk": "@@ -1363,14 +1371,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // the new transactions. This ensures we don't double-count transaction counts and sizes when\n     // checking ancestor/descendant limits, or double-count transaction fees for fee-related policy.\n     ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    const auto AcceptPackageWrappingSingle = [&](const std::vector<CTransactionRef>& subpackage)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_pool.cs) {\n+        AssertLockHeld(::cs_main);\n+        AssertLockHeld(m_pool.cs);\n+        if (subpackage.size() > 1) {\n+            return AcceptMultipleTransactions(subpackage, args);\n+        }\n+        const auto& tx = subpackage.front();\n+        const auto single_res = AcceptSingleTransaction(tx, single_args);\n+        PackageValidationState package_state_wrapper;\n+        if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+            package_state_wrapper.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        return PackageMempoolAcceptResult(package_state_wrapper, {{tx->GetWitnessHash(), single_res}});\n+    };\n+    Packageifier packageified(package);\n     // Results from individual validation. \"Nonfinal\" because if a transaction fails by itself but\n     // succeeds later (i.e. when evaluated with a fee-bumping child), the result changes (though not\n     // reflected in this map). If a transaction fails more than once, we want to return the first\n     // result, when it was considered on its own. So changes will only be from invalid -> valid.\n     std::map<uint256, MempoolAcceptResult> individual_results_nonfinal;\n     bool quit_early{false};",
      "path": "src/validation.cpp",
      "position": 229,
      "original_position": 40,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "45029ee87828aa337a0f7b05a8e3a4b0855e658f",
      "in_reply_to_id": 1081574207,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(was able to get rid of quit_early without `HasBan()`)",
      "created_at": "2023-01-19T18:00:28Z",
      "updated_at": "2023-01-19T18:00:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1081632204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081632204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1406,
      "original_line": 1406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082414267",
      "pull_request_review_id": 1263465719,
      "id": 1082414267,
      "node_id": "PRRC_kwDOABII585AhFS7",
      "diff_hunk": "@@ -1422,15 +1438,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);",
      "path": "src/validation.cpp",
      "position": 439,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4\r\nThis `Assume` is orthogonal to the rest of the code changes (these changes don't touch `mempoolaccept_res`), so it's unclear why you remove it here.",
      "created_at": "2023-01-20T11:57:39Z",
      "updated_at": "2023-01-20T11:57:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082414267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082414267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1471,
      "original_line": 1471,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082421842",
      "pull_request_review_id": 1263473012,
      "id": 1082421842,
      "node_id": "PRRC_kwDOABII585AhHJS",
      "diff_hunk": "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    if (!IsSorted(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+    if (!HasNoConflicts(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "4c4cea3856b1fa2a50de25847b19ae90c4263916",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4c4cea3856b1fa2a50de25847b19ae90c4263916\r\nnit: maybe it's better to use `HasConflicts`. Double-negation is harder to understand :)",
      "created_at": "2023-01-20T12:03:44Z",
      "updated_at": "2023-01-20T12:03:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082421842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082421842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082468542",
      "pull_request_review_id": 1263514526,
      "id": 1082468542,
      "node_id": "PRRC_kwDOABII585AhSi-",
      "diff_hunk": "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8764ecc566413b4974e030c596193e75ff39f746\r\nCan this result in an endless recursion, if txA spends txB and txB spends txA at the same time? Or possibly through txC. (similar in `IsAncestorPackage`)",
      "created_at": "2023-01-20T12:37:29Z",
      "updated_at": "2023-01-20T13:11:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082468542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082468542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082492810",
      "pull_request_review_id": 1263535150,
      "id": 1082492810,
      "node_id": "PRRC_kwDOABII585AhYeK",
      "diff_hunk": "@@ -62,4 +65,39 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 26,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "8764ecc566413b4974e030c596193e75ff39f746\r\nThe comment is incorrect: nullopt is returned, not empty vector.",
      "created_at": "2023-01-20T12:54:31Z",
      "updated_at": "2023-01-20T12:54:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082492810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082492810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082507527",
      "pull_request_review_id": 1263548159,
      "id": 1082507527,
      "node_id": "PRRC_kwDOABII585AhcEH",
      "diff_hunk": "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": 1082468542,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we have a cycle of transactions, SHA256 is broken, no? 😅",
      "created_at": "2023-01-20T13:04:42Z",
      "updated_at": "2023-01-20T13:04:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082507527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082507527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082586776",
      "pull_request_review_id": 1263655629,
      "id": 1082586776,
      "node_id": "PRRC_kwDOABII585AhvaY",
      "diff_hunk": "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": 1082468542,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right. Not sure if it's worth commenting. It's unlikely someone will violate this assumption (it would require big changes to Bitcoin), but it could save time to someone like me who forget about this property.",
      "created_at": "2023-01-20T14:10:18Z",
      "updated_at": "2023-01-20T14:10:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1082586776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082586776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084899543",
      "pull_request_review_id": 1266961348,
      "id": 1084899543,
      "node_id": "PRRC_kwDOABII585AqkDX",
      "diff_hunk": "@@ -171,7 +188,7 @@ struct TestChain100Setup : public TestingSetup {\n      * @param submit             Whether or not to submit to mempool\n      */\n     CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n-                                                      int input_vout,\n+                                                      uint32_t input_vout,\n                                                       int input_height,",
      "path": "src/test/util/setup_common.h",
      "position": 50,
      "original_position": 30,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cea7dcf4388ad65436fcb98c7025b607708e09ab",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cea7dcf4388ad65436fcb98c7025b607708e09ab\r\nnit: worth changing `input_height` to `uint` too, maybe even with `const`?",
      "created_at": "2023-01-24T07:43:06Z",
      "updated_at": "2023-01-24T07:43:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084899543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084899543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084935931",
      "pull_request_review_id": 1267024821,
      "id": 1084935931,
      "node_id": "PRRC_kwDOABII585Aqs77",
      "diff_hunk": "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b\r\nConsider everything, including the child, to be valid.\r\nPreviously, the execution would terminate at `txns_package_eval.empty()` gate after the loop.\r\nAfter this commit, this won't pass — and everything (other transactions) would be validated once again.",
      "created_at": "2023-01-24T08:23:45Z",
      "updated_at": "2023-01-24T08:33:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1084935931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084935931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085014944",
      "pull_request_review_id": 1267126406,
      "id": 1085014944,
      "node_id": "PRRC_kwDOABII585ArAOg",
      "diff_hunk": "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b\r\nShould say \"non-child transaction'",
      "created_at": "2023-01-24T09:32:21Z",
      "updated_at": "2023-01-24T09:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085014944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085014944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085056132",
      "pull_request_review_id": 1267177090,
      "id": 1085056132,
      "node_id": "PRRC_kwDOABII585ArKSE",
      "diff_hunk": "@@ -1416,44 +1420,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 continue;\n             }\n             if (wtxid == child->GetWitnessHash()) {\n-                txns_package_eval.push_back(tx);\n-                Assume(txns_package_eval == subpackage.value());\n                 Assume(tx == package.back());\n                 // Unless we're quitting early, validate the child outside of this loop.\n                 break;\n             }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the Packageifier that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. Tell the Packageifier that subsequent transactions depending on this one\n+                    // should be skipped.\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n-    // the other transactions in the package are as well. We check for the child by txid because\n-    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n-    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+    const auto txns_package_eval{packageified.GetAncestorSet(child)};\n+    // If txns_package_eval is std::nullopt, the last tx's result was pre-filled with missing\n+    // inputs. If txns_package_eval is empty, all transactions have already passed.\n+    if (!txns_package_eval || txns_package_eval->empty()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "936c7f170bc68ec583ae026ddbaf197ca6cd0792",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "936c7f170bc68ec583ae026ddbaf197ca6cd0792\r\nCould you help me understand how the latter condition can be possible for this transaction?",
      "created_at": "2023-01-24T10:03:37Z",
      "updated_at": "2023-01-24T10:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085056132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085056132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085568911",
      "pull_request_review_id": 1267825959,
      "id": 1085568911,
      "node_id": "PRRC_kwDOABII585AtHeP",
      "diff_hunk": "@@ -1416,44 +1420,54 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 continue;\n             }\n             if (wtxid == child->GetWitnessHash()) {\n-                txns_package_eval.push_back(tx);\n-                Assume(txns_package_eval == subpackage.value());\n                 Assume(tx == package.back());\n                 // Unless we're quitting early, validate the child outside of this loop.\n                 break;\n             }\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the Packageifier that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            // Another \"final\" validation result is if the tx failed for a non-policy reason.\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n+                    // Package validation policy only differs from individual policy in its evaluation\n+                    // of feerate. For example, if a transaction fails here due to violation of a\n+                    // consensus rule, the result will not change when it is submitted as part of a\n+                    // package. Tell the Packageifier that subsequent transactions depending on this one\n+                    // should be skipped.\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    packageified.Ban(tx);\n+                }\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n             }\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted. Since this is an ancestor package, if the child is in, that means all\n-    // the other transactions in the package are as well. We check for the child by txid because\n-    // same-txid-different-witness is an acceptable case for deduplication in the loop above.\n-    if (quit_early || m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+    const auto txns_package_eval{packageified.GetAncestorSet(child)};\n+    // If txns_package_eval is std::nullopt, the last tx's result was pre-filled with missing\n+    // inputs. If txns_package_eval is empty, all transactions have already passed.\n+    if (!txns_package_eval || txns_package_eval->empty()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "936c7f170bc68ec583ae026ddbaf197ca6cd0792",
      "in_reply_to_id": 1085056132,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume you're asking \"how can `txns_package_eval` be empty?\" \r\nIf all of the transactions were already in the mempool, they have each been `Exclude`'d. So `GetAncestorSet(child)` returns a vector of all the non-excluded ancestors, which is an empty vector.",
      "created_at": "2023-01-24T16:21:04Z",
      "updated_at": "2023-01-27T12:39:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1085568911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085568911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090695044",
      "pull_request_review_id": 1275271720,
      "id": 1090695044,
      "node_id": "PRRC_kwDOABII585BAq-E",
      "diff_hunk": "@@ -171,7 +188,7 @@ struct TestChain100Setup : public TestingSetup {\n      * @param submit             Whether or not to submit to mempool\n      */\n     CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n-                                                      int input_vout,\n+                                                      uint32_t input_vout,\n                                                       int input_height,",
      "path": "src/test/util/setup_common.h",
      "position": 50,
      "original_position": 30,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cea7dcf4388ad65436fcb98c7025b607708e09ab",
      "in_reply_to_id": 1084899543,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "- It will need to be cast to `int` anyway when we call `AddCoins()`. Maybe one day if we change `AddCoins()` ?\r\n- I don't think `const` is very meaningful since it's passed by value",
      "created_at": "2023-01-30T14:26:31Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090695044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090695044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090716976",
      "pull_request_review_id": 1275271720,
      "id": 1090716976,
      "node_id": "PRRC_kwDOABII585BAwUw",
      "diff_hunk": "@@ -1422,15 +1438,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     }\n     // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n     // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptMultipleTransactions(txns_package_eval, args);\n+    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval);\n     // Include already-in-mempool transaction results in the final result.\n     for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n         Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);",
      "path": "src/validation.cpp",
      "position": 439,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "036d2b07fb3ce404dd6787d8d0fe4e80c168fdf4",
      "in_reply_to_id": 1082414267,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, removed",
      "created_at": "2023-01-30T14:44:14Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090716976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090716976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1471,
      "original_line": 1471,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726607",
      "pull_request_review_id": 1275271720,
      "id": 1090726607,
      "node_id": "PRRC_kwDOABII585BAyrP",
      "diff_hunk": "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n             // Transaction does not already exist in the mempool.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "in_reply_to_id": 1085014944,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-01-30T14:51:25Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726927",
      "pull_request_review_id": 1275271720,
      "id": 1090726927,
      "node_id": "PRRC_kwDOABII585BAywP",
      "diff_hunk": "@@ -62,4 +65,39 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically. */\n+    Package txns;\n+    /** Caches the transactions by txid for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Caches the in-package ancestors for each transaction. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Transactions that are banned. Return empty vector if any ancestor subset contains these transactions.*/",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 26,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": 1082492810,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed",
      "created_at": "2023-01-30T14:51:40Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090726927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090726927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090727252",
      "pull_request_review_id": 1275271720,
      "id": 1090727252,
      "node_id": "PRRC_kwDOABII585BAy1U",
      "diff_hunk": "@@ -92,3 +91,81 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// After calling visit() on a package tx, it's guaranteed to be in the ancestor_subsets map.\n+void Packageifier::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8764ecc566413b4974e030c596193e75ff39f746",
      "in_reply_to_id": 1082468542,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a comment to visit()",
      "created_at": "2023-01-30T14:51:52Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090727252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090727252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090728980",
      "pull_request_review_id": 1275271720,
      "id": 1090728980,
      "node_id": "PRRC_kwDOABII585BAzQU",
      "diff_hunk": "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    if (!IsSorted(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+    if (!HasNoConflicts(txns)) return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "4c4cea3856b1fa2a50de25847b19ae90c4263916",
      "in_reply_to_id": 1082421842,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed it to `IsConsistent()`. I didn't want to change to `HasConflicts()` because that would require changing the function implementation to be opposite, and the `Is*` pattern seems to be good for readability",
      "created_at": "2023-01-30T14:53:10Z",
      "updated_at": "2023-01-30T14:54:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090728980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090728980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090746878",
      "pull_request_review_id": 1275349367,
      "id": 1090746878,
      "node_id": "PRRC_kwDOABII585BA3n-",
      "diff_hunk": "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "in_reply_to_id": 1084935931,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's the opposite - we avoid re-validating things now.\r\n\r\n> Consider everything, including the child, to be valid.\r\n\r\nOk, we can break this down. Let's split it into 2 types of scenarios: non-CPFP case and CPFP case. In the CPFP case, the parent needs the child in order to pass.\r\n\r\n(1) Non-CPFP case\r\n(1a) Before this commit\r\nInside this loop, **validate** parent. The parent passes and is submitted to the mempool.\r\nThen, **validate** child. The child passes and is submitted.\r\nAfter the loop, we quit because `txns_package_eval.empty()`.\r\nHow many times we validated something: 2\r\n\r\n(1b) After this commit\r\nInside this loop, **validate** parent. The parent passes and is submitted to the mempool.\r\nInside this loop, at this condition, `txns_package_eval.push_back(child)` and break.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({child})`.\r\nHow many times we validated something: 2\r\n\r\n(2) CPFP case\r\n(2a) Before this commit\r\nInside loop, **validate** parent. The parent fails due to too low fee. `txns_package_eval.push_back(parent)`.\r\nInside this loop, **validate** child. The child fails due to missing inputs. `txns_package_eval.push_back(child)`.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({parent, child})`.\r\nHow many times we validated something: 3\r\n\r\n(2b) After this commit\r\nInside loop, **validate** parent. The parent fails due to too low fee. `txns_package_eval.push_back(parent)`.\r\nInside this loop, at this condition, `txns_package_eval.push_back(child)` and break.\r\nAfter the loop, we **validate** using `AcceptPackageWrappingSingle({parent, child})`.\r\nHow many times we validated something: 2",
      "created_at": "2023-01-30T15:06:49Z",
      "updated_at": "2023-01-30T15:06:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1090746878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1090746878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091627600",
      "pull_request_review_id": 1276742818,
      "id": 1091627600,
      "node_id": "PRRC_kwDOABII585BEOpQ",
      "diff_hunk": "@@ -73,4 +76,41 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     * - txns is of reasonable size (e.g. below MAX_PACKAGE_COUNT) to limit recursion depth",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 38,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "132159cc6ae36da7697fcbb90bd5914e02a41386",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "132159cc6ae36da7697fcbb90bd5914e02a41386\r\nThis limit is never checked?",
      "created_at": "2023-01-31T08:58:15Z",
      "updated_at": "2023-01-31T08:58:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091627600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091627600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091678009",
      "pull_request_review_id": 1276817245,
      "id": 1091678009,
      "node_id": "PRRC_kwDOABII585BEa85",
      "diff_hunk": "@@ -1398,6 +1398,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n+            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+                Assume(tx == package.back());\n+                txns_package_eval.push_back(tx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "db6eed0cdfb8a90b54fee4955fd9b07d5fc1817b",
      "in_reply_to_id": 1084935931,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you for helping me understand this. I understand you are right now. ",
      "created_at": "2023-01-31T09:41:13Z",
      "updated_at": "2023-01-31T09:41:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091678009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091678009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091696901",
      "pull_request_review_id": 1276843630,
      "id": 1091696901,
      "node_id": "PRRC_kwDOABII585BEfkF",
      "diff_hunk": "@@ -1409,20 +1427,18 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // in package validation, because its fees should only be \"used\" once.\n                 assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n                 results_final.emplace(wtxid, single_res);\n+                packageified.Exclude(tx);\n             } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n                        single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n                 // Package validation policy only differs from individual policy in its evaluation\n                 // of feerate. For example, if a transaction fails here due to violation of a\n                 // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n+                // package. Tell the Packageifier that subsequent transactions depending on this one\n+                // should be skipped.\n                 quit_early = true;\n                 package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n+                packageified.Ban(tx);\n             } else {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "93e976d98726040edf4070175c46fdc504aabff5\r\nwhy not ban here?",
      "created_at": "2023-01-31T09:56:33Z",
      "updated_at": "2023-01-31T10:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091696901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091696901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091710042",
      "pull_request_review_id": 1276863562,
      "id": 1091710042,
      "node_id": "PRRC_kwDOABII585BEixa",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "93e976d98726040edf4070175c46fdc504aabff5\r\nDoes \"passed\" mean \"valid\" in this context?",
      "created_at": "2023-01-31T10:08:17Z",
      "updated_at": "2023-01-31T10:08:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091710042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091710042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091768545",
      "pull_request_review_id": 1276949724,
      "id": 1091768545,
      "node_id": "PRRC_kwDOABII585BExDh",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes",
      "created_at": "2023-01-31T11:00:29Z",
      "updated_at": "2023-01-31T11:00:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091768545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091768545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091783287",
      "pull_request_review_id": 1276972386,
      "id": 1091783287,
      "node_id": "PRRC_kwDOABII585BE0p3",
      "diff_hunk": "@@ -73,4 +76,41 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+class Packageifier\n+{\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     * - txns is of reasonable size (e.g. below MAX_PACKAGE_COUNT) to limit recursion depth",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 38,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "132159cc6ae36da7697fcbb90bd5914e02a41386",
      "in_reply_to_id": 1091627600,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "meant to be a precondition, so the caller should check it beforehand",
      "created_at": "2023-01-31T11:15:44Z",
      "updated_at": "2023-01-31T11:19:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091783287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091783287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091786482",
      "pull_request_review_id": 1276972386,
      "id": 1091786482,
      "node_id": "PRRC_kwDOABII585BE1by",
      "diff_hunk": "@@ -1409,20 +1427,18 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // in package validation, because its fees should only be \"used\" once.\n                 assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n                 results_final.emplace(wtxid, single_res);\n+                packageified.Exclude(tx);\n             } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n                        single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n                 // Package validation policy only differs from individual policy in its evaluation\n                 // of feerate. For example, if a transaction fails here due to violation of a\n                 // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n+                // package. Tell the Packageifier that subsequent transactions depending on this one\n+                // should be skipped.\n                 quit_early = true;\n                 package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n                 individual_results_nonfinal.emplace(wtxid, single_res);\n+                packageified.Ban(tx);\n             } else {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091696901,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here, the tx failed for missing inputs or policy (i.e. possibly too low fee), so there is a chance of it becoming valid if later validated as a package.",
      "created_at": "2023-01-31T11:18:56Z",
      "updated_at": "2023-01-31T11:19:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091786482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091786482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091805721",
      "pull_request_review_id": 1277003729,
      "id": 1091805721,
      "node_id": "PRRC_kwDOABII585BE6IZ",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can't it be empty if the child is invalid? (`if (!subpackage) {` etc)",
      "created_at": "2023-01-31T11:37:05Z",
      "updated_at": "2023-01-31T11:37:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091805721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091805721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091824305",
      "pull_request_review_id": 1277030536,
      "id": 1091824305,
      "node_id": "PRRC_kwDOABII585BE-qx",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`subpackage` has type `std::optional<std::vector<CTransactionRef>>`, so `!subpackage` means it is `std::nullopt`. empty vector means all transactions have been excluded.",
      "created_at": "2023-01-31T11:56:32Z",
      "updated_at": "2023-01-31T11:57:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091824305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091824305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091853962",
      "pull_request_review_id": 1277074727,
      "id": 1091853962,
      "node_id": "PRRC_kwDOABII585BFF6K",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm thinking about the following:\r\n- two transactions\r\n- `Ban(parent)`\r\n- `if (!subpackage) {` on the child iteration\r\n- `txns_package_eval.empty()` but nothing is \"valid\" (if that's what you mean by passed)\r\n\r\nMaybe you meant \"when `quit_early` is false, then [...]\" but I'm not sure.",
      "created_at": "2023-01-31T12:26:45Z",
      "updated_at": "2023-01-31T12:26:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1091853962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1091853962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093055411",
      "pull_request_review_id": 1278870652,
      "id": 1093055411,
      "node_id": "PRRC_kwDOABII585BJrOz",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In that case, `if (!subpackage) {` hits on the child iteration, and its result is prefilled with the \"missing inputs\" failure. And then we have `!txns_package_eval`, not `txns_package_eval.empty()`.",
      "created_at": "2023-02-01T10:47:16Z",
      "updated_at": "2023-02-01T10:47:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093055411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093055411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093057032",
      "pull_request_review_id": 1278872989,
      "id": 1093057032,
      "node_id": "PRRC_kwDOABII585BJroI",
      "diff_hunk": "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Noting that we can remove the missing inputs condition from here, since we are validating subpackages now and nobody should have missing inputs unless there is a transaction missing",
      "created_at": "2023-02-01T10:48:45Z",
      "updated_at": "2023-02-01T10:48:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093057032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093057032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093096405",
      "pull_request_review_id": 1278930308,
      "id": 1093096405,
      "node_id": "PRRC_kwDOABII585BJ1PV",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">And then we have `!txns_package_eval`,\r\n\r\nSee the commit I'm referring to, `!txns_package_eval` is impossible there. I know that this inaccuracy goes away in the next commit, but w.r.t. 93e976d98726040edf4070175c46fdc504aabff5 this comment seems incorrect.",
      "created_at": "2023-02-01T11:28:08Z",
      "updated_at": "2023-02-01T11:28:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093096405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093096405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093134465",
      "pull_request_review_id": 1278985853,
      "id": 1093134465,
      "node_id": "PRRC_kwDOABII585BJ-iB",
      "diff_hunk": "@@ -1432,6 +1448,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Quit early because package validation won't change the result or the entire package has\n     // already been submitted.\n+    // If txns_package_eval is empty, all transactions have already passed.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "93e976d98726040edf4070175c46fdc504aabff5",
      "in_reply_to_id": 1091710042,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I see. I can move this comment to the last commit.",
      "created_at": "2023-02-01T12:08:05Z",
      "updated_at": "2023-02-01T12:08:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1093134465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093134465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136210879",
      "pull_request_review_id": 1340287122,
      "id": 1136210879,
      "node_id": "PRRC_kwDOABII585DuTO_",
      "diff_hunk": "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,",
      "path": "src/policy/packages.cpp",
      "position": 74,
      "original_position": 65,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "4a4ae2f12837f3abe93a67bd490213f5a9e82d76",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is just being moved here and I don't think this can overflow in practice, but the init value should be `int64_t{0}`, so maybe it would make sense to fix this somewhere within this PR. (searched the rest of the codebase after https://github.com/bitcoin/bitcoin/pull/27021#discussion_r1136136446).",
      "created_at": "2023-03-14T21:11:47Z",
      "updated_at": "2023-03-14T21:11:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1136210879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136210879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1142230795",
      "pull_request_review_id": 1348711897,
      "id": 1142230795,
      "node_id": "PRRC_kwDOABII585EFQ8L",
      "diff_hunk": "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,",
      "path": "src/policy/packages.cpp",
      "position": 74,
      "original_position": 65,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "4a4ae2f12837f3abe93a67bd490213f5a9e82d76",
      "in_reply_to_id": 1136210879,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah thanks!",
      "created_at": "2023-03-20T14:44:17Z",
      "updated_at": "2023-03-20T14:44:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1142230795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1142230795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182761583",
      "pull_request_review_id": 1262442548,
      "id": 1182761583,
      "node_id": "PRRC_kwDOABII585Gf4Jv",
      "diff_hunk": "@@ -39,6 +39,30 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "path": "src/test/txpackage_tests.cpp",
      "position": 29,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this should assert that package is non-empty",
      "created_at": "2023-05-02T16:10:58Z",
      "updated_at": "2023-05-02T16:46:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182761583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182761583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182768590",
      "pull_request_review_id": 1262442548,
      "id": 1182768590,
      "node_id": "PRRC_kwDOABII585Gf53O",
      "diff_hunk": "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\r\n```",
      "created_at": "2023-05-02T16:17:37Z",
      "updated_at": "2023-05-02T16:46:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182768590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182768590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182797698",
      "pull_request_review_id": 1262442548,
      "id": 1182797698,
      "node_id": "PRRC_kwDOABII585GgA-C",
      "diff_hunk": "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), 1);",
      "path": "src/test/txpackage_tests.cpp",
      "position": 192,
      "original_position": 105,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ordering between `package[i]` and `packageified.Txns()[i]` doesn't seem to be stable? The above shuffle is only \"undone\" by sorting by number of in-package ancestors when constructing the `AncestorPackage`, but of course all parents have the same value.",
      "created_at": "2023-05-02T16:45:11Z",
      "updated_at": "2023-05-02T16:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182797698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182797698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182968218",
      "pull_request_review_id": 1409760020,
      "id": 1182968218,
      "node_id": "PRRC_kwDOABII585Ggqma",
      "diff_hunk": "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "08a07c348d70907951a9225853976f9486665246",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "under what situations does the \"representative tx\" not get filled, and why is `TX_MISSING_INPUTS` the right value to set?",
      "created_at": "2023-05-02T19:30:26Z",
      "updated_at": "2023-05-02T19:30:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1182968218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1182968218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183794878",
      "pull_request_review_id": 1411070467,
      "id": 1183794878,
      "node_id": "PRRC_kwDOABII585Gj0a-",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "path": "src/test/fuzz/ancestorpackage.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hmm I think the fuzzer was smart enough to give a coin with the same hash as the txid of a constructed transaction below, built on a different set of ancestors...\r\n\r\nI think hashing these bytes would defeat this since it can't generate a valid tx with that txid?",
      "created_at": "2023-05-03T14:46:47Z",
      "updated_at": "2023-05-03T14:46:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1183794878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183794878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1185280732",
      "pull_request_review_id": 1413526891,
      "id": 1185280732,
      "node_id": "PRRC_kwDOABII585GpfLc",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "path": "src/test/fuzz/ancestorpackage.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "in_reply_to_id": 1183794878,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or to be lazier, just set the initial utxos' prevout.n index to some impossibly high numbers to ever be generated",
      "created_at": "2023-05-04T17:00:18Z",
      "updated_at": "2023-05-04T17:00:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1185280732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1185280732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187734505",
      "pull_request_review_id": 1417261502,
      "id": 1187734505,
      "node_id": "PRRC_kwDOABII585Gy2Pp",
      "diff_hunk": "@@ -1478,42 +1482,55 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n                 // Unless we're quitting early, validate the child outside of this loop.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "dd9d4f6fe86826ef01932734cb108e174c53476e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this comment becomes a bit disconnected from the logic itself. ",
      "created_at": "2023-05-08T18:04:54Z",
      "updated_at": "2023-05-08T20:32:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187734505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187734505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187848024",
      "pull_request_review_id": 1417261502,
      "id": 1187848024,
      "node_id": "PRRC_kwDOABII585GzR9Y",
      "diff_hunk": "@@ -1382,49 +1382,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n     AncestorPackage packageified(package);\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!packageified.IsAncestorPackage()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know what this means, but kinda... odd that `AncestorPackage` can be `!IsAncestorPackage`",
      "created_at": "2023-05-08T20:09:22Z",
      "updated_at": "2023-05-08T20:32:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187848024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187848024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187856431",
      "pull_request_review_id": 1417261502,
      "id": 1187856431,
      "node_id": "PRRC_kwDOABII585GzUAv",
      "diff_hunk": "@@ -325,18 +324,11 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n \n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")",
      "path": "test/functional/rpc_packages.py",
      "position": 19,
      "original_position": 19,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should just leave this example in in the positive sense of it being accepted?",
      "created_at": "2023-05-08T20:16:35Z",
      "updated_at": "2023-05-08T20:32:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1187856431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1187856431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 335,
      "original_line": 335,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437947",
      "pull_request_review_id": 1421439448,
      "id": 1190437947,
      "node_id": "PRRC_kwDOABII585G9KQ7",
      "diff_hunk": "@@ -325,18 +324,11 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n \n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")",
      "path": "test/functional/rpc_packages.py",
      "position": 19,
      "original_position": 19,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": 1187856431,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Re-added",
      "created_at": "2023-05-10T22:12:26Z",
      "updated_at": "2023-05-10T22:12:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 335,
      "original_line": 335,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437970",
      "pull_request_review_id": 1421439477,
      "id": 1190437970,
      "node_id": "PRRC_kwDOABII585G9KRS",
      "diff_hunk": "@@ -1382,49 +1382,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n     AncestorPackage packageified(package);\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    if (!packageified.IsAncestorPackage()) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": 1187848024,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah. Added some docs to the class (also mentioned BIP331) so maybe it's more clear? I used to call it `Packageifier` because it can potentially build a package out of any random list of transactions. But then it's weird because we packageify a `Package`. Open to naming improvements 😅 ",
      "created_at": "2023-05-10T22:12:28Z",
      "updated_at": "2023-05-10T22:12:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190437970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190437970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438085",
      "pull_request_review_id": 1421439641,
      "id": 1190438085,
      "node_id": "PRRC_kwDOABII585G9KTF",
      "diff_hunk": "@@ -1478,42 +1482,55 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n                 // Unless we're quitting early, validate the child outside of this loop.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "dd9d4f6fe86826ef01932734cb108e174c53476e",
      "in_reply_to_id": 1187734505,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Elaborated on the comment, hopefully it's better now",
      "created_at": "2023-05-10T22:12:42Z",
      "updated_at": "2023-05-10T22:12:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438226",
      "pull_request_review_id": 1421439847,
      "id": 1190438226,
      "node_id": "PRRC_kwDOABII585G9KVS",
      "diff_hunk": "@@ -0,0 +1,52 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto outpoint{ConsumeDeserializable<COutPoint>(fuzzed_data_provider)}) available_coins.insert(*outpoint);",
      "path": "src/test/fuzz/ancestorpackage.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7fd7cc3502411a523c860400ac9e9a9b3991a872",
      "in_reply_to_id": 1183794878,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think hashing these bytes would defeat this since it can't generate a valid tx with that txid?\r\n\r\nDid this one, thanks 👍 ",
      "created_at": "2023-05-10T22:12:59Z",
      "updated_at": "2023-05-10T22:12:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438295",
      "pull_request_review_id": 1421439940,
      "id": 1190438295,
      "node_id": "PRRC_kwDOABII585G9KWX",
      "diff_hunk": "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "08a07c348d70907951a9225853976f9486665246",
      "in_reply_to_id": 1182968218,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Elaborated",
      "created_at": "2023-05-10T22:13:07Z",
      "updated_at": "2023-05-10T22:13:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438618",
      "pull_request_review_id": 1421440401,
      "id": 1190438618,
      "node_id": "PRRC_kwDOABII585G9Kba",
      "diff_hunk": "@@ -63,10 +87,121 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     }\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     PackageValidationState state_too_large;\n-    BOOST_CHECK(!CheckPackage(package_too_large, state_too_large));\n+    BOOST_CHECK(!IsPackageWellFormed(package_too_large, state_too_large, /*require_sorted=*/true));\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 99; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));\n+        package.push_back(MakeTransactionRef(child));\n+\n+        Package package_copy(package);\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        for (auto i{0}; i < 99; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), 1);",
      "path": "src/test/txpackage_tests.cpp",
      "position": 192,
      "original_position": 105,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": 1182797698,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to always use `package[i]`, and added a comment about this unstable sort",
      "created_at": "2023-05-10T22:13:42Z",
      "updated_at": "2023-05-10T22:13:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438675",
      "pull_request_review_id": 1421440493,
      "id": 1190438675,
      "node_id": "PRRC_kwDOABII585G9KcT",
      "diff_hunk": "@@ -39,6 +39,30 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "path": "src/test/txpackage_tests.cpp",
      "position": 29,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "aa16a46345fee6b6bbc4a7e103aed4c616ad1db8",
      "in_reply_to_id": 1182761583,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Aha, thanks!",
      "created_at": "2023-05-10T22:13:49Z",
      "updated_at": "2023-05-10T22:13:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1190438675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1190438675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191628983",
      "pull_request_review_id": 1423335249,
      "id": 1191628983,
      "node_id": "PRRC_kwDOABII585HBtC3",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 427,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CI Failure here:\r\n\r\n```\r\nC:/Users/ContainerAdministrator/AppData/Local/Temp/cirrus-ci-build/src/test/txpackage_tests.cpp(622): error: in \"txpackage_tests/package_submission_tests\": check GetVirtualTransactionSize(*tx_parent2) == 191 has failed [190 != 191]\r\n```\r\n\r\nI'm going to guess that this is because real signatures are being created, which can occasionally be smaller than 71 bytes, thus resulting in a tx that is one byte smaller. If the script type doesn't matter, I would suggest using taproot keypath spends since that has fixed size signatures. Otherwise these checks will need to account for possibly varying transaction sizes.",
      "created_at": "2023-05-11T19:56:00Z",
      "updated_at": "2023-05-11T19:56:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191628983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191628983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 622,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191631520",
      "pull_request_review_id": 1423338386,
      "id": 1191631520,
      "node_id": "PRRC_kwDOABII585HBtqg",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 427,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": 1191628983,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm fine if the magic number checks have a bit of wiggle room tbh, just leave a comment?",
      "created_at": "2023-05-11T19:57:56Z",
      "updated_at": "2023-05-11T19:57:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1191631520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1191631520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 622,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194127839",
      "pull_request_review_id": 1427012337,
      "id": 1194127839,
      "node_id": "PRRC_kwDOABII585HLPHf",
      "diff_hunk": "@@ -558,6 +558,18 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Multiple transaction acceptance for transactions guaranteed to be an ancestor package and a CPFP.\n+     * If only 1 transaction exists in subpackage, calls AcceptSingleTransaction() with adjusted\n+     * ATMPArgs to avoid additional package policy restrictions like PackageMempoolChecks() and\n+     * disabled RBF. Also creates a PackageMempoolAcceptResult wrapping the result.\n+     * If multiple transactions exist in subpackage, calls AcceptMultipleTransactions() with the\n+     * provided ATMPArgs. Additionally, if the \"representative tx\" is not present in the result,\n+     * fills it in with TX_MISSING_INPUTS.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "08a07c348d70907951a9225853976f9486665246",
      "in_reply_to_id": 1182968218,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "perfect ",
      "created_at": "2023-05-15T17:14:15Z",
      "updated_at": "2023-05-15T17:14:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194127839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194127839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194144678",
      "pull_request_review_id": 1427036930,
      "id": 1194144678,
      "node_id": "PRRC_kwDOABII585HLTOm",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <policy/packages.h>\n+\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+FUZZ_TARGET(ancestorpackage)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CTransactionRef> txns_in;\n+    // Avoid repeat coins, as they may cause transactions to conflict\n+    std::set<COutPoint> available_coins;\n+    for (auto i{0}; i < 100; ++i) {\n+        if (auto mtx{ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider)}) {",
      "path": "src/test/fuzz/ancestorpackage.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "35da289d977009b23b74af31d7190793162ef140",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "even more sensible than my suggestion :+1:  no issues running so far",
      "created_at": "2023-05-15T17:30:29Z",
      "updated_at": "2023-05-15T18:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194144678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194144678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194150250",
      "pull_request_review_id": 1427036930,
      "id": 1194150250,
      "node_id": "PRRC_kwDOABII585HLUlq",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 364,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ASCII :gem: needs connection between grandparent and child",
      "created_at": "2023-05-15T17:35:49Z",
      "updated_at": "2023-05-15T18:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1194150250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1194150250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 559,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1203944494",
      "pull_request_review_id": 1441602244,
      "id": 1203944494,
      "node_id": "PRRC_kwDOABII585Hwrwu",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 427,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": 1191628983,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to use T-T-T-Taproot for fixed size (thanks @achow101)",
      "created_at": "2023-05-24T11:30:40Z",
      "updated_at": "2023-05-24T11:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1203944494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1203944494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 622,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204580821",
      "pull_request_review_id": 1442479694,
      "id": 1204580821,
      "node_id": "PRRC_kwDOABII585HzHHV",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 427,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": 1191628983,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "grandparent still not fixed size :facepalm: edited the assertion to be on the multiple of 10. I think it worked this time.",
      "created_at": "2023-05-24T17:59:27Z",
      "updated_at": "2023-05-24T17:59:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204580821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204580821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 622,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204581045",
      "pull_request_review_id": 1442479901,
      "id": 1204581045,
      "node_id": "PRRC_kwDOABII585HzHK1",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 364,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": 1194150250,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-05-24T17:59:37Z",
      "updated_at": "2023-05-24T17:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204581045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204581045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 559,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204729225",
      "pull_request_review_id": 1442702738,
      "id": 1204729225,
      "node_id": "PRRC_kwDOABII585HzrWJ",
      "diff_hunk": "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{12000};\n+        const CAmount parent_value{10*COIN - parent_fee};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/121/112/ ?",
      "created_at": "2023-05-24T20:30:29Z",
      "updated_at": "2023-05-24T20:30:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204729225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204729225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204739973",
      "pull_request_review_id": 1442719846,
      "id": 1204739973,
      "node_id": "PRRC_kwDOABII585Hzt-F",
      "diff_hunk": "@@ -368,6 +545,100 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5649sat\n+        //        5649vB\n+        //     ^         ^\n+        //  parent1     parent2\n+        // 13223sat     13223sat\n+        //  191vB       191vB\n+        //       ^      ^\n+        //        child\n+        //       2424sat\n+        //        485vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5650};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{13223};\n+        const CAmount parent_value{10*COIN - 13223};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{2424};\n+        const CAmount child_value{last_value + 2*parent_value - child_fee};\n+        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\n+                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\n+                                                     /*input_height=*/102,\n+                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\n+                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\n+                                                     /*submit=*/false)};\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+        package_ppfc.push_back(tx_child);\n+\n+        // Magic Number Sanity Checks\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent), 5649);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 191);\n+        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 191);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 427,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f4e449254e41172b09a41ed9b2cc5c5fe3a5edca",
      "in_reply_to_id": 1191628983,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taproot coinbase outputs wen\r\n\r\nLGTM",
      "created_at": "2023-05-24T20:42:50Z",
      "updated_at": "2023-05-24T20:42:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204739973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204739973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 622,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204742880",
      "pull_request_review_id": 1442724105,
      "id": 1204742880,
      "node_id": "PRRC_kwDOABII585Hzurg",
      "diff_hunk": "@@ -368,6 +545,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 384,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "diamond keeps going \"out of sync\", maybe just have variable names that people can find? ",
      "created_at": "2023-05-24T20:45:58Z",
      "updated_at": "2023-05-24T20:46:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1204742880",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1204742880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 635,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219838215",
      "pull_request_review_id": 1465458909,
      "id": 1219838215,
      "node_id": "PRRC_kwDOABII585ItUEH",
      "diff_hunk": "@@ -325,17 +324,13 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n-\n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")\n-        # Chain of 3 transactions has too many generations\n+        self.log.info(\"Submitpackage with a 25-generation chain\")\n         chain_hex = [t[\"hex\"] for t in self.wallet.create_self_transfer_chain(chain_length=25)]\n-        assert_raises_rpc_error(-25, \"not-child-with-parents\", node.submitpackage, chain_hex)\n+        self.nodes[0].submitpackage(chain_hex)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 24,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How about actually checking the result here?",
      "created_at": "2023-06-06T15:15:12Z",
      "updated_at": "2023-06-11T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1219838215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1219838215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225867669",
      "pull_request_review_id": 1465458909,
      "id": 1225867669,
      "node_id": "PRRC_kwDOABII585JEUGV",
      "diff_hunk": "@@ -65,6 +52,30 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     return true;\n }\n \n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.",
      "path": "src/policy/packages.cpp",
      "position": 76,
      "original_position": 67,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "c9bf37de2ee5769bc462ed0c8c437e0d3d00a431",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I understand the rationale, but it seems dangerous to skip validation steps in special cases because of expected checks happening later in another scope (that's how I understand it). Such things can lead to nasty errors down the line.",
      "created_at": "2023-06-11T17:07:49Z",
      "updated_at": "2023-06-11T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225867669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225867669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225870352",
      "pull_request_review_id": 1465458909,
      "id": 1225870352,
      "node_id": "PRRC_kwDOABII585JEUwQ",
      "diff_hunk": "@@ -39,6 +39,31 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Context-free check that a package only contains a tx (the last tx in the package) with its\n+// ancestors. Not all of the tx's ancestors need to be present.\n+bool IsAncestorPackage(const Package& package)",
      "path": "src/test/txpackage_tests.cpp",
      "position": 29,
      "original_position": 6,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Kind of confusing and `grep` unfriendly that this test helper has the exact same name as that `Package` method. Maybe call it `TestAncestorPackage` or so?",
      "created_at": "2023-06-11T17:17:59Z",
      "updated_at": "2023-06-11T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225870352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225870352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225871000",
      "pull_request_review_id": 1465458909,
      "id": 1225871000,
      "node_id": "PRRC_kwDOABII585JEU6Y",
      "diff_hunk": "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 26,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Developer notes say \"Class member variables have a `m_` prefix.\".",
      "created_at": "2023-06-11T17:20:21Z",
      "updated_at": "2023-06-11T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225871000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225871000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225898875",
      "pull_request_review_id": 1465458909,
      "id": 1225898875,
      "node_id": "PRRC_kwDOABII585JEbt7",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just checking the last tx doesn't guarantee this alone. Maybe mention here that this works because subpackages are being evaluated by themselves as well?",
      "created_at": "2023-06-11T19:02:13Z",
      "updated_at": "2023-06-11T19:07:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1225898875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1225898875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226035519",
      "pull_request_review_id": 1473964168,
      "id": 1226035519,
      "node_id": "PRRC_kwDOABII585JE9E_",
      "diff_hunk": "@@ -0,0 +1,11 @@\n+- A new RPC, `submitpackage`, has been added. It can be used to submit a list of raw hex\n+  transactions to the mempool to be evaluated as a package using consensus and mempool policy rules,\n+including package CPFP (allowing a child to bump a parent below the mempool minimum feerate).\n+Warning: successful submission does not mean the transactions will propagate throughout the network,\n+as package relay is not used.\n+\n+    - Not all features are available. For example, RBF is not supported and the package is limited\n+      to a child with its unconfirmed parents. Refer to doc/policy/packages.md for more details on\n+      package policies and limitations.\n+\n+    - This RPC is experimental. Its interface may change.",
      "path": "doc/release-notes-27609.md",
      "position": null,
      "original_position": 11,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f6b928b1241de5b0cfdcfd0cebb3d56ef8fe8ce4",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably mark it as EXPERIMENTAL in the rpc docs -- see \"sendall\" eg in wallet/rpc/spend.cpp\r\n\r\nNot really sure this should be advertised in the release notes at this stage at all, though.",
      "created_at": "2023-06-12T02:52:17Z",
      "updated_at": "2023-06-12T05:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226035519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226035519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226063546",
      "pull_request_review_id": 1473964168,
      "id": 1226063546,
      "node_id": "PRRC_kwDOABII585JFD66",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This check doesn't feel like it makes sense to me -- it should either be unnecessary (because dealing with subpackages first takes care of it), or else it seems insufficient (because a grandparent might be paying for parent and child, and child paying for parent; but grandparents alone are good enough, but after they're accepted parent and child combined aren't good enough).",
      "created_at": "2023-06-12T04:11:44Z",
      "updated_at": "2023-06-12T05:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226063546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226063546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226067022",
      "pull_request_review_id": 1473964168,
      "id": 1226067022,
      "node_id": "PRRC_kwDOABII585JFExO",
      "diff_hunk": "@@ -1483,42 +1487,57 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n-                // Unless we're quitting early, validate the child outside of this loop.\n+                // Validate the child outside of this loop. We will consolidate results_final,\n+                // individual_results_nonfinal, and the result of validating the last transaction's\n+                // subpackage into a single PackageMempoolAcceptResult.\n                 break;\n             }\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the AncestorPackage that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);",
      "path": "src/validation.cpp",
      "position": 378,
      "original_position": 76,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "617fe7092e4fd7c987e04808adf97e169dc24f47",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I worry that this approach can cause O(n^2) validation costs in some way, if you've got n txs and end up doing work that results in multiple soft-rejects for each tx.\r\n\r\nI wonder if it wouldn't be better to do something more like:\r\n\r\n * topologically sort the package\r\n * accept each tx in order into a mem-pond -- a special temporary mini pool just for this package, that enforces consensus rules, but doesn't care about minimum fees\r\n * any txs that weren't valid obviously fail at this point and are dropped, along with any descendants\r\n * for everything that made it into the pond, consider moving it into the mempool proper, applying the cpfp logic and possibly rbf logic that the mempond didn't enforce\r\n\r\nIdeally, I think we'd want to:\r\n\r\n 1) lookup utxos (slow, but unavoidable)\r\n 2) drop anything that can't possibly pay sufficient fees\r\n 3) run script validation in topological order (slow, don't do it if parents failed, only do it once)\r\n 4) do final fee rate analysis (can't do this until we know what txs are actually valid)\r\n\r\nOne way to preserve the current approach while reducing the risk of O(n^2) behaviour might be to move the \"retry\" behaviour out of validation -- ie:\r\n\r\n * do PreChecks on all the package txs (then you can calculate fees)\r\n * topologically sort the txs\r\n * for each tx:\r\n   * high enough fee rate? try accepting it.\r\n     * failure: immediately return.\r\n     * success: remove that tx and its ancestors from the package, marking them as succeeded; recalculate fee rates for descendants\r\n * release mempool.cs\r\n\r\nThen net_processing or rpc can still retry the remaining txs if there was a failure, but can decide to only do that after processing a tx from every other peer, eg.",
      "created_at": "2023-06-12T04:21:30Z",
      "updated_at": "2023-06-12T05:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226067022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1539,
      "original_line": 1539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226708783",
      "pull_request_review_id": 1474989652,
      "id": 1226708783,
      "node_id": "PRRC_kwDOABII585JHhcv",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC circles back to the diamond problem: https://github.com/bitcoin/bitcoin/pull/27609#issuecomment-1542695316\r\n\r\nBoth the parents should contribute to the grandparent being included, but in ancestor packages we can't take that into account(without a common descendant). Instead the whole ancestor package is included, even though the child is likely to be immediately evicted.",
      "created_at": "2023-06-12T13:55:25Z",
      "updated_at": "2023-06-12T13:55:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226708783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226708783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226752830",
      "pull_request_review_id": 1475058004,
      "id": 1226752830,
      "node_id": "PRRC_kwDOABII585JHsM-",
      "diff_hunk": "@@ -1327,60 +1355,49 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n-PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackageWrappingSingle(const std::vector<CTransactionRef>& subpackage, ATMPArgs& args)\n+{\n+    ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    AssertLockHeld(::cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    if (subpackage.size() > 1) {\n+        const auto& rep_wtxid{subpackage.back()->GetWitnessHash()};\n+        auto subpackage_result{AcceptMultipleTransactions(subpackage, args)};\n+        if (subpackage_result.m_tx_results.count(rep_wtxid) == 0) {\n+            TxValidationState tx_state_inferred;\n+            tx_state_inferred.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"invalid-tx-dependency\");\n+            subpackage_result.m_tx_results.emplace(rep_wtxid, MempoolAcceptResult::Failure(tx_state_inferred));\n+        }\n+        return subpackage_result;\n+    }\n+    const auto& tx = subpackage.front();\n+    const auto single_res = AcceptSingleTransaction(tx, single_args);\n+    PackageValidationState package_state_wrapped;\n+    if (single_res.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n+        package_state_wrapped.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+    }\n+    return PackageMempoolAcceptResult(package_state_wrapped, {{tx->GetWitnessHash(), single_res}});\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptAncestorPackage(const Package& package, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     // Used if returning a PackageMempoolAcceptResult directly from this function.\n     PackageValidationState package_state_quit_early;\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!CheckPackage(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+    if (!package.empty() && !IsPackageWellFormed(package, package_state_quit_early, /*require_sorted=*/false)) {\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-\n-    // IsChildWithParents() guarantees the package is > 1 transactions.\n-    assert(package.size() > 1);\n-    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n-    // be sorted, so the last transaction is the child.\n-    const auto& child = package.back();\n-    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n-    std::transform(package.cbegin(), package.cend() - 1,\n-                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n-                   [](const auto& tx) { return tx->GetHash(); });\n-\n-    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n-    // way to verify this is to look up the child's inputs in our current coins view (not including\n-    // mempool), and enforce that all parents not present in the package be available at chain tip.\n-    // Since this check can bring new coins into the coins cache, keep track of these coins and\n-    // uncache them if we don't end up submitting this package to the mempool.\n-    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n-    for (const auto& input : child->vin) {\n-        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n-            args.m_coins_to_uncache.push_back(input.prevout);\n-        }\n-    }\n-    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n-    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n-    // require inputs to be confirmed if they aren't in the package.\n-    m_view.SetBackend(m_active_chainstate.CoinsTip());\n-    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n-         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n-    };\n-    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n-        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+    AncestorPackage packageified(package);\n+    if (!packageified.IsAncestorPackage()) {\n+        package_state_quit_early.Invalid(PackageValidationResult::PCKG_POLICY, \"not-ancestor-package\");\n         return PackageMempoolAcceptResult(package_state_quit_early, {});\n     }\n-    // Protect against bugs where we pull more inputs from disk that miss being added to\n-    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n-    m_view.SetBackend(m_dummy);\n+    const auto& child = package.back();\n+    const auto child_subpackage = packageified.GetAncestorSet(child);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 153,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unused",
      "created_at": "2023-06-12T14:20:02Z",
      "updated_at": "2023-06-12T19:44:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226752830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226752830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226794309",
      "pull_request_review_id": 1475058004,
      "id": 1226794309,
      "node_id": "PRRC_kwDOABII585JH2VF",
      "diff_hunk": "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "in_reply_to_id": 1093057032,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is true?\r\n\r\nWe're only returning `TxValidationResult::TX_MEMPOOL_POLICY` for package size of 1(which becomes a Single Accept), so and subsequent subpackage relying on this prior tx will infer a result of `TX_MISSING_INPUTS`, `invalid-tx-dependency` in `AcceptPackageWrappingSingle`.\r\n\r\nWondering if it might be worth it to have a specific `TxValidationResult` that is precisely for the reasons that we may allow re-evaluation(early-ish abort due to low (package) feerate), and no others. Would this make reasoning about DoS easier?",
      "created_at": "2023-06-12T14:45:57Z",
      "updated_at": "2023-06-12T19:44:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226794309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1226794309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227463946",
      "pull_request_review_id": 1476153957,
      "id": 1227463946,
      "node_id": "PRRC_kwDOABII585JKZ0K",
      "diff_hunk": "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});\n-\n-    // All transactions in the package must be a parent of the last transaction. This is just an\n-    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n-    if (!IsChildWithParents(package)) {",
      "path": "src/validation.cpp",
      "position": 165,
      "original_position": 30,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`IsChildWithParents()` is unused after this outside of tests - can we remove it?",
      "created_at": "2023-06-13T02:50:20Z",
      "updated_at": "2023-06-13T16:25:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227463946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227463946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1343,
      "original_line": 1343,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227472166",
      "pull_request_review_id": 1476165906,
      "id": 1227472166,
      "node_id": "PRRC_kwDOABII585JKb0m",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this needs a diamond, even.\r\n\r\nFor example: mempool is evicting below 10sat/vb, grandparent is A at 3300sat, 100vb (33sat/vb); parent is B spending A, at 700sat, 200vb (3.5sat/vb), child is C, spending B at 2000 sat, 100vb (20sat/vb). If you accept A first, then B alone is still below the eviction threshold, but so is B+C (2700sat, 300vb 9sat/vb), even though C is doing cpfp here.",
      "created_at": "2023-06-13T03:07:09Z",
      "updated_at": "2023-06-13T03:07:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227472166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227472166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227953145",
      "pull_request_review_id": 1476897704,
      "id": 1227953145,
      "node_id": "PRRC_kwDOABII585JMRP5",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns Right, this is the example I thought of as well. But I don't understand why you think the check is unnecessary. From my understanding, this is the point where the subpackage A+B would fail then so I think it is necessary. It just depends on the fact that the function is called with each subpackage.",
      "created_at": "2023-06-13T11:13:57Z",
      "updated_at": "2023-06-13T11:13:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1227953145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1227953145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228135411",
      "pull_request_review_id": 1477181329,
      "id": 1228135411,
      "node_id": "PRRC_kwDOABII585JM9vz",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand what this scenario has to do with this case. A will be accepted, then B rejected, then B+C rejected, all for having package feerates lower than 10 sat/vbyte.",
      "created_at": "2023-06-13T13:28:28Z",
      "updated_at": "2023-06-13T13:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228135411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228135411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228287010",
      "pull_request_review_id": 1476153957,
      "id": 1228287010,
      "node_id": "PRRC_kwDOABII585JNiwi",
      "diff_hunk": "@@ -1387,49 +1387,17 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n \n     // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n     // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n-\n     // Context-free package checks.\n-    if (!IsPackageWellFormed(package, package_state_quit_early)) return PackageMempoolAcceptResult(package_state_quit_early, {});",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "after c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3, the `packages.md` explanation \"Packages must be child-with-unconfirmed-parents packages.\" is out of date. It would be good to document the definition of an \"ancestor package\" there instead.",
      "created_at": "2023-06-13T15:02:40Z",
      "updated_at": "2023-06-13T16:25:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228287010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228287010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1392,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228398085",
      "pull_request_review_id": 1476153957,
      "id": 1228398085,
      "node_id": "PRRC_kwDOABII585JN94F",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it's unnecessary - the diamond package would be accepted if we remove this check, the subpackage algorithm doesn't help with this. However, I'm also not sure if  it's sufficient - e.g. what if we'd add another \"grandchild\" to the child of the diamond package, with a feerate slightly above the previous package feerate (e.g. 5.1 sat/vB). Then this check wouldn't fail anymore, but the descendant feerate of the child (i.e. the combined fees of the child and the grandchild) could be below the minfeerate, so the child/grandchild would get evicted right after submission?",
      "created_at": "2023-06-13T16:21:06Z",
      "updated_at": "2023-06-13T16:25:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1228398085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1228398085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229432536",
      "pull_request_review_id": 1479143649,
      "id": 1229432536,
      "node_id": "PRRC_kwDOABII585JR6bY",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The A <- B <- C example is handled without the diamond check, yes. Accept A, reject B, reject B+C. I'm pretty sure the code on master would do this if you removed the child-with-parents requirement.\r\n\r\nThe case in the unit test isn't handled by validating subpackages, no.\r\nI agree the \"no parent pay for child\" rule is not enough in some cases, and is too restrictive in others.\r\n\r\nFor example, let's say the minfeerate is 2sat/vB:\r\n\r\n```\r\nA1      A2                 (both 1sat/vB)\r\n  \\    /  \\\r\n    B1     B2              (both 3.5sat/vB)\r\n      \\   /\r\n        C                  (1sat/vB)\r\n```\r\nIdeally we take all except C. \r\nWe reject A1, reject A2, reject A1+A2+B1, accept A2+B2, reject A1+B1+C.\r\nIt would be nice if, while considering A1+B1+C, we are again willing to take a subset. Or if we were to try another order or operations, we could reject A1, reject A2, accept A2+B2, accept A1+B1, reject C.\r\nBut the logic for these two strategies is essentially \"try every possible subset.\"\r\nFor this example, C actually can be any tx we shouldn't accept, e.g. one with an invalid signature.\r\n\r\nPerhaps one way to generalize this is that, within an ancestor package, we should be able to accept a subset. But unless we try every subset, it seems there's always a way to rearrange a package or add a tx to make us reject part of it. V3 world has fewer possibilities but still feels a bit intractable.\r\n\r\nMaybe we can brainstorm a way to rearrange which checks we do when. Like https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022. Perhaps try everything without feerate checks, eliminate invalid ones, then do feerate analysis. But one transaction could replace transactions in the mempool, then affecting the ancestor set of another transaction in the package...\r\n\r\nWe can do our best to have the sender-side logic give a good sort. And if a sender is deliberately crafting packages that we'll reject, we address that by taking care not to cache rejections too aggressively. e.g. here we'd want to cache the A1+A2+B1 rejection, but be willing to retry A1+B1.",
      "created_at": "2023-06-14T11:17:36Z",
      "updated_at": "2023-06-14T11:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1229432536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229432536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230174007",
      "pull_request_review_id": 1480312972,
      "id": 1230174007,
      "node_id": "PRRC_kwDOABII585JUvc3",
      "diff_hunk": "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 7e25e002100f57d69a967f475eb484a8637d9dcb \"[unit test] parent pay for child is not allowed\"\r\n\r\nThe magic numbers in this test were bothering me, so here's a diff that drops most of them. It refactors `CreateValidMempoolTransaction` again to have a function `CreateValidTransaction` that just creates a transaction. This can take a feerate and it will deduct the fee from one of the outputs. This test is then changed to have target feerates for each of the transactions that are all relative to `minfeerate`.\r\n\r\n```diff\r\ndiff --git a/src/test/txpackage_tests.cpp b/src/test/txpackage_tests.cpp\r\nindex 1e00a75a79..1d480eedad 100644\r\n--- a/src/test/txpackage_tests.cpp\r\n+++ b/src/test/txpackage_tests.cpp\r\n@@ -378,16 +378,13 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\r\n         // Diamond shape:\r\n         //\r\n         //     grandparent\r\n-        //       5679sat\r\n-        //        5676vB\r\n+        //       minfr/5\r\n         //     ^    ^    ^\r\n         //  parent1 |   parent2\r\n-        // 12000sat |  12000sat\r\n-        //  112vB   |   112vB\r\n+        // minfr*25 |  minfr*25\r\n         //       ^  |  ^\r\n         //        child\r\n-        //       2424sat\r\n-        //        959vB\r\n+        //       minfr - 0.05 s/vB\r\n         //\r\n         // grandparent is below minfeerate\r\n         // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\r\n@@ -395,71 +392,72 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\r\n         // child has a feerate just below minfeerate\r\n         // {grandparent + parent1 + parent2 + child} is above minfeerate\r\n         // All transactions should be rejected.\r\n-        const CAmount grandparent_fee{5679};\r\n+        const CFeeRate grandparent_feerate{minfeerate.GetFeePerK() / 5};\r\n         std::vector<CTransactionRef> grandparent_input_txns;\r\n         std::vector<COutPoint> grandparent_inputs;\r\n         for (auto i{1}; i < 50; ++i) {\r\n             grandparent_input_txns.push_back(m_coinbase_txns[i]);\r\n             grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\r\n         }\r\n-        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\r\n-        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\r\n-                                                           /*inputs=*/grandparent_inputs,\r\n-                                                           /*input_height=*/102,\r\n-                                                           /*input_signing_keys=*/{coinbaseKey},\r\n-                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\r\n-                                                                        CTxOut{last_value, parent_locking_script}},\r\n-                                                           /*submit=*/false)};\r\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN;\r\n+        auto [mtx_grandparent, grandparent_fee] = CreateValidTransaction(/*input_transactions=*/grandparent_input_txns,\r\n+                                                    /*inputs=*/grandparent_inputs,\r\n+                                                    /*input_height=*/102,\r\n+                                                    /*input_signing_keys=*/{coinbaseKey},\r\n+                                                    /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\r\n+                                                                 CTxOut{last_value, parent_locking_script}},\r\n+                                                    /*feerate=*/grandparent_feerate,\r\n+                                                    /*fee_output=*/2);\r\n         CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\r\n         package_ppfc.push_back(tx_grandparent);\r\n \r\n-        const CAmount parent_fee{12000};\r\n-        const CAmount parent_value{10*COIN - parent_fee};\r\n-        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\r\n-                                                       /*input_height=*/102,\r\n-                                                       /*input_signing_key=*/parent_key,\r\n-                                                       /*output_destination=*/child_locking_script,\r\n-                                                       /*output_amount=*/parent_value, /*submit=*/false)};\r\n+        const CFeeRate parent_feerate{minfeerate.GetFeePerK() * 25};\r\n+        const CAmount parent_value{10*COIN};\r\n+        auto [mtx_parent1, parent_fee1] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent},\r\n+                                                /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 0}},\r\n+                                                /*input_height=*/102,\r\n+                                                /*input_signing_keys=*/{parent_key},\r\n+                                                /*outputs=*/{CTxOut{parent_value, child_locking_script}},\r\n+                                                /*feerate=*/parent_feerate,\r\n+                                                /*fee_output=*/0);\r\n         CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\r\n         package_ppfc.push_back(tx_parent1);\r\n-        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\r\n-                                                       /*input_height=*/102,\r\n-                                                       /*input_signing_key=*/parent_key,\r\n-                                                       /*output_destination=*/child_locking_script,\r\n-                                                       /*output_amount=*/parent_value, /*submit=*/false)};\r\n+        auto [mtx_parent2, parent_fee2] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent},\r\n+                                                /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 1}},\r\n+                                                /*input_height=*/102,\r\n+                                                /*input_signing_keys=*/{parent_key},\r\n+                                                /*outputs=*/{CTxOut{parent_value, child_locking_script}},\r\n+                                                /*feerate=*/parent_feerate,\r\n+                                                /*fee_output=*/0);\r\n         CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\r\n         package_ppfc.push_back(tx_parent2);\r\n \r\n \r\n-        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};\r\n-        const CAmount child_value{last_value + 2*parent_value - child_fee};\r\n-        auto mtx_child{CreateValidMempoolTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\r\n-                                                     /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\r\n-                                                     /*input_height=*/102,\r\n-                                                     /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\r\n-                                                     /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\r\n-                                                     /*submit=*/false)};\r\n+        const CFeeRate child_feerate{minfeerate.GetFeePerK() - 50};\r\n+        const CAmount child_value{last_value + 2*parent_value};\r\n+        auto [mtx_child, child_fee] = CreateValidTransaction(/*input_transactions=*/{tx_grandparent, tx_parent1, tx_parent2},\r\n+                                              /*inputs=*/{COutPoint{tx_grandparent->GetHash(), 2}, COutPoint{tx_parent1->GetHash(), 0}, COutPoint{tx_parent2->GetHash(), 0}},\r\n+                                              /*input_height=*/102,\r\n+                                              /*input_signing_keys=*/{parent_key, child_key, grandchild_key},\r\n+                                              /*outputs=*/{CTxOut{child_value, grandchild_locking_script}},\r\n+                                              /*feerate=*/child_feerate,\r\n+                                              /*fee_output=*/0);\r\n         CTransactionRef tx_child = MakeTransactionRef(mtx_child);\r\n         package_ppfc.push_back(tx_child);\r\n \r\n-        // Magic Number Sanity Checks\r\n-        // A little bit of wiggle room because the signature spending the coinbase is not fixed size.\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_grandparent) / 10, 567);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent1), 112);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_parent2), 112);\r\n-        BOOST_CHECK_EQUAL(GetVirtualTransactionSize(*tx_child), 227);\r\n         // Neither parent can pay for the grandparent by itself\r\n-        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1)) > grandparent_fee + parent_fee);\r\n-        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent2)) > grandparent_fee + parent_fee);\r\n+        BOOST_CHECK_EQUAL(parent_fee1, parent_fee2);\r\n+        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1)) > grandparent_fee + parent_fee1);\r\n+        BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent2)) > grandparent_fee + parent_fee1);\r\n         const auto parents_vsize = GetVirtualTransactionSize(*tx_grandparent) + GetVirtualTransactionSize(*tx_parent1) + GetVirtualTransactionSize(*tx_parent2);\r\n         // Combined, they can pay for the grandparent\r\n-        BOOST_CHECK(minfeerate.GetFee(parents_vsize) <= grandparent_fee + 2 * parent_fee);\r\n+        BOOST_CHECK(minfeerate.GetFee(parents_vsize) <= grandparent_fee + 2 * parent_fee1);\r\n         const auto total_vsize = parents_vsize + GetVirtualTransactionSize(*tx_child);\r\n         BOOST_CHECK(minfeerate.GetFee(GetVirtualTransactionSize(*tx_child)) > child_fee);\r\n         // The total package is above feerate, but mostly because of the 2 parents\r\n-        BOOST_CHECK(minfeerate.GetFee(total_vsize) <= grandparent_fee + 2 * parent_fee + child_fee);\r\n+        BOOST_CHECK(minfeerate.GetFee(total_vsize) <= grandparent_fee + 2 * parent_fee1 + child_fee);\r\n         // Child feerate is less than the package feerate\r\n-        BOOST_CHECK(CFeeRate(child_fee, GetVirtualTransactionSize(*tx_child)) < CFeeRate(grandparent_fee + 2 * parent_fee + child_fee, total_vsize));\r\n+        BOOST_CHECK(CFeeRate(child_fee, GetVirtualTransactionSize(*tx_child)) < CFeeRate(grandparent_fee + 2 * parent_fee1 + child_fee, total_vsize));\r\n \r\n         const auto result_ppfc = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_ppfc, /*test_accept=*/false);\r\n         BOOST_CHECK(result_ppfc.m_state.IsInvalid());\r\ndiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp\r\nindex 1ca69371b3..11b98cda49 100644\r\n--- a/src/test/util/setup_common.cpp\r\n+++ b/src/test/util/setup_common.cpp\r\n@@ -343,12 +343,13 @@ CBlock TestChain100Setup::CreateAndProcessBlock(\r\n }\r\n \r\n \r\n-CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n-                                                                     const std::vector<COutPoint>& inputs,\r\n-                                                                     int input_height,\r\n-                                                                     const std::vector<CKey>& input_signing_keys,\r\n-                                                                     const std::vector<CTxOut>& outputs,\r\n-                                                                     bool submit)\r\n+std::pair<CMutableTransaction, CAmount> TestChain100Setup::CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                                  const std::vector<COutPoint>& inputs,\r\n+                                                                                  int input_height,\r\n+                                                                                  const std::vector<CKey>& input_signing_keys,\r\n+                                                                                  const std::vector<CTxOut>& outputs,\r\n+                                                                                  const std::optional<CFeeRate>& feerate,\r\n+                                                                                  const std::optional<uint32_t>& fee_output)\r\n {\r\n     CMutableTransaction mempool_txn;\r\n     mempool_txn.vin.reserve(inputs.size());\r\n@@ -372,17 +373,57 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::\r\n     }\r\n     // Build Outpoint to Coin map for SignTransaction\r\n     std::map<COutPoint, Coin> input_coins;\r\n+    CAmount inputs_amount{0};\r\n     for (const auto& outpoint_to_spend : inputs) {\r\n         // - Use GetCoin to properly populate utxo_to_spend,\r\n         Coin utxo_to_spend;\r\n         assert(coins_cache.GetCoin(outpoint_to_spend, utxo_to_spend));\r\n         input_coins.insert({outpoint_to_spend, utxo_to_spend});\r\n+        inputs_amount += utxo_to_spend.out.nValue;\r\n     }\r\n     // - Default signature hashing type\r\n     int nHashType = SIGHASH_ALL;\r\n     std::map<int, bilingual_str> input_errors;\r\n     assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\r\n \r\n+    // Calculate fees paid\r\n+    CAmount current_fee = inputs_amount - std::accumulate(outputs.begin(), outputs.end(), CAmount(0),\r\n+        [](const CAmount& acc, const CTxOut& out) {\r\n+            return acc + out.nValue;\r\n+        });\r\n+\r\n+    // Deduct fees from fee_output to meet feerate if set\r\n+    if (feerate.has_value()) {\r\n+        assert(fee_output.has_value());\r\n+        assert(fee_output.value() < mempool_txn.vout.size());\r\n+\r\n+        CAmount target_fee = feerate.value().GetFee(GetVirtualTransactionSize(CTransaction{mempool_txn}));\r\n+        CAmount deduction = target_fee - current_fee;\r\n+\r\n+        if (deduction > 0) {\r\n+            // Only deduct fee if there's anything to deduct.\r\n+            // If the caller has put more fees than the target feerate, don't change the fee.\r\n+            mempool_txn.vout[fee_output.value()].nValue -= deduction;\r\n+\r\n+            // Re-sign since an output has changed\r\n+            input_errors.clear();\r\n+            assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\r\n+            current_fee = target_fee;\r\n+        }\r\n+    }\r\n+\r\n+    return {mempool_txn, current_fee};\r\n+}\r\n+\r\n+CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                     const std::vector<COutPoint>& inputs,\r\n+                                                                     int input_height,\r\n+                                                                     const std::vector<CKey>& input_signing_keys,\r\n+                                                                     const std::vector<CTxOut>& outputs,\r\n+                                                                     bool submit)\r\n+{\r\n+    CMutableTransaction mempool_txn = CreateValidTransaction(input_transactions, inputs, input_height, input_signing_keys, outputs).first;\r\n+\r\n     // If submit=true, add transaction to the mempool.\r\n     if (submit) {\r\n         LOCK(cs_main);\r\ndiff --git a/src/test/util/setup_common.h b/src/test/util/setup_common.h\r\nindex 106bee6b4b..6c15140ffa 100644\r\n--- a/src/test/util/setup_common.h\r\n+++ b/src/test/util/setup_common.h\r\n@@ -9,6 +9,7 @@\r\n #include <key.h>\r\n #include <node/caches.h>\r\n #include <node/context.h>\r\n+#include <policy/feerate.h>\r\n #include <primitives/transaction.h>\r\n #include <pubkey.h>\r\n #include <random.h>\r\n@@ -20,10 +21,10 @@\r\n #include <util/vector.h>\r\n \r\n #include <functional>\r\n+#include <optional>\r\n #include <type_traits>\r\n #include <vector>\r\n \r\n-class CFeeRate;\r\n class Chainstate;\r\n \r\n /** This is connected to the logger. Can be used to redirect logs to any other log */\r\n@@ -154,6 +155,27 @@ struct TestChain100Setup : public TestingSetup {\r\n     //! Mine a series of new blocks on the active chain.\r\n     void mineBlocks(int num_blocks);\r\n \r\n+    /**\r\n+     * Create a transaction, optionally setting the fee based on the feerate.\r\n+     * Note: The feerate may not be met exactly depending on whether the signatures can have different sizes.\r\n+     *\r\n+     * @param input_transactions   The transactions to spend\r\n+     * @param input_height         The height of the block that included the input transactions.\r\n+     * @param inputs               Outpoints with which to construct transaction vin.\r\n+     * @param input_signing_keys   The keys to spend the input transactions.\r\n+     * @param outputs              Transaction vout.\r\n+     * @param feerate              The feerate the transaction should pay.\r\n+     * @param fee_output           The index of the output to take the fee from.\r\n+     * @return The transaction and the fee it pays\r\n+     */\r\n+    std::pair<CMutableTransaction, CAmount> CreateValidTransaction(const std::vector<CTransactionRef>& input_transactions,\r\n+                                                                   const std::vector<COutPoint>& inputs,\r\n+                                                                   int input_height,\r\n+                                                                   const std::vector<CKey>& input_signing_keys,\r\n+                                                                   const std::vector<CTxOut>& outputs,\r\n+                                                                   const std::optional<CFeeRate>& feerate = std::nullopt,\r\n+                                                                   const std::optional<uint32_t>& fee_output = std::nullopt);\r\n+\r\n     /**\r\n      * Create a transaction and submit to the mempool.\r\n      *\r\n```",
      "created_at": "2023-06-14T21:10:28Z",
      "updated_at": "2023-06-14T22:27:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230174007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230174007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 652,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230192959",
      "pull_request_review_id": 1480312972,
      "id": 1230192959,
      "node_id": "PRRC_kwDOABII585JU0E_",
      "diff_hunk": "@@ -92,3 +91,92 @@ bool IsChildWithParents(const Package& package)\n     return std::all_of(package.cbegin(), package.cend() - 1,\n                        [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\n }\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, curr_tx is guaranteed to be in the ancestor_subsets map.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    if (ancestor_subsets.count(curr_txid) > 0) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        auto parent_tx = txid_to_tx.find(input.prevout.hash);\n+        if (parent_tx == txid_to_tx.end()) continue;\n+        if (ancestor_subsets.count(parent_tx->first) == 0) {\n+            visit(parent_tx->second);\n+        }\n+        auto parent_ancestor_set = ancestor_subsets.find(parent_tx->first);\n+        my_ancestors.insert(parent_ancestor_set->second.cbegin(), parent_ancestor_set->second.cend());\n+    }\n+    ancestor_subsets.insert(std::make_pair(curr_txid, my_ancestors));\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate txid_to_tx for quick lookup\n+    std::transform(txns_in.cbegin(), txns_in.cend(), std::inserter(txid_to_tx, txid_to_tx.end()),\n+            [](const auto& tx) { return std::make_pair(tx->GetHash(), tx); });\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subsets cache.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // Exclusion from ancestor_subsets is equivalent to not yet being fully processed.\n+    size_t i{0};\n+    while (ancestor_subsets.size() < txns_in.size() && i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (ancestor_subsets.count(tx->GetHash()) == 0) visit(tx);\n+        Assume(ancestor_subsets.count(tx->GetHash()) == 1);\n+        ++i;\n+    }\n+    txns = txns_in;\n+    // Sort by the number of in-package ancestors.\n+    std::sort(txns.begin(), txns.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        auto a_ancestors = ancestor_subsets.find(a->GetHash());\n+        auto b_ancestors = ancestor_subsets.find(b->GetHash());\n+        return a_ancestors->second.size() < b_ancestors->second.size();\n+    });\n+    Assume(IsSorted(txns));\n+    Assume(ancestor_subsets.find(txns.back()->GetHash()) != ancestor_subsets.end());\n+    is_ancestor_package = ancestor_subsets.find(txns.back()->GetHash())->second.size() == txns.size();\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::GetAncestorSet(const CTransactionRef& tx)\n+{\n+    auto ancestor_set = ancestor_subsets.find(tx->GetHash());\n+    if (ancestor_set == ancestor_subsets.end()) return std::nullopt;\n+    std::vector<CTransactionRef> result;\n+    for (const auto& txid : ancestor_set->second) {\n+        if (banned_txns.find(txid) != banned_txns.end()) {\n+            return std::nullopt;\n+        }\n+    }\n+    result.reserve(ancestor_set->second.size());\n+    for (const auto& txid : ancestor_set->second) {\n+        auto it = txid_to_tx.find(txid);\n+        if (excluded_txns.find(txid) == excluded_txns.end()) {\n+            result.push_back(it->second);\n+        }\n+    }",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 005581b5ea61edd444439900109c527c7112a650 \"[packages] AncestorPackage sorts and builds ancestor subsets\"\r\n\r\nnit: These two loops could be combined",
      "created_at": "2023-06-14T21:32:50Z",
      "updated_at": "2023-06-14T22:27:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230192959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230192959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230197576",
      "pull_request_review_id": 1480312972,
      "id": 1230197576,
      "node_id": "PRRC_kwDOABII585JU1NI",
      "diff_hunk": "@@ -67,6 +92,122 @@ BOOST_FIXTURE_TEST_CASE(package_sanitization_tests, TestChain100Setup)\n     BOOST_CHECK_EQUAL(state_too_large.GetResult(), PackageValidationResult::PCKG_POLICY);\n     BOOST_CHECK_EQUAL(state_too_large.GetRejectReason(), \"package-too-large\");\n }\n+BOOST_FIXTURE_TEST_CASE(packageifier_tests, TestChain100Setup)\n+{\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    FastRandomContext det_rand{true};\n+    // Basic chain of 25 transactions\n+    {\n+        Package package;\n+        CTransactionRef last_tx = m_coinbase_txns[0];\n+        CKey signing_key = coinbaseKey;\n+        for (int i{0}; i < 24; ++i) {\n+            auto tx = MakeTransactionRef(CreateValidMempoolTransaction(last_tx, 0, 0, signing_key, spk, CAmount((49-i) * COIN), false));\n+            package.emplace_back(tx);\n+            last_tx = tx;\n+            if (i == 0) signing_key = placeholder_key;\n+        }\n+        BOOST_CHECK(!IsChildWithParents(package));\n+        BOOST_CHECK(IsAncestorPackage(package));\n+\n+        Package package_copy = package;\n+        Shuffle(package_copy.begin(), package_copy.end(), det_rand);\n+        AncestorPackage packageified(package_copy);\n+        BOOST_CHECK(IsAncestorPackage(packageified.Txns()));\n+        for (auto i{0}; i < 24; ++i) {\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(package[i])->size(), i + 1);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(package[i])));\n+        }\n+        for (auto i{0}; i < 10; ++i) packageified.Exclude(package[i]);\n+        packageified.Ban(package[20]);\n+        for (auto i{11}; i < 20; ++i) {\n+            const auto& tx = package[i];\n+            BOOST_CHECK_EQUAL(packageified.GetAncestorSet(tx)->size(), i - 9);\n+            BOOST_CHECK(IsAncestorPackage(*packageified.GetAncestorSet(tx)));\n+        }\n+        for (auto i{20}; i < 24; ++i) {\n+            BOOST_CHECK(!packageified.GetAncestorSet(package[i]));\n+        }\n+    }\n+    // 99 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int parent_idx{0}; parent_idx < 99; ++parent_idx) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[parent_idx + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(49 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(4900 * COIN, spk));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 005581b5ea61edd444439900109c527c7112a650 \"[packages] AncestorPackage sorts and builds ancestor subsets\"\r\n\r\nnit: The inputs add up to 4851, not 4900.",
      "created_at": "2023-06-14T21:39:29Z",
      "updated_at": "2023-06-14T22:27:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230197576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230197576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230980506",
      "pull_request_review_id": 1481520336,
      "id": 1230980506,
      "node_id": "PRRC_kwDOABII585JX0Wa",
      "diff_hunk": "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};\n+        std::vector<CTransactionRef> grandparent_input_txns;\n+        std::vector<COutPoint> grandparent_inputs;\n+        for (auto i{1}; i < 50; ++i) {\n+            grandparent_input_txns.push_back(m_coinbase_txns[i]);\n+            grandparent_inputs.push_back(COutPoint{m_coinbase_txns[i]->GetHash(), 0});\n+        }\n+        CAmount last_value = grandparent_inputs.size()*50*COIN - 10*COIN - 10*COIN - grandparent_fee;\n+        auto mtx_grandparent{CreateValidMempoolTransaction(/*input_transactions=*/grandparent_input_txns,\n+                                                           /*inputs=*/grandparent_inputs,\n+                                                           /*input_height=*/102,\n+                                                           /*input_signing_keys=*/{coinbaseKey},\n+                                                           /*outputs=*/{CTxOut{10*COIN, parent_locking_script}, CTxOut{10*COIN, parent_locking_script},\n+                                                                        CTxOut{last_value, parent_locking_script}},\n+                                                           /*submit=*/false)};\n+        CTransactionRef tx_grandparent = MakeTransactionRef(mtx_grandparent);\n+        package_ppfc.push_back(tx_grandparent);\n+\n+        const CAmount parent_fee{12000};\n+        const CAmount parent_value{10*COIN - parent_fee};\n+        auto mtx_parent1{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/0,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent1 = MakeTransactionRef(mtx_parent1);\n+        package_ppfc.push_back(tx_parent1);\n+        auto mtx_parent2{CreateValidMempoolTransaction(/*input_transaction=*/tx_grandparent, /*input_vout=*/1,\n+                                                       /*input_height=*/102,\n+                                                       /*input_signing_key=*/parent_key,\n+                                                       /*output_destination=*/child_locking_script,\n+                                                       /*output_amount=*/parent_value, /*submit=*/false)};\n+        CTransactionRef tx_parent2 = MakeTransactionRef(mtx_parent2);\n+        package_ppfc.push_back(tx_parent2);\n+\n+\n+        const CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```c++\r\nconst CAmount child_fee{minfeerate.GetFee(5676 + 121 + 121 + 227) - grandparent_fee - parent_fee - parent_fee};\r\n``` \r\nWhat does 5676 + 121 + 121 + 227  numbers represent,  5676 corresponds to the grandparent size does 121 121 mean the sizes of parent1 and parent2 (which should be 112) ? Also is 227 the child size? maybe use a variable with a descriptive name for the magic numbers before usage since I see they are used in multiple places.\r\n",
      "created_at": "2023-06-15T13:03:35Z",
      "updated_at": "2023-06-15T20:07:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1230980506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1230980506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231092018",
      "pull_request_review_id": 1481700709,
      "id": 1231092018,
      "node_id": "PRRC_kwDOABII585JYPky",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So my [idea](https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022) for that would be to have net_processing do retries:\r\n\r\n[EDIT: fix logic for skipping B1 on first pass. Probably doesn't quite make sense for B1 to be sorted before B2 in a feerate topo sort, if B1's ancestor fee rate is lower than B2's though...]\r\n\r\n * precheck each\r\n * topo sort by feerate: A1, A2, B1, B2, C\r\n * skip A1, A2 as too low fee rate\r\n * skip [A1, A2, B1] as too low fee rate\r\n * accept B2 with ancestor A2; recalculate fee rates\r\n * skip C as too low fee\r\n * return [A1,B1,C] as skipped\r\n * on the next ProcessMessages call for that peer, retry [A1,B1,C]\r\n * topo sort again; skip A1, accept B1, recalculate C, skip C\r\n * return [C] as skipped\r\n * on the next ProcessMessages call for that peer, retry [C]\r\n * no successes, so return [C] as soft-rejected",
      "created_at": "2023-06-15T14:19:18Z",
      "updated_at": "2023-06-15T15:03:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231092018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231092018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231336134",
      "pull_request_review_id": 1481520336,
      "id": 1231336134,
      "node_id": "PRRC_kwDOABII585JZLLG",
      "diff_hunk": "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool is_ancestor_package{false};\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is `cto` please\r\nSaw it in policy/packages.cpp  `AncestorPackage::visit` description comment?",
      "created_at": "2023-06-15T17:22:51Z",
      "updated_at": "2023-06-15T20:21:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231336134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231336134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231481794",
      "pull_request_review_id": 1481520336,
      "id": 1231481794,
      "node_id": "PRRC_kwDOABII585JZuvC",
      "diff_hunk": "@@ -325,17 +324,13 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         self.generate(node, 1)\n \n     def test_submitpackage(self):\n-        node = self.nodes[0]\n-\n         self.log.info(\"Submitpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 24]:\n             self.test_submit_child_with_parents(num_parents, False)\n             self.test_submit_child_with_parents(num_parents, True)\n-\n-        self.log.info(\"Submitpackage only allows packages of 1 child with its parents\")\n-        # Chain of 3 transactions has too many generations\n+        self.log.info(\"Submitpackage with a 25-generation chain\")\n         chain_hex = [t[\"hex\"] for t in self.wallet.create_self_transfer_chain(chain_length=25)]\n-        assert_raises_rpc_error(-25, \"not-child-with-parents\", node.submitpackage, chain_hex)\n+        self.nodes[0].submitpackage(chain_hex)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 24,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "c44df9b0bfa66c77e5cbbff6688ea73cf39ec1d3",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Test the result and ensure that all the package transactions are accepted?\r\n``` suggestion\r\n        submitpackage_result = self.nodes[0].submitpackage(chain_hex)\r\n        assert 'tx-results' in submitpackage_result\r\n        result = submitpackage_result['tx-results']\r\n        assert_equal(len(result), len(chain_hex))\r\n        assert all([(tx_from_hex(tx_hex).getwtxid() in result) for tx_hex in chain_hex])\r\n``` ",
      "created_at": "2023-06-15T20:02:56Z",
      "updated_at": "2023-06-16T08:39:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231481794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231481794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 333,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231548600",
      "pull_request_review_id": 1482408807,
      "id": 1231548600,
      "node_id": "PRRC_kwDOABII585JZ_C4",
      "diff_hunk": "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool is_ancestor_package{false};\n+    /** Transactions sorted topologically (see IsSorted()). */\n+    Package txns;\n+    /** Map from txid to transaction for quick lookup. */\n+    std::map<uint256, CTransactionRef> txid_to_tx;\n+    /** Cache of the in-package ancestors for each transaction, indexed by txid. */\n+    std::map<uint256, std::set<uint256>> ancestor_subsets;\n+    /** Txids of transactions to exclude when returning ancestor subsets.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> excluded_txns;\n+    /** Txids of transactions that are banned. Return nullopt from GetAncestorSet() if it contains\n+     * any of these transactions.*/\n+    std::unordered_set<uint256, SaltedTxidHasher> banned_txns;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 46,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": 1231336134,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ctor is short for constructor.",
      "created_at": "2023-06-15T21:22:34Z",
      "updated_at": "2023-06-15T21:22:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1231548600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1231548600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238956092",
      "pull_request_review_id": 1493882531,
      "id": 1238956092,
      "node_id": "PRRC_kwDOABII585J2Pg8",
      "diff_hunk": "@@ -1379,39 +1402,69 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            packageified.Exclude(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-            } else {\n+            const auto subpackage = packageified.GetAncestorSet(tx);\n+            if (!subpackage) {\n+                // This transaction depends on a tx we will definitely not accept (failed for a\n+                // non-policy and non-missing-inputs reason). We already know that this transaction\n+                // will be invalid for at least one reason, i.e. a missing input. To minimize the\n+                // amount of repeated work, don't validate this tx. Just return missing inputs.\n+                TxValidationState tx_state_quit_early;\n+                tx_state_quit_early.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n+                individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(tx_state_quit_early));\n+                // Don't quit too early. Other transactions may not necessarily depend on the same\n+                // parent, and should still be considered.\n+                continue;\n+            }\n+            if (wtxid == child->GetWitnessHash()) {\n+                Assume(tx == package.back());\n+                // Unless we're quitting early, validate the child outside of this loop.\n+                break;\n+            }\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value());\n+            // Look for \"final\" answers: once a tx is successfully submitted, we can add its\n+            // MempoolAcceptResult to the results map. Note that it's possible for transactions to\n+            // have been submitted to the mempool even if subpackage_result.m_state.IsInvalid().\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                    // Erase any previous invalid results for this transaction. For example, this\n+                    // could be a low-feerate tx that has just been bumped.\n+                    individual_results_nonfinal.erase(subpackage_wtxid);\n+                    packageified.Exclude(subpackage_tx);\n+                }\n+            }\n+            // If m_state is valid, we already processed each tx in the loop above.\n+            if (subpackage_result.m_state.IsValid()) continue;\n+\n+            const auto single_res_it = subpackage_result.m_tx_results.find(wtxid);\n+            if (single_res_it != subpackage_result.m_tx_results.end()) {\n+                const auto single_res = single_res_it->second;\n+                if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n+                    single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8ff2655342e33f01c06b9358adc29479f6f2e7b1",
      "in_reply_to_id": 1093057032,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/instagibbs/bitcoin/commit/30eaa61160cf63cc79d1bc3232d33de091f94391\r\n\r\nThis is what I was thinking. As a reviewer I can pretty quickly tell what errors will be allowed retries later(and be included in following sub-packages), and which will not. e.g., `bip125-replacement-disallowed` will never work later, nor will `txn-mempool-conflict`, `min relay fee not met`, `too-long-mempool-chain`(?), `too-long-mempool-chain`(?) and nothing currently in `ReplacementChecks`.\r\n\r\nCould also just bubble up the individual result to avoid the TX_MISSING_INPUTS case, but I really like being able to very quickly find all instances... thoughts?",
      "created_at": "2023-06-22T19:41:55Z",
      "updated_at": "2023-06-22T19:41:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238956092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238956092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1489,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238976849",
      "pull_request_review_id": 1493914576,
      "id": 1238976849,
      "node_id": "PRRC_kwDOABII585J2UlR",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If these retries aren't sufficient to capture CPFPs, they are also unnecessary from the standpoint of getting MVP deployed perhaps. If there is no way to avoid missing things without going full cluster mempool, I'd suggest keeping things very simple to start. I'll let Gloria whiteboard some alternatives before exploring further. ",
      "created_at": "2023-06-22T20:04:08Z",
      "updated_at": "2023-06-22T20:04:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1238976849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238976849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246479807",
      "pull_request_review_id": 1505063065,
      "id": 1246479807,
      "node_id": "PRRC_kwDOABII585KS8W_",
      "diff_hunk": "@@ -1283,6 +1297,12 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n         return PackageMempoolAcceptResult(package_state, {});\n+    } else if (args.m_package_feerates &&\n+               workspaces.back().m_modified_fees * m_total_vsize < m_total_modified_fees * workspaces.back().m_vsize) {\n+        // The package feerate is high enough, but the child's feerate is lower than the package\n+        // feerate. This should fail, otherwise we're allowing \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "b234f993da3caa16f7716948fbcd16ab1a500180",
      "in_reply_to_id": 1225898875,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So my https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1226067022 for that would be to have net_processing do retries:\r\n\r\nThis seems like a good option to consider for computational complexity, but I think could be even slower if we are blocked by UTXO fetching - they are cached when fetched in `PreChecks`, uncached at the end of `ProcessNewPackage`, and then reloaded again when we retry. So just thinking about UTXO fetching, it seems better to do retries while we have them loaded and cached.\r\n\r\nI feel like this also requires us making a tradeoff between \"good enough result\" and potentially a very long queue of things to retry. We would need to put the txns in an orphanage/memory-bounded data structure between retries. We'd want to slow down package relay requests with this peer to avoid getting backed up, be prepared to drop things, etc. In situations where somebody is specially crafting packages, imo we aren't necessarily solving the problem and we'd end up doing more work.",
      "created_at": "2023-06-29T11:12:44Z",
      "updated_at": "2023-06-29T11:12:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246479807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246479807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246480765",
      "pull_request_review_id": 1505064500,
      "id": 1246480765,
      "node_id": "PRRC_kwDOABII585KS8l9",
      "diff_hunk": "@@ -1483,42 +1487,57 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // parent, and should still be considered.\n                 continue;\n             }\n-            if (wtxid == child->GetWitnessHash() && !quit_early) {\n+            if (wtxid == child->GetWitnessHash()) {\n                 Assume(tx == package.back());\n-                txns_package_eval.push_back(tx);\n-                // Unless we're quitting early, validate the child outside of this loop.\n+                // Validate the child outside of this loop. We will consolidate results_final,\n+                // individual_results_nonfinal, and the result of validating the last transaction's\n+                // subpackage into a single PackageMempoolAcceptResult.\n                 break;\n             }\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Exclude(tx);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. Tell the AncestorPackage that subsequent transactions depending on this one\n-                // should be skipped.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                results_final.emplace(wtxid, single_res);\n-                packageified.Ban(tx);\n-            } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+            // This transaction does not already exist in the mempool and is not the child.\n+            // Try submitting the transaction with its in-package ancestor set.\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);",
      "path": "src/validation.cpp",
      "position": 378,
      "original_position": 76,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "617fe7092e4fd7c987e04808adf97e169dc24f47",
      "in_reply_to_id": 1226067022,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After whiteboarding this idea + chunking, ended up with https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1612912372",
      "created_at": "2023-06-29T11:13:53Z",
      "updated_at": "2023-06-29T11:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1246480765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246480765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1539,
      "original_line": 1539,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270815944",
      "pull_request_review_id": 1541384241,
      "id": 1270815944,
      "node_id": "PRRC_kwDOABII585LvxzI",
      "diff_hunk": "@@ -368,6 +371,101 @@ BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n     }\n+\n+    // do not allow parents to pay for children\n+    {\n+        Package package_ppfc;\n+        // Diamond shape:\n+        //\n+        //     grandparent\n+        //       5679sat\n+        //        5676vB\n+        //     ^    ^    ^\n+        //  parent1 |   parent2\n+        // 12000sat |  12000sat\n+        //  112vB   |   112vB\n+        //       ^  |  ^\n+        //        child\n+        //       2424sat\n+        //        959vB\n+        //\n+        // grandparent is below minfeerate\n+        // {grandparent + parent1} and {grandparent + parent2} are both below minfeerate\n+        // {grandparent + parent1 + parent2} is above minfeerate\n+        // child has a feerate just below minfeerate\n+        // {grandparent + parent1 + parent2 + child} is above minfeerate\n+        // All transactions should be rejected.\n+        const CAmount grandparent_fee{5679};",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "7e25e002100f57d69a967f475eb484a8637d9dcb",
      "in_reply_to_id": 1230174007,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Taken, thanks",
      "created_at": "2023-07-21T15:33:36Z",
      "updated_at": "2023-07-21T15:33:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270815944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270815944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 652,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270816338",
      "pull_request_review_id": 1541384894,
      "id": 1270816338,
      "node_id": "PRRC_kwDOABII585Lvx5S",
      "diff_hunk": "@@ -73,4 +76,60 @@ bool IsPackageWellFormed(const Package& txns, PackageValidationState& state);\n  */\n bool IsChildWithParents(const Package& package);\n \n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), sorts them topologically (accessible through Txns()), and determines whether it\n+ * IsAncestorPackage(). GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e.\n+ * ancestor set within the package. Exclude() should be called when a transaction is in\n+ * the mempool so that it can be excluded from other transactions' subpackages. Ban() should be\n+ * called when a transaction is invalid and all of its descendants should be considered invalid as\n+ * well; GetAncestorSet() will then return std::nullopt for those descendants.\n+ * */\n+class AncestorPackage",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 26,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "005581b5ea61edd444439900109c527c7112a650",
      "in_reply_to_id": 1225871000,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-07-21T15:34:01Z",
      "updated_at": "2023-07-21T15:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1270816338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270816338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272306357",
      "pull_request_review_id": 1543557301,
      "id": 1272306357,
      "node_id": "PRRC_kwDOABII585L1dq1",
      "diff_hunk": "@@ -54,6 +54,8 @@ enum class TxValidationResult {\n     TX_CONFLICT,\n     TX_MEMPOOL_POLICY,        //!< violated mempool's fee/size/descendant/RBF/etc limits\n     TX_NO_MEMPOOL,            //!< this node does not have a mempool so can't validate the transaction\n+    TX_SINGLE_FAILURE,        //!< fee was insufficient to meet some policy (minimum/RBF/etc)",
      "path": "src/consensus/validation.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "f73efcd17113b04aa88582be6aac82c17778578c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yay! much easier to think about now\r\n\r\nneeds a reasonable comment to distinguish from TX_MEMPOOL_POLICY\r\n\r\nmy suggestion was adding something like \"but result may differ when in different package\"",
      "created_at": "2023-07-24T13:59:02Z",
      "updated_at": "2023-08-08T17:48:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272306357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272306357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272336717",
      "pull_request_review_id": 1543557301,
      "id": 1272336717,
      "node_id": "PRRC_kwDOABII585L1lFN",
      "diff_hunk": "@@ -1334,6 +1345,23 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackageWrappingSingle(const std::vector<CTransactionRef>& subpackage, ATMPArgs& args)\n+{\n+    ATMPArgs single_args = ATMPArgs::SingleInPackageAccept(args);\n+    AssertLockHeld(::cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    if (subpackage.size() > 1) {",
      "path": "src/validation.cpp",
      "position": 140,
      "original_position": 27,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "86e556add9644f66a7c96b22ee7d3fab942b9fa9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "very glad to see the special casing of this to MISSING_INPUTS gone\r\n",
      "created_at": "2023-07-24T14:21:49Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272336717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272336717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1354,
      "original_line": 1353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272355103",
      "pull_request_review_id": 1543557301,
      "id": 1272355103,
      "node_id": "PRRC_kwDOABII585L1pkf",
      "diff_hunk": "@@ -1489,31 +1489,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         }\n     }\n \n-    // Quit early because package validation won't change the result or the entire package has\n-    // already been submitted.\n-    if (quit_early || txns_package_eval.empty()) {\n-        for (const auto& [wtxid, mempoolaccept_res] : individual_results_nonfinal) {\n-            Assume(results_final.emplace(wtxid, mempoolaccept_res).second);\n-            Assume(mempoolaccept_res.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n-        }\n-        return PackageMempoolAcceptResult(package_state_quit_early, std::move(results_final));\n-    }\n-    // Validate the (deduplicated) transactions as a package. Note that submission_result has its\n-    // own PackageValidationState; package_state_quit_early is unused past this point.\n-    auto submission_result = AcceptPackageWrappingSingle(txns_package_eval, args);\n-    // Include already-in-mempool transaction results in the final result.\n-    for (const auto& [wtxid, mempoolaccept_res] : results_final) {\n-        Assume(submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res).second);\n-        Assume(mempoolaccept_res.m_result_type != MempoolAcceptResult::ResultType::INVALID);\n-    }\n-    if (submission_result.m_state.GetResult() == PackageValidationResult::PCKG_TX) {\n-        // Package validation failed because one or more transactions failed. Provide a result for\n-        // each transaction; if a transaction doesn't have an entry in submission_result,\n-        // include the previous individual failure reason.\n-        submission_result.m_tx_results.insert(individual_results_nonfinal.cbegin(),\n-                                              individual_results_nonfinal.cend());\n-        Assume(submission_result.m_tx_results.size() == package.size());\n+    auto submission_result = quit_early || txns_package_eval.empty() ?\n+        PackageMempoolAcceptResult(package_state_quit_early, {}) :\n+        AcceptPackageWrappingSingle(txns_package_eval, args);\n+    // Attempt to provide a result for each transaction.\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        if (submission_result.m_tx_results.count(wtxid) > 0) {\n+            // Already in submission result.\n+            Assume(results_final.count(wtxid) == 0);\n+            continue;\n+        } else if (const auto it{results_final.find(wtxid)}; it != results_final.end()) {\n+            // Already-in-mempool transaction.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "6fc2bd3c69baf798e45ce9328f79f58a8192ce7f",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"[refactor] fill in results for every tx in AcceptPackage\"\r\n\r\nIt could have just been submitted in the above loop, maybe if this goes away later it won't be worth being more verbose...",
      "created_at": "2023-07-24T14:35:39Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272355103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272355103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272371805",
      "pull_request_review_id": 1543557301,
      "id": 1272371805,
      "node_id": "PRRC_kwDOABII585L1tpd",
      "diff_hunk": "@@ -124,6 +124,34 @@ MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& ou\n     SanityCheck();\n }\n \n+MiniMiner::MiniMiner(const std::vector<MiniMinerMempoolEntry>& manual_entries,",
      "path": "src/node/mini_miner.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "8a7087b0e5839988fcdf93b664ac7b747baec8d6",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We'll need some miniminer Experts(TM) to review this, but I'm just going to assume for now that this will be used as a topological \"tie breaker\" for linearization that is currently in the branch to this point\r\n\r\nso if there's a bug in it, it's no worse than topo-sort, and can be improved later if dependencies need to be cut for whatever reason",
      "created_at": "2023-07-24T14:48:06Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272371805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272371805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 127,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272419757",
      "pull_request_review_id": 1543557301,
      "id": 1272419757,
      "node_id": "PRRC_kwDOABII585L15Wt",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)",
      "path": "src/policy/ancestor_packages.h",
      "position": 82,
      "original_position": 82,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> (a.fee * a.vsize > b.fee * a.vsize)\r\n\r\nfix comment",
      "created_at": "2023-07-24T15:24:35Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272419757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272419757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272429657",
      "pull_request_review_id": 1543557301,
      "id": 1272429657,
      "node_id": "PRRC_kwDOABII585L17xZ",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);",
      "path": "src/policy/ancestor_packages.h",
      "position": null,
      "original_position": 118,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be nice to put \"Filtered\" in the function names of whatever is doing filtering to reduce mental load",
      "created_at": "2023-07-24T15:32:39Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272429657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272429657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272481752",
      "pull_request_review_id": 1543557301,
      "id": 1272481752,
      "node_id": "PRRC_kwDOABII585L2IfY",
      "diff_hunk": "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);",
      "path": "src/validation.cpp",
      "position": 305,
      "original_position": 89,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "68c29044bbee7c62939f3110664144a9bab08589",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if this somehow happens in prod, do we want to keep stumbling along?",
      "created_at": "2023-07-24T16:16:38Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272481752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272481752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1466,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491372",
      "pull_request_review_id": 1543557301,
      "id": 1272491372,
      "node_id": "PRRC_kwDOABII585L2K1s",
      "diff_hunk": "@@ -1459,39 +1461,73 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n             // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n+            // Try submitting the transaction on its own, unless it has dependencies (then we\n+            // know there will be a \"missing inputs\" failure).\n+            const auto subpackage = linearized_package.GetAncestorSet(tx);\n+            if (!subpackage || subpackage->size() > 1) continue;\n             const auto single_res = AcceptSingleTransaction(tx, single_args);\n             if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                 // The transaction succeeded on its own and is now in the mempool. Don't include it\n                 // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                linearized_package.Skip(tx);\n                 results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_SINGLE_FAILURE &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (single_res.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, single_res);\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole",
      "path": "src/validation.cpp",
      "position": 310,
      "original_position": 94,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "68c29044bbee7c62939f3110664144a9bab08589",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like this will continue evaluating individual txns that have no in-package ancestors(that aren't accepted individually before!). Seems safe, but wasn't immediately obvious to me. It will abort any *package* evaluation later.",
      "created_at": "2023-07-24T16:25:31Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272491372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1471,
      "original_line": 1471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272542996",
      "pull_request_review_id": 1543557301,
      "id": 1272542996,
      "node_id": "PRRC_kwDOABII585L2XcU",
      "diff_hunk": "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"",
      "path": "src/validation.cpp",
      "position": 357,
      "original_position": 42,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "0ea0149c678bf89325b42383cab6da15e4228411",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we decided pre-cluster mempool we can't really nail all these cases due to inherent symmetry.\r\n\r\nWith this rule we can see cases where the penultimate child is paid for by parents, the penultimate child and final child being immediately trimmed next at below-minfee rates. It's not very pathological since the evicted package is below minfee and if the mempool isn't too large it is worthwhile to mine. I think we agreed these can still exist, but just noting.",
      "created_at": "2023-07-24T17:19:42Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272542996",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272542996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1518,
      "original_line": 1518,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272555810",
      "pull_request_review_id": 1543557301,
      "id": 1272555810,
      "node_id": "PRRC_kwDOABII585L2aki",
      "diff_hunk": "@@ -1530,71 +1533,95 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n         m_view.Uncache(outpoint);\n     }\n \n-    // Now that we have determined which transactions to skip, do full validation for each transaction.\n+    // Now that we have determined which transactions to skip, do full validation for each\n+    // transaction with its ancestor subpackage. If this is a single transaction, call\n+    // AcceptSingleTransaction() with a single transaction ATMPArgs to avoid unnecessary package\n+    // restrictions like disallowment of RBF. Skip when we know the feerate will not be sufficient.\n+    // If we encounter any errors at all, we quit immediately and do not validate anything else.\n+    // This means we may potentially skip validation for valid transactions, but we can expect that\n+    // some other peer will announce those transactions to us.\n+    PackageValidationState package_state_final;\n     if (!quit_early) {\n+        // Use the fee information gathered in the PreChecks() loop above to refine linearization.\n+        // We want to try to submit the higher-feerate subpackages and transactions first.\n         linearized_package.LinearizeWithFees();\n         for (const auto& tx : linearized_package.FilteredTxns()) {\n             const auto individual_fee_vsize = linearized_package.GetFeeAndVsize(tx);\n             TxValidationState placeholder_state;\n             if (individual_fee_vsize.has_value() &&\n                 !CheckFeeRate(individual_fee_vsize->second, individual_fee_vsize->first, placeholder_state)) {\n                 // No need to validate if we know this transaction wouldn't meet feerate requirements.\n+                // Even if package feerate is sufficient, we don't allow \"parent pay for child.\"\n                 continue;\n             }\n+            const auto subpackage_fee_vsize = linearized_package.GetAncestorFeeAndVsize(tx);\n             const auto subpackage = linearized_package.GetAncestorSet(tx);\n-            if (!subpackage || subpackage->size() > 1) {\n-                // No need to validate if we know this transaction would have missing inputs.\n-                // TODO: try to submit the ancestor subpackage.\n+            if (!subpackage) continue;\n+            if (subpackage_fee_vsize.has_value() &&\n+                !CheckFeeRate(subpackage_fee_vsize->second, subpackage_fee_vsize->first, placeholder_state)) {\n+                // No need to validate if we know this subpackage won't meet feerate\n+                // requirements. If it's a CPFP'd transaction, presumably there is a subsequent\n+                // subpackage that will bump it.\n+                std::vector<uint256> subpackage_wtxids;\n+                subpackage_wtxids.reserve(subpackage->size());\n+                std::transform(subpackage->cbegin(), subpackage->cend(), std::back_inserter(subpackage_wtxids),\n+                               [](const auto& tx) { return tx->GetWitnessHash(); });\n+                // Override previous result.\n+                individual_results_nonfinal.erase(tx->GetWitnessHash());\n+                individual_results_nonfinal.emplace(tx->GetWitnessHash(),\n+                    MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(subpackage_fee_vsize->first, subpackage_fee_vsize->second), subpackage_wtxids));\n                 continue;\n             }\n-            const auto& wtxid = tx->GetWitnessHash();\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                results_final.emplace(wtxid, single_res);\n-                linearized_package.Skip(tx);\n-            } else {\n-                // Fee-related errors and missing inputs should not occur since we skip those.\n-                // Abort if we get any other error; it's not worth the computational effort to\n-                // try to validate any of the other transactions.\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                quit_early = true;\n-                // If a result already exists from the previous loop, override it.\n-                Assume(individual_results_nonfinal.count(wtxid) == 0);\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            const auto subpackage_result = AcceptPackageWrappingSingle(subpackage.value(), args);\n+            for (const auto& subpackage_tx : subpackage.value()) {\n+                const auto subpackage_wtxid{subpackage_tx->GetWitnessHash()};\n+                const auto subpackage_it{subpackage_result.m_tx_results.find(subpackage_wtxid)};\n+                // Add all transactions' results to results_final. There might not be one for every\n+                // transaction.\n+                if (subpackage_it != subpackage_result.m_tx_results.end()) {\n+                    // A tx would only be in results_final if we already found it (or same txid) in\n+                    // the mempool in the previous loop so it should not be included in\n+                    // FilteredTxns().\n+                    //\n+                    // A result should not already be present because anything already in mempool\n+                    // would have already been skipped, and a tx is never validated more than once\n+                    // in this loop:\n+                    // - if tx succeeds, it is skipped in subsequent iterations\n+                    // - if tx fails, we exit the loop immediately\n+                    Assume(results_final.count(subpackage_wtxid) == 0);\n+                    results_final.emplace(subpackage_wtxid, subpackage_it->second);\n+                }\n+                // We detect that a transaction was successful by looking for it in mempool.\n+                if (m_pool.exists(GenTxid::Wtxid(subpackage_wtxid))) {\n+                    linearized_package.Skip(subpackage_tx);\n+                }\n+            }\n+            if (subpackage_result.m_state.IsInvalid()) {",
      "path": "src/validation.cpp",
      "position": 402,
      "original_position": 106,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "0ea0149c678bf89325b42383cab6da15e4228411",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "might want to note that we do this final check *after* filling out `results_final` to give more meaningful tx results",
      "created_at": "2023-07-24T17:33:23Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272555810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272555810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1563,
      "original_line": 1563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272574534",
      "pull_request_review_id": 1543557301,
      "id": 1272574534,
      "node_id": "PRRC_kwDOABII585L2fJG",
      "diff_hunk": "@@ -1423,62 +1428,164 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             assert(iter != std::nullopt);\n             // Provide the wtxid of the mempool tx so that the caller can look it up in the mempool.\n             results_final.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n+            linearized_package.Skip(tx);\n         } else {\n-            // Transaction does not already exist in the mempool.\n-            // Try submitting the transaction on its own.\n-            const auto single_res = AcceptSingleTransaction(tx, single_args);\n-            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-                // The transaction succeeded on its own and is now in the mempool. Don't include it\n-                // in package validation, because its fees should only be \"used\" once.\n-                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n-                results_final.emplace(wtxid, single_res);\n-            } else if (single_res.m_state.GetResult() != TxValidationResult::TX_MEMPOOL_POLICY &&\n-                       single_res.m_state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-                // Package validation policy only differs from individual policy in its evaluation\n-                // of feerate. For example, if a transaction fails here due to violation of a\n-                // consensus rule, the result will not change when it is submitted as part of a\n-                // package. To minimize the amount of repeated work, unless the transaction fails\n-                // due to feerate or missing inputs (its parent is a previous transaction in the\n-                // package that failed due to feerate), don't run package validation. Note that this\n-                // decision might not make sense if different types of packages are allowed in the\n-                // future.  Continue individually validating the rest of the transactions, because\n-                // some of them may still be valid.\n-                quit_early = true;\n-                package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n+            // Transaction does not already exist in the mempool. Call PreChecks to find any obvious\n+            // errors and grab the UTXOs so we can calculate fees.\n+            Workspace ws(tx);\n+            if (PreChecks(single_args, ws)) {\n+                linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n             } else {\n-                individual_results_nonfinal.emplace(wtxid, single_res);\n-                txns_package_eval.push_back(tx);\n+                switch (ws.m_state.GetResult()) {\n+                case TxValidationResult::TX_SINGLE_FAILURE:\n+                {\n+                    // This error is fine, and we should continue under the assumption that the tx\n+                    // will be CPFP'd. We know that the fee and vsize values are populated because\n+                    // the only way to get this error is to have called CheckFeeRate() with them.\n+                    linearized_package.AddFeeAndVsize(tx->GetHash(), ws.m_modified_fees, ws.m_vsize);\n+                    individual_results_nonfinal.emplace(wtxid,\n+                        MempoolAcceptResult::FeeFailure(ws.m_state, CFeeRate(ws.m_modified_fees, ws.m_vsize), {tx->GetWitnessHash()}));\n+                    break;\n+                }\n+                case TxValidationResult::TX_MISSING_INPUTS: case TxValidationResult::TX_CONFLICT:\n+                {\n+                    // If there is a conflict that we won't be able to resolve, or we have no\n+                    // in-package dependencies but are still missing inputs, we know all of the\n+                    // package transactions that depend on this one \"dangle\" and won't make it.\n+                    // This error may happen if we have a different chainstate from our peer:\n+                    // - a package parent already confirmed for us (txn-already-known),\n+                    // - a package parent already confirmed for our peer so they didn't include it\n+                    //   in the ancestor package (bad-txns-inputs-missingorspent).\n+                    linearized_package.SkipWithDescendants(tx);\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    break;\n+                }\n+                case TxValidationResult::TX_RESULT_UNSET: case TxValidationResult::TX_UNKNOWN: case TxValidationResult::TX_NO_MEMPOOL:\n+                {\n+                    // These results shouldn't be possible.\n+                    Assume(false);\n+                    break;\n+                }\n+                default:\n+                {\n+                    // If a transaction fails for any other reason, abort validation for the whole\n+                    // package because:\n+                    // - apart from TX_SINGLE_FAILURE (i.e. low feerate but can be CPFP'd), there is\n+                    //   no way for package validation policy to change the transaction from invalid\n+                    //   to valid.\n+                    // - assuming there are valid transactions in this package (which is the only\n+                    //   reason we would want to continue), the only computationally reasonable way\n+                    //   to deal with this situation is to wait for a different peer to announce\n+                    //   them to us and be open to retrying them. If the package has been\n+                    //   maliciously stuffed with invalid transactions, trying to find the optimal\n+                    //   subset of transactions to accept is too resource-intensive.\n+                    //\n+                    // This error may happen if we have a different policy from our peer or we\n+                    // have a conflicting transaction they didn't have.\n+                    quit_early = true;\n+                    individual_results_nonfinal.emplace(wtxid, MempoolAcceptResult::Failure(ws.m_state));\n+                    package_state_quit_early.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+                    break;\n+                }\n+                }\n+            }\n+            m_viewmempool.PackageAddTransaction(tx);\n+        }\n+    }\n+    // Clear the temporary coins in CCoinsViewMemPool and copies in CCoinsViewCache.\n+    for (const auto& outpoint : m_viewmempool.ClearPackageCoins()) {\n+        m_view.Uncache(outpoint);",
      "path": "src/validation.cpp",
      "position": 336,
      "original_position": 336,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Note that UTXOs are cached in m_view so there is not repeated loading the second time we call PreChecks\r\n\r\nim a utxo cache newb but it looks like the the utxo caches are being wiped before the actual submission which has its own PreChecks?",
      "created_at": "2023-07-24T17:53:18Z",
      "updated_at": "2023-08-08T17:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1272574534",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272574534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1497,
      "original_line": 1497,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278215639",
      "pull_request_review_id": 1553164118,
      "id": 1278215639,
      "node_id": "PRRC_kwDOABII585MMAXX",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "path": "src/policy/ancestor_packages.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So if my understanding of the API is correct, you receive a package from `AcceptPackage()`, and there is a call to the constructor `AncestorPackage()`, then we verify each transaction being component of the package is in the mempool by wtxid or txid or `PreChecks()` them.\r\n\r\nIf the transaction is `PreChecks()` valid, then we call `AddFeeAndVsize()`. If we have a `TX_SINGLE_FAILURE`, we add `AddFeeAndVsize()` or if we have a `TX_MISSING_INPUTS`, we `SkipWithDescendants()` the transaction. All other cases are treaded as impossible or failure.\r\n\r\nSo when we call `LinearizeWithFees()` in `AcceptPackage` and therefore start to rely on `MiniMiner` calculations. we have asserted than all packages component linearize are either spending a UTXO in the chainstate set, or spending an in-package component, so the worst-case scenario from a DoS viewpoint will be the limits as set in BIP331 / nversion=3 ?",
      "created_at": "2023-07-29T02:46:17Z",
      "updated_at": "2023-07-29T02:46:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278215639",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278215639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278981444",
      "pull_request_review_id": 1554264018,
      "id": 1278981444,
      "node_id": "PRRC_kwDOABII585MO7VE",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "path": "src/policy/ancestor_packages.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "in_reply_to_id": 1278215639,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So if my understanding of the API is correct, you receive a package from AcceptPackage() ...\r\n\r\nCorrect\r\n\r\n> we have asserted than all packages component linearize are either spending a UTXO in the chainstate set, or spending an in-package component, so the worst-case scenario from a DoS viewpoint will be the limits as set in BIP331 / nversion=3 ?\r\n\r\nThe first check in `AcceptPackage` is `IsPackageWellFormed` which requires the package to be 25 transactions at most. The linearization with `MiniMiner` also does not fetch in-mempool transactions. So you can assume we never construct the miniminer with more than 25 transactions.\r\n\r\nThis is independent of v3 so those limits aren't enforced.\r\n\r\nBIP331 doesn't impose a maximum size other than 100 for pkgtxns, but I expect the p2p logic to observe that an `ancpkginfo` with more than 25 transactions wouldn't be submitted and just exit there without downloading the transactions. So we wouldn't send a `getpkgtxns` request for more than 25, and thus would immediately reject a (unsolicited) `pkgtxns` with more than 25. See logic for handling `ancpkginfo`, we will give up on downloading an ancestor package from a peer if it has too many transactions: https://github.com/bitcoin/bitcoin/pull/27742/files#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R4398.",
      "created_at": "2023-07-31T08:52:02Z",
      "updated_at": "2023-07-31T08:52:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1278981444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278981444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279847172",
      "pull_request_review_id": 1555725722,
      "id": 1279847172,
      "node_id": "PRRC_kwDOABII585MSOsE",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)",
      "path": "src/policy/ancestor_packages.h",
      "position": 82,
      "original_position": 82,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\ntypo\r\n\r\n```suggestion\r\n                        // (a.fee * b.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\r\n```",
      "created_at": "2023-07-31T20:27:30Z",
      "updated_at": "2023-07-31T20:58:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279847172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279847172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279854922",
      "pull_request_review_id": 1555725722,
      "id": 1279854922,
      "node_id": "PRRC_kwDOABII585MSQlK",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/ancestor_packages.h>\n+\n+#include <node/mini_miner.h>\n+#include <util/check.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <memory>\n+#include <numeric>\n+\n+// Calculates curr_tx's in-package ancestor set. If the tx spends another tx in the package, calls\n+// visit() for that transaction first, since any transaction's ancestor set includes its parents'\n+// ancestor sets. Transaction dependency cycles are not possible without breaking sha256 and\n+// duplicate transactions were checked in the AncestorPackage() ctor, so this won't recurse infinitely.\n+// After this function returns, entry is guaranteed to contain a non-empty ancestor_subset.\n+void AncestorPackage::visit(const CTransactionRef& curr_tx)\n+{\n+    const uint256& curr_txid = curr_tx->GetHash();\n+    auto& entry = m_txid_to_entry.at(curr_txid);\n+    if (!entry.ancestor_subset.empty()) return;\n+    std::set<uint256> my_ancestors;\n+    my_ancestors.insert(curr_txid);\n+    for (const auto& input : curr_tx->vin) {\n+        const auto& parent_txid = input.prevout.hash;\n+        if (m_txid_to_entry.count(parent_txid) == 0) continue;\n+        auto parent_tx = m_txid_to_entry.at(parent_txid).tx;\n+        if (m_txid_to_entry.at(parent_txid).ancestor_subset.empty()) {\n+            visit(parent_tx);\n+        }\n+        auto parent_ancestor_set = m_txid_to_entry.at(parent_txid).ancestor_subset;\n+        Assume(!parent_ancestor_set.empty());\n+        my_ancestors.insert(parent_ancestor_set.cbegin(), parent_ancestor_set.cend());\n+    }\n+    entry.ancestor_subset = std::move(my_ancestors);\n+}\n+\n+AncestorPackage::AncestorPackage(const Package& txns_in)\n+{\n+    // Duplicate transactions are not allowed, as they will result in infinite visit() recursion.\n+    Assume(IsConsistent(txns_in));\n+    if (txns_in.empty() || !IsConsistent(txns_in)) return;\n+    // Populate m_txid_to_entry for quick lookup\n+    std::transform(txns_in.cbegin(), txns_in.cend(), std::inserter(m_txid_to_entry, m_txid_to_entry.end()),\n+            [](const auto& tx) { return std::make_pair(tx->GetHash(), PackageEntry(tx)); });\n+    // DFS-based algorithm to sort transactions by ancestor count and populate ancestor_subset.\n+    // Best case runtime is if the package is already sorted and no recursive calls happen.\n+    // An empty PackageEntry::ancestor_subset is equivalent to not yet being processed.\n+    size_t i{0};\n+    while (i < txns_in.size()) {\n+        const auto& tx = txns_in[i];\n+        if (m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty()) visit(tx);\n+        Assume(!m_txid_to_entry.at(tx->GetHash()).ancestor_subset.empty());\n+        ++i;\n+    }\n+    m_txns = txns_in;\n+    // Sort by the number of in-package ancestors.\n+    std::sort(m_txns.begin(), m_txns.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    Assume(IsSorted(m_txns));\n+    m_is_ancestor_package = m_txid_to_entry.at(m_txns.back()->GetHash()).ancestor_subset.size() == m_txns.size();\n+    // Now populate the descendant caches\n+    for (const auto& [txid, entry] : m_txid_to_entry) {\n+        for (const auto& anc_txid : entry.ancestor_subset) {\n+            m_txid_to_entry.at(anc_txid).descendant_subset.insert(txid);\n+        }\n+    }\n+}\n+\n+Package AncestorPackage::FilteredTxns() const\n+{\n+    Package result;\n+    for (const auto& [_, entry] : m_txid_to_entry) {\n+        if (!entry.skip && !entry.dangles) result.push_back(entry.tx);\n+    }\n+    std::sort(result.begin(), result.end(), [&](const CTransactionRef& a, const CTransactionRef& b) -> bool {\n+        return m_txid_to_entry.at(a->GetHash()) < m_txid_to_entry.at(b->GetHash());\n+    });\n+    return result;\n+}\n+\n+std::optional<std::vector<CTransactionRef>> AncestorPackage::GetAncestorSet(const CTransactionRef& tx)\n+{\n+    if (m_txid_to_entry.count(tx->GetHash()) == 0) return std::nullopt;\n+    const auto& entry = m_txid_to_entry.find(tx->GetHash())->second;",
      "path": "src/policy/ancestor_packages.cpp",
      "position": 102,
      "original_position": 88,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\nnit: avoid looking up twice\r\n\r\n```suggestion\r\n    const auto& entry_it = m_txid_to_entry.find(tx->GetHash());\r\n    if (entry_it == m_txid_to_entry.end()) return std::nullopt;\r\n    const auto& entry = entry_it->second;\r\n```",
      "created_at": "2023-07-31T20:36:29Z",
      "updated_at": "2023-07-31T20:58:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279854922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279854922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": 101,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279861059",
      "pull_request_review_id": 1555725722,
      "id": 1279861059,
      "node_id": "PRRC_kwDOABII585MSSFD",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;",
      "path": "src/policy/ancestor_packages.h",
      "position": null,
      "original_position": 36,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e \"[txpackages] add AncestorPackage for linearizing packages\"\r\n\r\nSince all of the transactions in the package are already stored in `PackageEntry`s in `m_txid_to_entry`, could `m_txns` just be a vector of `PackageEntry&`? This would reduce the number of lookups to `m_txid_entry` that are needed just to sort the transactions when we are returning them.\r\n\r\nAdditionally, if functions like `GetAncestorSet` used a `std::set<PackageEntry&>`, then `std::sort` at the end would not be necessary.",
      "created_at": "2023-07-31T20:44:09Z",
      "updated_at": "2023-07-31T20:58:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1279861059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279861059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281295986",
      "pull_request_review_id": 1558055733,
      "id": 1281295986,
      "node_id": "PRRC_kwDOABII585MXwZy",
      "diff_hunk": "@@ -48,8 +48,8 @@ The following rules are enforced for all packages:\n The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n test accepts):\n \n-* Packages must be child-with-unconfirmed-parents packages. This also means packages must contain at\n-  least 2 transactions. (#22674)\n+* Packages must be ancestor packages, i.e. a transaction with its unconfirmed ancestors. This also\n+  means packages must contain at least 2 transactions. (#26711)",
      "path": "doc/policy/packages.md",
      "position": 7,
      "original_position": 7,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From my understanding we have `submitpackage` which is the current interface under which *child-with-unconfirmed-parents*  can be submitted. The definition is “a topologically sorted package that consists of exactly one child and all of its unconfirmed parents (no other transactions may be present)”. \r\n\r\nThe definition given by `AncestorPackage` class is “A potential BIP331 Ancestor Package, i.e one transaction with its set of ancestors”, which sounds similar.\r\n\r\nIf *child-with-unconfirmed-parents* and `AncestorPackage` definitions are identical, I think the child-with-unconfirmed-parents definition in `packages.md` can be updated to fusion them, and maybe `ProcessNewPackage` can be updated.",
      "created_at": "2023-08-02T01:41:54Z",
      "updated_at": "2023-08-02T02:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281295986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281295986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281312757",
      "pull_request_review_id": 1558055733,
      "id": 1281312757,
      "node_id": "PRRC_kwDOABII585MX0f1",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "path": "src/policy/ancestor_packages.h",
      "position": 140,
      "original_position": 127,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you thought about it in term of `AncestorPackage` API design, though what is the purpose of `SkipWithDescendants` as the “dangle” state of a transaction could be determined as soon as all the transactions are received and `IsPackageWellFormed` ?\r\n\r\nTherefore checking than we have available UTXOs in mempool (or in-package) to spend could be done before to call to `AncestorPackage` ctor and `visit` to obtain the `ancestor_subset`, sounds it could be a small perf again assuming `AcceptPackage` is re-worked a bit.",
      "created_at": "2023-08-02T02:23:23Z",
      "updated_at": "2023-08-02T02:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281312757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281312757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281317275",
      "pull_request_review_id": 1558055733,
      "id": 1281317275,
      "node_id": "PRRC_kwDOABII585MX1mb",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};",
      "path": "src/policy/ancestor_packages.h",
      "position": null,
      "original_position": 32,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The name could be more verbose to reflect the notion of “connection” it lays on, e.g `m_is_ancestor_package`.",
      "created_at": "2023-08-02T02:34:07Z",
      "updated_at": "2023-08-02T02:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281317275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281317275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281318967",
      "pull_request_review_id": 1558055733,
      "id": 1281318967,
      "node_id": "PRRC_kwDOABII585MX2A3",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;",
      "path": "src/policy/ancestor_packages.h",
      "position": 47,
      "original_position": 51,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unclear if “(Modified) fees” means `GetModifiedFee()`",
      "created_at": "2023-08-02T02:38:10Z",
      "updated_at": "2023-08-02T02:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281318967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281318967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281323288",
      "pull_request_review_id": 1558055733,
      "id": 1281323288,
      "node_id": "PRRC_kwDOABII585MX3EY",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that",
      "path": "src/policy/ancestor_packages.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "2be70a6d2694db7425619e97afc1a912b8504848",
      "in_reply_to_id": 1278215639,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So you can assume we never construct the miniminer with more than 25 transactions.\r\n\r\nThanks, yes I think `MAX_PACKAGE_COUNT` as enforced by `IsPackageWellFormed` is the upper bound that one can assume in the calculation of `MiniMiner`. This can ease the DoS reasoning to link the max `ancpkginfo` issued at the p2p level with `MAX_PACKAGE_COUNT` as requested by the mempool logic to save on bandwidth both by the local node (the list of wtxids announced) and its peer (`pkgtnxs`’s txn), I think.",
      "created_at": "2023-08-02T02:48:38Z",
      "updated_at": "2023-08-02T02:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1281323288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281323288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284547085",
      "pull_request_review_id": 1563079515,
      "id": 1284547085,
      "node_id": "PRRC_kwDOABII585MkKIN",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "path": "src/policy/ancestor_packages.h",
      "position": 140,
      "original_position": 127,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": 1281312757,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Therefore checking than we have available UTXOs in mempool (or in-package) to spend could be done before to call to AncestorPackage ctor\r\n\r\nI don't think this is true. We should sort the transactions before we look up UTXOs.",
      "created_at": "2023-08-04T15:12:46Z",
      "updated_at": "2023-08-04T15:12:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1284547085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284547085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286479898",
      "pull_request_review_id": 1566294106,
      "id": 1286479898,
      "node_id": "PRRC_kwDOABII585MriAa",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;\n+\n+    struct PackageEntry {\n+        /** Whether this transaction should be skipped in GetAncestorSet() and linearization by\n+         * fees, i.e. because it is already in the mempool.\n+         * This value can be set to true by calling Skip(). */\n+        bool skip{false};\n+        /** Whether this transaction \"dangles,\" i.e. we know nothing about it it because it is\n+         * missing inputs or depends on another transaction that is missing inputs.\n+         * This value can be set to true by calling SkipWithDescendants(). */\n+        bool dangles{false};\n+        /** This value starts as std::nullopt when we don't have any fee information yet. It can be\n+         * updated by calling LinearizeWithFees() if this entry isn't being skipped. */\n+        std::optional<uint32_t> mining_sequence;\n+        /** (Modified) fees of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<CAmount> fee;\n+        /** Virtual size of this transaction. Starts as std::nullopt, can be updated using AddFeeAndVsize(). */\n+        std::optional<int64_t> vsize;\n+\n+        CTransactionRef tx;\n+        /** Txids of all in-package ancestors. Populated in ctor and does not change.\n+         * Use GetAncestorSet() to get ancestor sets with the skipped transactions removed.  */\n+        std::set<uint256> ancestor_subset;\n+        /** Txids of all in-package descendant. Populated in ctor and does not change. */\n+        std::set<uint256> descendant_subset;\n+        explicit PackageEntry(CTransactionRef tx_in) : tx(tx_in) {}\n+\n+        // Used to sort Txns(), FilteredTxns(), and result of GetAncestorSet(). Always guarantees\n+        // topological sort to the best of our knowledge (see IsSorted()), and puts more\n+        // incentive-compatible packages first if that information is available.\n+        //\n+        // If ancestor score-based linearization sequence exists for both transactions, the\n+        // transaction with the lower sequence number comes first.\n+        //    If there is a tie, the transaction with fewer in-package ancestors comes first (topological sort).\n+        //       If there is still a tie, the transaction with the higher base feerate comes first.\n+        // Otherwise, the transaction with fewer in-package ancestors comes first (topological sort).\n+        bool operator<(const PackageEntry& rhs) const {\n+            if (mining_sequence == std::nullopt || rhs.mining_sequence == std::nullopt) {\n+                // If mining sequence is missing for either entry, default to topological order.\n+                return ancestor_subset.size() < rhs.ancestor_subset.size();\n+            } else {\n+                if (mining_sequence.value() == rhs.mining_sequence.value()) {\n+                    // Identical mining sequence means they would be included in the same ancestor\n+                    // set. The one with fewer ancestors comes first.\n+                    if (ancestor_subset.size() == rhs.ancestor_subset.size()) {\n+                        // Individual feerate. This is not necessarily fee-optimal, but helps in some situations.\n+                        // (a.fee * a.vsize > b.fee * a.vsize) is a shortcut for (a.fee / a.vsize > b.fee / b.vsize)\n+                        return *fee * *rhs.vsize  > *rhs.fee * *vsize;\n+                    }\n+                    return ancestor_subset.size() < rhs.ancestor_subset.size();\n+                } else {\n+                    return mining_sequence.value() < rhs.mining_sequence.value();\n+                }\n+            }\n+        }\n+    };\n+    /** Map from each txid to PackageEntry */\n+    std::map<uint256, PackageEntry> m_txid_to_entry;\n+\n+    /** Helper function for recursively constructing ancestor caches in ctor. */\n+    void visit(const CTransactionRef&);\n+public:\n+    /** Constructs ancestor package, sorting the transactions topologically and constructing the\n+     * txid_to_tx and ancestor_subsets maps. It is ok if the input txns is not sorted.\n+     * Expects:\n+     * - No duplicate transactions.\n+     * - No conflicts between transactions.\n+     */\n+    AncestorPackage(const Package& m_txns);\n+\n+    bool IsAncestorPackage() const { return m_is_ancestor_package; }\n+    /** Returns all of the transactions, linearized. */\n+    Package Txns() const { return m_txns; }\n+\n+    /** Returns all of the transactions, without the skipped and dangling ones, linearized. */\n+    Package FilteredTxns() const;\n+    /** Get the sorted, filtered ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles, returns std::nullopt. */\n+    std::optional<std::vector<CTransactionRef>> GetAncestorSet(const CTransactionRef& tx);\n+    /** Get the total fee and vsize of the ancestor subpackage for a tx. Includes the tx. Does not\n+     * include skipped ancestors. If this transaction dangles or fee and vsize are\n+     * unavailable, returns std::nullopt. This result is always consistent with GetAncestorSet(). */\n+    std::optional<std::pair<CAmount, int64_t>> GetAncestorFeeAndVsize(const CTransactionRef& tx);\n+    /** Get the fee and vsize of a tx. Returns std::nullopt if this information is unknown. */\n+    std::optional<std::pair<CAmount, int64_t>> GetFeeAndVsize(const CTransactionRef& tx) const;\n+    /** From now on, skip this tx from any result in GetAncestorSet(). Does not affect Txns().\n+     * Should be called when a transaction is accepted to mempool or already found in it. */\n+    void Skip(const CTransactionRef& transaction);\n+    /** Skip a transaction and all of its descendants. From now on, if this transaction is present\n+     * in the ancestor set, GetAncestorSet() returns std::nullopt for that tx. Does not affect Txns().\n+     * Should be called when a transaction is missing inputs. */\n+    void SkipWithDescendants(const CTransactionRef& transaction);",
      "path": "src/policy/ancestor_packages.h",
      "position": 140,
      "original_position": 127,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "cc756bcfa21e3f4abdf4fc614539e7a38cdf2eb8",
      "in_reply_to_id": 1281312757,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fair, I still think it’s slightly less DoSy though depends benchmark and UTXO layout on disk of course.",
      "created_at": "2023-08-08T00:10:30Z",
      "updated_at": "2023-08-08T00:10:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1286479898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286479898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1287458787",
      "pull_request_review_id": 1567833553,
      "id": 1287458787,
      "node_id": "PRRC_kwDOABII585MvQ_j",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+#define BITCOIN_POLICY_ANCESTOR_PACKAGES_H\n+\n+#include <policy/feerate.h>\n+#include <policy/packages.h>\n+\n+#include <vector>\n+\n+/** A potential BIP331 Ancestor Package, i.e. one transaction with its set of ancestors.\n+ * This class does not have any knowledge of chainstate, so it cannot determine whether all\n+ * unconfirmed ancestors are present. Its constructor accepts any list of transactions that\n+ * IsConsistent(), linearizes them topologically, and determines whether it IsAncestorPackage().\n+ * If fee and vsizes are given for each transaction, it can also linearize the transactions using\n+ * the ancestor score-based mining algorithm via MiniMiner.\n+ *\n+ * Skip() and SkipWithDescendants() can be used to omit transactions. Txns() returns all\n+ * transactions linearized, and FilteredTxns() is the same but excludes the skipped ones.\n+ * GetAncestorSet() can be used to get a transaction's \"subpackage,\" i.e. ancestor set within the\n+ * package, also excluding skipped ones.\n+ * */\n+class AncestorPackage\n+{\n+    /** Whether m_txns contains a connected package in which all transactions are ancestors of the\n+     * last transaction. This object is not aware of chainstate. So if m_txns only includes a\n+     * grandparent and not the \"connecting\" parent, this will (incorrectly) determine that the\n+     * grandparent is not an ancestor.\n+     * */\n+    bool m_is_ancestor_package{false};\n+\n+    /** Linearized transactions. Topological (IsSorted()) or, if fee information is provided through\n+     * LinearizeWithFees(), using ancestor set scores. */\n+    Package m_txns;",
      "path": "src/policy/ancestor_packages.h",
      "position": null,
      "original_position": 36,
      "commit_id": "faa9eddefdb1354ba193f29d85dc18bee14e0cb8",
      "original_commit_id": "e82f4e7d7b41592b8891a2c6f9b961b2fc2ec51e",
      "in_reply_to_id": 1279861059,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`std::vector<PackageEntry&>` isn't possible, but will do reference wrappers",
      "created_at": "2023-08-08T17:43:43Z",
      "updated_at": "2023-08-08T17:43:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26711#discussion_r1287458787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1287458787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26711"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    }
  ]
}