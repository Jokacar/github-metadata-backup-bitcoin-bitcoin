{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031",
    "id": 1421325832,
    "node_id": "PR_kwDOABII585Ut7YI",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28031",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28031.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28031.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
    "number": 28031,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Package Relay 1/3: Introduce TxDownloadManager and improve orphan-handling",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is milestone 1 of package relay p2p changes. See #27463 for full project tracking.\r\n\r\nPlease see #27742 for how this PR fits into the big picture. I strongly suggest that reviewers look at that PR first to decide if they are comfortable with the overall approach.\r\n\r\nThis PR is mainly refactors, with a few behavior changes and improvements:\r\n- Introduces `TxDownloadManager`, which handles all transaction downloading. It contains the `TxRequestTracker`, `TxOrphanage`, and filters for `AlreadyHaveTx`.\r\n- Updates logs for tx {validation, relay, orphans} to include both txid and wtxid when possible.\r\n- Adds a new log category, `TXPACKAGES`. Logging in the orphanage is changed from `MEMPOOL` to `TXPACKAGES`.\r\n- Adds support for tracking when multiple peers provided the same tx in the orphanage.\r\n- Makes `TxDownloadManager` responsible for tracking the orphans we need to resolve and deciding how/when to resolve them.\r\n- Adds all announcers of an orphan as potential resolution candidates. This tracker is a `TxDownloadManager` which helps us schedule requests.\r\n   - In this PR, \"orphan resolution\" means requesting missing parents by `getdata(MSG_TX | MSG_WITNESS_FLAG, missing_txid)`.\r\n    - In a future PR, we'll add another resolution method, requesting ancestor wtxids using `getdata(MSG_ANCPKGINFO, orphan_wtxid)`.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-07-05T15:30:40Z",
    "updated_at": "2023-09-18T01:41:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "eccddb0b0da9e2462d822e0367a50e0d425c8a5a",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "glozow:orphan-resolution-module",
      "ref": "orphan-resolution-module",
      "sha": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 231082,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-14T15:52:59Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2023-08-30T16:39:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "f5c5ddafbcaad7225312cb032b108a3527f0ac0f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 35687,
        "stargazers_count": 71386,
        "watchers_count": 71386,
        "size": 239584,
        "default_branch": "master",
        "open_issues_count": 687,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-17T22:35:44Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-09-18T00:57:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 1496,
    "deletions": 437,
    "changed_files": 14,
    "commits": 23,
    "review_comments": 109,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 9733303483,
      "node_id": "LE_lADOABII585qrkcZzwAAAAJEJmy7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9733303483",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:30:41Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 1622002877,
      "node_id": "IC_kwDOABII585grcy9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1622002877",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:30:44Z",
      "updated_at": "2023-09-18T01:41:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27596](https://github.com/bitcoin/bitcoin/pull/27596) (assumeutxo (2) by jamesob)\n* [#27052](https://github.com/bitcoin/bitcoin/pull/27052) (test: rpc: add last block announcement time to getpeerinfo result by LarryRuane)\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1622002877",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:32:01Z",
      "updated_at": "2023-07-05T15:32:01Z",
      "source": {
        "issue": {
          "id": 1724281348,
          "node_id": "PR_kwDOABII585RQ35P",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27742/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27742",
          "number": 27742,
          "state": "open",
          "state_reason": null,
          "title": "[NO MERGE] BIP331 Ancestor Package Relay",
          "body": "**WORK IN PROGRESS.** Please do not run it for any use other than testing.\r\n  \r\nThis PR is not meant for merge. This branch exists to help reviewers see what package relay would look like all together. I will open separate PRs for these components and expect to add more tests, docs, and polish along the way. This PR contains all of the functionality built in a linear manner. However, since there are pieces in various areas of the codebase and they can make progress in parallel, commits don't necessarily need to be merged in this order.\r\n\r\n**See #27463 for what PR(s) are open for review right now.**\r\n\r\n## Note to Reviewers\r\n\r\nThe major purpose of this PR is to solicit \"approach\" review.\r\n\r\nThis is a large project, and the first few p2p commits essentially define the interface. I'd like to get rough consensus on approach before we start looking at code details and merging PRs, because I believe it will help us \"get useful stuff in\" faster and avoid premature optimizations.\r\n\r\nHere are some questions I hope are answered before we try to merge anything (originally https://github.com/bitcoin/bitcoin/pull/27742#issuecomment-1572205313):\r\n\r\n1. Does the proposed protocol look sound?\r\n2. Are these 3 milestones appropriate?\r\n3. Is there important functionality that is in the \"todo improvements\" section but should be included in one of the 3 milestones? Alternatively, is there not-that-important stuff in the milestones that we should defer until later?\r\n4. Does it make sense to have this PeerManager <-> TxPackageTracker <-> TxOrphanage relationship?\r\n\r\n\r\nComments about naming, typos, code details, etc. are also appreciated but please note I may wait until their respective PRs are open to incorporate your comments. Thank you for your patience.\r\n\r\n## Project Structure\r\n\r\n### 3 Major Milestones\r\n\r\nThis project is split into 3 milestones, each of which gives us something useful.\r\n\r\n1. Modularize and improve orphan-handling (also some refactoring).\r\n\t- Introduce a `TxPackageTracker` class, responsible for orphan handling. It starts out as a wrapper for the `TxOrphanage`.\r\n\t- Use all announcers as potential candidates for resolving an orphan. Add a `TxRequestTracker` Orphan Request Tracker which helps track orphans we need to resolve. Preferentially request orphan resolution from outbounds, preferred relay, etc., over inbounds.\r\n\r\n2. When package relay peers are available, use `ancpkginfo` instead of missing parents when handling orphans.\r\n\t- Add `sendpackages` negotiation logic.\r\n\t- Add a separate rejections filter for transactions that are eligible for reconsideration when validated together as a package, so that children of low-feerate transactions are still considered.\r\n\t- Send `getdata(MSG_ANCPKGINFO)` to package relay peers for orphan resolution. Use `ancpkginfo` to request missing ancestors through normal individual transaction relay.\r\n\r\n3. Download and validate ancestor packages using `getpkgtxns` and `pkgtxns`.\r\n\t- Add support for `getpkgtxns` and `pkgtxns`. Send a `pkgtxns` using the list of missing transactions from `ancpkginfo`.\r\n\t- Ensure we can process \"normal\" orphans even if a peer is trying to overwhelm/churn our orphanage. Do this by \"opportunistically\" protecting orphans from random eviction if they were sent by package relay peers, and redownloading orphans if we cannot afford to protect them. Each peer is allocated a certain amount of orphans they can protect at a time (\"token bucket\" style but the number of tokens is static for now). Outbound peers get more than inbounds.\r\n\t- If a transaction's parent(s) are below the fee filter, don't announce it (save the bandwidth of legacy nodes).\r\n\r\n###  Todo improvements \r\nThese could be added to the milestones or deferred until basic functionality is deployed.\r\n- Store orphans serialized instead of as CTransactionRefs to significantly reduce their memory usage.\r\n- Perhaps try to keep orphans in disk and/or process them asynchronously, given the incredibly DoSable nature of orphan handling.\r\n- Dynamically allocate tokens for orphan protection. For example, if a long-standing inbound peer continuously provides good packages for orphans, they should have more tokens. If a peer is obviously serving us garbage, reduce their tokens.\r\n- Detect when we have received all the transactions for a package, regardless of how (individual or block or other), and return `PackageToValidate`  in `GetTxToReconsider`.\r\n- New format for mempool.dat, packages instead of transactions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27742",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27742",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27742.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27742.patch"
          },
          "created_at": "2023-05-24T15:38:55Z",
          "updated_at": "2023-09-05T13:07:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:36:15Z",
      "updated_at": "2023-07-05T15:36:15Z",
      "source": {
        "issue": {
          "id": 1668056618,
          "node_id": "I_kwDOABII585jbIYq",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27463/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/27463",
          "number": 27463,
          "state": "open",
          "state_reason": null,
          "title": "Package Relay Project Tracking",
          "body": "This issue will be edited frequently to reflect the current status of the project.\r\n\r\n**What should I review now?**\r\n:point_down: :point_down: :point_down: :point_down: :point_down: :point_down: :point_down:\r\n#28471 #28450 #28472 #28481\r\n:point_up: :point_up: :point_up: :point_up: :point_up: :point_up: :point_up:\r\n\r\n**Mempool, Policy, Validation**\r\n- [x] Enable validation of multiple transactions in ATMP\r\n  - [x] Refactoring #21062, #22675, #23381\r\n  - [x] #20833\r\n  - [x] #21800\r\n  - [x] #22674\r\n- [x] #24152\r\n- [x] #24836 \r\n- [x] Avoid the risk of below-minrelaytxfee transactions hanging around forever in the mempool (currently only possible through reorgs and replacements after package CPFP). There are multiple options:\r\n   - Don't ever allow v1 and v2 txs below minrelaytxfee (#26933)\r\n   - Mine everything that makes it into in the mempool (default blockmintxfee to 0). Trim descendant packages <=0 fees, even when the mempool is not full (#27018)\r\n   - Other long-term improvements that address this problem, e.g. #27677.\r\n- [x] #28251\r\n- [ ] #28471\r\n- [ ] #28450\r\n- [ ] #28472\r\n- [ ] #26711\r\n- (Some existing DoS and incentive compatibility issues are addressed. It is safe to expose this interface on P2P)\r\n\r\n**Additional Policy**\r\n- [ ] Add v3 rules that make transactions/packages easier to work with (#25038)\r\n- [ ] Introduce a Miner Incentive Compatibility Score rule to RBF\r\n  - This is done for v3 transactions in #25038.\r\n  - Cluster-based mempool would allow this for all transactions: #27677.\r\n- [ ] Enable Package RBF for v3 transactions (#25038)\r\n- (Things like LN can sign things 0-fee, add fees at broadcast, and avoid pinning attacks. Assuming package relay is available.)\r\n- [ ] Add Ephemeral Anchors rules for v3 transactions (#26403)\r\n- (LN symmetry and other things can have 0-value anchors.)\r\n\r\n**P2P, Net Processing**\r\nFull implementation: #27742\r\n- [ ] BIP 331 (bitcoin/bips/pull/1382)\r\n- [ ] #28031\r\n  - [x] #28199\r\n  - [x] #28364\r\n  - [ ] #28481\r\n- (Orphan-handling is more robust)\r\n- [ ] (Milestone 2/3) Negotiate package relay support with peers, gated by config flag (`sendpackages`). Request ancestor package information for orphans (`MSG_ANCPKGINFO`, `ancpkginfo`).\r\n- (Assuming adoption, in most cases, package relay nodes never need to use txid-based relay)\r\n- [ ] (Milestone 3/3) Using package info, request (`getpkgtxns`), download (`pkgtxns`), and submit packages together.\r\n  - [ ] Introduce a mechanism for protecting orphan transactions from eviction.\r\n  - [ ] Avoid telling legacy peers about transactions that depend on below-fee-filter parents.\r\n- [ ] Default `-packagerelay` config flag to true.\r\n- (Assuming adoption, below-mempool min feerate CPFP'd transactions propagate.)",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "created_at": "2023-04-14T11:14:50Z",
          "updated_at": "2023-09-14T14:02:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9733476036,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJEKQ7E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9733476036",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:44:10Z"
    },
    {
      "event": "labeled",
      "id": 9733477078,
      "node_id": "LE_lADOABII585qrkcZzwAAAAJEKRLW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9733477078",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-05T15:44:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T00:20:34Z",
      "updated_at": "2023-07-06T00:20:34Z",
      "source": {
        "issue": {
          "id": 1746501636,
          "node_id": "PR_kwDOABII585ScjM9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27837",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27837/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27837/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27837/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27837",
          "number": 27837,
          "state": "open",
          "state_reason": null,
          "title": "net: introduce block tracker to retry to download blocks after failure",
          "body": "Built on top of #28120 and #28170. Coming from #27652.\r\n\r\nThe general idea is to keep track of the user requested blocks so, in\r\ncase of a bad behaving peer or a network disconnection, they can be\r\nfetched from another one automatically without any further user interaction.\r\n\r\nThis was requested by users because the `getblockfrompeer` RPC command\r\nlacks the functionality to notify them about block request failures or peer\r\ndisconnections (which is expected due to the asynchronous nature of the block\r\nrequests).\r\n\r\nCurrently, this new functionality is limited to blocks requested by the\r\nuser via the 'getblockfrompeer' RPC command.\r\n\r\nIn the future, this class could expand its scope and be utilized in the\r\nregular chain synchronization process. Or, even could be employed in\r\nspecial procedures like a prune node rescan that uses BIP158 block filters,\r\nor even into BIP157 itself.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27837",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27837",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27837.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27837.patch"
          },
          "created_at": "2023-06-07T19:01:56Z",
          "updated_at": "2023-09-18T01:51:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T01:59:12Z",
      "updated_at": "2023-07-06T01:59:12Z",
      "source": {
        "issue": {
          "id": 1678541218,
          "node_id": "PR_kwDOABII585O3QRm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27509",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27509/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27509/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27509/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27509",
          "number": 27509,
          "state": "open",
          "state_reason": null,
          "title": "Relay own transactions only via short-lived Tor or I2P connections",
          "body": "To improve privacy, relay locally submitted transactions (from the wallet or via RPC) to the P2P network only via Tor or I2P short-lived connections.\r\n\r\n* Introduce a new connection type for relaying sensitive data (our own transactions) with the following properties:\r\n  * started whenever there are local unbroadcast transactions to be sent\r\n  * only opened to Tor or I2P peers\r\n  * opened regardless of max connections limits\r\n  * after handshake is completed one local transaction is pushed to the peer and the connection is closed\r\n  * ignore all incoming messages after handshake is completed\r\n\r\n* Relay locally submitted transactions (from the wallet or via RPC) using this new mechanism, to a few Tor or I2P peers.\r\n\r\n* Hide those transactions from `GETDATA` and `MEMPOOL` requests, as if we don't have them.\r\n\r\n* Once we get an `INV` from somebody, request the transaction with `GETDATA`, as if we didn't have it before.\r\n\r\n* After we receive the full transaction as a `TX` message, in reply to our `GETDATA` request, only then consider the transaction has propagated through the network and remove it from the unbroadcast list.\r\n\r\n* `INV` it to others as a result of the `TX` message we get, like what we do with transactions that are not ours.\r\n\r\nThe messages exchange should look like this:\r\n\r\n```\r\ntx-sender >--- connect -------> tx-recipient\r\ntx-sender >--- VERSION -------> tx-recipient\r\ntx-sender <--- VERSION -------< tx-recipient\r\ntx-sender <--- WTXIDRELAY ----< tx-recipient (maybe) \r\ntx-sender <--- SENDADDRV2 ----< tx-recipient (maybe) \r\ntx-sender <--- SENDTXRCNCL ---< tx-recipient (maybe) \r\ntx-sender <--- VERACK --------< tx-recipient\r\ntx-sender >--- VERACK --------> tx-recipient\r\ntx-sender >--- TX ------------> tx-recipient\r\ntx-sender >--- PING ----------> tx-recipient\r\ntx-sender <--- PONG ----------< tx-recipient\r\ntx-sender disconnects\r\n```\r\n\r\nWhenever a new local transaction is received (from the wallet or RPC), the node will send it to 5 (`SENSITIVE_RELAY_NUM_BROADCAST_PER_TX`) recipients right away. If after 10-15 mins we still have not heard anything about the transaction from the network, then it will be sent to 5 more peers (see `PeerManagerImpl::ReattemptInitialBroadcast()`).\r\n\r\nA few considerations:\r\n* The short-lived sensitive relay connections are very cheap and fast wrt network traffic. It is expected that some of those peers will blackhole the transaction. Just one honest/proper peer is enough for successful propagation.\r\n* The peers that receive the transaction could deduce that this is initial transaction broadcast from the transaction originator. This is ok, they can't identify the sender.\r\n\r\nTODO:\r\n* [x] Disable if `-connect` is used or Tor and I2P are not reachable.\r\n* [x] Use I2P transient connections even if listening on I2P.\r\n* [x] Do something with the user-agent string (could reveal identity if it has been personalized) and make sure no identifying information in the `VERSION` message. Done: took the [suggestion below](https://github.com/bitcoin/bitcoin/pull/27509#issuecomment-1517896418).\r\n* [x] Improve the condition when we consider the transaction seen by the network: right now a single INV from somebody suffices (this is still an improvement over `master` which is ok right after pushing the tx to a peer). We could wait for more than one INV, from peers that we have selected (outbound) and that are specifically not the ones we broadcasted to (via short-lived connection). Edit: One `INV` should be enough because after that we broadcast the transaction to everybody we are connected to (like if it is not ours).\r\n* [ ] Idea: start with one connection per transaction (not 5 as it is now), optimistically assuming it will be sufficient. (numbers are examples) After 1 minute, if still not received from the network, try 2 connections, after a few minutes try more. If still unsuccessful after 10 minutes, then fall back to the old mechanism.\r\n\r\nThis is supposed to address:\r\nhttps://github.com/bitcoin/bitcoin/issues/3828\r\nhttps://github.com/bitcoin/bitcoin/issues/14692\r\nhttps://github.com/bitcoin/bitcoin/issues/19042\r\nhttps://github.com/bitcoin/bitcoin/issues/24557\r\nhttps://github.com/bitcoin/bitcoin/issues/25450\r\n",
          "user": {
            "login": "vasild",
            "id": 266751,
            "node_id": "MDQ6VXNlcjI2Njc1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vasild",
            "html_url": "https://github.com/vasild",
            "followers_url": "https://api.github.com/users/vasild/followers",
            "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
            "organizations_url": "https://api.github.com/users/vasild/orgs",
            "repos_url": "https://api.github.com/users/vasild/repos",
            "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/vasild/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64584,
              "node_id": "MDU6TGFiZWw2NDU4NA==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
              "name": "Brainstorming",
              "color": "ebd775",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 57,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27509",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27509",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27509.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27509.patch"
          },
          "created_at": "2023-04-21T13:39:19Z",
          "updated_at": "2023-09-16T07:39:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T02:01:45Z",
      "updated_at": "2023-07-06T02:01:45Z",
      "source": {
        "issue": {
          "id": 1676602375,
          "node_id": "PR_kwDOABII585OwvrE",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27499",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27499/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27499/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27499/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27499",
          "number": 27499,
          "state": "closed",
          "state_reason": null,
          "title": "net processing, refactor: Decouple PeerManager from gArgs",
          "body": "This PR decouples `PeerManager` from our global args manager by introducing `PeerManager::Options`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27499",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27499",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27499.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27499.patch"
          },
          "closed_at": "2023-07-25T09:42:33Z",
          "created_at": "2023-04-20T12:13:36Z",
          "updated_at": "2023-07-25T15:03:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T04:18:24Z",
      "updated_at": "2023-07-06T04:18:24Z",
      "source": {
        "issue": {
          "id": 1495740611,
          "node_id": "PR_kwDOABII585FZpvc",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26697",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26697/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26697/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26697/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26697",
          "number": 26697,
          "state": "open",
          "state_reason": null,
          "title": "logging: use bitset for categories",
          "body": "... rather than integer bitmasks such as (1 << 28). This removes the limit of 32 logging categories -- we're up to 28 currently.\r\n\r\nThis is an alternative to #26619 that was [suggested](https://github.com/bitcoin/bitcoin/pull/26619#issuecomment-1343902657) by @luke-jr.\r\n\r\ntag @jonatack @klementtan",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26697",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26697",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26697.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26697.patch"
          },
          "created_at": "2022-12-14T05:40:18Z",
          "updated_at": "2023-09-12T14:06:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T06:01:42Z",
      "updated_at": "2023-07-06T06:01:42Z",
      "source": {
        "issue": {
          "id": 1299238264,
          "node_id": "PR_kwDOABII5847Ho23",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25572/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
          "number": 25572,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager and use it for the inbound eviction logic",
          "body": "This PR splits off the next couple commits from #25268 that introduce the `EvictionManager` and use it for  the inbound eviction logic.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information (for inbound connections) to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectNodeToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25572",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25572",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25572.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25572.patch"
          },
          "created_at": "2022-07-08T16:39:49Z",
          "updated_at": "2023-08-06T17:48:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T06:13:48Z",
      "updated_at": "2023-07-06T06:13:48Z",
      "source": {
        "issue": {
          "id": 1258121997,
          "node_id": "PR_kwDOABII5844-S2D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25268/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
          "number": 25268,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Introduce EvictionManager",
          "body": "At the moment, the eviction logic is mangled across two different components (`CConnman`, `PeerManager`), so we can't really test it in isolation. This is not completely true for the inbound eviction logic as it exists as static functions in `net.{h.cpp}` for which tests already exist. However, the outbound eviction logic is not covered by any fuzz tests and is only testable by spinning up both a connman and peerman.\r\n\r\nThis PR splits out the eviction logic into its own component `EvictionManager`. In addition to isolating the eviction logic, we get rid of several layer violations (e.g. `CConnman::ForEachNode/ForNode` calls, `CNode::m_last_block_time`, etc.) between `net` and `net processing`.\r\n\r\nOne instance of the `EvictionManager` is created at start up and passed as a reference to the connection and peer managers. The connection and peer managers report all eviction relevant information to the eviction manager who ultimately suggests nodes to evict as the result of `EvictionManager::SelectInboundNodeToEvict` and `EvictionManager::SelectOutboundNodesToEvict`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 12,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25268",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25268",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25268.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25268.patch"
          },
          "created_at": "2022-06-02T12:34:15Z",
          "updated_at": "2023-08-06T17:48:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T07:24:07Z",
      "updated_at": "2023-07-06T07:24:07Z",
      "source": {
        "issue": {
          "id": 782505298,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTUyMDQ5MjI1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20892/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
          "number": 20892,
          "state": "open",
          "state_reason": null,
          "title": "tests: Run both descriptor and legacy tests within a single test invocation",
          "body": "Instead of having the tests only do one type or the other, depending on command line arguments, these tests should be running with both types of wallets. Any test that calls `add_wallet_options` will be run for each wallet type that it specifies a wallet option for if none are give in the command line. If a particular wallet is specified with `--legacy-wallet` or `--descriptors`, the options are still respected.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20892",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20892",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20892.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20892.patch"
          },
          "created_at": "2021-01-09T03:50:55Z",
          "updated_at": "2023-09-15T21:57:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1623876865,
      "node_id": "IC_kwDOABII585gymUB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623876865",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T15:25:40Z",
      "updated_at": "2023-07-06T15:25:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looks like the CI fails:\r\n\r\n```\r\n�[0m�[0;31mp2p_orphan_handling.py                                 | ✖ Failed  | 2407 s",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1623876865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "commented",
      "id": 1623886758,
      "node_id": "IC_kwDOABII585gyoum",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1623886758",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T15:32:37Z",
      "updated_at": "2023-07-06T15:32:37Z",
      "author_association": "MEMBER",
      "body": "Investigating, thanks @DrahtBot",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1623886758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "mentioned",
      "id": 9745286816,
      "node_id": "MEE_lADOABII585qrkcZzwAAAAJE3Uag",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9745286816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T15:32:37Z"
    },
    {
      "event": "subscribed",
      "id": 9745286838,
      "node_id": "SE_lADOABII585qrkcZzwAAAAJE3Ua2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9745286838",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T15:32:37Z"
    },
    {
      "event": "reviewed",
      "id": 1515046495,
      "node_id": "PRR_kwDOABII585aTcZf",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "some initial comments through https://github.com/bitcoin/bitcoin/pull/28031/commits/116378efc1c9c1fe0d26cb42e2bdbb5770815c35\r\n\r\nLog changes suggested are helpful for tracing what's happening in the orphanage on my node I'm testing.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1515046495",
      "submitted_at": "2023-07-06T16:39:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-07T21:02:18Z",
      "updated_at": "2023-07-07T21:02:18Z",
      "source": {
        "issue": {
          "id": 1793434194,
          "node_id": "PR_kwDOABII585U6VtK",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28043/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28043",
          "number": 28043,
          "state": "open",
          "state_reason": null,
          "title": "fuzz: Test headers pre-sync through p2p interface",
          "body": "This PR adds a regression fuzz test for #26355 and [some of the bugs](https://github.com/bitcoin/bitcoin/pull/25717/commits/ed6cddd98e32263fc116a4380af6d66da20da990) found during review of #25717.\r\n\r\nShould give us more confidence in doing #25725.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28043",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28043",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28043.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28043.patch"
          },
          "created_at": "2023-07-07T12:05:27Z",
          "updated_at": "2023-09-12T11:55:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1526722308,
      "node_id": "PRR_kwDOABII585a_-8E",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1526722308",
      "submitted_at": "2023-07-12T16:36:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1527052773,
      "node_id": "PRR_kwDOABII585bBPnl",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "some more comments, not finished yet though.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1527052773",
      "submitted_at": "2023-07-12T22:26:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1527321195,
      "node_id": "PRR_kwDOABII585bCRJr",
      "url": null,
      "actor": null,
      "commit_id": "4cbb63175398d9b8afe755d2adb24edbd2b4913b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1527321195",
      "submitted_at": "2023-07-12T22:31:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1531022386,
      "node_id": "PRR_kwDOABII585bQYwy",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Some thoughts about logging:\r\n\r\nAfter testing this on mainnet for a bit, I think it would be nice to be able to follow the fate of each individual orphan in `BCLog::TXPACKAGES`:\r\nWe currently have a tx-level based log entry for addition (“stored orphan...\"), but nothing for removal, so having additional log entries in `MempoolAcceptedTx()` for succesful resolution and `MempoolRejectedTx()` for failure would be nice, maybe also a tx-level message for removal due to expiration and overflow.\r\n\r\nIf this became too spammy, we could use different severities, but I think it shouldn't be too bad except if you just started with an empty mempool?\r\n\r\nAlso, could we log wtxids whenever possible? There is currently a bit of a mix.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1531022386",
      "submitted_at": "2023-07-14T20:47:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1533720796,
      "node_id": "PRR_kwDOABII585barjc",
      "url": null,
      "actor": null,
      "commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1533720796",
      "submitted_at": "2023-07-17T21:23:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-20T00:51:50Z",
      "updated_at": "2023-07-20T00:51:50Z",
      "source": {
        "issue": {
          "id": 1812043969,
          "node_id": "PR_kwDOABII585V5cL9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28107",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28107/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28107/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28107/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28107",
          "number": 28107,
          "state": "open",
          "state_reason": null,
          "title": "util: Type-safe transaction identifiers",
          "body": "We currently have two different identifiers for transactions: `txid` (refering to the hash of a transaction without witness data) and `wtxid` (referring to the hash of a transaction including witness data). Both are typed as `uint256` which could lead to type-safety bugs in which one transaction identifier type is passed where the other would be expected.\r\n\r\nThis PR introduces explicit `Txid` and `Wtxid` types that (if used) would cause compilation errors for such type confusion bugs.\r\n\r\n(Only the orphanage is converted to use these types in this PR)",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28107",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28107",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28107.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28107.patch"
          },
          "created_at": "2023-07-19T14:10:55Z",
          "updated_at": "2023-09-11T12:57:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1527114151,
      "node_id": "PRR_kwDOABII585bBemn",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1527114151",
      "submitted_at": "2023-07-20T15:18:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1540338442,
      "node_id": "PRR_kwDOABII585bz7MK",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1540338442",
      "submitted_at": "2023-07-21T02:21:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1541149446,
      "node_id": "PRR_kwDOABII585b3BMG",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1541149446",
      "submitted_at": "2023-07-21T13:22:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "labeled",
      "id": 9910182429,
      "node_id": "LE_lADOABII585qrkcZzwAAAAJOsWId",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9910182429",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-25T10:54:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1555503183,
      "node_id": "PRR_kwDOABII585ctxhP",
      "url": null,
      "actor": null,
      "commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1555503183",
      "submitted_at": "2023-07-31T19:40:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T11:14:21Z",
      "updated_at": "2023-08-02T11:14:21Z",
      "source": {
        "issue": {
          "id": 1832975238,
          "node_id": "PR_kwDOABII585W_8AJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28199",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28199/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28199/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28199/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28199",
          "number": 28199,
          "state": "closed",
          "state_reason": null,
          "title": "test: tx orphan handling",
          "body": "I was doing some mutation testing (through reckless refactoring) locally and found some specific behaviors in orphan handling that weren't picked up by tests. Adding some of these test cases now can maybe help with reviewing refactors like #28031.\r\n\r\n- Parent requests aren't sent immediately. A delay is added and the requests are filtered by AlreadyHaveTx before they are sent, which means you can't use fake orphans to probe precise arrival timing of a tx.\r\n- Parent requests include all that are not AlreadyHaveTx. This means old confirmed parents may be requested.\r\n- The node does not give up on orphans if the peer responds to a parent request with notfound. This means that if a parent is an old confirmed transaction (in which notfound is expected), the orphan should still be resolved.\r\n- Rejected parents can cause an orphan to be dropped, but it depends on the reason and only based on txid.\r\n- Rejected parents can cause an orphan to be rejected too, by both wtxid and txid.\r\n- Requests for orphan parents should be de-duplicated with \"regular\" txrequest. If a missing parent has the same hash as an in-flight request, it shouldn't be requested.\r\n- Multiple orphans with overlapping parents should not cause duplicated parent requests.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28199",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28199",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28199.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28199.patch"
          },
          "closed_at": "2023-08-22T21:03:56Z",
          "created_at": "2023-08-02T11:14:20Z",
          "updated_at": "2023-08-22T21:41:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 9999533758,
      "node_id": "CTDE_lADOABII585qrkcZzwAAAAJUBMa-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9999533758",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T14:07:33Z"
    },
    {
      "event": "commented",
      "id": 1664055615,
      "node_id": "IC_kwDOABII585jL3k_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664055615",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T14:09:47Z",
      "updated_at": "2023-08-03T14:09:47Z",
      "author_association": "MEMBER",
      "body": "Opened #28199 with tests that may help us ensure this PR isn't changing specific behaviors. Marking this as draft as it depends on that one.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1664055615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10091624268,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJZgfdM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10091624268",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-14T21:07:42Z"
    },
    {
      "event": "reviewed",
      "id": 1543694803,
      "node_id": "PRR_kwDOABII585cAunT",
      "url": null,
      "actor": null,
      "commit_id": "4228bd960152ac623ac134d85ef5e7a74cc0c008",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reworked this into a `TxDownloadManager` (https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1262316909) and addressed most comments.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1543694803",
      "submitted_at": "2023-08-14T21:15:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "unlabeled",
      "id": 10091800902,
      "node_id": "UNLE_lADOABII585qrkcZzwAAAAJZhKlG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10091800902",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-14T21:33:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T02:58:54Z",
      "updated_at": "2023-08-15T02:58:54Z",
      "source": {
        "issue": {
          "id": 1837354188,
          "node_id": "PR_kwDOABII585XOtuA",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28218",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28218/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28218/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28218/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28218",
          "number": 28218,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Make IsInitialBlockDownload & NotifyHeaderTip not require a Chainstate",
          "body": "This change makes `IsInitialBlockDownload` and `NotifyHeaderTip` functions no longer tied to individual `Chainstate` objects. It makes them work with the `ChainstateManager` object instead so code is simpler and it is no longer possible to call them incorrectly with an inactive `Chainstate`.\r\n\r\nThis change also makes `m_cached_finished_ibd` caching easier to reason about, because now there is only one cached value instead of two (for background and snapshot chainstates) so the cached IBD state now no longer gets reset when a snapshot is loaded.\r\n\r\nThere should be no change in behavior because these functions were always called on the active `ChainState` objects.\r\n\r\nThese changes were discussed previously https://github.com/bitcoin/bitcoin/pull/27746#discussion_r1246868905 and https://github.com/bitcoin/bitcoin/pull/27746#discussion_r1237552792 as possible followups for that PR.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28218",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28218",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28218.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28218.patch"
          },
          "closed_at": "2023-08-21T09:55:55Z",
          "created_at": "2023-08-04T21:14:06Z",
          "updated_at": "2023-08-21T09:55:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T04:22:05Z",
      "updated_at": "2023-08-15T04:22:05Z",
      "source": {
        "issue": {
          "id": 1824626893,
          "node_id": "PR_kwDOABII585Wjy4M",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28170/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28170",
          "number": 28170,
          "state": "open",
          "state_reason": null,
          "title": "p2p: adaptive connections services flags",
          "body": "Derived from #28120 discussion.\r\n\r\nBy relocating the peer desirable services flags into the peer manager, we\r\nallow the connections acceptance process to handle post-IBD potential\r\nstalling scenarios.\r\n\r\nThe peer manager will be able to dynamically adjust the services flags\r\nbased on the node's proximity to the tip (back and forth). Allowing the node\r\nto recover from the following post-IBD scenario:\r\nSuppose the node has successfully synced the chain, but later experienced\r\ndropped connections and remained inactive for a duration longer than the limited\r\npeers threshold (the timeframe within which limited peers can provide blocks). In\r\nsuch cases, upon reconnecting to the network, the node might only establish\r\nconnections with limited peers, filling up all available outbound slots. Resulting\r\nin an inability to synchronize the chain (because limited peers will not provide\r\nblocks older than the `NODE_NETWORK_LIMITED_MIN_BLOCKS` threshold).",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28170",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28170",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28170.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28170.patch"
          },
          "created_at": "2023-07-27T15:34:45Z",
          "updated_at": "2023-09-14T20:23:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T08:33:06Z",
      "updated_at": "2023-08-15T08:33:06Z",
      "source": {
        "issue": {
          "id": 1700441577,
          "node_id": "PR_kwDOABII585QAqXJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27596",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27596/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27596/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27596/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27596",
          "number": 27596,
          "state": "open",
          "state_reason": null,
          "title": "assumeutxo (2)",
          "body": "- Background and FAQ: https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal\r\n- Prior progress/project: https://github.com/bitcoin/bitcoin/projects/11\r\n- Replaces https://github.com/bitcoin/bitcoin/pull/15606, which was closed due to Github slowness. Original description and commentary can be found there.\r\n\r\n---\r\n\r\nThis changeset finishes the first phase of the assumeutxo project. It makes UTXO snapshots loadable via RPC (`loadtxoutset`) and adds `assumeutxo` parameters to chainparams. It contains all the remaining changes necessary to both use an assumedvalid snapshot chainstate and do a full validation sync in the background.\r\n\r\nThis may look like a lot to review, but note that\r\n- ~200 lines are a (non-essential) demo shell script\r\n- Many lines are functional test, documentation, and relatively dilute RPC code.\r\n\r\nSo it shouldn't be as burdensome to review as the linecount might suggest.\r\n\r\n- **P2P**: minor changes are made to `init.cpp` and `net_processing.cpp` to make simultaneous IBD across multiple chainstates work.\r\n- **Pruning**: implement correct pruning behavior when using a background chainstate\r\n- **Blockfile separation**: to prevent \"fragmentation\" in blockfile storage, have background chainstates use separate blockfiles from active snapshot chainstates to avoid interleaving heights and impairing pruning.\r\n- **Indexing**: some `CValidationInterface` events are given with an additional parameter, ChainstateRole, and all indexers ignore events from ChainstateRole::ASSUMEDVALID so that indexation only happens sequentially.\r\n- Have `-reindex` properly wipe snapshot chainstates.\r\n- **RPC**: introduce RPC commands `loadtxoutset` and (hidden) `getchainstates`.\r\n- **Release docs & first assumeutxo commitment**: add notes and a particular assumeutxo hash value for first AU-enabled release.\r\n  - This will complete the project and allow use of UTXO snapshots for faster node bootstrap.\r\n\r\nThe next phase, if it were to be pursued, would be coming up with a way to distribute the UTXO snapshots over the P2P network.\r\n\r\n---\r\n\r\n### UTXO snapshots\r\n\r\n- **788'000**\r\n  - HTTP: http://img.jameso.be/utxo-788000.dat\r\n  - Torrent: `magnet:?xt=urn:btih:a457a54c76dfdbb3f44e3485a84c4772bea647e0&dn=utxo-788000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\r\n  - Create your own with `./contrib/devtools/utxo_snapshot.sh`\r\n    - e.g. `./contrib/devtools/utxo_snapshot.sh 788000 utxo.dat ./src/bitcoin-cli -datadir=$(pwd)/testdata`\r\n\r\n### Testing\r\n\r\n#### For fun (~5min)\r\n\r\nIf you want to do a quick test, you can run `./contrib/devtools/test_utxo_snapshots.sh` and follow the instructions. This is mostly obviated by the functional tests, though.\r\n\r\n#### For real (longer)\r\n\r\nIf you'd like to experience a real usage of assumeutxo, you can do that too.\r\nI've cut a new snapshot at height 788'000 (http://img.jameso.be/utxo-788000.dat - but you can do it yourself with `./contrib/devtools/utxo_snapshot.sh` if you want). Download that, and then create a datadir for testing:\r\n```sh\r\n$ cd ~/src/bitcoin  # or whatever\r\n\r\n# get the snapshot\r\n$ curl http://img.jameso.be/utxo-788000.dat > utxo-788000.dat\r\n\r\n# you'll want to do this if you like copy/pasting \r\n$ export AU_DATADIR=/home/${USER}/au-test # or wherever\r\n\r\n$ mkdir ${AU_DATADIR}\r\n$ vim ${AU_DATADIR}/bitcoin.conf\r\n\r\ndbcache=8000  # or, you know, something high\r\nblockfilterindex=1\r\ncoinstatsindex=1\r\nprune=3000\r\nlogthreadnames=1\r\n```\r\nObtain this branch, build it, and then start bitcoind:\r\n```sh\r\n$ git remote add jamesob https://github.com/jamesob/bitcoin\r\n$ git fetch jamesob assumeutxo\r\n$ git checkout jamesob/assumeutxo\r\n\r\n$ ./configure $conf_args && make  # (whatever you like to do here)\r\n\r\n# start 'er up and watch the logs\r\n$ ./src/bitcoind -datadir=${AU_DATADIR}\r\n```\r\nThen, in some other window, load the snapshot\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset $(pwd)/utxo-788000.dat\r\n```\r\n\r\nYou'll see some log messages about headers retrieval and waiting to see the snapshot in the headers chain. Once you get the full headers chain, you'll spend a decent amount of time (~10min) loading the snapshot, checking it, and flushing it to disk. After all that happens, you should be syncing to tip in pretty short order, and you'll see the occasional `[background validation]` log message go by.\r\n\r\nIn yet another window, you can check out chainstate status with\r\n```sh\r\n$ ./src/bitcoin-cli -datadir=${AU_DATADIR} getchainstates\r\n```\r\nas well as usual favorites like `getblockchaininfo`.",
          "user": {
            "login": "jamesob",
            "id": 73197,
            "node_id": "MDQ6VXNlcjczMTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesob",
            "html_url": "https://github.com/jamesob",
            "followers_url": "https://api.github.com/users/jamesob/followers",
            "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesob/orgs",
            "repos_url": "https://api.github.com/users/jamesob/repos",
            "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jamesob/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27596",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27596",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27596.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27596.patch"
          },
          "created_at": "2023-05-08T15:08:28Z",
          "updated_at": "2023-09-18T00:15:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T10:21:46Z",
      "updated_at": "2023-08-15T10:21:46Z",
      "source": {
        "issue": {
          "id": 1573080079,
          "node_id": "PR_kwDOABII585JXcpb",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27052",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27052/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27052/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27052/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27052",
          "number": 27052,
          "state": "open",
          "state_reason": null,
          "title": "test: rpc: add last block announcement time to getpeerinfo result",
          "body": "This PR adds `last_block_announcement` to the per-peer `getpeerinfo` RPC result. This is the most recent time that this peer was the first to notify our node of a new block (one that we didn't already know about), or zero if this peer has never been the first to notify us of a new block. This timestamp already exists internally and is used for stale-tip eviction logic; this PR exposes it at the RPC layer.\r\n\r\nThis PR started out as a suggestion for additional test coverage, see https://github.com/bitcoin/bitcoin/pull/26172#issuecomment-1259678260. It turned out that the easiest way to test (already-merged) #26172 is to add this field to `getpeerinfo` and have a functional test verify its value. But it may also be useful to have this result in its own right, similar to that RPC's existing `last_block` field -- it indicates something about the quality of our peers. It allows one to predict which peer will be evicted when the stale tip logic activates. (I'm not sure if that would be useful, but it may be.)\r\n\r\nThe functional test added here fails without #26172, which is the main goal.\r\n\r\nThis PR does not test the actual stale-tip eviction logic; that's difficult to do with a functional test. But it does test the correctness of the timestamp that the eviction logic depends on. #23352 is an attempt to test the eviction logic using a unit test, it's not ready to be merged yet. I think having both kinds of tests would be beneficial.",
          "user": {
            "login": "LarryRuane",
            "id": 8321330,
            "node_id": "MDQ6VXNlcjgzMjEzMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LarryRuane",
            "html_url": "https://github.com/LarryRuane",
            "followers_url": "https://api.github.com/users/LarryRuane/followers",
            "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
            "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
            "repos_url": "https://api.github.com/users/LarryRuane/repos",
            "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27052",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27052",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27052.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27052.patch"
          },
          "created_at": "2023-02-06T18:32:56Z",
          "updated_at": "2023-09-15T17:56:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T11:43:17Z",
      "updated_at": "2023-08-15T11:43:17Z",
      "source": {
        "issue": {
          "id": 1471685707,
          "node_id": "PR_kwDOABII585EFGFt",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26621",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26621/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26621/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26621/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26621",
          "number": 26621,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Continue moving application data from CNode to Peer",
          "body": "This PR picks up a subset of changes from #24970 and additionally moves `m_bip152_highbandwith{to,from}`, `nTimeOffset`, `nVersion`, `m_greates_common_version`.",
          "user": {
            "login": "dergoegge",
            "id": 8077169,
            "node_id": "MDQ6VXNlcjgwNzcxNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dergoegge",
            "html_url": "https://github.com/dergoegge",
            "followers_url": "https://api.github.com/users/dergoegge/followers",
            "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
            "organizations_url": "https://api.github.com/users/dergoegge/orgs",
            "repos_url": "https://api.github.com/users/dergoegge/repos",
            "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/dergoegge/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26621",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26621",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26621.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26621.patch"
          },
          "created_at": "2022-12-01T17:26:32Z",
          "updated_at": "2023-09-14T10:44:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unsubscribed",
      "id": 10096263668,
      "node_id": "UE_lADOABII585qrkcZzwAAAAJZyMH0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10096263668",
      "actor": {
        "login": "dellroy979",
        "id": 135130941,
        "node_id": "U_kgDOCA3vPQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/135130941?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dellroy979",
        "html_url": "https://github.com/dellroy979",
        "followers_url": "https://api.github.com/users/dellroy979/followers",
        "following_url": "https://api.github.com/users/dellroy979/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dellroy979/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dellroy979/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dellroy979/subscriptions",
        "organizations_url": "https://api.github.com/users/dellroy979/orgs",
        "repos_url": "https://api.github.com/users/dellroy979/repos",
        "events_url": "https://api.github.com/users/dellroy979/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dellroy979/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T11:51:15Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T12:23:24Z",
      "updated_at": "2023-08-15T12:23:24Z",
      "source": {
        "issue": {
          "id": 1426214940,
          "node_id": "PR_kwDOABII585BsmgJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
          "number": 26403,
          "state": "open",
          "state_reason": null,
          "title": "policy: Ephemeral anchors",
          "body": "Builds on top of https://github.com/bitcoin/bitcoin/pull/25038 for consideration of inclusion to the proposal. Requires V3, for simplicity of reasoning and usage. Implementation of idea written out at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021036.html\r\n\r\nBIP text here: https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26403",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26403.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26403.patch"
          },
          "created_at": "2022-10-27T20:14:15Z",
          "updated_at": "2023-08-17T13:51:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T14:08:25Z",
      "updated_at": "2023-08-15T14:08:25Z",
      "source": {
        "issue": {
          "id": 1221671479,
          "node_id": "PR_kwDOABII5843Gzwx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
          "number": 25038,
          "state": "open",
          "state_reason": null,
          "title": "policy: nVersion=3 and Package RBF",
          "body": "See #27463 for overall package relay tracking. This PR is in draft while ancestor package validation is being figured out.\r\n\r\nThis PR contains 2 projects: v3 policy and package RBF. Mailing list posts: [package RBF 1](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019464.html) and [V3 + package RBF 2](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html). It stems from a long discussion about RBF pinning, across a [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) and [gist](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff).\r\n\r\nV3 Policy: A set of policy rules applied to transactions with their `nVersion` field set to 3. Namely, it allows users to opt in to more restrictive descendant limits for shared transactions. If adopted by many nodes in the network, V3 mitigates various RBF pinning attacks. See doc/policy/version3_transactions.md for the exact rules and rationale, and [these review club notes](bitcoincore.reviews/25038) for more background and discussion.\r\n\r\nPackage RBF: In addition to allowing a child to pay for its parents within the package, also allow the child to pay for replacing the parent's conflicts. For example, this allows LN users to replace commitment transactions existing in the mempool, simply by broadcasting their respective commitment transactions with a high-fee child. The commitment transactions can be signed with 0 fees, which means no overpaying.\r\n\r\nFAQ: is v3 still helpful even with cluster mempool (#27677) ?\r\n\r\n- Rule 3 pinning: This is addressed with v3 but not really with cluster mempool (descendant allowance is still too permissive).\r\n- Package RBF and ACP pinning: This PR allows for package RBF with v3 packages. V3 has an effective \"cluster limit\" of 2 which makes it very cheap to calculate the mining score of a v3 transaction. With cluster mempool, which also makes it easier to calculate mining score, we could have package RBF for non-v3 transactions.\r\n- Allowing 0fee transactions: This PR allows v3 transactions to be below minimum relay feerate, provided they are CPFP'd. This is because the simplified topology allows us to avoid situations like the ones described in #26933. With cluster mempool, we can allow this for non-v3 transactions.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 29,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25038.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25038.patch"
          },
          "created_at": "2022-04-30T00:24:31Z",
          "updated_at": "2023-09-09T00:08:45Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10100135942,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJaA9gG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10100135942",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-15T18:26:57Z"
    },
    {
      "event": "labeled",
      "id": 10144152118,
      "node_id": "LE_lADOABII585qrkcZzwAAAAJco3o2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10144152118",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-21T11:15:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 10163154751,
      "node_id": "REFE_lADOABII585qrkcZzwAAAAJdxW8_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10163154751",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5aa67eb3655a0023f0cf115176fc8d5bac53cdcd",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aa67eb3655a0023f0cf115176fc8d5bac53cdcd",
      "created_at": "2023-08-22T21:03:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10221183395,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJhOuGj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221183395",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:19:44Z"
    },
    {
      "event": "unlabeled",
      "id": 10221195137,
      "node_id": "UNLE_lADOABII585qrkcZzwAAAAJhOw-B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221195137",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:20:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:32:45Z",
      "updated_at": "2023-08-29T13:32:45Z",
      "source": {
        "issue": {
          "id": 1871687992,
          "node_id": "PR_kwDOABII585ZCWLJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28364",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28364/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28364/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28364/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28364",
          "number": 28364,
          "state": "closed",
          "state_reason": null,
          "title": "log: log wtxids when possible, add TXPACKAGES category",
          "body": "This was taken from #28031 (see #27463 for project tracking).\r\n\r\n- Log wtxids in addition to txids when possible. This allows us to track the fate of a transaction from inv to mempool accept/reject through logs.\r\n- Additional orphan-related logging to make testing and debugging easier. Suggested in https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1531022386 and https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1269622220\r\n- Add `TXPACKAGES` category for logging.\r\n- Move a nearby comment block that was in the wrong place.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28364",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28364",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28364.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28364.patch"
          },
          "closed_at": "2023-08-31T16:55:55Z",
          "created_at": "2023-08-29T13:32:45Z",
          "updated_at": "2023-09-14T15:10:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1697460511,
      "node_id": "IC_kwDOABII585lLTEf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1697460511",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:35:34Z",
      "updated_at": "2023-08-29T13:35:34Z",
      "author_association": "MEMBER",
      "body": "> Some thoughts about logging:\r\n> \r\n> After testing this on mainnet for a bit, I think it would be nice to be able to follow the fate of each individual orphan in `BCLog::TXPACKAGES`: We currently have a tx-level based log entry for addition (“stored orphan...\"), but nothing for removal, so having additional log entries in `MempoolAcceptedTx()` for succesful resolution and `MempoolRejectedTx()` for failure would be nice, maybe also a tx-level message for removal due to expiration and overflow.\r\n> \r\n> If this became too spammy, we could use different severities, but I think it shouldn't be too bad except if you just started with an empty mempool?\r\n> \r\n> Also, could we log wtxids whenever possible? There is currently a bit of a mix.\r\n\r\n> also, adding wtxid logging at `MEMPOOLREJ` log is done would be <3\r\n\r\n@mzumsande @instagibbs\r\nI've split the commits adding new logs and wtxids to the logging to its own small PR, #28364\r\n\r\n(Also, rebased.)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1697460511",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "mentioned",
      "id": 10221386990,
      "node_id": "MEE_lADOABII585qrkcZzwAAAAJhPfzu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221386990",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:35:35Z"
    },
    {
      "event": "subscribed",
      "id": 10221387012,
      "node_id": "SE_lADOABII585qrkcZzwAAAAJhPf0E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221387012",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:35:35Z"
    },
    {
      "event": "mentioned",
      "id": 10221387052,
      "node_id": "MEE_lADOABII585qrkcZzwAAAAJhPf0s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221387052",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:35:36Z"
    },
    {
      "event": "subscribed",
      "id": 10221387067,
      "node_id": "SE_lADOABII585qrkcZzwAAAAJhPf07",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221387067",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T13:35:36Z"
    },
    {
      "event": "reviewed",
      "id": 1600730903,
      "node_id": "PRR_kwDOABII585faTcX",
      "url": null,
      "actor": null,
      "commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "went over new-er implementation through 7f9db92ba3f483f78bd248406d921bd73b1e7054\r\n\r\ndropping some comments\r\n\r\nfuzzer fail:\r\n```\r\nnode/txdownload_impl.cpp:18 ConnectedPeer: Assertion `m_peer_info.count(nodeid) == 0' failed.\r\n```",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1600730903",
      "submitted_at": "2023-08-29T18:47:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1601193815,
      "node_id": "PRR_kwDOABII585fcEdX",
      "url": null,
      "actor": null,
      "commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1601193815",
      "submitted_at": "2023-08-29T20:05:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "reviewed",
      "id": 1603028137,
      "node_id": "PRR_kwDOABII585fjESp",
      "url": null,
      "actor": null,
      "commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1603028137",
      "submitted_at": "2023-08-30T15:53:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
    },
    {
      "event": "referenced",
      "id": 10247420727,
      "node_id": "REFE_lADOABII585qrkcZzwAAAAJiyzs3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10247420727",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5666966dffeb620b4a628679d667346e02fd3b19",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/5666966dffeb620b4a628679d667346e02fd3b19",
      "created_at": "2023-08-31T16:55:53Z"
    },
    {
      "event": "labeled",
      "id": 10247848677,
      "node_id": "LE_lADOABII585qrkcZzwAAAAJi0cLl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10247848677",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-31T17:34:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 10320464603,
      "node_id": "REFE_lADOABII585qrkcZzwAAAAJnJcrb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10320464603",
      "actor": {
        "login": "Frank-GER",
        "id": 87550788,
        "node_id": "MDQ6VXNlcjg3NTUwNzg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/87550788?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Frank-GER",
        "html_url": "https://github.com/Frank-GER",
        "followers_url": "https://api.github.com/users/Frank-GER/followers",
        "following_url": "https://api.github.com/users/Frank-GER/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Frank-GER/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Frank-GER/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Frank-GER/subscriptions",
        "organizations_url": "https://api.github.com/users/Frank-GER/orgs",
        "repos_url": "https://api.github.com/users/Frank-GER/repos",
        "events_url": "https://api.github.com/users/Frank-GER/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Frank-GER/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "52cce72c8f6ffb6b03ec8d94507d9150a69dfa83",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/52cce72c8f6ffb6b03ec8d94507d9150a69dfa83",
      "created_at": "2023-09-08T17:08:30Z"
    },
    {
      "event": "commented",
      "id": 1716305920,
      "node_id": "IC_kwDOABII585mTMAA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1716305920",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-12T19:35:08Z",
      "updated_at": "2023-09-12T19:35:08Z",
      "author_association": "MEMBER",
      "body": "think this can be rebased since tests are merged",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1716305920",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10356176088,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJpRrTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10356176088",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-13T07:56:08Z"
    },
    {
      "event": "commented",
      "id": 1717130928,
      "node_id": "IC_kwDOABII585mWVaw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1717130928",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-13T07:56:21Z",
      "updated_at": "2023-09-13T07:56:21Z",
      "author_association": "MEMBER",
      "body": "Rebased but not all comments addressed yet, still working on it.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#issuecomment-1717130928",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28031"
    },
    {
      "event": "unlabeled",
      "id": 10357208675,
      "node_id": "UNLE_lADOABII585qrkcZzwAAAAJpVnZj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10357208675",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-13T09:30:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-13T16:15:05Z",
      "updated_at": "2023-09-13T16:15:05Z",
      "source": {
        "issue": {
          "id": 839117639,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTk5MTgyNzQ5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21515/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21515",
          "number": 21515,
          "state": "open",
          "state_reason": null,
          "title": "Erlay: bandwidth-efficient transaction relay protocol",
          "body": "I started forking off parts of this big PR so that we can review and merge in chunks with better efficiency.\r\n1. [p2p: Erlay support signaling](https://github.com/bitcoin/bitcoin/pull/23443) — done\r\n2. [Follow-up](https://github.com/bitcoin/bitcoin/pull/26359) — done\r\n3. [p2p: Fill reconciliation sets and request reconciliation (Erlay)](https://github.com/bitcoin/bitcoin/pull/26283) — pending\r\n\r\n-----------\r\n\r\nPlease use this discussion for high-level topics and keep the nitpics for the sub-PRs. The state of this branch might be not the cleanest and the freshest, although last time I rebased in on 2022/05/12 to be in sync {with master, with the latest child PR} and pass CI (modulo one race condition issue).\r\n\r\n-----------\r\n\r\nThis is an implementation of  [Erlay](https://arxiv.org/abs/1905.10518) , using primitives in the BIP-330 (see the updated spec  [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki) ). Please refer to these two to understand the design. My talk is [here](https://youtu.be/YxsjdIl0034?t=670) .\r\n\r\nThis PR supersedes the previous [one](https://github.com/bitcoin/bitcoin/pull/18261), because that one got too much review comments (I tried to resolve all of them for this version), and also it was much refactored since then.\r\n\r\n### Abstract\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I’ll mention them briefly once again here:\r\n* save 40% of the bandwidth consumed by a node\r\n* increase network connectivity for almost no bandwidth or latency cost\r\n* improves privacy as a side-effect\r\n\r\n### How to review\r\n\r\nI suggest doing `make clean && autogen.sh && configure` before you try building it locally.\r\n\r\n-----------\r\n\r\nI created 2 discussion boards, please discuss not-code-related topics there:\r\n1. [Understanding bandwidth savings](https://github.com/naumenkogs/txrelaysim/issues/7)\r\n2. [Joining mainnet testing](https://github.com/naumenkogs/txrelaysim/issues/8)",
          "user": {
            "login": "naumenkogs",
            "id": 7975071,
            "node_id": "MDQ6VXNlcjc5NzUwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naumenkogs",
            "html_url": "https://github.com/naumenkogs",
            "followers_url": "https://api.github.com/users/naumenkogs/followers",
            "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
            "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
            "repos_url": "https://api.github.com/users/naumenkogs/repos",
            "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98298007,
              "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
              "name": "P2P",
              "color": "006b75",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21515",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21515",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21515.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21515.patch"
          },
          "created_at": "2021-03-23T20:58:32Z",
          "updated_at": "2023-09-15T18:48:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-14T13:59:46Z",
      "updated_at": "2023-09-14T13:59:46Z",
      "source": {
        "issue": {
          "id": 1896642598,
          "node_id": "PR_kwDOABII585aWNyZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28481",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28481/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28481/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28481/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28481",
          "number": 28481,
          "state": "open",
          "state_reason": null,
          "title": "txorphanage: add size accounting, use wtxids, support multiple announcers",
          "body": "This PR contains changes to `TxOrphanage` needed for package relay stuff. See #27463 for project tracking and #28031 for how this code is used.\r\n\r\nSeparating this PR was suggested in https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261414179.\r\n\r\nChanges here:\r\n- Change params to wtxid instead of txid.\r\n- Track total size (`CTransaction::GetTotalSize()` of orphans stored, as well as the size per peer.\r\n- Support having multiple announcers for the same tx. This helps us retry resolving the same orphan with multiple peers if it fails the first time.\r\n- Store the deduplicated missing parent txids in `OrphanTx` so that we don't need to calculate them again later on.\r\n- Return the erased wtxids from `EraseForBlock` which includes orphans that conflicted with the block. This helps us delete those orphan resolution attempts from our tracker.\r\n- Enable limiting the total size of orphans instead of just the total count. No new limits are introduced, the default is maximum count * maximum tx size.\r\n- Unit tests + fuzzer.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28481",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28481",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28481.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28481.patch"
          },
          "created_at": "2023-09-14T13:59:45Z",
          "updated_at": "2023-09-15T17:55:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkNmI4Mzk2MTZjNjViMGNhNWZlZmRiNTBjZTBiOGIxZmZhZDg5NDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947",
      "tree": {
        "sha": "82f90b8b1de7731877493e86e293e947169d94b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82f90b8b1de7731877493e86e293e947169d94b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1a9fd627b1a669c4dfab797da42825230708f2a",
          "sha": "f1a9fd627b1a669c4dfab797da42825230708f2a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f1a9fd627b1a669c4dfab797da42825230708f2a"
        }
      ],
      "message": "[txorphange] erase and get orphans by wtxid instead of txid\n\nWtxids are better because they disambiguate between transactions with\nthe same txid but different witnesses. The package relay logic will work\nwith wtxids, e.g. upon receipt of an ancpkginfo containing wtxids of\ntransactions, it will look for those transactions in the orphanage.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:06:57Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-24T15:10:01Z"
      },
      "sha": "4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVlMjA2MzQ5NmIxY2E4NDZlOTU4NDYxOTU5MWJiNDQxMGVjMGM4NzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee2063496b1ca846e9584619591bb4410ec0c871",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee2063496b1ca846e9584619591bb4410ec0c871",
      "tree": {
        "sha": "6842b68cce4a7f0caf0225a778365bb185890886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6842b68cce4a7f0caf0225a778365bb185890886"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947",
          "sha": "4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4d6b839616c65b0ca5fefdb50ce0b8b1ffad8947"
        }
      ],
      "message": "[txorphanage] track size of stored orphans, total and by peer\n\nNo effect for now, just additional tracking. Enables:\n- load balance orphan resolution, limit per-peer orphanage usage\n- limit the total size of orphans instead of just the count",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:15Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-03-31T09:58:09Z"
      },
      "sha": "ee2063496b1ca846e9584619591bb4410ec0c871"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5Y2ZhNWY5MWM5NTc0Mjk1ZjNlMzY3Mjc3NjliOTMzZTU0YWUwZjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cfa5f91c9574295f3e36727769b933e54ae0f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cfa5f91c9574295f3e36727769b933e54ae0f1",
      "tree": {
        "sha": "112e318d1eb225d3ff5549b14af97af74cb1de14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112e318d1eb225d3ff5549b14af97af74cb1de14"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee2063496b1ca846e9584619591bb4410ec0c871",
          "sha": "ee2063496b1ca846e9584619591bb4410ec0c871",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee2063496b1ca846e9584619591bb4410ec0c871"
        }
      ],
      "message": "[txorphanage] support multiple announcers\n\nAdd ability to add and track multiple announcers per orphan transaction,\nerasing announcers but not the entire orphan.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-18T15:02:58Z"
      },
      "sha": "e9cfa5f91c9574295f3e36727769b933e54ae0f1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1ZWE2ZmFiZTM2ZDcyOGI2OWE3MzZiNmY4MmExMzZmNDQwM2Q3YmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05ea6fabe36d728b69a736b6f82a136f4403d7bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/05ea6fabe36d728b69a736b6f82a136f4403d7bf",
      "tree": {
        "sha": "abc845e07969ddb92b76cd26911442cb851658f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abc845e07969ddb92b76cd26911442cb851658f0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cfa5f91c9574295f3e36727769b933e54ae0f1",
          "sha": "e9cfa5f91c9574295f3e36727769b933e54ae0f1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cfa5f91c9574295f3e36727769b933e54ae0f1"
        }
      ],
      "message": "[txorphanage] store parent txids in OrphanTx",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-27T10:27:16Z"
      },
      "sha": "05ea6fabe36d728b69a736b6f82a136f4403d7bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE2MzBkYTAxOWJkNTc4ODVkNWM1MjA5NWNjNzY5MDVhM2M1N2RmZmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1630da019bd57885d5c52095cc76905a3c57dffa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1630da019bd57885d5c52095cc76905a3c57dffa",
      "tree": {
        "sha": "f10000fadc305768ab2225148250885547158194",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f10000fadc305768ab2225148250885547158194"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05ea6fabe36d728b69a736b6f82a136f4403d7bf",
          "sha": "05ea6fabe36d728b69a736b6f82a136f4403d7bf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05ea6fabe36d728b69a736b6f82a136f4403d7bf"
        }
      ],
      "message": "[txorphanage] return erased wtxids from EraseForBlock\n\nThis information is already known; returning it is essentially free. A\nlater commit uses these wtxids to remove conflicted transactions from\nthe orphan resolution tracker.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-02-20T09:59:14Z"
      },
      "sha": "1630da019bd57885d5c52095cc76905a3c57dffa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNmNWRjMjYwNmY2MjRlNDJmNDMzYmYyNTJlY2E1ZjY4NDQ0N2RiNWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f5dc2606f624e42f433bf252eca5f684447db5f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5dc2606f624e42f433bf252eca5f684447db5f",
      "tree": {
        "sha": "9eacc0474a0d68aca8f1f110f88fda8a61e61d4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eacc0474a0d68aca8f1f110f88fda8a61e61d4f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1630da019bd57885d5c52095cc76905a3c57dffa",
          "sha": "1630da019bd57885d5c52095cc76905a3c57dffa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1630da019bd57885d5c52095cc76905a3c57dffa"
        }
      ],
      "message": "[txorphanage] include maximum total size in LimitOrphans",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T13:03:52Z"
      },
      "sha": "3f5dc2606f624e42f433bf252eca5f684447db5f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk1ZmNiMTZhYzQyYmMxM2MyZTczMTFkZWY3NzM0M2EwMjZmMTYzODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95fcb16ac42bc13c2e7311def77343a026f16380",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95fcb16ac42bc13c2e7311def77343a026f16380",
      "tree": {
        "sha": "2260742404bb6b9b62d895d7eb22eb2e5b9fb117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2260742404bb6b9b62d895d7eb22eb2e5b9fb117"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f5dc2606f624e42f433bf252eca5f684447db5f",
          "sha": "3f5dc2606f624e42f433bf252eca5f684447db5f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5dc2606f624e42f433bf252eca5f684447db5f"
        }
      ],
      "message": "[unit test] orphanage: multiple announcers, eviction",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-18T18:12:35Z"
      },
      "sha": "95fcb16ac42bc13c2e7311def77343a026f16380"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxMDFjNjAxZjViNDMxMmM2ZDMwY2YwZjdmYzVkYjg3YTMyYjFlYTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2",
      "tree": {
        "sha": "1db681246fb3bfcc68ed2014c241208170b7043b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1db681246fb3bfcc68ed2014c241208170b7043b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95fcb16ac42bc13c2e7311def77343a026f16380",
          "sha": "95fcb16ac42bc13c2e7311def77343a026f16380",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/95fcb16ac42bc13c2e7311def77343a026f16380"
        }
      ],
      "message": "[fuzz] test new orphanage methods",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:07:40Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-04T11:04:45Z"
      },
      "sha": "6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyMWZiZTdmODNiNWI0ZTVlMmU5YWFkMWE0MzQyNGJhNzFkZmYxMjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124",
      "tree": {
        "sha": "094cfcf5aaba4b99f0ba4a8ac65e816ed47b97b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/094cfcf5aaba4b99f0ba4a8ac65e816ed47b97b1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2",
          "sha": "6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6101c601f5b4312c6d30cf0f7fc5db87a32b1ea2"
        }
      ],
      "message": "[refactor] consolidate valid ATMP processing\n\nDe-duplicate code that lives in multiple places.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:10:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-26T10:44:45Z"
      },
      "sha": "b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMyMTg3NzM3ZjUwOGNlODQyNzcwY2EwZmEzZDI1YjI2ODRlOTkxNWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2187737f508ce842770ca0fa3d25b2684e9915b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c2187737f508ce842770ca0fa3d25b2684e9915b",
      "tree": {
        "sha": "18f1a2bf5748debbafa2cd4143fad6112fb1ccfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18f1a2bf5748debbafa2cd4143fad6112fb1ccfe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124",
          "sha": "b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b21fbe7f83b5b4e5e2e9aad1a43424ba71dff124"
        }
      ],
      "message": "[refactor] consolidate invalid ATMP processing\n\nDe-duplicate code that lives in multiple places.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:10:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-26T11:19:35Z"
      },
      "sha": "c2187737f508ce842770ca0fa3d25b2684e9915b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5MjA1NGYwNWE3ZjM3YjdjYmVkYWJiNWUxNGQ4Y2JmNjRjZWI0YTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1",
      "tree": {
        "sha": "5ce429120e22040a7d2ebe96844d5da188a0de92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ce429120e22040a7d2ebe96844d5da188a0de92"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2187737f508ce842770ca0fa3d25b2684e9915b",
          "sha": "c2187737f508ce842770ca0fa3d25b2684e9915b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c2187737f508ce842770ca0fa3d25b2684e9915b"
        }
      ],
      "message": "[refactor] guard TxRequest and m_recent_rejects with new mutex",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:10:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-25T13:21:20Z"
      },
      "sha": "192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlNzE0OTIzNDJhNGMzMDA5OGQ2NDY2MWY4MDI5YmE3YzMyY2M4MDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce71492342a4c30098d64661f8029ba7c32cc801",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce71492342a4c30098d64661f8029ba7c32cc801",
      "tree": {
        "sha": "635a41d9d677d938a94f7d7d2ce7f644de3a30fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/635a41d9d677d938a94f7d7d2ce7f644de3a30fc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1",
          "sha": "192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/192054f05a7f37b7cbedabb5e14d8cbf64ceb4a1"
        }
      ],
      "message": "[refactor] add TxDownloadManager wrapping TxOrphanage and TxRequestTracker\n\nThis module is going to be responsible for managing everything related\nto transaction download, including txrequest, orphan transactions and\npackage relay. It will be responsible for managing usage of the\nTxOrphanage and instructing PeerManager:\n- what tx or package-related messages to send to which peer\n- whether a tx or package-related message is allowed or useful\n- what transactions are available to try accepting to mempool\n\nFuture commits will consolidate the interface and re-delegate most\norphanage and txrequest interactions from PeerManager to TxDownloadManager.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:10:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-05-01T17:41:53Z"
      },
      "sha": "ce71492342a4c30098d64661f8029ba7c32cc801"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZkNWE3NTJmYWUxNWEzZDBkMWVkODliNTllZGFlMDFkYWIwZWNmZDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3",
      "tree": {
        "sha": "7ee09c0a42d798b1e78688c8fdc7d404b3453805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ee09c0a42d798b1e78688c8fdc7d404b3453805"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce71492342a4c30098d64661f8029ba7c32cc801",
          "sha": "ce71492342a4c30098d64661f8029ba7c32cc801",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce71492342a4c30098d64661f8029ba7c32cc801"
        }
      ],
      "message": "[p2p] reset recent_rejects on BlockConnected\n\nThis makes AlreadyHaveTx no longer require cs_main\nThere is a race between chain tip updating and BlockConnected\ncallback firing.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:10:34Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-14T15:09:40Z"
      },
      "sha": "6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNiNDFlOTNkM2U3NTYwYjdiN2JkN2Q1ZDRjZjFkMzEzZWU5ODkzMTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315",
      "tree": {
        "sha": "fccf12e247e3c7c23198164e56ce0e2fe03657a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fccf12e247e3c7c23198164e56ce0e2fe03657a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3",
          "sha": "6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6d5a752fae15a3d0d1ed89b59edae01dab0ecfd3"
        }
      ],
      "message": "move {Tx, Block, Connection} processing logic to TxDownloadManager",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:40:52Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-14T15:51:56Z"
      },
      "sha": "cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE3MzE4ZDBiOThmZjM2N2RhYjU4ZWUwNzZiZmIyZWNmYzU5ODZjYmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17318d0b98ff367dab58ee076bfb2ecfc5986cba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17318d0b98ff367dab58ee076bfb2ecfc5986cba",
      "tree": {
        "sha": "8d9bcdee134be5518c1b6a4d603de6550da3a4b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d9bcdee134be5518c1b6a4d603de6550da3a4b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315",
          "sha": "cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cb41e93d3e7560b7b7bd7d5d4cf1d313ee989315"
        }
      ],
      "message": "move TxRequest logic to TxDownloadManager",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:40:53Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-27T16:22:58Z"
      },
      "sha": "17318d0b98ff367dab58ee076bfb2ecfc5986cba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBiNDJhYzRjNzkxMmE0ZDJlZDZmNTgwMTg4MmRjOWE5NGYyOTk2MGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b42ac4c7912a4d2ed6f5801882dc9a94f29960c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0b42ac4c7912a4d2ed6f5801882dc9a94f29960c",
      "tree": {
        "sha": "e809af1d7bb0978934dd48fcf756a3399071b201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e809af1d7bb0978934dd48fcf756a3399071b201"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17318d0b98ff367dab58ee076bfb2ecfc5986cba",
          "sha": "17318d0b98ff367dab58ee076bfb2ecfc5986cba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/17318d0b98ff367dab58ee076bfb2ecfc5986cba"
        }
      ],
      "message": "move new orphan logic to TxDownloadManager",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-26T16:14:16Z"
      },
      "sha": "0b42ac4c7912a4d2ed6f5801882dc9a94f29960c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY5YTQ2OWZmOGU4MjcxZjlhMzQ4ZGU3NDU3MTNmMmY1ZmUwNWI5Yzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9a469ff8e8271f9a348de745713f2f5fe05b9c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a469ff8e8271f9a348de745713f2f5fe05b9c9",
      "tree": {
        "sha": "b2b36b00582c4f209e87a390f170ae8af4013ed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2b36b00582c4f209e87a390f170ae8af4013ed6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b42ac4c7912a4d2ed6f5801882dc9a94f29960c",
          "sha": "0b42ac4c7912a4d2ed6f5801882dc9a94f29960c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0b42ac4c7912a4d2ed6f5801882dc9a94f29960c"
        }
      ],
      "message": "[refactor] don't expose txrequest and txorphanage from TxDownloadManager\n\nPeerManager should not have access to txorphanage and txrequest.\nThey can still be accessed from TxDownloadImpl in tests.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-14T18:01:27Z"
      },
      "sha": "f9a469ff8e8271f9a348de745713f2f5fe05b9c9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUxZDBmYzMwNzRkMmU5NGYyYjFlMDRhNjkwYzY0MzQ4MDhhNjIwY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1d0fc3074d2e94f2b1e04a690c6434808a620cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d0fc3074d2e94f2b1e04a690c6434808a620cf",
      "tree": {
        "sha": "c576014b6ab6dcea1c75f11c4b57a40a7edd69b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c576014b6ab6dcea1c75f11c4b57a40a7edd69b6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9a469ff8e8271f9a348de745713f2f5fe05b9c9",
          "sha": "f9a469ff8e8271f9a348de745713f2f5fe05b9c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f9a469ff8e8271f9a348de745713f2f5fe05b9c9"
        }
      ],
      "message": "[p2p] lock m_tx_download_mutex less\n\nMake it clear where we're not holding the lock anymore.  Sets up the\nnext commit which makes the lock internal (basically inlines the\nlocking).",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-15T12:46:22Z"
      },
      "sha": "e1d0fc3074d2e94f2b1e04a690c6434808a620cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE1NmVmY2VhODA3OGEwZjFiZDM2M2I1Mzc1MzhlMjZhZDBkYzhmNGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a56efcea8078a0f1bd363b537538e26ad0dc8f4b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a56efcea8078a0f1bd363b537538e26ad0dc8f4b",
      "tree": {
        "sha": "e0969ef22888a9c238105d9e8ab71c92ac7607c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0969ef22888a9c238105d9e8ab71c92ac7607c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1d0fc3074d2e94f2b1e04a690c6434808a620cf",
          "sha": "e1d0fc3074d2e94f2b1e04a690c6434808a620cf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d0fc3074d2e94f2b1e04a690c6434808a620cf"
        }
      ],
      "message": "make TxDownloadImpl internally thread-safe",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-15T16:21:21Z"
      },
      "sha": "a56efcea8078a0f1bd363b537538e26ad0dc8f4b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY0YjhmMjU4OTIzMzMxNWE0NjNkYzhlZGI5MzJhOTk4NTc5OWFhNjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b8f2589233315a463dc8edb932a9985799aa64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b8f2589233315a463dc8edb932a9985799aa64",
      "tree": {
        "sha": "dbf758c8112856a1c03dc0151e9fe27a75956d99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbf758c8112856a1c03dc0151e9fe27a75956d99"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a56efcea8078a0f1bd363b537538e26ad0dc8f4b",
          "sha": "a56efcea8078a0f1bd363b537538e26ad0dc8f4b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a56efcea8078a0f1bd363b537538e26ad0dc8f4b"
        }
      ],
      "message": "remove PeerManagerImpl::m_tx_download_mutex\n\nThis mutex is now redundant with TxDownloadImpl::m_tx_download_mutex",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-08-15T13:54:26Z"
      },
      "sha": "f4b8f2589233315a463dc8edb932a9985799aa64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQzMDI1MTA0Y2Y1YjgxZTVjZmRlMGU5NWNjMGQ1MDk4NTRiMTkzMmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3025104cf5b81e5cfde0e95cc0d509854b1932a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3025104cf5b81e5cfde0e95cc0d509854b1932a",
      "tree": {
        "sha": "432c8400bc1f103f715cfd3b3179e7b08e45df2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432c8400bc1f103f715cfd3b3179e7b08e45df2d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b8f2589233315a463dc8edb932a9985799aa64",
          "sha": "f4b8f2589233315a463dc8edb932a9985799aa64",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b8f2589233315a463dc8edb932a9985799aa64"
        }
      ],
      "message": "[txrequest] GetCandidatePeers and ResetRequestTimeout",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-03-20T10:37:23Z"
      },
      "sha": "d3025104cf5b81e5cfde0e95cc0d509854b1932a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA4Njk2NjA3OTE0NTgzNzk2YmE1YWUyMjE5NzEwMzA4NTAyNjhjNjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08696607914583796ba5ae221971030850268c64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/08696607914583796ba5ae221971030850268c64",
      "tree": {
        "sha": "0210bcc7f57e403ec71e74cffef4d6e1b40c122d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0210bcc7f57e403ec71e74cffef4d6e1b40c122d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3025104cf5b81e5cfde0e95cc0d509854b1932a",
          "sha": "d3025104cf5b81e5cfde0e95cc0d509854b1932a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3025104cf5b81e5cfde0e95cc0d509854b1932a"
        }
      ],
      "message": "[p2p] try multiple peers for orphan resolution",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-07-27T14:50:21Z"
      },
      "sha": "08696607914583796ba5ae221971030850268c64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE2MWI2NmVmN2I4MmM3Mjg3NmU2YzI2NWM3NzRkZmRiNmZiMjJlYWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "tree": {
        "sha": "91aeab4ab05a98606df570fd608058f5c4b8a83f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91aeab4ab05a98606df570fd608058f5c4b8a83f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08696607914583796ba5ae221971030850268c64",
          "sha": "08696607914583796ba5ae221971030850268c64",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/08696607914583796ba5ae221971030850268c64"
        }
      ],
      "message": "[functional test] orphan handling with multiple announcers",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-09-14T15:45:43Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-19T14:40:18Z"
      },
      "sha": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10374172904,
      "node_id": "HRFPE_lADOABII585qrkcZzwAAAAJqWVDo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10374172904",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-14T15:53:05Z"
    },
    {
      "event": "renamed",
      "id": 10384233183,
      "node_id": "RTE_lADOABII585qrkcZzwAAAAJq8tLf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10384233183",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-15T14:33:42Z",
      "rename": {
        "from": "Package Relay 1/3: Introduce TxPackageTracker as Orphan Resolution Module",
        "to": "Package Relay 1/3: Introduce TxDownloadManager and improve orphan-handling"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253443521",
      "pull_request_review_id": 1515046495,
      "id": 1253443521,
      "node_id": "PRRC_kwDOABII585KtgfB",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "make these be TXPACKAGES? then you get the entire \"story\" with a single log type (which helped me diagnose the `Timeout` issue)",
      "created_at": "2023-07-05T17:50:11Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253443521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253443521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454308",
      "pull_request_review_id": 1515046495,
      "id": 1253454308,
      "node_id": "PRRC_kwDOABII585KtjHk",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_orphan_request_tracker` :pray: ",
      "created_at": "2023-07-05T18:02:04Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253454308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253457139",
      "pull_request_review_id": 1515046495,
      "id": 1253457139,
      "node_id": "PRRC_kwDOABII585Ktjzz",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems wrong/very noisy without this? e.g., this line https://github.com/bitcoin/bitcoin/pull/28031/files#diff-ece439372a3e31da3141ed8fda99b37381e32cdab17ca26fffd5dfd916c300c8R124 will fire constantly\r\n\r\n```suggestion\r\n        m_orphanage.EraseTx(ptx->GetWitnessHash());\r\n        orphan_request_tracker.ForgetTxHash(ptx->GetWitnessHash());\r\n```",
      "created_at": "2023-07-05T18:05:10Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253457139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253457139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253459892",
      "pull_request_review_id": 1515046495,
      "id": 1253459892,
      "node_id": "PRRC_kwDOABII585Ktke0",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "any principle on prefixing and postfixing `\\n` to everything in these logs?",
      "created_at": "2023-07-05T18:08:20Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253459892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253459892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253461532",
      "pull_request_review_id": 1515046495,
      "id": 1253461532,
      "node_id": "PRRC_kwDOABII585Ktk4c",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan request %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\r\n```",
      "created_at": "2023-07-05T18:10:14Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253461532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253461532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253479136",
      "pull_request_review_id": 1515046495,
      "id": 1253479136,
      "node_id": "PRRC_kwDOABII585KtpLg",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "trying to fetch after failure seems wrong\r\n\r\n```suggestion\r\n        m_orphanage.EraseTx(wtxid);\r\n        orphan_request_tracker.ForgetTxHash(wtxid);\r\n```",
      "created_at": "2023-07-05T18:26:54Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253479136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253479136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253619584",
      "pull_request_review_id": 1515046495,
      "id": 1253619584,
      "node_id": "PRRC_kwDOABII585KuLeA",
      "diff_hunk": "@@ -15,6 +14,16 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "since we're using `size_t` for these fields, do we want to continue on with UB for release builds or do an assert?",
      "created_at": "2023-07-05T20:37:09Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253619584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253619584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253623061",
      "pull_request_review_id": 1515046495,
      "id": 1253623061,
      "node_id": "PRRC_kwDOABII585KuMUV",
      "diff_hunk": "@@ -28,6 +28,10 @@ void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "6cd8be8a4c9ea6cd9b7e3bf55ab423d8fc6e8ac6",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [txorphanage] handle AddTx(nullptr)\r\n\r\nCould we motivate this change in the commit message?",
      "created_at": "2023-07-05T20:41:12Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253623061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253623061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253633358",
      "pull_request_review_id": 1515046495,
      "id": 1253633358,
      "node_id": "PRRC_kwDOABII585KuO1O",
      "diff_hunk": "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`requestable_orphans` is more like `requestable_parents`?",
      "created_at": "2023-07-05T20:51:38Z",
      "updated_at": "2023-07-06T16:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253633358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253633358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253643847",
      "pull_request_review_id": 1515046495,
      "id": 1253643847,
      "node_id": "PRRC_kwDOABII585KuRZH",
      "diff_hunk": "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggested comment, something like:\r\n\r\n\"We do not presume the parent will still be in the orphanage by the time a response is received, so we exclude the orphanage from the check when deciding what to request.\"\r\n\r\nIf that's wrong, then it needs better explanation than what exists in the commit message :) ",
      "created_at": "2023-07-05T21:00:59Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1253643847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253643847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254470451",
      "pull_request_review_id": 1515046495,
      "id": 1254470451,
      "node_id": "PRRC_kwDOABII585KxbMz",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why not just `ForgetTxHash` here? Why gate it on not being in the block?\r\n\r\nI'm presuming following commits will reveal the answer...",
      "created_at": "2023-07-06T13:48:54Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254470451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254470451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254492129",
      "pull_request_review_id": 1515046495,
      "id": 1254492129,
      "node_id": "PRRC_kwDOABII585Kxgfh",
      "diff_hunk": "@@ -59,6 +58,30 @@ class TxPackageTracker {\n      * still want to try to resolve. Remove its entries from the orphanage and other data\n      * structures. */\n     void MempoolRejectedTx(const uint256& wtxid);\n+\n+    /** Add a new orphan or an announcement for a known orphan. This should be called for every\n+     * peer that announces the orphan.  The orphan request tracker will decide when to request what\n+     * from which peer - use GetOrphanRequests().\n+     * @param[in]   tx      CTransactionRef if this is a new orphan, or nullptr if an announcement\n+     *                      for a known orphan.\n+     * @param[in]   reqtime Some time in the future when the orphan resolution information should be\n+     *                      requested. This may be further extended internally.\n+     */\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime);\n+\n+    /** Number of packages we are working on with this peer. Includes any entries in the orphan\n+     * tracker and in-flight requests. */\n+    size_t Count(NodeId nodeid) const;",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in other words, it includes anything they've told us about, even if we haven't acted on it in any way?",
      "created_at": "2023-07-06T14:03:29Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254492129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254492129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254587582",
      "pull_request_review_id": 1515046495,
      "id": 1254587582,
      "node_id": "PRRC_kwDOABII585Kx3y-",
      "diff_hunk": "@@ -98,6 +124,9 @@ class TxOrphanage {\n      *  transactions using their witness ids. */\n     std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(m_mutex);\n \n+    /** Map from nodeid to the amount of orphans provided by this peer, in bytes. */",
      "path": "src/txorphanage.h",
      "position": 127,
      "original_position": 85,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be good to note that this will \"multi-count\" a single known orphan, counting the bytes for each node. Was wondering early in the PR why the update for this field and `m_total_orphan_bytes` wasn't atomic",
      "created_at": "2023-07-06T15:15:44Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254587582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254587582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 147,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254613476",
      "pull_request_review_id": 1515046495,
      "id": 1254613476,
      "node_id": "PRRC_kwDOABII585Kx-Hk",
      "diff_hunk": "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you allow this to be `empty` one line below with a break; just belt and suspenders?",
      "created_at": "2023-07-06T15:37:02Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254613476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254613476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254615531",
      "pull_request_review_id": 1515046495,
      "id": 1254615531,
      "node_id": "PRRC_kwDOABII585Kx-nr",
      "diff_hunk": "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);\n+                if (elem->second.announcers.empty()) break;\n+                // Pick a random peer from announcers set.\n+                FastRandomContext rng;",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "initialize outside of loop?",
      "created_at": "2023-07-06T15:38:41Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254615531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254615531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629352",
      "pull_request_review_id": 1515046495,
      "id": 1254629352,
      "node_id": "PRRC_kwDOABII585KyB_o",
      "diff_hunk": "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.",
      "path": "src/test/orphanage_tests.cpp",
      "position": 290,
      "original_position": 66,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also check that `EraseTxNoLock` wasn't called, i.e. `m_orphans` still has the orphan tx",
      "created_at": "2023-07-06T15:50:33Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629680",
      "pull_request_review_id": 1515046495,
      "id": 1254629680,
      "node_id": "PRRC_kwDOABII585KyCEw",
      "diff_hunk": "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.\n+        orphanage.EraseForPeer(node0);\n+        expected_node0_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // EraseForPeer should delete the orphan if it's the only announcer left.\n+        orphanage.EraseForPeer(node1);\n+        expected_total_count -= 1;\n+        expected_total_size -= tx_size;\n+        expected_node1_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);",
      "path": "src/test/orphanage_tests.cpp",
      "position": 307,
      "original_position": 81,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "check that the orphan tx is now missing from `m_orphans`?",
      "created_at": "2023-07-06T15:50:52Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254629680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254629680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 371,
      "original_line": 371,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254679291",
      "pull_request_review_id": 1515046495,
      "id": 1254679291,
      "node_id": "PRRC_kwDOABII585KyOL7",
      "diff_hunk": "@@ -2058,7 +2058,7 @@ def received_wtxidrelay():\n         test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n \n         # Expect a request for parent (tx) by txid despite use of WTX peer\n-        self.wtx_node.wait_for_getdata([tx.sha256], 60)",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 4,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "0d945feaf6025a9f84fc1aa3f087422246793cba",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we programatically justify this magic :)",
      "created_at": "2023-07-06T16:36:50Z",
      "updated_at": "2023-07-06T16:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1254679291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254679291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2059,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261403669",
      "pull_request_review_id": 1526722308,
      "id": 1261403669,
      "node_id": "PRRC_kwDOABII585LL34V",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);\n+    m_peer_bytes_used.at(peer) -= size;\n+    if (m_peer_bytes_used.at(peer) == 0) {\n+        m_peer_bytes_used.erase(peer);\n+    }\n+}\n \n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {\n+        Assume(false);\n+        return false;\n+    }",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be cleaner to write:\r\n```suggestion\r\n    if (!Assume(tx)) {\r\n        return false;\r\n    }\r\n```",
      "created_at": "2023-07-12T16:04:16Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261403669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261403669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261405442",
      "pull_request_review_id": 1526722308,
      "id": 1261405442,
      "node_id": "PRRC_kwDOABII585LL4UC",
      "diff_hunk": "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be dropped in favor of just checking that the CNodeState exists",
      "created_at": "2023-07-12T16:05:21Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261405442",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261405442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 1447,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261410424",
      "pull_request_review_id": 1526722308,
      "id": 1261410424,
      "node_id": "PRRC_kwDOABII585LL5h4",
      "diff_hunk": "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;\n+    if (m_txpackagetracker->Count(nodeid) + m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(I've mentioned this offline as well)\r\n\r\nThe locking assumptions around this check are weird because `m_txpackagetracker` has its own internal mutex where as `m_txrequest` is guarded by `cs_main`. There is nothing stopping `m_txpackagetracker->Count()` form returning something different right after this check. ",
      "created_at": "2023-07-12T16:09:06Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261410424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261410424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261412063",
      "pull_request_review_id": 1526722308,
      "id": 1261412063,
      "node_id": "PRRC_kwDOABII585LL57f",
      "diff_hunk": "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nvoid PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const CTransactionRef& tx, std::chrono::microseconds current_time)\r\n```",
      "created_at": "2023-07-12T16:10:09Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261412063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261412063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261414179",
      "pull_request_review_id": 1526722308,
      "id": 1261414179,
      "node_id": "PRRC_kwDOABII585LL6cj",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)",
      "path": "src/txorphanage.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Imo, it would be nicer to do the orphanage changes separately, including amended functional/unit/fuzz tests.",
      "created_at": "2023-07-12T16:11:36Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261414179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261414179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261416426",
      "pull_request_review_id": 1526722308,
      "id": 1261416426,
      "node_id": "PRRC_kwDOABII585LL6_q",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not a big fan of using `Assume` like this because we can't test these conditions but they **can** happen in production (if the caller is doing something wrong).\r\n\r\nI'd suggest just returning if these assumptions don't hold.",
      "created_at": "2023-07-12T16:13:34Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261416426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261416426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419537",
      "pull_request_review_id": 1526722308,
      "id": 1261419537,
      "node_id": "PRRC_kwDOABII585LL7wR",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 19,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be nice to add unit and fuzz tests for this",
      "created_at": "2023-07-12T16:16:20Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419537",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419680",
      "pull_request_review_id": 1526722308,
      "id": 1261419680,
      "node_id": "PRRC_kwDOABII585LL7yg",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;\n+    };\n+\n+    explicit TxPackageTracker(const Options& options);\n+    ~TxPackageTracker();\n+\n+    // Orphanage wrapper functions\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool OrphanageHaveTx(const GenTxid& gtxid);\n+\n+    /** Extract a transaction from a peer's work set\n+     *  Returns nullptr if there are no transactions to work on.\n+     *  Otherwise returns the transaction reference, and removes\n+     *  it from the work set.\n+     */\n+    CTransactionRef GetTxToReconsider(NodeId peer);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void DisconnectedPeer(NodeId peer);\n+\n+    /** Erase all orphans included in or invalidated by a new block */\n+    void BlockConnected(const CBlock& block);\n+\n+    /** Does this peer have any orphans to validate? */\n+    bool HaveTxToReconsider(NodeId peer);\n+\n+    /** Return how many entries exist in the orphange */\n+    size_t OrphanageSize();\n+\n+    /** Should be called when a transaction is accepted to the mempool. If it was an orphan we were\n+     * trying to resolve, remove its entries from the orphanage and other data structures. If it is\n+     * the ancestor of an orphan, add the orphan to its associated peer's workset. */\n+    void MempoolAcceptedTx(const CTransactionRef& ptx);",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 56,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    void MempoolAcceptedTx(const CTransactionRef& tx);\r\n```",
      "created_at": "2023-07-12T16:16:29Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261419680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261419680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261436145",
      "pull_request_review_id": 1526722308,
      "id": 1261436145,
      "node_id": "PRRC_kwDOABII585LL_zx",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+                continue;\n+            }\n+            // Add the orphan's parents. Net processing will filter out what we already have.\n+            // Deduplicate parent txids, so that we don't have to loop over\n+            // the same parent txid more than once down below.\n+            std::vector<uint256> unique_parents;\n+            unique_parents.reserve(ptx->vin.size());\n+            for (const auto& txin : ptx->vin) {\n+                // We start with all parents, and then remove duplicates below.\n+                unique_parents.push_back(txin.prevout.hash);\n+            }\n+            std::sort(unique_parents.begin(), unique_parents.end());\n+            unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // Add the orphan's parents. Net processing will filter out what we already have.\r\n            // Deduplicate parent txids, so that we don't have to loop over\r\n            // the same parent txid more than once down below.\r\n            std::set<uint256> unique_parents;\r\n            auto to_prevout = [](const CTxIn& in) { return in.prevout.hash; };\r\n            std::transform(ptx->vin.begin(), ptx->vin.end(), std::inserter(unique_parents, unique_parents.begin()), to_prevout);\r\n```",
      "created_at": "2023-07-12T16:31:16Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261436145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261436145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 139,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261440012",
      "pull_request_review_id": 1526722308,
      "id": 1261440012,
      "node_id": "PRRC_kwDOABII585LMAwM",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would you mind adding some spacing around logical blocks in your code? I find a lot of the new code hard to read with a lack of spacing\r\n\r\ne.g.:\r\n```suggestion\r\n    {\r\n        AssertLockNotHeld(m_mutex);\r\n        LOCK(m_mutex);\r\n\r\n        std::vector<std::pair<NodeId, GenTxid>> expired;\r\n        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\r\n        for (const auto& entry : expired) {\r\n            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\r\n                entry.second.GetHash().ToString(), entry.first);\r\n        }\r\n\r\n        std::vector<GenTxid> results;\r\n        for (const auto& gtxid : tracker_requestable) {\r\n```",
      "created_at": "2023-07-12T16:35:01Z",
      "updated_at": "2023-07-12T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261440012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261440012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 118,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261605505",
      "pull_request_review_id": 1527052773,
      "id": 1261605505,
      "node_id": "PRRC_kwDOABII585LMpKB",
      "diff_hunk": "@@ -0,0 +1,270 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+\"\"\"\n+\n+import random\n+import time\n+\n+from test_framework.messages import (\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    MSG_TX,\n+    MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX,\n+    MSG_WTX,\n+    msg_getdata,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    NONPREF_PEER_TX_DELAY,\n+    ORPHAN_ANCESTOR_GETDATA_INTERVAL,\n+    OVERLOADED_PEER_TX_DELAY,\n+    p2p_lock,\n+    P2PTxInvStore,\n+    TXID_RELAY_DELAY,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# Time to fastforward (using setmocktime) before waiting for the node to send getdata(tx) in response\n+# to an inv(tx), in seconds. This delay includes all possible delays + 1, so it should only be used\n+# when the value of the delay is not interesting. If we want to test that the node waits x seconds\n+# for one peer and y seconds for another, use specific values instead.\n+TXREQUEST_TIME_SKIP = NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY + OVERLOADED_PEER_TX_DELAY + 1\n+\n+# Time to fastfoward (using setmocktime) in between subtests to ensure they do not interfere with\n+# one another, in seconds. Equal to 12 hours, which is enough to expire anything that may exist\n+# (though nothing should since state should be cleared) in p2p data structures.\n+LONG_TIME_SKIP = 12 * 60 * 60\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+            self.mocktime += LONG_TIME_SKIP\n+            self.nodes[0].setmocktime(self.mocktime)\n+    return wrapper\n+\n+class PeerTxRelayer(P2PTxInvStore):\n+    def __init__(self):\n+        super().__init__()\n+        self._tx_received = []\n+        self._getdata_received = []\n+\n+    @property\n+    def tx_received(self):\n+        with p2p_lock:\n+            return self._tx_received\n+\n+    @property\n+    def getdata_received(self):\n+        with p2p_lock:\n+            return self._getdata_received\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message)\n+\n+    def on_getdata(self, message):\n+        self._getdata_received.append(message)\n+\n+    def wait_for_getdata_txids(self, txids):\n+        def test_function():\n+            last_getdata = self.last_message.get('getdata')\n+            if not last_getdata:\n+                return False\n+            return all([item.type == MSG_WITNESS_TX and item.hash in txids for item in last_getdata.inv])\n+        self.wait_until(test_function, timeout=10)\n+\n+    def assert_message_ignored(self, message):\n+        \"\"\"Check that the node does not respond to this message with any of\n+        getdata, inv, tx.\n+        \"\"\"\n+        prev_lastmessage = self.last_message\n+        self.send_and_ping(message)\n+        after_lastmessage = self.last_message\n+        for msgtype in [\"getdata\", \"inv\", \"tx\"]:\n+            if msgtype not in prev_lastmessage:\n+                assert msgtype not in after_lastmessage\n+            else:\n+                assert_equal(prev_lastmessage[msgtype], after_lastmessage[msgtype])\n+\n+    def assert_never_requested(self, txhash):\n+        \"\"\"Check that the node has never sent us a getdata for this hash (int type)\"\"\"\n+        for getdata in self.getdata_received:\n+            for request in getdata.inv:\n+                assert request.hash != txhash\n+\n+class OrphanHandlingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.mocktime = int(time.time())\n+\n+    def create_package(self):\n+        \"\"\"Create package with 1 parent and 1 child, normal fees (no cpfp).\n+        \"\"\"\n+        parent = self.wallet.create_self_transfer()\n+        child = self.wallet.create_self_transfer(utxo_to_spend=parent['new_utxo'])\n+        orphan_wtxid = child[\"tx\"].getwtxid()\n+        orphan_tx = child[\"tx\"]\n+        parent_tx = parent[\"tx\"]\n+        return orphan_wtxid, orphan_tx, parent_tx\n+\n+    def create_large_orphan(self):\n+        \"\"\"Create huge orphan transaction\"\"\"\n+        tx = CTransaction()\n+        # Nonexistent UTXO\n+        tx.vin = [CTxIn(COutPoint(random.randrange(1 << 256), random.randrange(1, 100)))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_NOP] * 390000)]\n+        tx.vout = [CTxOut(100, CScript([OP_RETURN, b'a' * 20]))]\n+        return tx\n+\n+    def fastforward(self, seconds):\n+        \"\"\"Convenience helper function to fast-forward, so we don't need to keep track of the\n+        starting time when we call setmocktime.\"\"\"\n+        self.mocktime += seconds\n+        self.nodes[0].setmocktime(self.mocktime)\n+\n+    @cleanup\n+    def test_orphan_handling_prefer_outbound(self):\n+        self.log.info(\"Test that the node prefers requesting from outbound peers\")\n+        node = self.nodes[0]\n+        orphan_wtxid, orphan_tx, parent_tx = self.create_package()\n+        orphan_inv = CInv(t=MSG_WTX, h=int(orphan_wtxid, 16))\n+\n+        peer_inbound = node.add_p2p_connection(PeerTxRelayer())\n+        peer_inbound.send_and_ping(msg_inv([orphan_inv]))\n+        self.fastforward(TXREQUEST_TIME_SKIP)",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 160,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There should be a `setmocktime` call with the initial time somewhere before the first `fastforward`, otherwise this can fail intermittently.",
      "created_at": "2023-07-12T18:56:05Z",
      "updated_at": "2023-07-12T22:26:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261605505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261605505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261645151",
      "pull_request_review_id": 1527052773,
      "id": 1261645151,
      "node_id": "PRRC_kwDOABII585LMy1f",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "commit 543273d96e896adf5531ed961856aa0eb70cbe57:\r\nnit:  `uint256&` like in the line above?",
      "created_at": "2023-07-12T19:35:16Z",
      "updated_at": "2023-07-12T22:26:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261645151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261645151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261648754",
      "pull_request_review_id": 1527114151,
      "id": 1261648754,
      "node_id": "PRRC_kwDOABII585LMzty",
      "diff_hunk": "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hmmm, this is a `txid`, not a `wtxid`, which is essentially a no-op unless it's a non-segwit tx. What cases do we expect this `MempoolRejectedTx` is even needed? I added logging and will see if this case ever actually would be needed.",
      "created_at": "2023-07-12T19:39:24Z",
      "updated_at": "2023-07-20T15:48:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261648754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261648754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261779747",
      "pull_request_review_id": 1527052773,
      "id": 1261779747,
      "node_id": "PRRC_kwDOABII585LNTsj",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1253459892,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think there should ever be a `\\n` prefix, why would we want to separate the meta information (timestamp, threadname etc.) from the actual log entry?",
      "created_at": "2023-07-12T22:20:41Z",
      "updated_at": "2023-07-12T22:26:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261779747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261779747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786477",
      "pull_request_review_id": 1527321195,
      "id": 1261786477,
      "node_id": "PRRC_kwDOABII585LNVVt",
      "diff_hunk": "@@ -2966,7 +2966,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n             m_txpackagetracker->AddChildrenToWorkSet(*porphanTx);\n-            m_txpackagetracker->EraseOrphanTx(orphanHash);\n+            m_txpackagetracker->EraseOrphanTx(porphanTx->GetWitnessHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "4cbb63175398d9b8afe755d2adb24edbd2b4913b",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could use `orphan_wtxid` introduced in the previous commit, here and in various other places.",
      "created_at": "2023-07-12T22:31:57Z",
      "updated_at": "2023-07-12T22:31:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261786477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262316909",
      "pull_request_review_id": 1528060917,
      "id": 1262316909,
      "node_id": "PRRC_kwDOABII585LPW1t",
      "diff_hunk": "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;\n+    if (m_txpackagetracker->Count(nodeid) + m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261410424,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah good point.\r\n\r\nIt seems that, given the need to synchronize between `TxRequestTracker` and the package tracking stuff, we should have them both guarded by 1 lock. Looking at https://github.com/bitcoin/bitcoin/pull/26151#pullrequestreview-1116661944 it seems like we could have a `m_txrequest GUARDED_BY(tx_download_mutex)`, `m_txpackagetracker GUARDED_BY(tx_download_mutex)`, and lock it from these peerman functions?\r\n\r\nAlternatively, I wonder if it makes sense to take it a step further and put this all in a `TxDownloadManager` module that wraps orphanage, txrequest, and package tracking.",
      "created_at": "2023-07-13T09:50:48Z",
      "updated_at": "2023-07-13T09:53:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1262316909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1262316909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265917707",
      "pull_request_review_id": 1533720796,
      "id": 1265917707,
      "node_id": "PRRC_kwDOABII585LdF8L",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n     }\n-    void BlockConnected(const CBlock& block) { m_orphanage.EraseForBlock(block); }\n     void LimitOrphans(unsigned int max_orphans) { m_orphanage.LimitOrphans(max_orphans); }\n     bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n     size_t OrphanageSize() { return m_orphanage.Size(); }\n-    void MempoolAcceptedTx(const CTransactionRef& ptx)\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.AddChildrenToWorkSet(*ptx);\n         m_orphanage.EraseTx(ptx->GetWitnessHash());\n     }\n-    void MempoolRejectedTx(const uint256& wtxid)\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.EraseTx(wtxid);\n     }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\n(moved over from [27742](https://github.com/bitcoin/bitcoin/pull/27742#discussion_r1265739284)):\r\nThe approach to add a wtxid disguised as a txid to distinguish between legacy orphan processing and package relay seems a bit like a hack to me.\r\nI'm not strictly against it, but I guess I don't completely understand yet why it's necessary - the information whether a peer supports package relay does not change, so why can't we just always use `GenTxid::Wtxid(wtxid)` and check again in `GetOrphanRequests()` and elsewhere whether we do package relay with the peer instead of checking whether it's a txid / wtxid?",
      "created_at": "2023-07-17T21:23:30Z",
      "updated_at": "2023-07-17T21:23:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1265917707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1265917707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266760855",
      "pull_request_review_id": 1535017514,
      "id": 1266760855,
      "node_id": "PRRC_kwDOABII585LgTyX",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n     }\n-    void BlockConnected(const CBlock& block) { m_orphanage.EraseForBlock(block); }\n     void LimitOrphans(unsigned int max_orphans) { m_orphanage.LimitOrphans(max_orphans); }\n     bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n     size_t OrphanageSize() { return m_orphanage.Size(); }\n-    void MempoolAcceptedTx(const CTransactionRef& ptx)\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.AddChildrenToWorkSet(*ptx);\n         m_orphanage.EraseTx(ptx->GetWitnessHash());\n     }\n-    void MempoolRejectedTx(const uint256& wtxid)\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n     {\n+        LOCK(m_mutex);\n         m_orphanage.EraseTx(wtxid);\n     }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1265917707,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah good point, it's not necessary, we could just use `GenTxid::Wtxid` for all of them. :+1: ",
      "created_at": "2023-07-18T13:16:53Z",
      "updated_at": "2023-07-18T13:16:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1266760855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1266760855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269622220",
      "pull_request_review_id": 1539533894,
      "id": 1269622220,
      "node_id": "PRRC_kwDOABII585LrOXM",
      "diff_hunk": "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261648754,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, adding wtxid logging at `MEMPOOLREJ` log is done would be <3 ",
      "created_at": "2023-07-20T15:18:59Z",
      "updated_at": "2023-07-20T15:18:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1269622220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269622220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270139854",
      "pull_request_review_id": 1540338442,
      "id": 1270139854,
      "node_id": "PRRC_kwDOABII585LtMvO",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 24,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A comment can be added to precise this is the global not per-peer limit, at least on how it is used by `LimitOrphans()` (`DEFAULT_MAX_ORPHAN_TRANSACTIONS`).",
      "created_at": "2023-07-21T01:16:51Z",
      "updated_at": "2023-07-21T02:21:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270139854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270139854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270671380",
      "pull_request_review_id": 1541149446,
      "id": 1270671380,
      "node_id": "PRRC_kwDOABII585LvOgU",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",\n+                entry.second.GetHash().ToString(), entry.first);\n+        }\n+        std::vector<GenTxid> results;\n+        for (const auto& gtxid : tracker_requestable) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nResolving orphan %s, requesting by txids of parents from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+            const auto ptx = m_orphanage.GetTx(gtxid.GetHash());\n+            if (!ptx) {\n+                // We can't request ancpkginfo and we have no way of knowing what the missing\n+                // parents are (it could also be that the orphan has already been resolved).\n+                // Give up.\n+                orphan_request_tracker.ForgetTxHash(gtxid.GetHash());\n+                LogPrint(BCLog::TXPACKAGES, \"\\nForgetting orphan %s from peer=%d\\n\", gtxid.GetHash().ToString(), nodeid);\n+                continue;\n+            }\n+            // Add the orphan's parents. Net processing will filter out what we already have.\n+            // Deduplicate parent txids, so that we don't have to loop over\n+            // the same parent txid more than once down below.\n+            std::vector<uint256> unique_parents;\n+            unique_parents.reserve(ptx->vin.size());\n+            for (const auto& txin : ptx->vin) {\n+                // We start with all parents, and then remove duplicates below.\n+                unique_parents.push_back(txin.prevout.hash);\n+            }\n+            std::sort(unique_parents.begin(), unique_parents.end());\n+            unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n+            for (const auto& txid : unique_parents) {\n+                results.emplace_back(GenTxid::Txid(txid));\n+            }\n+            // Mark the orphan as requested\n+            orphan_request_tracker.RequestedTx(nodeid, gtxid.GetHash(), current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        }\n+        if (!results.empty()) LogPrint(BCLog::TXPACKAGES, \"\\nRequesting %u items from peer=%d\\n\", results.size(), nodeid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This logging should be handled by the caller, since the caller sometimes isn't actually requesting the items!",
      "created_at": "2023-07-21T13:22:30Z",
      "updated_at": "2023-07-21T13:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1270671380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270671380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272393191",
      "pull_request_review_id": 1543694803,
      "id": 1272393191,
      "node_id": "PRRC_kwDOABII585L1y3n",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": 1253443521,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done :+1: \r\nThis now has 2 logs:\r\n- TXPACKAGES \"accepted orphan tx (wtxid)\"\r\n- MEMPOOL \"AcceptToMemoryPool ... (txid)\" which matches the one in `ProcessMessage` for a tx message",
      "created_at": "2023-07-24T15:04:00Z",
      "updated_at": "2023-08-14T21:15:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272393191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272393191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272414091",
      "pull_request_review_id": 1543694803,
      "id": 1272414091,
      "node_id": "PRRC_kwDOABII585L13-L",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": 1261645151,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2023-07-24T15:20:22Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272414091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272414091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272416121",
      "pull_request_review_id": 1543694803,
      "id": 1272416121,
      "node_id": "PRRC_kwDOABII585L14d5",
      "diff_hunk": "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1253633358,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(this is deleted now)",
      "created_at": "2023-07-24T15:21:57Z",
      "updated_at": "2023-08-14T21:19:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272416121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272416121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272426199",
      "pull_request_review_id": 1543694803,
      "id": 1272426199,
      "node_id": "PRRC_kwDOABII585L167X",
      "diff_hunk": "@@ -5926,6 +5923,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 107,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1253643847,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. The reason for excluding orphanage is actually not applicable yet so I have dropped it for now.\r\n\r\nThis is really only applicable when we are requesting the `ancpkginfo` for a tx. We want to exclude orphanage because otherwise, `AlreadyHaveTx` will return true and we will never request `ancpkginfo`s.",
      "created_at": "2023-07-24T15:29:45Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272426199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272426199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272428700",
      "pull_request_review_id": 1543694803,
      "id": 1272428700,
      "node_id": "PRRC_kwDOABII585L17ic",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);\n+    }\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        // Skip if we weren't provided the tx and can't find the wtxid in the orphanage.\n+        if (tx == nullptr && !m_orphanage.HaveTx(GenTxid::Wtxid(wtxid))) return;\n+\n+        // Even though this stores the orphan wtxid, GenTxid::Txid instead of Wtxid because we will be requesting the parents via txid.\n+        orphan_request_tracker.ReceivedInv(nodeid, GenTxid::Txid(wtxid), is_preferred, reqtime);\n+\n+        if (tx != nullptr) {\n+            m_orphanage.AddTx(tx, nodeid);\n+        } else {\n+            m_orphanage.AddTx(m_orphanage.GetTx(wtxid), nodeid);\n+        }\n+        // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n+        m_orphanage.LimitOrphans(m_max_orphanage_count);\n+    }\n+    size_t CountInFlight(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.CountInFlight(nodeid)};\n+        return count;\n+    }\n+    size_t Count(NodeId nodeid) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        auto count{orphan_request_tracker.Count(nodeid)};\n+        return count;\n+    }\n+\n+    std::vector<GenTxid> GetOrphanRequests(NodeId nodeid, std::chrono::microseconds current_time)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        std::vector<std::pair<NodeId, GenTxid>> expired;\n+        auto tracker_requestable = orphan_request_tracker.GetRequestable(nodeid, current_time, &expired);\n+        for (const auto& entry : expired) {\n+            LogPrint(BCLog::TXPACKAGES, \"\\nTimeout of inflight %s %s from peer=%d\\n\", entry.second.IsWtxid() ? \"ancpkginfo\" : \"orphan parent\",",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 124,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1253459892,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the prefix",
      "created_at": "2023-07-24T15:31:51Z",
      "updated_at": "2023-08-14T21:15:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272428700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272428700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272435787",
      "pull_request_review_id": 1543694803,
      "id": 1272435787,
      "node_id": "PRRC_kwDOABII585L19RL",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1253454308,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-07-24T15:37:34Z",
      "updated_at": "2023-08-14T21:15:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272435787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272435787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482595",
      "pull_request_review_id": 1543694803,
      "id": 1272482595,
      "node_id": "PRRC_kwDOABII585L2Isj",
      "diff_hunk": "@@ -98,6 +124,9 @@ class TxOrphanage {\n      *  transactions using their witness ids. */\n     std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(m_mutex);\n \n+    /** Map from nodeid to the amount of orphans provided by this peer, in bytes. */",
      "path": "src/txorphanage.h",
      "position": 127,
      "original_position": 85,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1254587582,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in comment",
      "created_at": "2023-07-24T16:17:28Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 147,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482776",
      "pull_request_review_id": 1543694803,
      "id": 1272482776,
      "node_id": "PRRC_kwDOABII585L2IvY",
      "diff_hunk": "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "in_reply_to_id": 1254613476,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, belt and suspenders - commented",
      "created_at": "2023-07-24T16:17:39Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482864",
      "pull_request_review_id": 1543694803,
      "id": 1272482864,
      "node_id": "PRRC_kwDOABII585L2Iww",
      "diff_hunk": "@@ -181,9 +195,15 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n         const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n         if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n             for (const auto& elem : it_by_prev->second) {\n+                Assume(elem->second.announcers.size() >= 1);\n+                if (elem->second.announcers.empty()) break;\n+                // Pick a random peer from announcers set.\n+                FastRandomContext rng;",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "d92b017f6818c1de3286e5dbc35af3860fdf7547",
      "in_reply_to_id": 1254615531,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done thanks",
      "created_at": "2023-07-24T16:17:44Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272482864",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272482864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272484902",
      "pull_request_review_id": 1543694803,
      "id": 1272484902,
      "node_id": "PRRC_kwDOABII585L2JQm",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;\n+    };\n+\n+    explicit TxPackageTracker(const Options& options);\n+    ~TxPackageTracker();\n+\n+    // Orphanage wrapper functions\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool OrphanageHaveTx(const GenTxid& gtxid);\n+\n+    /** Extract a transaction from a peer's work set\n+     *  Returns nullptr if there are no transactions to work on.\n+     *  Otherwise returns the transaction reference, and removes\n+     *  it from the work set.\n+     */\n+    CTransactionRef GetTxToReconsider(NodeId peer);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void DisconnectedPeer(NodeId peer);\n+\n+    /** Erase all orphans included in or invalidated by a new block */\n+    void BlockConnected(const CBlock& block);\n+\n+    /** Does this peer have any orphans to validate? */\n+    bool HaveTxToReconsider(NodeId peer);\n+\n+    /** Return how many entries exist in the orphange */\n+    size_t OrphanageSize();\n+\n+    /** Should be called when a transaction is accepted to the mempool. If it was an orphan we were\n+     * trying to resolve, remove its entries from the orphanage and other data structures. If it is\n+     * the ancestor of an orphan, add the orphan to its associated peer's workset. */\n+    void MempoolAcceptedTx(const CTransactionRef& ptx);",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 56,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261419680,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I actually think `ptx` is better, since it's a pointer?",
      "created_at": "2023-07-24T16:19:28Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272484902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272484902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487194",
      "pull_request_review_id": 1543694803,
      "id": 1272487194,
      "node_id": "PRRC_kwDOABII585L2J0a",
      "diff_hunk": "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.",
      "path": "src/test/orphanage_tests.cpp",
      "position": 290,
      "original_position": 66,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "in_reply_to_id": 1254629352,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-07-24T16:21:38Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 354,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487261",
      "pull_request_review_id": 1543694803,
      "id": 1272487261,
      "node_id": "PRRC_kwDOABII585L2J1d",
      "diff_hunk": "@@ -159,5 +179,58 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK_EQUAL(orphanage.CountOrphans(), expected_count);\n     BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n }\n+BOOST_AUTO_TEST_CASE(multiple_announcers)\n+{\n+    const NodeId node0{0};\n+    const NodeId node1{1};\n+    size_t expected_total_count{0};\n+    size_t expected_total_size{0};\n+    size_t expected_node0_size{0};\n+    size_t expected_node1_size{0};\n+    TxOrphanageTest orphanage;\n+    // Check that accounting for bytes per peer is accurate.\n+    {\n+        auto ptx{MakeLargeOrphan()};\n+        const auto tx_size = ptx->GetTotalSize();\n+        orphanage.AddTx(ptx, node0);\n+        expected_total_size += tx_size;\n+        expected_total_count += 1;\n+        expected_node0_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding again should do nothing.\n+        orphanage.AddTx(ptx, node0);\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // Adding existing tx for another peer should change that peer's bytes, but not total bytes.\n+        orphanage.AddTx(ptx, node1);\n+        expected_node1_size += tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // if EraseForPeer is called for an orphan with multiple announcers, the orphanage should only\n+        // decrement the number of bytes for that peer.\n+        orphanage.EraseForPeer(node0);\n+        expected_node0_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);\n+        // EraseForPeer should delete the orphan if it's the only announcer left.\n+        orphanage.EraseForPeer(node1);\n+        expected_total_count -= 1;\n+        expected_total_size -= tx_size;\n+        expected_node1_size -= tx_size;\n+        BOOST_CHECK_EQUAL(orphanage.Size(), expected_total_count);\n+        BOOST_CHECK_EQUAL(orphanage.TotalOrphanBytes(), expected_total_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node0), expected_node0_size);\n+        BOOST_CHECK_EQUAL(orphanage.BytesFromPeer(node1), expected_node1_size);",
      "path": "src/test/orphanage_tests.cpp",
      "position": 307,
      "original_position": 81,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b43033cfb8a8ddc8557375ecc63fd411b31d3618",
      "in_reply_to_id": 1254629680,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-07-24T16:21:42Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272487261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272487261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 371,
      "original_line": 371,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491186",
      "pull_request_review_id": 1543694803,
      "id": 1272491186,
      "node_id": "PRRC_kwDOABII585L2Kyy",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261416426,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree - returning when the assumption doesn't hold",
      "created_at": "2023-07-24T16:25:20Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272491186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272491186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272492061",
      "pull_request_review_id": 1543694803,
      "id": 1272492061,
      "node_id": "PRRC_kwDOABII585L2LAd",
      "diff_hunk": "@@ -28,6 +28,10 @@ void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "6cd8be8a4c9ea6cd9b7e3bf55ab423d8fc6e8ac6",
      "in_reply_to_id": 1253623061,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped the commit instead",
      "created_at": "2023-07-24T16:26:10Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272492061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272492061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272508221",
      "pull_request_review_id": 1543694803,
      "id": 1272508221,
      "node_id": "PRRC_kwDOABII585L2O89",
      "diff_hunk": "@@ -0,0 +1,270 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+\"\"\"\n+\n+import random\n+import time\n+\n+from test_framework.messages import (\n+    CInv,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    MSG_TX,\n+    MSG_WITNESS_FLAG,\n+    MSG_WITNESS_TX,\n+    MSG_WTX,\n+    msg_getdata,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    NONPREF_PEER_TX_DELAY,\n+    ORPHAN_ANCESTOR_GETDATA_INTERVAL,\n+    OVERLOADED_PEER_TX_DELAY,\n+    p2p_lock,\n+    P2PTxInvStore,\n+    TXID_RELAY_DELAY,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_NOP,\n+    OP_RETURN,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# Time to fastforward (using setmocktime) before waiting for the node to send getdata(tx) in response\n+# to an inv(tx), in seconds. This delay includes all possible delays + 1, so it should only be used\n+# when the value of the delay is not interesting. If we want to test that the node waits x seconds\n+# for one peer and y seconds for another, use specific values instead.\n+TXREQUEST_TIME_SKIP = NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY + OVERLOADED_PEER_TX_DELAY + 1\n+\n+# Time to fastfoward (using setmocktime) in between subtests to ensure they do not interfere with\n+# one another, in seconds. Equal to 12 hours, which is enough to expire anything that may exist\n+# (though nothing should since state should be cleared) in p2p data structures.\n+LONG_TIME_SKIP = 12 * 60 * 60\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+            self.mocktime += LONG_TIME_SKIP\n+            self.nodes[0].setmocktime(self.mocktime)\n+    return wrapper\n+\n+class PeerTxRelayer(P2PTxInvStore):\n+    def __init__(self):\n+        super().__init__()\n+        self._tx_received = []\n+        self._getdata_received = []\n+\n+    @property\n+    def tx_received(self):\n+        with p2p_lock:\n+            return self._tx_received\n+\n+    @property\n+    def getdata_received(self):\n+        with p2p_lock:\n+            return self._getdata_received\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message)\n+\n+    def on_getdata(self, message):\n+        self._getdata_received.append(message)\n+\n+    def wait_for_getdata_txids(self, txids):\n+        def test_function():\n+            last_getdata = self.last_message.get('getdata')\n+            if not last_getdata:\n+                return False\n+            return all([item.type == MSG_WITNESS_TX and item.hash in txids for item in last_getdata.inv])\n+        self.wait_until(test_function, timeout=10)\n+\n+    def assert_message_ignored(self, message):\n+        \"\"\"Check that the node does not respond to this message with any of\n+        getdata, inv, tx.\n+        \"\"\"\n+        prev_lastmessage = self.last_message\n+        self.send_and_ping(message)\n+        after_lastmessage = self.last_message\n+        for msgtype in [\"getdata\", \"inv\", \"tx\"]:\n+            if msgtype not in prev_lastmessage:\n+                assert msgtype not in after_lastmessage\n+            else:\n+                assert_equal(prev_lastmessage[msgtype], after_lastmessage[msgtype])\n+\n+    def assert_never_requested(self, txhash):\n+        \"\"\"Check that the node has never sent us a getdata for this hash (int type)\"\"\"\n+        for getdata in self.getdata_received:\n+            for request in getdata.inv:\n+                assert request.hash != txhash\n+\n+class OrphanHandlingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]\n+        self.mocktime = int(time.time())\n+\n+    def create_package(self):\n+        \"\"\"Create package with 1 parent and 1 child, normal fees (no cpfp).\n+        \"\"\"\n+        parent = self.wallet.create_self_transfer()\n+        child = self.wallet.create_self_transfer(utxo_to_spend=parent['new_utxo'])\n+        orphan_wtxid = child[\"tx\"].getwtxid()\n+        orphan_tx = child[\"tx\"]\n+        parent_tx = parent[\"tx\"]\n+        return orphan_wtxid, orphan_tx, parent_tx\n+\n+    def create_large_orphan(self):\n+        \"\"\"Create huge orphan transaction\"\"\"\n+        tx = CTransaction()\n+        # Nonexistent UTXO\n+        tx.vin = [CTxIn(COutPoint(random.randrange(1 << 256), random.randrange(1, 100)))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_NOP] * 390000)]\n+        tx.vout = [CTxOut(100, CScript([OP_RETURN, b'a' * 20]))]\n+        return tx\n+\n+    def fastforward(self, seconds):\n+        \"\"\"Convenience helper function to fast-forward, so we don't need to keep track of the\n+        starting time when we call setmocktime.\"\"\"\n+        self.mocktime += seconds\n+        self.nodes[0].setmocktime(self.mocktime)\n+\n+    @cleanup\n+    def test_orphan_handling_prefer_outbound(self):\n+        self.log.info(\"Test that the node prefers requesting from outbound peers\")\n+        node = self.nodes[0]\n+        orphan_wtxid, orphan_tx, parent_tx = self.create_package()\n+        orphan_inv = CInv(t=MSG_WTX, h=int(orphan_wtxid, 16))\n+\n+        peer_inbound = node.add_p2p_connection(PeerTxRelayer())\n+        peer_inbound.send_and_ping(msg_inv([orphan_inv]))\n+        self.fastforward(TXREQUEST_TIME_SKIP)",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 160,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261605505,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, added at the top of `run_test`",
      "created_at": "2023-07-24T16:42:43Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272508221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272508221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272514305",
      "pull_request_review_id": 1543694803,
      "id": 1272514305,
      "node_id": "PRRC_kwDOABII585L2QcB",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXPACKAGETRACKER_H\n+#define BITCOIN_NODE_TXPACKAGETRACKER_H\n+\n+#include <net.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <vector>\n+\n+class CBlock;\n+class TxOrphanage;\n+namespace node {\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+\n+class TxPackageTracker {\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+public:\n+    struct Options {\n+        unsigned int m_max_orphanage_count;",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 24,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1270139854,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added comment",
      "created_at": "2023-07-24T16:49:03Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1272514305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272514305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279714521",
      "pull_request_review_id": 1555503183,
      "id": 1279714521,
      "node_id": "PRRC_kwDOABII585MRuTZ",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 543273d96e896adf5531ed961856aa0eb70cbe57 \"[log] log ProcessOrphanTx() events by wtxid\"\r\n\r\nPerhaps log both txid and wtxid?",
      "created_at": "2023-07-31T18:22:41Z",
      "updated_at": "2023-07-31T19:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279714521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279714521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279730123",
      "pull_request_review_id": 1555503183,
      "id": 1279730123,
      "node_id": "PRRC_kwDOABII585MRyHL",
      "diff_hunk": "@@ -61,7 +62,31 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    size_t TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    size_t BytesFromPeer(NodeId peer) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        auto peer_bytes_it = m_peer_bytes_used.find(peer);\n+        return peer_bytes_it == m_peer_bytes_used.end() ? 0 : peer_bytes_it->second;\n+    }\n+\n+    /** Remove a peer from an orphan's announcers list, erasing the orphan if this is the only peer\n+     * who announced it. If the orphan doesn't exist or does not list this peer as an announcer, do nothing. */\n+    void EraseOrphanOfPeer(const uint256& wtxid, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 28,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 29d9d326d5193bb9a410a8881eabc93de5dd6266 \"[txorphanage] track size of stored orphans, total and by peer\"\r\n\r\nThis function is unimplemented.",
      "created_at": "2023-07-31T18:39:46Z",
      "updated_at": "2023-07-31T19:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279730123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279730123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279743325",
      "pull_request_review_id": 1555503183,
      "id": 1279743325,
      "node_id": "PRRC_kwDOABII585MR1Vd",
      "diff_hunk": "@@ -4286,6 +4285,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }\n+                m_txpackagetracker->MempoolRejectedTx(tx.GetWitnessHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "974d864419dd98be6e32dec3ee11f5082b060b1b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 974d864419dd98be6e32dec3ee11f5082b060b1b \"[refactor] make TxPackageTracker responsible for EraseTx and AddChildrenToWorkset\"\r\n\r\nThis line seems a bit unrelated to this commit as there is no pre-existing `EraseTx`.",
      "created_at": "2023-07-31T18:53:43Z",
      "updated_at": "2023-07-31T19:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279743325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279743325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279747416",
      "pull_request_review_id": 1555503183,
      "id": 1279747416,
      "node_id": "PRRC_kwDOABII585MR2VY",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In b5ab45e595bbcedbd602b6385b83e9ffd983f216 \"[p2p/refactor] make TxPackageTracker responsible for orphan resolution\"\r\n\r\nnit: indentation",
      "created_at": "2023-07-31T18:58:14Z",
      "updated_at": "2023-07-31T19:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1279747416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279747416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293972937",
      "pull_request_review_id": 1543694803,
      "id": 1293972937,
      "node_id": "PRRC_kwDOABII585NIHXJ",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1253457139,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed",
      "created_at": "2023-08-14T21:09:26Z",
      "updated_at": "2023-08-14T21:15:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293972937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293972937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973180",
      "pull_request_review_id": 1543694803,
      "id": 1293973180,
      "node_id": "PRRC_kwDOABII585NIHa8",
      "diff_hunk": "@@ -0,0 +1,181 @@\n+// Copyright (c) 2022\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txpackagetracker.h>\n+\n+#include <common/bloom.h>\n+#include <logging.h>\n+#include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n+\n+namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+class TxPackageTracker::Impl {\n+    /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n+    TxOrphanage m_orphanage;\n+\n+    /** Maximum number of transactions in the orphanage, used when calling LimitOrphans(). */\n+    const size_t m_max_orphanage_count;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n+public:\n+    Impl(const Options& options) :\n+        m_max_orphanage_count{options.m_max_orphanage_count}\n+    {}\n+\n+    // Orphanage Wrapper Functions\n+    bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n+    CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);\n+            }\n+        }\n+        for (const auto& wtxid : block_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+        for (const auto& wtxid : conflicted_wtxids) {\n+            orphan_request_tracker.ForgetTxHash(wtxid);\n+        }\n+    }\n+    bool HaveTxToReconsider(NodeId peer) { return m_orphanage.HaveTxToReconsider(peer); }\n+    size_t OrphanageSize() { return m_orphanage.Size(); }\n+    void MempoolAcceptedTx(const CTransactionRef& ptx) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.AddChildrenToWorkSet(*ptx);\n+        m_orphanage.EraseTx(ptx->GetWitnessHash());\n+    }\n+    void MempoolRejectedTx(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_orphanage.EraseTx(wtxid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1253479136,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-08-14T21:09:46Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973655",
      "pull_request_review_id": 1543694803,
      "id": 1293973655,
      "node_id": "PRRC_kwDOABII585NIHiX",
      "diff_hunk": "@@ -15,6 +14,16 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "in_reply_to_id": 1253619584,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed these to `if(!Assume(...)) return;`",
      "created_at": "2023-08-14T21:10:24Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293973655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293973655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293974858",
      "pull_request_review_id": 1543694803,
      "id": 1293974858,
      "node_id": "PRRC_kwDOABII585NIH1K",
      "diff_hunk": "@@ -59,6 +58,30 @@ class TxPackageTracker {\n      * still want to try to resolve. Remove its entries from the orphanage and other data\n      * structures. */\n     void MempoolRejectedTx(const uint256& wtxid);\n+\n+    /** Add a new orphan or an announcement for a known orphan. This should be called for every\n+     * peer that announces the orphan.  The orphan request tracker will decide when to request what\n+     * from which peer - use GetOrphanRequests().\n+     * @param[in]   tx      CTransactionRef if this is a new orphan, or nullptr if an announcement\n+     *                      for a known orphan.\n+     * @param[in]   reqtime Some time in the future when the orphan resolution information should be\n+     *                      requested. This may be further extended internally.\n+     */\n+    void AddOrphanTx(NodeId nodeid, const uint256& wtxid, const CTransactionRef& tx, bool is_preferred, std::chrono::microseconds reqtime);\n+\n+    /** Number of packages we are working on with this peer. Includes any entries in the orphan\n+     * tracker and in-flight requests. */\n+    size_t Count(NodeId nodeid) const;",
      "path": "src/node/txpackagetracker.h",
      "position": null,
      "original_position": 34,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1254492129,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replaced the exposure of `Count` to `CheckIsEmpty()` functions",
      "created_at": "2023-08-14T21:12:01Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293974858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293974858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293975342",
      "pull_request_review_id": 1543694803,
      "id": 1293975342,
      "node_id": "PRRC_kwDOABII585NIH8u",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)\n+{\n+    AssertLockHeld(m_mutex);\n+    Assume(m_peer_bytes_used.count(peer) > 0);\n+    Assume(m_peer_bytes_used.at(peer) >= size);\n+    m_peer_bytes_used.at(peer) -= size;\n+    if (m_peer_bytes_used.at(peer) == 0) {\n+        m_peer_bytes_used.erase(peer);\n+    }\n+}\n \n bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n {\n     LOCK(m_mutex);\n+    if (tx == nullptr) {\n+        Assume(false);\n+        return false;\n+    }",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261403669,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-08-14T21:12:38Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293975342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293975342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976284",
      "pull_request_review_id": 1543694803,
      "id": 1293976284,
      "node_id": "PRRC_kwDOABII585NIILc",
      "diff_hunk": "@@ -2960,9 +2960,10 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n         const MempoolAcceptResult result = m_chainman.ProcessTransaction(porphanTx);\n         const TxValidationState& state = result.m_state;\n         const uint256& orphanHash = porphanTx->GetHash();\n+        const uint256 orphan_wtxid = porphanTx->GetWitnessHash();\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphan_wtxid.ToString());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "543273d96e896adf5531ed961856aa0eb70cbe57",
      "in_reply_to_id": 1279714521,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Logging both :+1: ",
      "created_at": "2023-08-14T21:13:57Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976378",
      "pull_request_review_id": 1543694803,
      "id": 1293976378,
      "node_id": "PRRC_kwDOABII585NIIM6",
      "diff_hunk": "@@ -61,7 +62,31 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    size_t TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    size_t BytesFromPeer(NodeId peer) const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        auto peer_bytes_it = m_peer_bytes_used.find(peer);\n+        return peer_bytes_it == m_peer_bytes_used.end() ? 0 : peer_bytes_it->second;\n+    }\n+\n+    /** Remove a peer from an orphan's announcers list, erasing the orphan if this is the only peer\n+     * who announced it. If the orphan doesn't exist or does not list this peer as an announcer, do nothing. */\n+    void EraseOrphanOfPeer(const uint256& wtxid, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 28,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "29d9d326d5193bb9a410a8881eabc93de5dd6266",
      "in_reply_to_id": 1279730123,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Deleted from that commit",
      "created_at": "2023-08-14T21:14:06Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976670",
      "pull_request_review_id": 1543694803,
      "id": 1293976670,
      "node_id": "PRRC_kwDOABII585NIIRe",
      "diff_hunk": "@@ -4286,6 +4285,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n                 }\n+                m_txpackagetracker->MempoolRejectedTx(tx.GetWitnessHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "974d864419dd98be6e32dec3ee11f5082b060b1b",
      "in_reply_to_id": 1279743325,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rearranged the commits so it's more clear where the erasure is new",
      "created_at": "2023-08-14T21:14:29Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976720",
      "pull_request_review_id": 1543694803,
      "id": 1293976720,
      "node_id": "PRRC_kwDOABII585NIISQ",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1279747416,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2023-08-14T21:14:35Z",
      "updated_at": "2023-08-14T21:15:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293976720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293976720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293978623",
      "pull_request_review_id": 1577664198,
      "id": 1293978623,
      "node_id": "PRRC_kwDOABII585NIIv_",
      "diff_hunk": "@@ -5926,6 +5958,22 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             }\n         }\n \n+        auto requestable_orphans = m_txpackagetracker->GetOrphanRequests(pto->GetId(), current_time);\n+        for (const auto& gtxid : requestable_orphans) {\n+            if (AlreadyHaveTx(gtxid, /*include_orphanage=*/false)) {\n+                // We don't know that the transaction was rejected by mempool. But if the\n+                // transaction was added to mempool, we would have already called\n+                // MempoolAcceptedTx().\n+                m_txpackagetracker->MempoolRejectedTx(gtxid.GetHash());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261648754,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `MEMPOOLREJ` log and successful `AcceptToMemoryPool` log for both orphan and non-orphan tx results.",
      "created_at": "2023-08-14T21:17:06Z",
      "updated_at": "2023-08-14T21:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293978623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293978623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981371",
      "pull_request_review_id": 1577668817,
      "id": 1293981371,
      "node_id": "PRRC_kwDOABII585NIJa7",
      "diff_hunk": "@@ -1434,6 +1441,49 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, const Peer& peer)\n     }\n }\n \n+void PeerManagerImpl::AddOrphanAnnouncer(NodeId nodeid, const uint256& orphan_wtxid, const CTransactionRef& tx, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(::cs_main); // For m_txrequest\n+    const bool connected = m_connman.ForNode(nodeid, [](CNode* node) { return node->fSuccessfullyConnected && !node->fDisconnect; });\n+    if (!connected) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261405442,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is gone now, replaced with registration of `ConnectionInfo` when the node first connects.",
      "created_at": "2023-08-14T21:21:02Z",
      "updated_at": "2023-08-14T21:21:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": 1447,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981811",
      "pull_request_review_id": 1577669739,
      "id": 1293981811,
      "node_id": "PRRC_kwDOABII585NIJhz",
      "diff_hunk": "@@ -4,41 +4,157 @@\n \n #include <node/txpackagetracker.h>\n \n+#include <common/bloom.h>\n+#include <logging.h>\n #include <txorphanage.h>\n+#include <txrequest.h>\n+#include <util/hasher.h>\n \n namespace node {\n+    /** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+    static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n class TxPackageTracker::Impl {\n     /** Manages unvalidated tx data (orphan transactions for which we are downloading ancestors). */\n     TxOrphanage m_orphanage;\n+\n+    mutable Mutex m_mutex;\n+\n+    /** Tracks orphans for which we need to request ancestor information. All hashes stored are\n+     * wtxids, i.e., the wtxid of the orphan. However, the Announcement::m_is_wtxid field is used to\n+     * indicate whether we would request the ancestor information by wtxid (via package relay) or by\n+     * txid (via prevouts of the missing inputs). */\n+    TxRequestTracker orphan_request_tracker GUARDED_BY(m_mutex);\n+\n public:\n     Impl() = default;\n \n     // Orphanage Wrapper Functions\n-    bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) { return m_orphanage.AddTx(tx, peer); }\n     bool OrphanageHaveTx(const GenTxid& gtxid) { return m_orphanage.HaveTx(gtxid); }\n     CTransactionRef GetTxToReconsider(NodeId peer) { return m_orphanage.GetTxToReconsider(peer); }\n-    void DisconnectedPeer(NodeId peer) {\n-        m_orphanage.EraseForPeer(peer);\n+    void DisconnectedPeer(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        orphan_request_tracker.DisconnectedPeer(nodeid);\n+        m_orphanage.EraseForPeer(nodeid);\n+    }\n+    void BlockConnected(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        AssertLockNotHeld(m_mutex);\n+        LOCK(m_mutex);\n+        const auto wtxids_erased{m_orphanage.EraseForBlock(block)};\n+        std::set<uint256> block_wtxids;\n+        std::set<uint256> conflicted_wtxids;\n+        for (const CTransactionRef& ptx : block.vtx) {\n+            block_wtxids.insert(ptx->GetWitnessHash());\n+        }\n+        for (const auto& wtxid : wtxids_erased) {\n+            if (block_wtxids.count(wtxid) == 0) {\n+                conflicted_wtxids.insert(wtxid);",
      "path": "src/node/txpackagetracker.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b5ab45e595bbcedbd602b6385b83e9ffd983f216",
      "in_reply_to_id": 1254470451,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the special casing. I can't remember why it comes into play later, but if I do, I'll add it when it's needed.",
      "created_at": "2023-08-14T21:21:45Z",
      "updated_at": "2023-08-14T21:21:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1293981811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1293981811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309014848",
      "pull_request_review_id": 1600730903,
      "id": 1309014848,
      "node_id": "PRRC_kwDOABII585OBftA",
      "diff_hunk": "@@ -226,7 +234,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();",
      "path": "src/txorphanage.cpp",
      "position": 241,
      "original_position": 74,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b34c7ba883906a4f49afdfd7d55614bded21bfff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's rename `orphanHash` while we're here to something that doesn't sound like txid",
      "created_at": "2023-08-29T15:31:35Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309014848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309014848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309036008",
      "pull_request_review_id": 1600730903,
      "id": 1309036008,
      "node_id": "PRRC_kwDOABII585OBk3o",
      "diff_hunk": "@@ -4178,28 +4237,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {",
      "path": "src/net_processing.cpp",
      "position": 546,
      "original_position": 192,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 1ea66e8c2ce9e05e1346c1363196073eec554292 `[refactor] consolidate invalid ATMP processing` \r\n\r\nthis loop is already taken care of in `ProcessValidTx`, no?\r\n\r\n",
      "created_at": "2023-08-29T15:48:27Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309036008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309036008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4001,
      "original_line": 4001,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309046360",
      "pull_request_review_id": 1600730903,
      "id": 1309046360,
      "node_id": "PRRC_kwDOABII585OBnZY",
      "diff_hunk": "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "path": "src/net_processing.cpp",
      "position": 471,
      "original_position": 172,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note: this is now being called in the case of `TX_MISSING_INPUTS` where it wasn't prior\r\n\r\nis this a behavior change? Looks like if it has rejected parents additional things can happen.",
      "created_at": "2023-08-29T15:56:20Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309046360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309046360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2818,
      "original_line": 2818,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309059673",
      "pull_request_review_id": 1600730903,
      "id": 1309059673,
      "node_id": "PRRC_kwDOABII585OBqpZ",
      "diff_hunk": "@@ -61,7 +61,28 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    unsigned int TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    /** Return total amount of orphans stored by this transaction, in bytes. */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "af6602e7ff224d99f937a1dba440ce060cada390",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```Suggestion\r\n    /** Return total amount of orphans stored by this peer, in bytes. */\r\n```",
      "created_at": "2023-08-29T16:07:01Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309059673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309059673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309061201",
      "pull_request_review_id": 1600730903,
      "id": 1309061201,
      "node_id": "PRRC_kwDOABII585OBrBR",
      "diff_hunk": "@@ -266,3 +299,24 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+void TxOrphanage::EraseOrphanOfPeer(const uint256& wtxid, NodeId peer)\n+{\n+    AssertLockNotHeld(m_mutex);\n+    LOCK(m_mutex);\n+    // Nothing to do if this peer isn't storing any orphans.",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "0e27954b7116f97b51de32aea14e074a9ee57717",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this a necessary optimization? the next check would catch this case as well",
      "created_at": "2023-08-29T16:08:17Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309061201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309061201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309078749",
      "pull_request_review_id": 1600730903,
      "id": 1309078749,
      "node_id": "PRRC_kwDOABII585OBvTd",
      "diff_hunk": "@@ -45,13 +45,13 @@ class TxOrphanage {\n \n     /** Maybe erase all orphans announced by a peer (eg, after that peer disconnects). If an orphan\n      * has been announced by another peer, don't erase, just remove this peer from the list of announcers. */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+    std::vector<uint256> EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/txorphanage.h",
      "position": 49,
      "original_position": 14,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "ed557d07c6fba763a62eed721be492521ed17445",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see it being used anywhere?",
      "created_at": "2023-08-29T16:23:54Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309078749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309078749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309081997",
      "pull_request_review_id": 1600730903,
      "id": 1309081997,
      "node_id": "PRRC_kwDOABII585OBwGN",
      "diff_hunk": "@@ -101,6 +104,8 @@ class TxOrphanage {\n         int64_t nTimeExpire;\n         size_t list_pos;\n         std::set<NodeId> announcers;\n+        /** Txids of the missing parents to request. Determined by peerman. */",
      "path": "src/txorphanage.h",
      "position": 118,
      "original_position": 40,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "ed557d07c6fba763a62eed721be492521ed17445",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in `[txorphanage] store parent txids in OrphanTx`\r\n\r\nIs this just the deduplicated set of txids to possibly fetch, if still in orphanage?",
      "created_at": "2023-08-29T16:26:46Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309081997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309081997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309109595",
      "pull_request_review_id": 1600730903,
      "id": 1309109595,
      "node_id": "PRRC_kwDOABII585OB21b",
      "diff_hunk": "@@ -1880,6 +1880,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n         }\n     }\n \n+    if (m_chainman.ActiveChain().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "94f9de3eacc2f6375a4f5ad15a9ec4ced2d30424",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if a block is being connected, why don't we just unconditionally wipe `m_recent_rejects`? Could delete `hashRecentRejectsChainTip` as well",
      "created_at": "2023-08-29T16:52:01Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309109595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309109595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1883,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309141841",
      "pull_request_review_id": 1600730903,
      "id": 1309141841,
      "node_id": "PRRC_kwDOABII585OB-tR",
      "diff_hunk": "@@ -68,6 +68,13 @@ class TxDownloadManager {\n \n     /** Should be called when a notfound for a tx has been received. */\n     void ReceivedNotFound(NodeId nodeid, const std::vector<uint256>& txhashes) { m_impl->ReceivedNotFound(nodeid, txhashes); }\n+\n+    /** Add a new orphan transaction. Returns whether this orphan is going to be processed and the",
      "path": "src/node/txdownloadman.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can already exist in orphanage\r\n\r\n```Suggestion\r\n    /** Add a potentially new orphan transaction. Returns whether this orphan is going to be processed and the\r\n```",
      "created_at": "2023-08-29T17:22:37Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309141841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309141841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309147840",
      "pull_request_review_id": 1600730903,
      "id": 1309147840,
      "node_id": "PRRC_kwDOABII585OCALA",
      "diff_hunk": "@@ -4016,39 +4016,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         } else {\n             bool should_process_orphan = ProcessInvalidTx(ptx, pfrom.GetId(), state);\n             if (should_process_orphan) {\n-                // Deduplicate parent txids, so that we don't have to loop over\n-                // the same parent txid more than once down below.\n-                std::vector<uint256> unique_parents;\n-                unique_parents.reserve(tx.vin.size());\n-                for (const CTxIn& txin : tx.vin) {\n-                    // We start with all parents, and then remove duplicates below.\n-                    unique_parents.push_back(txin.prevout.hash);\n-                }\n-                std::sort(unique_parents.begin(), unique_parents.end());\n-                unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n                 const auto current_time{GetTime<std::chrono::microseconds>()};\n-\n-                for (const uint256& parent_txid : unique_parents) {\n-                    // Here, we only have the txid (and not wtxid) of the\n-                    // inputs, so we only request in txid mode, even for\n-                    // wtxidrelay peers.\n-                    // Eventually we should replace this with an improved\n-                    // protocol for getting all unconfirmed parents.\n-                    const auto gtxid{GenTxid::Txid(parent_txid)};\n-                    AddKnownTx(*peer, parent_txid);\n-                    m_txdownloadman.ReceivedTxInv(pfrom.GetId(), gtxid, current_time);\n-                }\n-\n-                if (m_txdownloadman.GetOrphanageRef().AddTx(ptx, pfrom.GetId(), unique_parents)) {\n+                const auto& [will_process_orphan, unique_parents] = m_txdownloadman.NewOrphanTx(ptx, pfrom.GetId(), current_time);",
      "path": "src/net_processing.cpp",
      "position": 588,
      "original_position": 28,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find the `should_process`/`will_process` interaction a bit non-obvious on the surface\r\n\r\nIt's detecting an orphan that you may want to fetch, then attempting to add to the orphanage, and checking if it's newly-entered?",
      "created_at": "2023-08-29T17:28:23Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309147840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309147840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4008,
      "original_line": 4008,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309157968",
      "pull_request_review_id": 1600730903,
      "id": 1309157968,
      "node_id": "PRRC_kwDOABII585OCCpQ",
      "diff_hunk": "@@ -690,8 +688,7 @@ class PeerManagerImpl final : public PeerManager\n     CTxMemPool& m_mempool;\n \n     /** Protects tx download, rejection filter. */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "f6e0d98b1ff2e6ee0cc0777fb98f0e8022fa42b0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nothing being protected here anymore",
      "created_at": "2023-08-29T17:38:44Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309157968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309157968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309160578",
      "pull_request_review_id": 1600730903,
      "id": 1309160578,
      "node_id": "PRRC_kwDOABII585OCDSC",
      "diff_hunk": "@@ -195,6 +201,9 @@ class TxRequestTracker {\n     /** Count how many announcements are being tracked in total across all peers and transaction hashes. */\n     size_t Size() const;\n \n+    /** For some tx hash (either txid or wtxid), return all peers with non-COMPLETED announcements. */\n+    std::vector<NodeId> GetCandidatePeers(const uint256& txhash) const;",
      "path": "src/txrequest.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "711419ffc0cdfa0ca18cb1988d0314b9f62cd441",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it make sense to have the arg be a `GenTxid`",
      "created_at": "2023-08-29T17:41:30Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309160578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309160578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309163045",
      "pull_request_review_id": 1600730903,
      "id": 1309163045,
      "node_id": "PRRC_kwDOABII585OCD4l",
      "diff_hunk": "@@ -22,22 +25,30 @@ void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n     LOCK(m_tx_download_mutex);\n     m_orphanage.EraseForPeer(nodeid);\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n }\n \n void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n-    m_orphanage.EraseForBlock(block);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you push it down to where `erased_wtxids` is used since it's only used once?",
      "created_at": "2023-08-29T17:44:02Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309163045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309163045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309169470",
      "pull_request_review_id": 1600730903,
      "id": 1309169470,
      "node_id": "PRRC_kwDOABII585OCFc-",
      "diff_hunk": "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "do we really want to log unconditionally?",
      "created_at": "2023-08-29T17:50:41Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309169470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309169470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309179289",
      "pull_request_review_id": 1600730903,
      "id": 1309179289,
      "node_id": "PRRC_kwDOABII585OCH2Z",
      "diff_hunk": "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",\n+                     nodeid, orphan_gtxid.GetHash().ToString());",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "print args are flipped",
      "created_at": "2023-08-29T18:00:26Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309179289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309179289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309211039",
      "pull_request_review_id": 1600730903,
      "id": 1309211039,
      "node_id": "PRRC_kwDOABII585OCPmf",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",",
      "path": "src/node/txdownload_impl.cpp",
      "position": 261,
      "original_position": 259,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "under what circumstances is this expected? Eviction of the orphan in the orphanage, but outstanding resolution request? A comment to the expected conditions would be helpful for documentation.",
      "created_at": "2023-08-29T18:35:19Z",
      "updated_at": "2023-08-29T18:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309211039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309211039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309300862",
      "pull_request_review_id": 1601193815,
      "id": 1309300862,
      "node_id": "PRRC_kwDOABII585OClh-",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this adds an announcer even if the INV is txid type, even though the assumption is wtxid arg",
      "created_at": "2023-08-29T20:05:40Z",
      "updated_at": "2023-08-29T20:05:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309300862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309300862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309301097",
      "pull_request_review_id": 1601194178,
      "id": 1309301097,
      "node_id": "PRRC_kwDOABII585OCllp",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",",
      "path": "src/node/txdownload_impl.cpp",
      "position": 261,
      "original_position": 259,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": 1309211039,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, it's happening because of: https://github.com/bitcoin/bitcoin/pull/28031/files#r1309300862\r\n\r\nsee logs:\r\n```\r\n2023-08-29T19:19:00.066912Z [mempoolrej] 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219) from peer=2 was not accepted: bad-txns-inputs-missingorspent\r\n2023-08-29T19:19:00.066970Z [txpackages] stored orphan tx 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219) (mapsz 4 outsz 5)\r\n2023-08-29T19:19:00.066990Z [txpackages] adding peer=2 as a candidate for resolving orphan d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:00.067015Z [txpackages] adding peer=6 as a candidate for resolving orphan d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:00.067027Z [txpackages] added peer=6 as announcer of orphan tx d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219\r\n2023-08-29T19:19:04.361970Z [txpackages] adding peer=21 as a candidate for resolving orphan 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31\r\n2023-08-29T19:19:06.399524Z [txpackages] couldn't find parent txids to resolve orphan 21 with peer=259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31\r\n2023-08-29T19:20:02.183893Z timeout of in-flight orphan resolution d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219 for peer=6\r\n2023-08-29T19:21:02.206171Z timeout of in-flight orphan resolution d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219 for peer=2\r\n2023-08-29T19:21:02.206223Z [txpackages]    removed orphan tx 259b016ce9258c536a0a222728795aa6c22de47dbd6e166f4330e33ce075fe31 (wtxid=d6dc1525169700841c605385514a6069959f86bceccd33ede3fce714fa699219)\r\n```",
      "created_at": "2023-08-29T20:05:56Z",
      "updated_at": "2023-08-29T20:07:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1309301097",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1309301097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493509",
      "pull_request_review_id": 1603028137,
      "id": 1310493509,
      "node_id": "PRRC_kwDOABII585OHItF",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                // Schedule with no delay, i.e. not using ReceivedTxInv(). It should be requested immediately\r\n```",
      "created_at": "2023-08-30T15:53:57Z",
      "updated_at": "2023-08-30T15:53:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493806",
      "pull_request_review_id": 1603028712,
      "id": 1310493806,
      "node_id": "PRRC_kwDOABII585OHIxu",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": 1309300862,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the simplest solution is just filter this addition based on wtxid-ness, since this only helps in the multi-announcer case, which wouldn't be a regression, iiuc",
      "created_at": "2023-08-30T15:54:11Z",
      "updated_at": "2023-08-30T15:54:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1310493806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1310493806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314853760",
      "pull_request_review_id": 1609400936,
      "id": 1314853760,
      "node_id": "PRRC_kwDOABII585OXxOA",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": 1309300862,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ooh thanks :+1: ",
      "created_at": "2023-09-04T11:57:30Z",
      "updated_at": "2023-09-04T11:57:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1314853760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1314853760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324124766",
      "pull_request_review_id": 1623927052,
      "id": 1324124766,
      "node_id": "PRRC_kwDOABII585O7Ipe",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);\n+    if (AlreadyHaveTxLocked(gtxid)) return;\n+    const auto& info = m_peer_info.at(peer).m_connection_info;\n+    if (!info.m_relay_permissions && m_txrequest.Count(peer) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+        // Too many queued announcements for this peer\n+        return;\n+    }\n+    // Decide the TxRequestTracker parameters for this announcement:\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n+    // - \"reqtime\": current time plus delays for:\n+    //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n+    //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n+    //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n+    auto delay{0us};\n+    if (!info.m_preferred) delay += NONPREF_PEER_TX_DELAY;\n+    if (!gtxid.IsWtxid() && m_num_wtxid_peers > 0) delay += TXID_RELAY_DELAY;\n+    const bool overloaded = !info.m_relay_permissions && m_txrequest.CountInFlight(peer) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n+    if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n+\n+    m_txrequest.ReceivedInv(peer, gtxid, info.m_preferred, now + delay);\n+}\n+\n+void TxDownloadImpl::ReceivedTxInv(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    AddTxAnnouncement(peer, gtxid, now);\n+}\n+\n+std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chrono::microseconds current_time)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": 1310493509,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2023-09-13T07:56:30Z",
      "updated_at": "2023-09-13T07:56:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324124766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324124766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324126258",
      "pull_request_review_id": 1623929268,
      "id": 1324126258,
      "node_id": "PRRC_kwDOABII585O7JAy",
      "diff_hunk": "@@ -0,0 +1,415 @@\n+// Copyright (c) 2023\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txdownload_impl.h>\n+\n+namespace node {\n+/** How long to wait before requesting orphan ancpkginfo/parents from an additional peer. */\n+static constexpr auto ORPHAN_ANCESTOR_GETDATA_INTERVAL{60s};\n+\n+TxOrphanage& TxDownloadImpl::GetOrphanageRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_orphanage; }\n+TxRequestTracker& TxDownloadImpl::GetTxRequestRef() EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex) { return m_txrequest; }\n+\n+void TxDownloadImpl::ConnectedPeer(NodeId nodeid, const TxDownloadConnectionInfo& info)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    Assume(m_peer_info.count(nodeid) == 0);\n+    m_peer_info.emplace(nodeid, PeerInfo(info));\n+    if (info.m_wtxid_relay) m_num_wtxid_peers += 1;\n+}\n+void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.EraseForPeer(nodeid);\n+    m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n+}\n+\n+void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);\n+    for (const auto& ptx : block.vtx) {\n+        m_txrequest.ForgetTxHash(ptx->GetHash());\n+        m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n+        m_recent_confirmed_transactions.insert(ptx->GetHash());\n+        // All hashes in m_orphan_resolution_tracker are wtxids.\n+        m_orphan_resolution_tracker.ForgetTxHash(ptx->GetWitnessHash());\n+        if (ptx->GetHash() != ptx->GetWitnessHash()) {\n+            m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n+        }\n+    }\n+\n+    // Stop trying to resolve orphans that were conflicted by the block.\n+    for (const auto& wtxid : erased_wtxids) {\n+        m_orphan_resolution_tracker.ForgetTxHash(wtxid);\n+    }\n+\n+    if (tiphash != hashRecentRejectsChainTip) {\n+        // If the chain tip has changed previously rejected transactions\n+        // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+        // or a double-spend. Reset the rejects filter and give those\n+        // txs a second chance.\n+        hashRecentRejectsChainTip = tiphash;\n+        m_recent_rejects.reset();\n+    }\n+}\n+\n+void TxDownloadImpl::BlockDisconnected()\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    m_recent_confirmed_transactions.reset();\n+}\n+\n+void TxDownloadImpl::MempoolAcceptedTx(const CTransactionRef& tx)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    m_orphanage.AddChildrenToWorkSet(*tx);\n+    // As this version of the transaction was acceptable, we can forget about any requests for it.\n+    // No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetHash());\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it. No-op if the tx is not in txorphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+}\n+\n+bool TxDownloadImpl::MempoolRejectedTx(const CTransactionRef& tx, const TxValidationResult& result)\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    switch (result) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return false;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return false;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+            { return m_recent_rejects.contains(input.prevout.hash); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(), tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_recent_rejects.insert(tx->GetWitnessHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+            return false;\n+        }\n+        return true;\n+    }\n+    case TxValidationResult::TX_INPUTS_NOT_STANDARD:\n+    {\n+        // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n+        // then we know that the witness was irrelevant to the policy\n+        // failure, since this check depends only on the txid\n+        // (the scriptPubKey being spent is covered by the txid).\n+        // Add the txid to the reject filter to prevent repeated\n+        // processing of this transaction in the event that child\n+        // transactions are later received (resulting in\n+        // parent-fetching by txid via the orphan-handling logic).\n+        if (tx->GetWitnessHash() != tx->GetHash()) {\n+            m_recent_rejects.insert(tx->GetHash());\n+            m_txrequest.ForgetTxHash(tx->GetHash());\n+        }\n+        break;\n+    }\n+    case TxValidationResult::TX_CONSENSUS:\n+    case TxValidationResult::TX_RECENT_CONSENSUS_CHANGE:\n+    case TxValidationResult::TX_NOT_STANDARD:\n+    case TxValidationResult::TX_PREMATURE_SPEND:\n+    case TxValidationResult::TX_WITNESS_MUTATED:\n+    case TxValidationResult::TX_CONFLICT:\n+    case TxValidationResult::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    // We can add the wtxid of this transaction to our reject filter.\n+    m_recent_rejects.insert(tx->GetWitnessHash());\n+    // Forget requests for this wtxid, but not for the txid, as another version of\n+    // transaction may be valid. No-op if the tx is not in txrequest.\n+    m_txrequest.ForgetTxHash(tx->GetWitnessHash());\n+    // If it came from the orphanage, remove it (this doesn't happen if the transaction was missing\n+    // inputs). No-op if the tx is not in the orphanage.\n+    m_orphanage.EraseTx(tx->GetWitnessHash());\n+    m_orphan_resolution_tracker.ForgetTxHash(tx->GetWitnessHash());\n+    return false;\n+}\n+\n+bool TxDownloadImpl::AlreadyHaveTxLocked(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    const uint256& hash = gtxid.GetHash();\n+\n+    if (m_orphanage.HaveTx(gtxid)) return true;\n+\n+    if (m_recent_confirmed_transactions.contains(hash)) return true;\n+\n+    return m_recent_rejects.contains(hash) || m_opts.m_mempool_ref.exists(gtxid);\n+}\n+bool TxDownloadImpl::AlreadyHaveTx(const GenTxid& gtxid) const\n+    EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n+{\n+    LOCK(m_tx_download_mutex);\n+    return AlreadyHaveTxLocked(gtxid);\n+}\n+\n+void TxDownloadImpl::AddTxAnnouncement(NodeId peer, const GenTxid& gtxid, std::chrono::microseconds now)\n+    EXCLUSIVE_LOCKS_REQUIRED(m_tx_download_mutex)\n+{\n+    if (!Assume(m_peer_info.count(peer) > 0)) return;\n+    if (m_orphanage.HaveTx(gtxid)) AddOrphanAnnouncer(peer, gtxid.GetHash(), now);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "7f9db92ba3f483f78bd248406d921bd73b1e7054",
      "in_reply_to_id": 1309300862,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, just did a gate on IsWtxid. Don't think that many non-wtxidrelay nodes are still out there anyway.",
      "created_at": "2023-09-13T07:57:41Z",
      "updated_at": "2023-09-13T07:57:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1324126258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1324126258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326089320",
      "pull_request_review_id": 1627107908,
      "id": 1326089320,
      "node_id": "PRRC_kwDOABII585PCoRo",
      "diff_hunk": "@@ -101,6 +104,8 @@ class TxOrphanage {\n         int64_t nTimeExpire;\n         size_t list_pos;\n         std::set<NodeId> announcers;\n+        /** Txids of the missing parents to request. Determined by peerman. */",
      "path": "src/txorphanage.h",
      "position": 118,
      "original_position": 40,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "ed557d07c6fba763a62eed721be492521ed17445",
      "in_reply_to_id": 1309081997,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes",
      "created_at": "2023-09-14T14:57:05Z",
      "updated_at": "2023-09-14T14:57:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326089320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326089320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326094730",
      "pull_request_review_id": 1627116146,
      "id": 1326094730,
      "node_id": "PRRC_kwDOABII585PCpmK",
      "diff_hunk": "@@ -45,13 +45,13 @@ class TxOrphanage {\n \n     /** Maybe erase all orphans announced by a peer (eg, after that peer disconnects). If an orphan\n      * has been announced by another peer, don't erase, just remove this peer from the list of announcers. */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n+    std::vector<uint256> EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);",
      "path": "src/txorphanage.h",
      "position": 49,
      "original_position": 14,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "ed557d07c6fba763a62eed721be492521ed17445",
      "in_reply_to_id": 1309078749,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed, I think in a past implementation I was using it but I'm not anymore",
      "created_at": "2023-09-14T15:00:31Z",
      "updated_at": "2023-09-14T15:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326094730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326094730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326096588",
      "pull_request_review_id": 1627116146,
      "id": 1326096588,
      "node_id": "PRRC_kwDOABII585PCqDM",
      "diff_hunk": "@@ -266,3 +299,24 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+void TxOrphanage::EraseOrphanOfPeer(const uint256& wtxid, NodeId peer)\n+{\n+    AssertLockNotHeld(m_mutex);\n+    LOCK(m_mutex);\n+    // Nothing to do if this peer isn't storing any orphans.",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "0e27954b7116f97b51de32aea14e074a9ee57717",
      "in_reply_to_id": 1309061201,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, removed in #28481",
      "created_at": "2023-09-14T15:01:49Z",
      "updated_at": "2023-09-14T15:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326096588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326096588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326097640",
      "pull_request_review_id": 1627116146,
      "id": 1326097640,
      "node_id": "PRRC_kwDOABII585PCqTo",
      "diff_hunk": "@@ -226,7 +234,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();",
      "path": "src/txorphanage.cpp",
      "position": 241,
      "original_position": 74,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "b34c7ba883906a4f49afdfd7d55614bded21bfff",
      "in_reply_to_id": 1309014848,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `orphan_wtxid` in #28481",
      "created_at": "2023-09-14T15:02:33Z",
      "updated_at": "2023-09-14T15:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326097640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326097640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326104953",
      "pull_request_review_id": 1627116146,
      "id": 1326104953,
      "node_id": "PRRC_kwDOABII585PCsF5",
      "diff_hunk": "@@ -61,7 +61,28 @@ class TxOrphanage {\n         return m_orphans.size();\n     }\n \n+    /** Return total memory usage of the transactions stored. Does not include overhead of\n+     * m_orphans, m_peer_work_set, etc. */\n+    unsigned int TotalOrphanBytes() const EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        return m_total_orphan_bytes;\n+    }\n+    /** Return total amount of orphans stored by this transaction, in bytes. */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 11,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "af6602e7ff224d99f937a1dba440ce060cada390",
      "in_reply_to_id": 1309059673,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "haha, fixed in #28481",
      "created_at": "2023-09-14T15:07:53Z",
      "updated_at": "2023-09-14T15:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326104953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326104953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326111728",
      "pull_request_review_id": 1627142339,
      "id": 1326111728,
      "node_id": "PRRC_kwDOABII585PCtvw",
      "diff_hunk": "@@ -15,14 +14,35 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n \n+void TxOrphanage::SubtractOrphanBytes(unsigned int size, NodeId peer)",
      "path": "src/txorphanage.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "116378efc1c9c1fe0d26cb42e2bdbb5770815c35",
      "in_reply_to_id": 1261414179,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Imo, it would be nicer to do the orphanage changes separately, including amended functional/unit/fuzz tests.\r\n\r\nOpened #28481 for orphanage changes",
      "created_at": "2023-09-14T15:12:50Z",
      "updated_at": "2023-09-14T15:12:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326111728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326111728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326131972",
      "pull_request_review_id": 1627181389,
      "id": 1326131972,
      "node_id": "PRRC_kwDOABII585PCysE",
      "diff_hunk": "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "path": "src/net_processing.cpp",
      "position": 471,
      "original_position": 172,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "in_reply_to_id": 1309046360,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, behavior change. To make more concrete:\r\n1. We get an orphan C with 2 missing parents, A and B\r\n2. We reject A\r\n3. We get B and accept it\r\n4. We add C to workset and process it in `ProcessOrphanTx`.\r\n5. Here, since we find A in recent_rejects, we also add C to recent_rejects when we wouldn't have before.\r\n\r\nI think this is good actually... :thinking: ",
      "created_at": "2023-09-14T15:27:52Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326131972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326131972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2818,
      "original_line": 2818,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326150320",
      "pull_request_review_id": 1627181389,
      "id": 1326150320,
      "node_id": "PRRC_kwDOABII585PC3Kw",
      "diff_hunk": "@@ -22,22 +25,30 @@ void TxDownloadImpl::DisconnectedPeer(NodeId nodeid)\n     LOCK(m_tx_download_mutex);\n     m_orphanage.EraseForPeer(nodeid);\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_orphan_resolution_tracker.DisconnectedPeer(nodeid);\n }\n \n void TxDownloadImpl::BlockConnected(const CBlock& block, const uint256& tiphash)\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n-    m_orphanage.EraseForBlock(block);\n+    const auto erased_wtxids = m_orphanage.EraseForBlock(block);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": 1309163045,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-09-14T15:40:09Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326150320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326150320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326154532",
      "pull_request_review_id": 1627181389,
      "id": 1326154532,
      "node_id": "PRRC_kwDOABII585PC4Mk",
      "diff_hunk": "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": 1309169470,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oop changed",
      "created_at": "2023-09-14T15:42:23Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326154532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326154532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326155952",
      "pull_request_review_id": 1627181389,
      "id": 1326155952,
      "node_id": "PRRC_kwDOABII585PC4iw",
      "diff_hunk": "@@ -216,6 +230,39 @@ std::vector<GenTxid> TxDownloadImpl::GetRequestsToSend(NodeId nodeid, std::chron\n     EXCLUSIVE_LOCKS_REQUIRED(!m_tx_download_mutex)\n {\n     LOCK(m_tx_download_mutex);\n+    // First process orphan resolution so that the tx requests can be sent asap\n+    std::vector<std::pair<NodeId, GenTxid>> expired_orphan_resolution;\n+    const auto orphans_ready = m_orphan_resolution_tracker.GetRequestable(nodeid, current_time, &expired_orphan_resolution);\n+    // Expire orphan resolution attempts\n+    for (const auto& [nodeid, orphan_gtxid] : expired_orphan_resolution) {\n+        LogPrintf(\"timeout of in-flight orphan resolution %s for peer=%d\\n\", orphan_gtxid.GetHash().ToString(), nodeid);\n+        // All txhashes in m_orphan_resolution_tracker are wtxids.\n+        Assume(orphan_gtxid.IsWtxid());\n+        m_orphanage.EraseOrphanOfPeer(orphan_gtxid.GetHash(), nodeid);\n+    }\n+    for (const auto& orphan_gtxid : orphans_ready) {\n+        Assume(orphan_gtxid.IsWtxid());\n+        const auto parent_txids{m_orphanage.GetParentTxids(orphan_gtxid.GetHash())};\n+        if (parent_txids.has_value()) {\n+            if (!Assume(m_peer_info.count(nodeid) > 0)) continue;\n+            const auto& info = m_peer_info.at(nodeid).m_connection_info;\n+            for (const auto& txid : *parent_txids) {\n+                // Schedule with no delay. It should be requested immediately\n+                // unless there is already a request out for this transaction.\n+                m_txrequest.ReceivedInv(nodeid, GenTxid::Txid(txid), info.m_preferred, current_time);\n+                LogPrint(BCLog::TXPACKAGES, \"scheduled parent request %s from peer=%d for orphan %s\\n\",\n+                         txid.ToString(), nodeid, orphan_gtxid.GetHash().ToString());\n+            }\n+            m_orphan_resolution_tracker.RequestedTx(nodeid, orphan_gtxid.GetHash(),\n+                                                    current_time + ORPHAN_ANCESTOR_GETDATA_INTERVAL);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"couldn't find parent txids to resolve orphan %s with peer=%d\\n\",\n+                     nodeid, orphan_gtxid.GetHash().ToString());",
      "path": "src/node/txdownload_impl.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "c437c48e60f1ef3af8bd548e93aadc00393314a6",
      "in_reply_to_id": 1309179289,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2023-09-14T15:43:17Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326155952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326155952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326156757",
      "pull_request_review_id": 1627181389,
      "id": 1326156757,
      "node_id": "PRRC_kwDOABII585PC4vV",
      "diff_hunk": "@@ -68,6 +68,13 @@ class TxDownloadManager {\n \n     /** Should be called when a notfound for a tx has been received. */\n     void ReceivedNotFound(NodeId nodeid, const std::vector<uint256>& txhashes) { m_impl->ReceivedNotFound(nodeid, txhashes); }\n+\n+    /** Add a new orphan transaction. Returns whether this orphan is going to be processed and the",
      "path": "src/node/txdownloadman.h",
      "position": null,
      "original_position": 5,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "in_reply_to_id": 1309141841,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2023-09-14T15:43:50Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326156757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326156757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326158206",
      "pull_request_review_id": 1627181389,
      "id": 1326158206,
      "node_id": "PRRC_kwDOABII585PC5F-",
      "diff_hunk": "@@ -195,6 +201,9 @@ class TxRequestTracker {\n     /** Count how many announcements are being tracked in total across all peers and transaction hashes. */\n     size_t Size() const;\n \n+    /** For some tx hash (either txid or wtxid), return all peers with non-COMPLETED announcements. */\n+    std::vector<NodeId> GetCandidatePeers(const uint256& txhash) const;",
      "path": "src/txrequest.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "711419ffc0cdfa0ca18cb1988d0314b9f62cd441",
      "in_reply_to_id": 1309160578,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably not?",
      "created_at": "2023-09-14T15:44:44Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326158206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326158206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 205,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326171767",
      "pull_request_review_id": 1627181389,
      "id": 1326171767,
      "node_id": "PRRC_kwDOABII585PC8Z3",
      "diff_hunk": "@@ -690,8 +688,7 @@ class PeerManagerImpl final : public PeerManager\n     CTxMemPool& m_mempool;\n \n     /** Protects tx download, rejection filter. */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "f6e0d98b1ff2e6ee0cc0777fb98f0e8022fa42b0",
      "in_reply_to_id": 1309157968,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed comment",
      "created_at": "2023-09-14T15:53:05Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326171767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326171767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326174919",
      "pull_request_review_id": 1627181389,
      "id": 1326174919,
      "node_id": "PRRC_kwDOABII585PC9LH",
      "diff_hunk": "@@ -4016,39 +4016,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         } else {\n             bool should_process_orphan = ProcessInvalidTx(ptx, pfrom.GetId(), state);\n             if (should_process_orphan) {\n-                // Deduplicate parent txids, so that we don't have to loop over\n-                // the same parent txid more than once down below.\n-                std::vector<uint256> unique_parents;\n-                unique_parents.reserve(tx.vin.size());\n-                for (const CTxIn& txin : tx.vin) {\n-                    // We start with all parents, and then remove duplicates below.\n-                    unique_parents.push_back(txin.prevout.hash);\n-                }\n-                std::sort(unique_parents.begin(), unique_parents.end());\n-                unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n                 const auto current_time{GetTime<std::chrono::microseconds>()};\n-\n-                for (const uint256& parent_txid : unique_parents) {\n-                    // Here, we only have the txid (and not wtxid) of the\n-                    // inputs, so we only request in txid mode, even for\n-                    // wtxidrelay peers.\n-                    // Eventually we should replace this with an improved\n-                    // protocol for getting all unconfirmed parents.\n-                    const auto gtxid{GenTxid::Txid(parent_txid)};\n-                    AddKnownTx(*peer, parent_txid);\n-                    m_txdownloadman.ReceivedTxInv(pfrom.GetId(), gtxid, current_time);\n-                }\n-\n-                if (m_txdownloadman.GetOrphanageRef().AddTx(ptx, pfrom.GetId(), unique_parents)) {\n+                const auto& [will_process_orphan, unique_parents] = m_txdownloadman.NewOrphanTx(ptx, pfrom.GetId(), current_time);",
      "path": "src/net_processing.cpp",
      "position": 588,
      "original_position": 28,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "5d380c3b880cfc85d13eeeb04f49532dda3294db",
      "in_reply_to_id": 1309147840,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep. We only want to `AddToCompactExtraTransactions` if this is a new orphan that we're actually keeping. We might fail to add it to orphanage if it's full.",
      "created_at": "2023-09-14T15:55:03Z",
      "updated_at": "2023-09-14T15:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1326174919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1326174919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4008,
      "original_line": 4008,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327603515",
      "pull_request_review_id": 1629438595,
      "id": 1327603515,
      "node_id": "PRRC_kwDOABII585PIZ87",
      "diff_hunk": "@@ -2954,54 +3052,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphan_wtxid);\n+        } else {\n+            LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n+                orphanHash.ToString(),\n+                orphan_wtxid.ToString(),\n+                peer.m_id,\n+                state.ToString());\n+            // Ignoring the return value. Within orphan processing, we do not make\n+            // additional orphan resolution requests when a transaction is missing inputs.\n+            ProcessInvalidTx(porphanTx, peer.m_id, state);",
      "path": "src/net_processing.cpp",
      "position": 471,
      "original_position": 172,
      "commit_id": "a61b66ef7b82c72876e6c265c774dfdb6fb22eac",
      "original_commit_id": "1ea66e8c2ce9e05e1346c1363196073eec554292",
      "in_reply_to_id": 1309046360,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC I was fine with it, just making sure I understood!",
      "created_at": "2023-09-15T17:37:09Z",
      "updated_at": "2023-09-15T17:37:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1327603515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327603515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28031"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2818,
      "original_line": 2818,
      "side": "RIGHT"
    }
  ]
}