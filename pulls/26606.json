{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606",
    "id": 1139581261,
    "node_id": "PR_kwDOABII585D7KFN",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26606",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26606.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26606.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
    "number": 26606,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Implement independent BDB parser",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split from #26596 \r\n\r\nThis PR adds `BerkeleyRODatabase` which is an independent implementation of a BDB file parser. It provides read only access to a BDB file, and can therefore be used as a read only database backend for wallets. This will be used for dumping legacy wallet records and migrating legacy wallets without the need for BDB itself.\r\n\r\nWallettool's `dump` command is changed to use `BerkeleyRODatabase` instead of `BerkeleyDatabase` (and `CWallet` itself) to demonstrate that this parser works and to test it against the existing wallettool functional tests.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-11-29T21:50:53Z",
    "updated_at": "2024-02-20T17:28:17Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "9bf5e87d2408943758e58bee842d9e20dc0eace2",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:berkeleyro",
      "ref": "berkeleyro",
      "sha": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 35,
        "watchers_count": 35,
        "size": 257624,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-20T17:29:47Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2024-01-13T23:12:15Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "45b2a91897ca8f4a3e0c1adcfb30cf570971da4e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36844,
        "stargazers_count": 74063,
        "watchers_count": 74063,
        "size": 249965,
        "default_branch": "master",
        "open_issues_count": 679,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-02-20T17:38:50Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-02-20T17:22:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1094,
    "deletions": 13,
    "changed_files": 17,
    "commits": 11,
    "review_comments": 47,
    "comments": 22
  },
  "events": [
    {
      "event": "commented",
      "id": 1331367594,
      "node_id": "IC_kwDOABII585PWw6q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331367594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T21:50:56Z",
      "updated_at": "2024-02-09T11:15:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/26606).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [darosior](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136), [Sjors](https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351), [theStack](https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1713893741) |\n| Stale ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1782050983) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29119](https://github.com/bitcoin/bitcoin/pull/29119) (refactor: Use std::span over Span by maflcko)\n* [#29071](https://github.com/bitcoin/bitcoin/pull/29071) (refactor: Remove Span operator==, Use std::ranges::equal by maflcko)\n* [#28236](https://github.com/bitcoin/bitcoin/pull/28236) (fuzz: wallet, add target for Spend by Ayush170-Future)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1331367594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 7916809974,
      "node_id": "LE_lADOABII585Xi1euzwAAAAHX4O72",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7916809974",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T21:50:58Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T21:51:35Z",
      "updated_at": "2022-11-29T21:51:35Z",
      "source": {
        "issue": {
          "id": 1467243567,
          "node_id": "PR_kwDOABII585D2F4R",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26596",
          "number": 26596,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Migrate legacy wallets to descriptor wallets without requiring BDB",
          "body": "Currently migrating to descriptor wallets requires having BDB available. In order to remove BDB from the project, we need to be able to do these migrations without BDB. This PR adds `BerkeleyRODatabase` which is an independent implementation of a BDB file parser. It can be used to read uncorrupted BDB files and extract all of their records. This is used for both the wallettool's `dump` command, and `migratewallet`.\r\n\r\nBased on #26606 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26596",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26596",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26596.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26596.patch"
          },
          "created_at": "2022-11-28T23:46:50Z",
          "updated_at": "2024-02-20T17:29:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7917493896,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX616I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7917493896",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T00:13:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918049578,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX89kq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918049578",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T02:36:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7918381484,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHX-Oms",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7918381484",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T04:09:47Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T14:14:40Z",
      "updated_at": "2022-11-30T14:14:40Z",
      "source": {
        "issue": {
          "id": 1320033494,
          "node_id": "PR_kwDOABII5848NBt5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
          "number": 25722,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Use util::Result class for wallet loading",
          "body": "**This is based on #25665.** The non-base commits are:\r\n\r\n- [`1b2a5f12b425` refactor: Use util::Result class for wallet loading](https://github.com/bitcoin/bitcoin/pull/25722/commits/1b2a5f12b42543d13a4bcafb9585e3d1df488914)\r\n\r\n---\r\n\r\nWallet loading functions up and down the stack have lots of error and warning parameters, and return error information in different ways. This PR makes them uniformly return `util::Result`, without changing behavior.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25722",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25722.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25722.patch"
          },
          "created_at": "2022-07-27T19:26:58Z",
          "updated_at": "2024-01-14T00:39:07Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1199739624,
      "node_id": "PRR_kwDOABII585HgpLo",
      "url": null,
      "actor": null,
      "commit_id": "f135c19f82e3d19ef0292f140d94d8e114a31547",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Marek777777",
        "id": 117536597,
        "node_id": "U_kgDOBwF3VQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/117536597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Marek777777",
        "html_url": "https://github.com/Marek777777",
        "followers_url": "https://api.github.com/users/Marek777777/followers",
        "following_url": "https://api.github.com/users/Marek777777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Marek777777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Marek777777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Marek777777/subscriptions",
        "organizations_url": "https://api.github.com/users/Marek777777/orgs",
        "repos_url": "https://api.github.com/users/Marek777777/repos",
        "events_url": "https://api.github.com/users/Marek777777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Marek777777/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1199739624",
      "submitted_at": "2022-11-30T17:23:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T18:00:14Z",
      "updated_at": "2022-11-30T18:00:14Z",
      "source": {
        "issue": {
          "id": 652547610,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTk1Mjk3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19461/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
          "number": 19461,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-gui -ipcconnect option",
          "body": "**This is a draft PR because it is based on #10102 + #19460.** The non-base commits are:\r\n\r\n- [`5f91aa3d8b47` multiprocess: Add bitcoin-gui -ipcconnect option](https://github.com/bitcoin/bitcoin/pull/19461/commits/5f91aa3d8b47cee97e625c3b5689a37dbd941eff)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-gui` that connects the GUI to an existing `bitcoin-node` process already running in the background instead of spawning a new `bitcoin-node` process. This allows the GUI to be started and stopped independently of the node. By default with this change, `bitcoin-gui` will check if a `<datadir>/sockets/node.sock` socket exists and try to connect to that. If that doesn't work, it will spawn a new node process and start up the same way it did before this PR.\r\n\r\nThe default `bitcoin-gui` connect option is `-ipcconnect=auto`, which tries to connect if possible as described above, and spawns a new `bitcoin-node` process if not possible. Other supported options are `-noipcconnect` to never connect to an existing node and always spawn a new one, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nWith this PR, basic functionality works and gui instances can connect and disconnect from a running node. But there are rough edges: If a gui process doesn't shut down cleanly, the node can see unhandled IpcExceptions, and if node command line options are passed to `bitcoin-gui` and `bitcoin-gui` connects to an exiting bitcoin-node process instead of spawning a new one, the node options will be silently ignored. \r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)\r\n\r\n---\r\n\r\nThis PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/issues/28722).\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19461",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19461",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19461.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19461.patch"
          },
          "created_at": "2020-07-07T19:00:11Z",
          "updated_at": "2024-01-22T00:52:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T18:02:08Z",
      "updated_at": "2022-11-30T18:02:08Z",
      "source": {
        "issue": {
          "id": 652543635,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTkyMDUz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19460/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
          "number": 19460,
          "state": "open",
          "state_reason": null,
          "title": "multiprocess: Add bitcoin-wallet -ipcconnect option",
          "body": "**This is a draft PR because it is based on #10102.** The non-base commits are:\r\n\r\n- [`bbefbd3c199b` multiprocess: Add -ipcconnect and -ipcbind options](https://github.com/bitcoin/bitcoin/pull/19460/commits/bbefbd3c199b189188d6427b4564b17477c6d50e)\r\n\r\n---\r\n\r\nBuilding on #10102, this adds an `-ipcconnect` option to `bitcoin-wallet` and an `-ipcbind` option to `bitcoin-node` (both enabled by default in multiprocess builds) so bitcoin node will listen on a `<datadir>/sockets/node.sock` unix socket, and `bitcoin-wallet` will connect to it.\r\n\r\nThe idea is that `bitcoin-wallet` can be extended in the future to have some online functionality. For example, there could be a `bitcoin-wallet sync` command that will update balances and sync latest transactions to an unloaded wallet, or a `bitcoin-wallet serve` subcommand that loads a wallet and serves RPC requests, or a `bitcoin-wallet shell` subcommand that allows running RPC methods interactively like the GUI console, or just general support for `bitcoin-wallet <rpc method> <rpc params>` invocations suggested https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455187379.\r\n\r\nThis PR is small and doesn't do much. The only visible change is that `bitcoin-wallet` now checks whether a node socket exists on startup and prints \"Connected to IPC address\" if it can connect it it.\r\n\r\nThe default `bitcoin-wallet` connect option is `-ipcconnect=auto`, which connects if possible as described above, and proceeds offline if not possible. Other supported options are `-noipcconnect` to disable ipc, `-ipcconnect` to require a connection and fail if it can't be established, and `-ipcconnect=unix:<socket>` to require a connection and use a custom socket path.\r\n\r\nThese changes require multiprocess support and this PR has no effect unless bitcoin is configured with `--enable-multiprocess` as described in [doc/multiprocess.md](https://github.com/bitcoin/bitcoin/blob/master/doc/multiprocess.md)\r\n\r\n---\r\n\r\nThis PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/issues/28722).\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19460",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19460",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19460.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19460.patch"
          },
          "created_at": "2020-07-07T18:53:19Z",
          "updated_at": "2024-01-22T00:52:31Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7936723616,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAHZEMqg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7936723616",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-02T00:48:47Z"
    },
    {
      "event": "reviewed",
      "id": 1203279038,
      "node_id": "PRR_kwDOABII585HuJS-",
      "url": null,
      "actor": null,
      "commit_id": "99c43be0a051586fc01cae0af74ea9e2d5f649b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": ".",
      "user": {
        "login": "Marek777777",
        "id": 117536597,
        "node_id": "U_kgDOBwF3VQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/117536597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Marek777777",
        "html_url": "https://github.com/Marek777777",
        "followers_url": "https://api.github.com/users/Marek777777/followers",
        "following_url": "https://api.github.com/users/Marek777777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Marek777777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Marek777777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Marek777777/subscriptions",
        "organizations_url": "https://api.github.com/users/Marek777777/orgs",
        "repos_url": "https://api.github.com/users/Marek777777/repos",
        "events_url": "https://api.github.com/users/Marek777777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Marek777777/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1203279038",
      "submitted_at": "2022-12-03T02:11:29Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-18T21:46:49Z",
      "updated_at": "2023-01-18T21:46:49Z",
      "source": {
        "issue": {
          "id": 1532409473,
          "node_id": "PR_kwDOABII585HVfFs",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26889",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26889/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26889/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26889/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26889",
          "number": 26889,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: wallet, remove global 'ArgsManager' dependency",
          "body": "Structurally, the wallet class shouldn't access the global `ArgsManager` class, its internal behavior shouldn't be coupled to a global command line args parsing object.\r\n\r\nSo this PR migrates the only two places where we depend on it: (1) the keypool size, and (2) the \"-walletnotify\" script. And cleans up the, now unneeded, wallet `ArgsManager` ref member.\r\n\r\nExtra note:\r\nIn the process of removing the args ref member, discovered and fixed files that were invalidly depending on the wallet header including `util/system.h`.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26889",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26889",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26889.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26889.patch"
          },
          "closed_at": "2023-02-17T17:48:08Z",
          "created_at": "2023-01-13T14:45:27Z",
          "updated_at": "2023-05-01T19:10:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8550177843,
      "node_id": "LE_lADOABII585Xi1euzwAAAAH9oVwz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550177843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T19:14:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8550968208,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAH9rWuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8550968208",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T20:57:47Z"
    },
    {
      "event": "unlabeled",
      "id": 8551149700,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAH9sDCE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8551149700",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T21:24:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1320156842,
      "node_id": "PRR_kwDOABII585Or_6q",
      "url": null,
      "actor": null,
      "commit_id": "89f5edaf85a0e597b7f63accce526a0dfca6990f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some review nibbles.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1320156842",
      "submitted_at": "2023-03-01T16:42:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8758584134,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIKDWNG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8758584134",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-15T18:09:31Z"
    },
    {
      "event": "commented",
      "id": 1479296136,
      "node_id": "IC_kwDOABII585YLESI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479296136",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T10:29:17Z",
      "updated_at": "2023-03-22T10:29:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Have you looked into a fuzz target for this parser?",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1479296136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1480027322,
      "node_id": "IC_kwDOABII585YN2y6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480027322",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T18:02:01Z",
      "updated_at": "2023-03-22T18:02:01Z",
      "author_association": "MEMBER",
      "body": "> Have you looked into a fuzz target for this parser?\r\n\r\nI haven't. If someone would like to write one, I'd be happy to add it.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1480027322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9139121889,
      "node_id": "LE_lADOABII585Xi1euzwAAAAIgu-7h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9139121889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-01T19:47:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9148245130,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIhRySK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148245130",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T17:42:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9148332893,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAIhSHtd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148332893",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T17:53:13Z"
    },
    {
      "event": "unlabeled",
      "id": 9149329341,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAIhV6-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9149329341",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T19:53:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-03T15:58:58Z",
      "updated_at": "2023-05-03T15:58:58Z",
      "source": {
        "issue": {
          "id": 722711719,
          "node_id": "MDU6SXNzdWU3MjI3MTE3MTk=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20160/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/20160",
          "number": 20160,
          "state": "open",
          "state_reason": null,
          "title": "Proposed Timeline for Legacy Wallet and BDB removal",
          "body": "Here is a proposed timeline for the move from legacy wallets to descriptor wallets, and at the same time, bdb to sqlite, culminating with the removal of both legacy wallets and bdb. Even though the wallet type and the wallet storage format are orthogonal to each other, as noted in #19077, I would like to tie them together for the sake of simplicity when it comes to how we make new wallets and the migration of one type to another.\r\n\r\nThe 4 combinations of type and format are: legacy-bdb, legacy-sqlite, descriptor-bdb, and descriptor-sqlite. While all 4 types will be supported, we will primarily deal with legacy-bdb and descriptor-sqlite. Setting `descriptors=True` in `createwallet` (or checking the Descriptors option in the GUI) will always make a descriptor-sqlite. Setting that to `False` will always make a legacy-bdb.\r\n\r\n- [x] 0.21 (late 2020)\r\n  - [x] Initial release of descriptor type and sqlite format. (#16528, #19077)\r\n  - [x] Descriptor type is experimental with a warning as such (#16528)\r\n  - [x] Only legacy-bdb and descriptor-sqlite will be created (#19077)\r\n- [x] 22.0 (mid 2021)\r\n  - [x] Implement descriptor exports (#20226)\r\n  - [x] Legacy type remains default (no pr needed)\r\n  - [x] Introduce `dump` and `createfromdump` wallet tool commands with an additional `-format` option to specify the wallet type (#19137)\r\n    * Users may use `dump` and then `createfromdump` in order to make legacy-sqlite from legacy-bdb\r\n    * Users may use `dump` and then `createfromdump` in order to make descriptor-bdb from descriptor-sqlite\r\n  - [x] If a wallet specified in conf or command line doesn't exist, don't make a wallet and instead warn (#15454)\r\n- [x] 23.0 (early 2022)\r\n  - [x] Change descriptor type to non-experimental (#23002)\r\n  - [x] Change `createwallet` `descriptors` default to `True` (#23002)\r\n  - [x] Change wallet tool `create` `-descriptors` default to `True` (#23002)\r\n- [x] 24.0 (late 2022)\r\n  - [x] Introduce `migratewallet` command to migrate a legacy-bdb to descriptor-sqlite (#19602)\r\n  - [x] For newly created legacy-bdb wallets, warn that they are deprecated and will soon be unsupported (#24505)\r\n- [x] 26.0 (late 2023)\r\n  - [x] When loading legacy-bdb, descriptor-bdb, or legacy-sqlite wallets, warn that the legacy type and bdb format will soon be unsupported, as applicable. (#27869)\r\n  - [x] Deprecate creating new legacy-bdb wallets #28597 \r\n  - [x] `migratewallet` bug fixes\r\n    - [x] #28609\r\n    - [x] #28546\r\n- [ ] 27.0 (early 2024)\r\n  - [ ] Improve performance of migratewallet #28574\r\n    - [x] address book performance improvement #26836\r\n    - [x] bulk deletion of txs performance improvement #28987\r\n    - [ ] bulk deletion of records performance improvement #29403\r\n  - [ ] Caching to improve performance of migrated non-HD descriptor wallets (also perf improvement in general) #26008\r\n  - [ ] Remove `migratewallet` experimental warning #28037 \r\n- [ ] 28.0 (late 2024)\r\n  - [ ] Reimplement legacy-bdb to descriptor-sqlite migration (maybe as a separate command or in the wallet tool) to be independent of `LegacyScriptPubKeyMan` and BDB (#26596)\r\n  - [ ] For `dump`, implement an independent BDB file loader (this should probably be shared with the previous) (#26606)\r\n  - [ ] Stop creating new legacy-bdb wallets (not yet started)\r\n  - [ ] GUI: Migrate wallets that are not loaded (not yet started)\r\n- [ ] 29.0 (early 2025)\r\n  - [ ] Stop loading legacy-bdb, descriptor-bdb, legacy-sqlite wallet entirely. Inform users how to migrate (not yet started)\r\n  - [ ] Remove `LegacyScriptPubKeyMan` except for the independent migration stuff (#28710)\r\n  - [ ] Remove BDB except for independent loading for migration stuff (#28710)\r\n\r\nAdditional improvements that have no target deadline:\r\n\r\n- [x] Backwards compatibility tests fixes for descriptor wallets #28027\r\n\r\nThe migration code will probably be around for a long time/forever.\r\n\r\nNote that we expect users who go through the effort to make a legacy-sqlite or descriptor-bdb wallet to suck it up and deal with the consequences of doing something that isn't really supported. Such users should be able to figure out for themselves how to migrate their wallets. (Maybe `migratewallet` can migrate legacy-sqlite to descriptor-sqlite. bdb to sqlite is way easier than legacy to descriptor).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 36,
          "created_at": "2020-10-15T22:17:41Z",
          "updated_at": "2024-02-12T22:53:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1577039004,
      "node_id": "IC_kwDOABII585d_7Sc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577039004",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-05T15:40:32Z",
      "updated_at": "2023-06-05T15:40:32Z",
      "author_association": "MEMBER",
      "body": "Adding a fuzz target that compares this to the real thing seems useful. Given that this PR changes `dumpwallet` to rely on the new parser, I think we should do that sooner rather than later. Otherwise I suggest changing e88ad38ac2f3e43de54a332965b13eb7cc27b91f so that the read-only parser is optional, and then change the tests to always use it.\r\n\r\nIt seems a bit daunting to compare the low level DBD parsing code in this PR to the real thing. Having a fuzzer also reduces the need to be very thorough in that. I'm not sure how much confidence I have in the existing test coverage for dumpwallet.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1577039004",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9455539693,
      "node_id": "LE_lADOABII585Xi1euzwAAAAIzmBXt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9455539693",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-07T08:12:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9470032193,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAI0dTlB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9470032193",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:35:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9470102935,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAI0dk2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9470102935",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T09:42:18Z"
    },
    {
      "event": "unlabeled",
      "id": 9472828338,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAI0n-Oy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9472828338",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-08T13:50:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1585733097,
      "node_id": "IC_kwDOABII585ehF3p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1585733097",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-10T16:52:31Z",
      "updated_at": "2023-06-10T16:52:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1585733097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "unsubscribed",
      "id": 9491485410,
      "node_id": "UE_lADOABII585Xi1euzwAAAAI1vJLi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9491485410",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-10T19:12:44Z"
    },
    {
      "event": "reviewed",
      "id": 1478773216,
      "node_id": "PRR_kwDOABII585YJEng",
      "url": null,
      "actor": null,
      "commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nI'm testing this against my hand-rolled databases, so far this looks solid.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1478773216",
      "submitted_at": "2023-06-14T21:21:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "commented",
      "id": 1600625695,
      "node_id": "IC_kwDOABII585fZ5wf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600625695",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T10:58:16Z",
      "updated_at": "2023-06-21T10:58:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600625695",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1600634431,
      "node_id": "IC_kwDOABII585fZ74_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600634431",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T11:04:59Z",
      "updated_at": "2023-06-21T11:04:59Z",
      "author_association": "MEMBER",
      "body": "> wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed\r\n\r\nSound like a real bug, because `assert` should generally not be used to validate user input or files read from disk?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1600634431",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1601156957,
      "node_id": "IC_kwDOABII585fb7dd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601156957",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T16:27:38Z",
      "updated_at": "2023-06-21T16:27:38Z",
      "author_association": "MEMBER",
      "body": "> Wrote [my first fuzz test](https://github.com/TheCharlatan/bitcoin/commit/995ccef131e71ae94f5c73ee3b0297282f5646ed) (I really don't know what I am doing so not even sure this is useful), and managed to hit: `fuzz: wallet/migrate.cpp:384: void wallet::RecordsPage::Unserialize(Stream &) [Stream = CAutoFile]: Assertion false failed`.\r\n\r\nDo you have the input that hit that?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1601377160,
      "node_id": "IC_kwDOABII585fcxOI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1601377160",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T18:33:09Z",
      "updated_at": "2023-06-21T18:33:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601156957\r\n\r\n> Do you have the input that hit that?\r\n\r\nYes, pasting as base64 here, since I'm not sure about the practice of attaching random binary files:\r\n\r\n```\r\necho \"HQABAAAAAQAAAACPAAUxYgAAAAmK/////wkAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////gAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Xz8/Pz8/Pz8/Pz8/Pz8/Pz88Az8/Pz8/PADqKIIr/////////EwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAArKysAAAAAAAAAAAAAAAAAAADPz8/Pz8/PxXt7e3t7e3t7AABPAAUxz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/S0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eNLS0tLS0tLSKtLS0tLS0tLS0tLS0tLS0tDS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0s/Pz8/Pz8/Pz8/Pz8/PAAB7e3t7e3t7e3sBAAABAAACK08ABQAgXFxcXFxcAQAAAACPAAUxYgAAAAmK/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKysrAAAAAAAAAAAAAAAAAAAAz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/PzwAAAP/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pzw==\" | base64 -d > crash-assert\r\n```",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1601377160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9670693740,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJAaxNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670693740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:27:24Z"
    },
    {
      "event": "commented",
      "id": 1612198266,
      "node_id": "IC_kwDOABII585gGDF6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612198266",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:42Z",
      "updated_at": "2023-06-28T22:28:42Z",
      "author_association": "MEMBER",
      "body": "Found an issue with prefix cursor handling, updated the tests to check for that. Also pulled in @TheCharlatan's fuzz test and changed several asserts to instead throw exceptions which resolves the fuzz crash.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612198266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "mentioned",
      "id": 9670700954,
      "node_id": "MEE_lADOABII585Xi1euzwAAAAJAay-a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670700954",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:42Z"
    },
    {
      "event": "subscribed",
      "id": 9670700966,
      "node_id": "SE_lADOABII585Xi1euzwAAAAJAay-m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9670700966",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-28T22:28:43Z"
    },
    {
      "event": "labeled",
      "id": 9672217925,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJAglVF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9672217925",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T03:40:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1612512773,
      "node_id": "IC_kwDOABII585gHP4F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612512773",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T06:49:37Z",
      "updated_at": "2023-06-29T06:49:37Z",
      "author_association": "MEMBER",
      "body": "Looks like the fuzz target doesn't compile on windows?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1612512773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9677639145,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJA1Q3p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9677639145",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T14:21:48Z"
    },
    {
      "event": "unlabeled",
      "id": 9678840790,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJA52PW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9678840790",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T15:48:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1506063580,
      "node_id": "PRR_kwDOABII585ZxLTc",
      "url": null,
      "actor": null,
      "commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506063580",
      "submitted_at": "2023-06-29T20:22:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9681601557,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBEYQV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9681601557",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-29T21:02:10Z"
    },
    {
      "event": "reviewed",
      "id": 1506562478,
      "node_id": "PRR_kwDOABII585ZzFGu",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "(nit)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506562478",
      "submitted_at": "2023-06-30T06:02:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1506898105,
      "node_id": "PRR_kwDOABII585Z0XC5",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1506898105",
      "submitted_at": "2023-06-30T09:58:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1507168279,
      "node_id": "PRR_kwDOABII585Z1ZAX",
      "url": null,
      "actor": null,
      "commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1507168279",
      "submitted_at": "2023-06-30T13:19:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9689273500,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBhpSc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9689273500",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T15:43:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9691244776,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJBpKjo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691244776",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T19:32:56Z"
    },
    {
      "event": "labeled",
      "id": 9691245373,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJBpKs9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9691245373",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T19:33:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T22:36:08Z",
      "updated_at": "2023-07-12T22:36:08Z",
      "source": {
        "issue": {
          "id": 1796477777,
          "node_id": "PR_kwDOABII585VEjNn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28060",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28060/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28060/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28060/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28060",
          "number": 28060,
          "state": "closed",
          "state_reason": null,
          "title": "util: Teach AutoFile how to XOR",
          "body": "This allows `AutoFile` to roll an XOR pattern while reading or writing to the underlying file.\r\n\r\nThis is needed for https://github.com/bitcoin/bitcoin/pull/28052, but can also be used in any other place.\r\n\r\nAlso, there are tests, so I've split this up from the larger pull to make review easier, hopefully.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28060",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28060",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28060.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28060.patch"
          },
          "closed_at": "2023-08-01T15:38:17Z",
          "created_at": "2023-07-10T10:39:12Z",
          "updated_at": "2023-08-01T16:53:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-12T22:48:16Z",
      "updated_at": "2023-07-12T22:48:16Z",
      "source": {
        "issue": {
          "id": 1794835202,
          "node_id": "PR_kwDOABII585U_Njk",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28052",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28052/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28052/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28052/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28052",
          "number": 28052,
          "state": "open",
          "state_reason": null,
          "title": "blockstorage: XOR blocksdir *.dat files",
          "body": "Currently the *.dat files in the blocksdir store the data received from remote peers as-is. This may be problematic when a program other than Bitcoin Core tries to interpret them by accident. For example, an anti-virus program or other program may scan them and move them into quarantine, or delete them, or corrupt them. This may cause Bitcoin Core to fail a reorg, or fail to reply to block requests (via P2P, RPC, REST, ...).\r\n\r\nFix this, similar to https://github.com/bitcoin/bitcoin/pull/6650, by rolling a random XOR pattern over the dat files when writing or reading them.\r\n\r\nObviously this can only protect against programs that accidentally and unintentionally are trying to mess with the dat files. Any program that intentionally wants to mess with the dat files can still trivially do so.\r\n\r\nThe XOR pattern is only applied when the blocksdir is freshly created, and there is an option to disable it (on creation), so that people can disable it, if needed.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 219890555,
              "node_id": "MDU6TGFiZWwyMTk4OTA1NTU=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage",
              "name": "Block storage",
              "color": "000000",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28052",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28052",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28052.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28052.patch"
          },
          "created_at": "2023-07-08T08:07:53Z",
          "updated_at": "2023-12-14T21:50:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9886313431,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJNRSvX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886313431",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T15:02:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9886530740,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJNSHy0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9886530740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T15:24:21Z"
    },
    {
      "event": "unlabeled",
      "id": 9888406255,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJNZRrv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9888406255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-21T19:39:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T21:30:52Z",
      "updated_at": "2023-07-24T21:30:52Z",
      "source": {
        "issue": {
          "id": 1819164915,
          "node_id": "PR_kwDOEEET9c5WRXMV",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/747",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/747/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/747/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/747/events",
          "html_url": "https://github.com/bitcoin-core/gui/pull/747",
          "number": 747,
          "state": "closed",
          "state_reason": null,
          "title": "Open fully encrypted wallets",
          "body": "Allows users to open wallets with encrypted databases (https://github.com/bitcoin/bitcoin/pull/28142) from the GUI.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 2145506980,
              "node_id": "MDU6TGFiZWwyMTQ1NTA2OTgw",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 2927906211,
              "node_id": "MDU6TGFiZWwyOTI3OTA2MjEx",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Wallet",
              "name": "Wallet",
              "description": "",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5353934559,
              "node_id": "LA_kwDOEEET9c8AAAABPx6O3w",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/CI%20failed",
              "name": "CI failed",
              "color": "ededed",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/747",
            "html_url": "https://github.com/bitcoin-core/gui/pull/747",
            "diff_url": "https://github.com/bitcoin-core/gui/pull/747.diff",
            "patch_url": "https://github.com/bitcoin-core/gui/pull/747.patch"
          },
          "closed_at": "2024-01-08T15:51:41Z",
          "created_at": "2023-07-24T21:21:21Z",
          "updated_at": "2024-01-08T15:51:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-24T22:28:44Z",
      "updated_at": "2023-07-24T22:28:44Z",
      "source": {
        "issue": {
          "id": 1819155354,
          "node_id": "PR_kwDOABII585WRVWj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28142",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28142/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28142/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28142/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28142",
          "number": 28142,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Allow users to create a wallet that encrypts all database records",
          "body": "A couple of users have requested that we support wallets that encrypt everything, even if the wallet is watch-only, in order to have better privacy if the wallet is stolen. This PR introduces an `EncryptedDatabase` backend for the wallet which encrypts/decrypts each key-value record individually before reading from or writing to the database.\r\n\r\n`EncryptedDatabase` is only supported for SQLite databases and descriptor wallets. This was done in order to have an easier way to get downgrade protection that also does not involve writing an existing record in plaintext (e.g. `minversion` or `flags`). SQLite has a fixed field \"application id\" that we already use for cross-network protection. This is reused to detect if a sqlite database is an encrypted wallet, and thus it prevents older software from attempting to open such wallets.\r\n\r\nIn order to read records from the database, `EncryptedDatabase` will cache the decrypted key in memory so that it can lookup the encrypted key in the database. Values will always be decrypted when read.\r\n\r\nThe encryption scheme is the same one that we use for encrypting private keys. It's not that great, but I didn't feel like re-implementing it, and it seems good enough. The encryption key itself is encrypted with the passphrase and stored in a new record.\r\n\r\nWallets with encrypted databases cannot be loaded on start. They can only be loaded by explicit user action through `loadwallet` which now has a `db_passphrase` parameter to allow the decryption of these wallets. `createwallet` also has a `db_passphrase` to create these wallets. For now, there is no way to encrypt the database after it has been created, nor is there a way to change the passphrase.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28142",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28142",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28142.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28142.patch"
          },
          "closed_at": "2024-01-06T00:03:50Z",
          "created_at": "2023-07-24T21:15:15Z",
          "updated_at": "2024-01-06T02:17:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1546251193,
      "node_id": "PRR_kwDOABII585cKeu5",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 6e28ff97a99519ec8b50123bc1177084bba68f96 (besides the two small comments)\r\n\r\nI'm sure I could spend many hours more verifying the parser, but at this point I'd like to encourage other reviewers to take a look. I think if this is merged soon and given the opportunity to be fuzzed against a large corpus of both random seeds, bdb databases, and valid wallets we could also gain some confidence in the code.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1546251193",
      "submitted_at": "2023-07-25T19:58:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-26T00:00:45Z",
      "updated_at": "2023-07-26T00:00:45Z",
      "source": {
        "issue": {
          "id": 1821055554,
          "node_id": "PR_kwDOABII585WXzPh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28153",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28153/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28153/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28153/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28153",
          "number": 28153,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: add target for `ScriptPubKeyMan` (legacy)",
          "body": "This PR adds target for `{Legacy}ScriptPubKeyMan`. I'm working on a descriptor one and will do it in a separate file. I tried to focus here on functions that we use directly and we may have in some unit tests.",
          "user": {
            "login": "brunoerg",
            "id": 19480819,
            "node_id": "MDQ6VXNlcjE5NDgwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brunoerg",
            "html_url": "https://github.com/brunoerg",
            "followers_url": "https://api.github.com/users/brunoerg/followers",
            "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
            "organizations_url": "https://api.github.com/users/brunoerg/orgs",
            "repos_url": "https://api.github.com/users/brunoerg/repos",
            "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/brunoerg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28153",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28153",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28153.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28153.patch"
          },
          "closed_at": "2023-09-20T17:19:01Z",
          "created_at": "2023-07-25T20:03:44Z",
          "updated_at": "2023-09-21T08:57:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1658468351,
      "node_id": "IC_kwDOABII585i2jf_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1658468351",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-31T14:20:44Z",
      "updated_at": "2023-07-31T15:19:21Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI still suggest changing fc810c1df899e5b42fe7658ebdddc6b4320240a6 so that `dumpwallet` does not use the read-only format by default, and instead change the tests use it. ~However with the new fuzz target commit I'm less worried about it.~\r\n\r\nThe new fuzz target helps, but currently doesn't compare between BDB and the RO implementation. I'm also not sure how to see if we're covering all code paths. Should we manually produce some wallets to bootstrap a good corpus or is the fuzzer smart enough to find it?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1658468351",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "reviewed",
      "id": 1555022636,
      "node_id": "PRR_kwDOABII585cr8Ms",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1555022636",
      "submitted_at": "2023-07-31T15:07:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1555052889,
      "node_id": "PRR_kwDOABII585csDlZ",
      "url": null,
      "actor": null,
      "commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1555052889",
      "submitted_at": "2023-07-31T15:14:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T10:30:13Z",
      "updated_at": "2023-08-01T10:30:13Z",
      "source": {
        "issue": {
          "id": 1830961918,
          "node_id": "PR_kwDOCgmu_85W5KZB",
          "url": "https://api.github.com/repos/bitcoin-core/qa-assets/issues/140",
          "repository_url": "https://api.github.com/repos/bitcoin-core/qa-assets",
          "labels_url": "https://api.github.com/repos/bitcoin-core/qa-assets/issues/140/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/qa-assets/issues/140/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/qa-assets/issues/140/events",
          "html_url": "https://github.com/bitcoin-core/qa-assets/pull/140",
          "number": 140,
          "state": "open",
          "state_reason": null,
          "title": "Add initial wallet_bdb_parser corpus",
          "body": "Generated on Ubuntu 23.04 using Clang 15.0.7 and libFuzzer\r\n`--with-sanitizers=fuzzer`\r\n\r\nGenerated by running the wallet_bdb_parser target in https://github.com/bitcoin/bitcoin/pull/26606 for about a day on AMD Ryzen 9 7950X.\r\n\r\nI used `test/fuzz/test_runner.py --m_dir` which reduced the inputs from 1210 (200KB) to 116 (2 KB).\r\n\r\nI wonder if it makes sense to manually generate some inputs based on real (testnet) wallets.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/qa-assets/pulls/140",
            "html_url": "https://github.com/bitcoin-core/qa-assets/pull/140",
            "diff_url": "https://github.com/bitcoin-core/qa-assets/pull/140.diff",
            "patch_url": "https://github.com/bitcoin-core/qa-assets/pull/140.patch"
          },
          "created_at": "2023-08-01T10:30:13Z",
          "updated_at": "2023-08-03T08:55:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9979202613,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJSzow1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9979202613",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T17:11:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9980401496,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJS4NdY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9980401496",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T19:30:43Z"
    },
    {
      "event": "commented",
      "id": 1660955989,
      "node_id": "IC_kwDOABII585jAC1V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660955989",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T19:32:09Z",
      "updated_at": "2023-08-01T19:32:09Z",
      "author_association": "MEMBER",
      "body": "> I still suggest changing fc810c1 so that dumpwallet does not use the read-only format by default, and instead change the tests use it.\r\n\r\nSince dumping should be a read-only operation, I think it's better to use the read-only database since it definitely won't write to it like BDB does. Also it provides a good mechanism for testing.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1660955989",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9981257632,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJS7eeg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9981257632",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T21:19:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9981262888,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJS7fwo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9981262888",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-01T21:19:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1558219665,
      "node_id": "PRR_kwDOABII585c4IuR",
      "url": null,
      "actor": null,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks like CI is red?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1558219665",
      "submitted_at": "2023-08-02T05:26:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "reviewed",
      "id": 1558223099,
      "node_id": "PRR_kwDOABII585c4Jj7",
      "url": null,
      "actor": null,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1558223099",
      "submitted_at": "2023-08-02T05:30:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "commented",
      "id": 1662535127,
      "node_id": "IC_kwDOABII585jGEXX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662535127",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T16:25:06Z",
      "updated_at": "2023-08-02T16:25:06Z",
      "author_association": "MEMBER",
      "body": "> Since dumping should be a read-only operation, I think it's better to use the read-only database since it definitely won't write to it like BDB does.\r\n\r\nBut it could produce a corrupt dump, which someone might rely on for their backup (even if they shouldn't).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662535127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "reviewed",
      "id": 1559482876,
      "node_id": "PRR_kwDOABII585c89H8",
      "url": null,
      "actor": null,
      "commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1559482876",
      "submitted_at": "2023-08-02T17:05:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9990671911,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJTfY4n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9990671911",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T17:29:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9990677475,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJTfaPj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9990677475",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T17:29:52Z"
    },
    {
      "event": "commented",
      "id": 1662720996,
      "node_id": "IC_kwDOABII585jGxvk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662720996",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T18:14:33Z",
      "updated_at": "2023-08-02T18:15:10Z",
      "author_association": "MEMBER",
      "body": "I tried adding `if (bdb_ro_err) return;` above `#ifdef USE_BDB` (although that does reduce coverage of potentially valid wallets). I also added in the second catch:\r\n\r\n```cpp\r\n// We are not interested in fuzzing the original BDB implementation\r\nif (std::string(e.what()) == \"BerkeleyDatabase: Error 22, can't open database fuzzed_wallet.dat\") return;\r\n```\r\n\r\nThat helps a bit, but still leads to a \"SEGV on unknown address 0x000000000000\" in `DumpWallet` very quickly. I haven't looked at what the fuzzer came up with. Perhaps it can be dealt with by making the RO parser more strict?\r\n\r\nOr can we tell the fuzzer to ignore crashes in the original BDB entirely? We only care about comparing dumps for wallets that the original implementation can load.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662720996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "unlabeled",
      "id": 9992057578,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJTkrLq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9992057578",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T20:19:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9992075014,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJTkvcG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9992075014",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T20:20:40Z"
    },
    {
      "event": "commented",
      "id": 1662918852,
      "node_id": "IC_kwDOABII585jHiDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1662918852",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T20:22:18Z",
      "updated_at": "2023-08-02T20:22:18Z",
      "author_association": "MEMBER",
      "body": "I've fixed at least one fuzzer crash. BDB verifies a couple of other things that RO was not.\r\n\r\nI also changed the fuzzer to make sure that BDB fails to open the database if RO failed to open it, and vice versa.\r\n\r\nThere's still another crash that I have, but it's something where RO is being stricter than BDB.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1662918852",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 9992811235,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJTnjLj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9992811235",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T22:16:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9993173061,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJTo7hF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9993173061",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T23:41:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9993256086,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJTpPyW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9993256086",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T00:03:25Z"
    },
    {
      "event": "unlabeled",
      "id": 9994278823,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJTtJen",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9994278823",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T04:24:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1663560293,
      "node_id": "IC_kwDOABII585jJ-pl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1663560293",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T08:50:37Z",
      "updated_at": "2023-08-03T08:50:37Z",
      "author_association": "MEMBER",
      "body": "> There's still another crash that I have\r\n\r\nNot sure if that was fixed in your later push, but in any case, I pushed another crash to the qa-assets PR.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1663560293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "reviewed",
      "id": 1560573265,
      "node_id": "PRR_kwDOABII585dBHVR",
      "url": null,
      "actor": null,
      "commit_id": "a7508fedcb529324bb1009455151800138e09022",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "(nits only)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1560573265",
      "submitted_at": "2023-08-03T08:56:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10000977298,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJUGs2S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10000977298",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T16:24:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10000983551,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJUGuX_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10000983551",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T16:25:20Z"
    },
    {
      "event": "commented",
      "id": 1664282446,
      "node_id": "IC_kwDOABII585jMu9O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664282446",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T16:26:07Z",
      "updated_at": "2023-08-03T16:26:32Z",
      "author_association": "MEMBER",
      "body": "> But it could produce a corrupt dump, which someone might rely on for their backup (even if they shouldn't).\r\n\r\nI've changed it to be optional and enabled with the argument `-withinternalbdb`.\r\n\r\n> Not sure if that was fixed in your later push, but in any case,\r\n\r\nYes, I fixed that\r\n\r\n> I pushed another crash to the qa-assets PR.\r\n\r\nThis seems to be crash in BDB itself rather than in our parser. Not entirely sure how to handle that since we don't care about fuzzing BDB itself.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1664282446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1664347932,
      "node_id": "IC_kwDOABII585jM-8c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1664347932",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T17:15:21Z",
      "updated_at": "2023-08-03T17:15:21Z",
      "author_association": "MEMBER",
      "body": "> Not entirely sure how to handle that since we don't care about fuzzing BDB itself.\r\n\r\nIndeed, @MarcoFalke any idea on how to make the fuzzer ignore that?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1664347932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "mentioned",
      "id": 10001410697,
      "node_id": "MEE_lADOABII585Xi1euzwAAAAJUIWqJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10001410697",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T17:15:22Z"
    },
    {
      "event": "subscribed",
      "id": 10001410718,
      "node_id": "SE_lADOABII585Xi1euzwAAAAJUIWqe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10001410718",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-03T17:15:22Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T08:43:25Z",
      "updated_at": "2023-08-08T08:43:25Z",
      "source": {
        "issue": {
          "id": 1840228464,
          "node_id": "PR_kwDOABII585XYF9P",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28236",
          "number": 28236,
          "state": "open",
          "state_reason": null,
          "title": "fuzz: wallet, add target for Spend",
          "body": "This PR adds fuzz coverage for `wallet/spend`.\r\n\r\nMotivation: Issue [27272](https://github.com/bitcoin/bitcoin/issues/27272#issue-1628327906)\r\n\r\nThis PR adds Fuzz coverage to the whole concept of Creating a New Transaction as well as other sections of the Spend file.  Because `CreateTransaction` is one of the most frequently used functions in the wallet codebase, merging this PR will significantly improve the wallet codebase's Fuzz testing!\r\n\r\nI also used the `Singleton Class` concept for creating Wallet instances because it assures that only one instance of it is created during all Fuzz runs, which significantly boosts the file's `exec/sec`.\r\n",
          "user": {
            "login": "Ayush170-Future",
            "id": 76209654,
            "node_id": "MDQ6VXNlcjc2MjA5NjU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Ayush170-Future",
            "html_url": "https://github.com/Ayush170-Future",
            "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
            "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
            "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
            "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
            "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28236",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28236.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28236.patch"
          },
          "created_at": "2023-08-07T21:25:27Z",
          "updated_at": "2024-02-10T14:26:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1669359482,
      "node_id": "IC_kwDOABII585jgGd6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1669359482",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T10:33:25Z",
      "updated_at": "2023-08-08T10:33:25Z",
      "author_association": "MEMBER",
      "body": "Can you give more context? What are the steps to reproduce? My understanding is that the fuzz CI tasks don't install and use bdb. And you can put a comment in the fuzz test to document that running this with bdb can be done at the users own risk. Outside of that, my recommendations would be to use bdb-5.3, which fixed a few bugs (or maybe it is possible to use an even later version, just for fuzzing?).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1669359482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "labeled",
      "id": 10391004592,
      "node_id": "LE_lADOABII585Xi1euzwAAAAJrWiWw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10391004592",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-17T08:35:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10489383912,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJxN0vo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10489383912",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T15:46:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10489439584,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAJxOCVg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10489439584",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-27T15:51:23Z"
    },
    {
      "event": "unlabeled",
      "id": 10497135130,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAJxrZIa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10497135130",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-28T09:57:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T02:47:03Z",
      "updated_at": "2023-10-24T02:47:03Z",
      "source": {
        "issue": {
          "id": 1958204865,
          "node_id": "PR_kwDOABII585dlfBo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
          "number": 28710,
          "state": "open",
          "state_reason": null,
          "title": "Remove the legacy wallet and BDB dependency",
          "body": "The final step of #20160.\r\n\r\nA bare minimum of legacy wallet code is kept in order to perform wallet migration. Migration of legacy wallets uses the independent BDB parser and a minimal `LegacyDataSPKM` that allows the legacy data to be loaded so that the migration can be completed.\r\n\r\nAll tests which tested legacy wallet behavior have been removed. The `--descriptors` and `--legacy-wallet` options are removed from the functional tests.\r\n\r\nBDB has been removed as a dependency and documentation have been updated to reflect that.\r\n\r\nDepends on #26596",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28710.patch"
          },
          "created_at": "2023-10-23T23:36:07Z",
          "updated_at": "2024-02-20T17:29:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10756272210,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAKBH7BS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10756272210",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T16:07:19Z"
    },
    {
      "event": "labeled",
      "id": 10758833142,
      "node_id": "LE_lADOABII585Xi1euzwAAAAKBRsP2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10758833142",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T20:09:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 10773102601,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAKCIIAJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10773102601",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T22:54:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1713893741,
      "node_id": "PRR_kwDOABII585mJ_Ft",
      "url": null,
      "actor": null,
      "commit_id": "43d7ec1bb78c1dcfde9ca982e07fb0e51c088dce",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nAs a follow-up, it might be nice if we could somehow add coverage for the \"other endianness\" code path in the tests. Did that manually with the following patch (creates the BDB database in big-endian format, while I'm running a little-endian system):\r\n```diff\r\ndiff --git a/src/wallet/bdb.cpp b/src/wallet/bdb.cpp\r\nindex 9ea43ca67c..945e12ebdb 100644\r\n--- a/src/wallet/bdb.cpp\r\n+++ b/src/wallet/bdb.cpp\r\n@@ -389,6 +389,7 @@ void BerkeleyDatabase::Open()\r\n                 }\r\n             }\r\n \r\n+            pdb_temp->set_lorder(4321);\r\n             ret = pdb_temp->open(nullptr,                             // Txn pointer\r\n                             fMockDb ? nullptr : strFile.c_str(),      // Filename\r\n                             fMockDb ? strFile.c_str() : \"main\",       // Logical db name\r\n```\r\nTests still passed, only had to adapt the BDB magic number check in wallet_migration.py which currently assumes LE byte order.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1713893741",
      "submitted_at": "2023-11-05T01:15:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "commented",
      "id": 1794248918,
      "node_id": "IC_kwDOABII585q8hDW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1794248918",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-06T07:50:26Z",
      "updated_at": "2023-11-06T07:50:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1669359482\r\n\r\n> What are the steps to reproduce?\r\n\r\nRun the fuzzer on the fuzz test introduced in this PR seeded with Sjors' inputs from his [qa repo PR](https://github.com/bitcoin-core/qa-assets/pull/140) and compiled with bdb enabled.\r\n\r\n> Outside of that, my recommendations would be to use bdb-5.3\r\n\r\nThe bugs persist even with bdb 5.3.\r\n\r\n",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1794248918",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "commented",
      "id": 1794381260,
      "node_id": "IC_kwDOABII585q9BXM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1794381260",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-06T09:16:15Z",
      "updated_at": "2023-11-06T09:16:15Z",
      "author_association": "MEMBER",
      "body": "Ok, but then I think this is a problem for the qa-assets repo to solve. As I said, BDB is not enabled in the fuzz CI, so this shouldn't cause CI issues.\r\n\r\nOne way for qa-assets to solve this would be to exclude inputs that crash bdb.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#issuecomment-1794381260",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26606"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10948203494,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAKMkFPm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10948203494",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-13T23:41:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11085822937,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAKUxDvZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11085822937",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-28T16:15:07Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T13:08:39Z",
      "updated_at": "2023-12-13T13:08:39Z",
      "source": {
        "issue": {
          "id": 2039458902,
          "node_id": "PR_kwDOABII585h4izR",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29071",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29071/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29071/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29071/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29071",
          "number": 29071,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Remove Span operator==, Use std::ranges::equal",
          "body": "`std::span` removed the comparison operators, so it makes sense to remove them for the `Span` \"backport\" as well. Using `std::ranges::equal` also has the benefit that some `Span` temporary constructions can now be dropped.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/66",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/66",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/66/labels",
            "id": 10314936,
            "node_id": "MI_kwDOABII584AnWS4",
            "number": 66,
            "state": "open",
            "title": "28.0",
            "creator": {
              "login": "DrahtBot",
              "id": 39886733,
              "node_id": "MDQ6VXNlcjM5ODg2NzMz",
              "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/DrahtBot",
              "html_url": "https://github.com/DrahtBot",
              "followers_url": "https://api.github.com/users/DrahtBot/followers",
              "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
              "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
              "repos_url": "https://api.github.com/users/DrahtBot/repos",
              "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 6,
            "closed_issues": 0,
            "created_at": "2023-12-15T12:08:23Z",
            "updated_at": "2024-01-29T10:51:24Z"
          },
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29071",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29071",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29071.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29071.patch"
          },
          "created_at": "2023-12-13T10:58:46Z",
          "updated_at": "2024-02-14T16:44:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1782050983,
      "node_id": "PRR_kwDOABII585qN_Cn",
      "url": null,
      "actor": null,
      "commit_id": "3c91202c5a03c57c9f83186de9d3caf337b78d45",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK 3c91202c5a03c57c9f83186de9d3caf337b78d45",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#pullrequestreview-1782050983",
      "submitted_at": "2023-12-14T16:54:08Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
    },
    {
      "event": "review_requested",
      "id": 11250541116,
      "node_id": "RRE_lADOABII585Xi1euzwAAAAKelaI8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11250541116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T16:54:14Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 11250541312,
      "node_id": "RRE_lADOABII585Xi1euzwAAAAKelaMA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11250541312",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T16:54:14Z",
      "requested_reviewer": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 11250541464,
      "node_id": "RRE_lADOABII585Xi1euzwAAAAKelaOY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11250541464",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T16:54:15Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-19T23:39:57Z",
      "updated_at": "2023-12-19T23:39:57Z",
      "source": {
        "issue": {
          "id": 2049508623,
          "node_id": "PR_kwDOABII585iamOH",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29117",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29117/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29117/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29117/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29117",
          "number": 29117,
          "state": "closed",
          "state_reason": null,
          "title": "wallettool: Always be able to dump a wallet's database",
          "body": "https://github.com/bitcoin/bitcoin/issues/29109#issuecomment-1863449058 reports that a wallet with noncritical errors cannot be dumped with `bitcoin-wallet dump`. This was caused by an erroneous reset of the wallet pointer when the loading the wallet returns something other than `LOAD_OK`. Not all errors are errors that require aborting, so unilaterally resetting the pointer at that time is incorrect. The first commit resolves this issue.\r\n\r\nFurthermore, if a wallet has loading errors, that should not prevent the wallet tool from dumping the wallet. The wallet application logic should not get in the way of performing such a low level database operation, especially when it's primary usage is for debugging potentially corrupted wallets. The 2nd commit is taken from #28710 and changes the `dump` to stop at making a `WalletDatabase` rather than making a `CWallet` only to retrieve the underlying `WalletDatabase`.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29117",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29117",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29117.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29117.patch"
          },
          "closed_at": "2024-01-05T17:40:50Z",
          "created_at": "2023-12-19T22:05:19Z",
          "updated_at": "2024-01-05T17:40:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T06:12:09Z",
      "updated_at": "2023-12-20T06:12:09Z",
      "source": {
        "issue": {
          "id": 2049590379,
          "node_id": "PR_kwDOABII585ia4AQ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29119",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29119/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29119/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29119/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29119",
          "number": 29119,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Use std::span over Span",
          "body": "`std::span` allows static extents, which is a nice benefit over just `Span`.\r\n\r\nHowever, the interface of the two isn't identical and requires some more changes than just defining an alias. This is my current draft to *compile* with `std::span`. This should be the minimal changes required to get a green CI, but the changes may not be ideal, so this remains a draft.\r\n\r\nAlso, this requires and is based on #29071, which is blocked on OSS-Fuzz.\r\n\r\nIn the meantime, changes that make sense on their own, can be split up.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29119",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29119",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29119.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29119.patch"
          },
          "created_at": "2023-12-19T23:36:52Z",
          "updated_at": "2024-02-14T16:35:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11374033954,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAKl8fwi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11374033954",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-02T21:36:41Z"
    },
    {
      "event": "labeled",
      "id": 11404102912,
      "node_id": "LE_lADOABII585Xi1euzwAAAAKnvM0A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11404102912",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T18:33:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11406039561,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAKn2loJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11406039561",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T23:34:16Z"
    },
    {
      "event": "unlabeled",
      "id": 11406453687,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAKn4Ku3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11406453687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-06T00:49:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11478917470,
      "node_id": "LE_lADOABII585Xi1euzwAAAAKsMmFe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11478917470",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T20:52:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11674867330,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAK34FaC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11674867330",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T19:29:52Z"
    },
    {
      "event": "unlabeled",
      "id": 11677158468,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAK4A0xE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11677158468",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-01T23:36:51Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-03T20:13:18Z",
      "updated_at": "2024-02-03T20:13:18Z",
      "source": {
        "issue": {
          "id": 2116557543,
          "node_id": "PR_kwDOABII585l61fV",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29375",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29375/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29375/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29375/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29375",
          "number": 29375,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: remove unused 'accept_no_keys' arg from decryption process",
          "body": "Found it while reviewing other PR. Couldn't contain myself from cleaning it up.\r\n\r\nThe wallet decryption process (`CheckDecryptionKey()` and `Unlock()`)\r\ncontains an arg 'accept_no_keys,' introduced in #13926, that has\r\nnever been used.\r\nAdditionally, this also removes the unimplemented `SplitWalletPath`\r\nfunction.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29375",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29375",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29375.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29375.patch"
          },
          "closed_at": "2024-02-06T18:03:06Z",
          "created_at": "2024-02-03T16:06:18Z",
          "updated_at": "2024-02-06T18:08:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11722235400,
      "node_id": "LE_lADOABII585Xi1euzwAAAAK6sx4I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11722235400",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-06T18:06:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11751754880,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAAK8dYyA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11751754880",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T22:04:45Z"
    },
    {
      "event": "unlabeled",
      "id": 11752347881,
      "node_id": "UNLE_lADOABII585Xi1euzwAAAAK8fpjp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11752347881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-08T23:34:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11838142820,
      "node_id": "LE_lADOABII585Xi1euzwAAAALBm7lk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11838142820",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-18T06:04:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY0MWM2OTNkOTA4Zjg4ZjU4MjlhZDUwZDdjYThlZGViOGI2NDY4MzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f41c693d908f88f5829ad50d7ca8edeb8b646835",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f41c693d908f88f5829ad50d7ca8edeb8b646835",
      "tree": {
        "sha": "66ded7468426bde501e8e36d2c9ea7daed0315fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66ded7468426bde501e8e36d2c9ea7daed0315fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45b2a91897ca8f4a3e0c1adcfb30cf570971da4e",
          "sha": "45b2a91897ca8f4a3e0c1adcfb30cf570971da4e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/45b2a91897ca8f4a3e0c1adcfb30cf570971da4e"
        }
      ],
      "message": "Add AutoFile::seek and tell\n\nIt's useful to be able to seek to a specific position in a file. Allow\nAutoFile to seek by using fseek.\n\nIt's also useful to be able to get the current position in a file.\nAllow AutoFile to tell by using ftell.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:34:50Z"
      },
      "sha": "f41c693d908f88f5829ad50d7ca8edeb8b646835"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI1NTIyZWZkOGM3MjkzZGJhMTI5NTZkOGExZWJlNTkzNDYwMjk5YjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25522efd8c7293dba12956d8a1ebe593460299b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/25522efd8c7293dba12956d8a1ebe593460299b1",
      "tree": {
        "sha": "3da8ad25bea5163e33e6fb75fc9b074d9e863157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3da8ad25bea5163e33e6fb75fc9b074d9e863157"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f41c693d908f88f5829ad50d7ca8edeb8b646835",
          "sha": "f41c693d908f88f5829ad50d7ca8edeb8b646835",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f41c693d908f88f5829ad50d7ca8edeb8b646835"
        }
      ],
      "message": "wallet: add dummy BerkeleyRODatabase and BerkeleyROBatch classes\n\nBerkeleyRODatabase and BerkeleyROBatch will be used to access a BDB file\nwithout the use of BDB. For now, these are dummy classes.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:35:07Z"
      },
      "sha": "25522efd8c7293dba12956d8a1ebe593460299b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2NzFjNWIwZmVjMGZhYmEwYjJkYmVlYjM1OTljNTFkZTIxZDQ1ZTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c671c5b0fec0faba0b2dbeeb3599c51de21d45e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c671c5b0fec0faba0b2dbeeb3599c51de21d45e8",
      "tree": {
        "sha": "5e2c05f26e2c1ba00a85d6130373e1b26c2ccfef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e2c05f26e2c1ba00a85d6130373e1b26c2ccfef"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25522efd8c7293dba12956d8a1ebe593460299b1",
          "sha": "25522efd8c7293dba12956d8a1ebe593460299b1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25522efd8c7293dba12956d8a1ebe593460299b1"
        }
      ],
      "message": "wallet: implement BerkeleyROBatch\n\nImplement ReadKey and HasKey of BerkeleyROBatch, and Next of BerkeleyROCursor.\nAlso adds the containers for records to BerkeleyRODatabase so that\nBerkeleyROBatch will be able to access the records.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:35:22Z"
      },
      "sha": "c671c5b0fec0faba0b2dbeeb3599c51de21d45e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjYjBlMDAzZmM3OTUxY2Y3M2VlNzVkOTQ1Y2IzZjBlY2E5MDM5MmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb0e003fc7951cf73ee75d945cb3f0eca90392e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb0e003fc7951cf73ee75d945cb3f0eca90392e",
      "tree": {
        "sha": "b6c6e2d6b408a7b81055a62cd27be1753536577b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6c6e2d6b408a7b81055a62cd27be1753536577b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c671c5b0fec0faba0b2dbeeb3599c51de21d45e8",
          "sha": "c671c5b0fec0faba0b2dbeeb3599c51de21d45e8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c671c5b0fec0faba0b2dbeeb3599c51de21d45e8"
        }
      ],
      "message": "wallet: implement BerkeleyRODatabase::Backup",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:35:30Z"
      },
      "sha": "1cb0e003fc7951cf73ee75d945cb3f0eca90392e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdmOTBlOGQ1NWIzMzhkNDdmOTk1N2U5ZDc1NmExYjY0N2Q2MjczNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f90e8d55b338d47f9957e9d756a1b647d627378",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f90e8d55b338d47f9957e9d756a1b647d627378",
      "tree": {
        "sha": "ccd17a5e2691452150f6cb702494f98d548840ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccd17a5e2691452150f6cb702494f98d548840ab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb0e003fc7951cf73ee75d945cb3f0eca90392e",
          "sha": "1cb0e003fc7951cf73ee75d945cb3f0eca90392e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb0e003fc7951cf73ee75d945cb3f0eca90392e"
        }
      ],
      "message": "wallet: implement independent BDB deserializer in BerkeleyRODatabase\n\nBerkeleyRODatabase is intended for use after BDB is removed, so it needs\nto be able to read all of the records from a BDB file. Thus an\nindependent deserializer for BDB data files is implemented in it. This\ndeserializer is targeted towards the data files that Bitcoin Core\ncreates so it does not fully support all of BDB's features (e.g. other\ndatabase types, encryption, etc.).",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:35:37Z"
      },
      "sha": "7f90e8d55b338d47f9957e9d756a1b647d627378"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZjYmU4MjMxM2JkNmViOTQwOGMzZmYzN2RjNzgzMDdkYTFmMGFlODg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcbe82313bd6eb9408c3ff37dc78307da1f0ae88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fcbe82313bd6eb9408c3ff37dc78307da1f0ae88",
      "tree": {
        "sha": "a2fcb48000a2be8c34ca4d5ea5f963b871c5b882",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2fcb48000a2be8c34ca4d5ea5f963b871c5b882"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f90e8d55b338d47f9957e9d756a1b647d627378",
          "sha": "7f90e8d55b338d47f9957e9d756a1b647d627378",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f90e8d55b338d47f9957e9d756a1b647d627378"
        }
      ],
      "message": "Implement handling of other endianness in BerkeleyRODatabase",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:35:50Z"
      },
      "sha": "fcbe82313bd6eb9408c3ff37dc78307da1f0ae88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1NTkwMDY1OWRmMzc5NzQ0MzI1MzY5MzgwMDUwZmUyOGRkMTQzNjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c55900659df379744325369380050fe28dd14361",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c55900659df379744325369380050fe28dd14361",
      "tree": {
        "sha": "8ad6636867cc4b76bbcb4c0abac29fc7e2316910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ad6636867cc4b76bbcb4c0abac29fc7e2316910"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcbe82313bd6eb9408c3ff37dc78307da1f0ae88",
          "sha": "fcbe82313bd6eb9408c3ff37dc78307da1f0ae88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fcbe82313bd6eb9408c3ff37dc78307da1f0ae88"
        }
      ],
      "message": "Add MakeBerkeleyRODatabase\n\nImplements MakeBerkeleyRODatabase and adds DatabaseFormat::BERKELEY_RO\nso that MakeDatabase can use BerkeleyRO as the backend database.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:36:06Z"
      },
      "sha": "c55900659df379744325369380050fe28dd14361"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJhMTM3Nzc5Y2Y4YjAwMzE2YzY2ZWVkM2JjZjA1Nzk4ZjcwNDkxZGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a137779cf8b00316c66eed3bcf05798f70491dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2a137779cf8b00316c66eed3bcf05798f70491dc",
      "tree": {
        "sha": "59839fe41685c3661dc2cf160affd32f8420720e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59839fe41685c3661dc2cf160affd32f8420720e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c55900659df379744325369380050fe28dd14361",
          "sha": "c55900659df379744325369380050fe28dd14361",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c55900659df379744325369380050fe28dd14361"
        }
      ],
      "message": "wallettool: Optionally use BERKELEY_RO as format when dumping BDB wallets\n\nIn order to ease the transition to not having BDB, make the dump tool\nuse DatabaseFormmat::BERKELEY_RO when -withinternalbdb is set.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:36:17Z"
      },
      "sha": "2a137779cf8b00316c66eed3bcf05798f70491dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGExOTFjNzc1ZTUzYzhkMzZjZDUxMmZmMzQzOGM3NTgwYmI2YTM1Njg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a191c775e53c8d36cd512ff3438c7580bb6a3568",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a191c775e53c8d36cd512ff3438c7580bb6a3568",
      "tree": {
        "sha": "4895b41a5383b335dc8be47644c7dce5e42bb840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4895b41a5383b335dc8be47644c7dce5e42bb840"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a137779cf8b00316c66eed3bcf05798f70491dc",
          "sha": "2a137779cf8b00316c66eed3bcf05798f70491dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2a137779cf8b00316c66eed3bcf05798f70491dc"
        }
      ],
      "message": "tests: Add BerkeleyRO to db prefix tests",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-02T21:36:23Z"
      },
      "sha": "a191c775e53c8d36cd512ff3438c7580bb6a3568"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjZjkzNGUwZjY5YWFkZjRmYjE1NjA2Zjk5ZGRhZDMwMDlkYWYzNmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccf934e0f69aadf4fb15606f99ddad3009daf36e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ccf934e0f69aadf4fb15606f99ddad3009daf36e",
      "tree": {
        "sha": "ff3b4add7eb222503401a30ba4a8d6a78efe51a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff3b4add7eb222503401a30ba4a8d6a78efe51a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a191c775e53c8d36cd512ff3438c7580bb6a3568",
          "sha": "a191c775e53c8d36cd512ff3438c7580bb6a3568",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a191c775e53c8d36cd512ff3438c7580bb6a3568"
        }
      ],
      "message": "Berkeley RO Database fuzz test",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:10:04Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2023-06-20T22:14:56Z"
      },
      "sha": "ccf934e0f69aadf4fb15606f99ddad3009daf36e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNlYzBlMzc0NDliZGQ5ZmM2NzZkMjFkOGQ5YjIzZjQzOGUwNjEwZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "tree": {
        "sha": "e9fa9358e08ae35c19c620cfa294b0b5b1767cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9fa9358e08ae35c19c620cfa294b0b5b1767cec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccf934e0f69aadf4fb15606f99ddad3009daf36e",
          "sha": "ccf934e0f69aadf4fb15606f99ddad3009daf36e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ccf934e0f69aadf4fb15606f99ddad3009daf36e"
        }
      ],
      "message": "fixup! tests: Add BerkeleyRO to db prefix tests",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:21:29Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-20T17:21:29Z"
      },
      "sha": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11865127625,
      "node_id": "HRFPE_lADOABII585Xi1euzwAAAALDN3rJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11865127625",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-20T17:28:17Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951",
      "pull_request_review_id": 1320156842,
      "id": 1121971951,
      "node_id": "PRRC_kwDOABII585C3-7v",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 6,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d `{`\r\n\r\nCould also use the `IsNull()` helper.",
      "created_at": "2023-03-01T16:02:46Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121971951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121971951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697",
      "pull_request_review_id": 1320156842,
      "id": 1121975697,
      "node_id": "PRRC_kwDOABII585C3_2R",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 4,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: Note for other reviewers: yes\r\n\r\nhttps://en.cppreference.com/w/c/io/fseek",
      "created_at": "2023-03-01T16:05:12Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121975697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121975697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628",
      "pull_request_review_id": 1320156842,
      "id": 1121979628,
      "node_id": "PRRC_kwDOABII585C4Azs",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 9,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d: maybe log the exact error code.",
      "created_at": "2023-03-01T16:07:54Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1121979628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1121979628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022",
      "pull_request_review_id": 1320156842,
      "id": 1122017022,
      "node_id": "PRRC_kwDOABII585C4J7-",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "path": "src/wallet/migrate.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1224f45a92972199799d1ea33700eee567dc66fe",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1224f45a92972199799d1ea33700eee567dc66fe: maybe call this file `bdb_ro_wallet_db.h`?",
      "created_at": "2023-03-01T16:32:13Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122017022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122017022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825",
      "pull_request_review_id": 1320156842,
      "id": 1122022825,
      "node_id": "PRRC_kwDOABII585C4LWp",
      "diff_hunk": "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec: commit description also mentions `StartCursor`, `ReadAtCursor`, `CloseCursor`.",
      "created_at": "2023-03-01T16:35:56Z",
      "updated_at": "2023-03-01T16:42:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1122022825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1122022825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050",
      "pull_request_review_id": 1342106242,
      "id": 1137556050,
      "node_id": "PRRC_kwDOABII585DzbpS",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)",
      "path": "src/streams.h",
      "position": null,
      "original_position": 6,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": 1121971951,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-03-15T18:09:29Z",
      "updated_at": "2023-03-15T18:09:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512",
      "pull_request_review_id": 1342106695,
      "id": 1137556512,
      "node_id": "PRRC_kwDOABII585Dzbwg",
      "diff_hunk": "@@ -530,6 +530,14 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (!file)\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n+        if (fseek(file, offset, origin) != 0)\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::seek: end of file\" : \"CAutoFile::seek: fseek failed\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 9,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1d093bbf97b8d4ec5413ca560ac79e56f23d7f1d",
      "in_reply_to_id": 1121979628,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's kind of annoying to do that, so I'll leave it as is. The other functions do the same.",
      "created_at": "2023-03-15T18:09:47Z",
      "updated_at": "2023-03-15T18:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948",
      "pull_request_review_id": 1342107141,
      "id": 1137556948,
      "node_id": "PRRC_kwDOABII585Dzb3U",
      "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H",
      "path": "src/wallet/migrate.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "1224f45a92972199799d1ea33700eee567dc66fe",
      "in_reply_to_id": 1122017022,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The intent is to have all of the migration stuff in these files, so I will leave it as is.",
      "created_at": "2023-03-15T18:10:04Z",
      "updated_at": "2023-03-15T18:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137556948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137556948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089",
      "pull_request_review_id": 1342107285,
      "id": 1137557089,
      "node_id": "PRRC_kwDOABII585Dzb5h",
      "diff_hunk": "@@ -21,17 +21,37 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "d6c5aa0f6783ef9f26f93a583d2fad5a943e23ec",
      "in_reply_to_id": 1122022825,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the message.",
      "created_at": "2023-03-15T18:10:10Z",
      "updated_at": "2023-03-15T18:10:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1137557089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1137557089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644",
      "pull_request_review_id": 1478773216,
      "id": 1229358644,
      "node_id": "PRRC_kwDOABII585JRoY0",
      "diff_hunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "path": "src/wallet/migrate.h",
      "position": 96,
      "original_position": 96,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this method returning `true`, but false for the erase methods?",
      "created_at": "2023-06-14T10:11:13Z",
      "updated_at": "2023-06-14T21:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1229358644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1229358644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355",
      "pull_request_review_id": 1506063580,
      "id": 1247132355,
      "node_id": "PRRC_kwDOABII585KVbrD",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```\r\n\r\n?",
      "created_at": "2023-06-29T20:21:49Z",
      "updated_at": "2023-06-29T20:22:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247132355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247132355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893",
      "pull_request_review_id": 1506127844,
      "id": 1247172893,
      "node_id": "PRRC_kwDOABII585KVlkd",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "5b3573e201863cf22cf04597a346a027cb685a13",
      "in_reply_to_id": 1247132355,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-29T21:02:00Z",
      "updated_at": "2023-06-29T21:02:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247172893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247172893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065",
      "pull_request_review_id": 1506562478,
      "id": 1247469065,
      "node_id": "PRRC_kwDOABII585KWt4J",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\r\n```",
      "created_at": "2023-06-30T06:00:58Z",
      "updated_at": "2023-06-30T06:02:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247469065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247469065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691",
      "pull_request_review_id": 1506898105,
      "id": 1247687691,
      "node_id": "PRRC_kwDOABII585KXjQL",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After testing with a valid database in the fuzzing corpus, I noticed that I messed up the `m_args`, `m_node.args`, `gArgs` division again ([see here](https://github.com/bitcoin/bitcoin/issues/25055)) - sorry about that. I have a basic patch here, but feel free to commit a more elegant fix:\r\n\r\n```diff\r\ndiff --git a/src/wallet/test/fuzz/wallet_bdb_parser.cpp b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\nindex aabde093b6..a1acb95178 100644\r\n--- a/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n+++ b/src/wallet/test/fuzz/wallet_bdb_parser.cpp\r\n@@ -19,23 +19,15 @@ using wallet::DatabaseOptions;\r\n using wallet::DatabaseStatus;\r\n \r\n namespace {\r\n-const TestingSetup* g_setup;\r\n+TestingSetup* g_setup;\r\n } // namespace\r\n \r\n void initialize_wallet_bdb_parser()\r\n {\r\n-    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\r\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\r\n     g_setup = testing_setup.get();\r\n }\r\n \r\n-void SetDumpFile(ArgsManager& args) {\r\n-    auto dumpfile{args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n-    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n-        remove(dumpfile);\r\n-    }\r\n-    args.ForceSetArg(\"-dumpfile\", fs::PathToString(args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"));\r\n-}\r\n-\r\n FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n {\r\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n@@ -52,10 +44,14 @@ FUZZ_TARGET_INIT(wallet_bdb_parser, initialize_wallet_bdb_parser)\r\n     DatabaseStatus status;\r\n     bilingual_str error;\r\n \r\n+    auto dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\r\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\r\n+        remove(dumpfile);\r\n+    }\r\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", dumpfile);\r\n+\r\n     try {\r\n         auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\r\n-        const auto& node = g_setup->m_node;\r\n-        SetDumpFile(*node.args);\r\n         assert(DumpWallet(g_setup->m_args, *db, error));\r\n     }\r\n     catch (const std::runtime_error& e) {\r\n```",
      "created_at": "2023-06-30T09:58:08Z",
      "updated_at": "2023-06-30T09:58:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247687691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247687691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963",
      "pull_request_review_id": 1507168279,
      "id": 1247847963,
      "node_id": "PRRC_kwDOABII585KYKYb",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 640,
      "original_position": 215,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement handling of other endianness in BerkeleyRODatabase\" 0b8eac6a78351a68c1b5a6126564493ab50031dc\r\n\r\nI might be reading something wrong, or confusing something, but I don't quite understand why the record data itself does not have to get its endianness adjusted.",
      "created_at": "2023-06-30T13:11:01Z",
      "updated_at": "2023-06-30T13:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247847963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247847963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 640,
      "original_line": 640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182",
      "pull_request_review_id": 1507168279,
      "id": 1247852182,
      "node_id": "PRRC_kwDOABII585KYLaW",
      "diff_hunk": "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 224,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "d5fe130106bdf367c0bca157b02d12254590b585",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"wallet: implement independent BDB deserializer in BerkeleyRODatabase\" d5fe130106bdf367c0bca157b02d12254590b585\r\n\r\nCan this `data` field be removed? Seems to be unused.",
      "created_at": "2023-06-30T13:15:02Z",
      "updated_at": "2023-06-30T13:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1247852182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247852182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111",
      "pull_request_review_id": 1507432998,
      "id": 1248008111,
      "node_id": "PRRC_kwDOABII585KYxev",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 640,
      "original_position": 215,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": 1247847963,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The record data should just be arbitrary byte strings so they don't have an endianness.",
      "created_at": "2023-06-30T15:37:20Z",
      "updated_at": "2023-06-30T15:37:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248008111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248008111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 640,
      "original_line": 640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942",
      "pull_request_review_id": 1507442894,
      "id": 1248013942,
      "node_id": "PRRC_kwDOABII585KYy52",
      "diff_hunk": "@@ -522,6 +522,16 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin)\n+    {\n+        if (IsNull()) {\n+            throw std::ios_base::failure(\"AutoFile::read: file handle is nullptr\");",
      "path": "src/streams.h",
      "position": null,
      "original_position": 7,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": 1247469065,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-06-30T15:43:46Z",
      "updated_at": "2023-06-30T15:43:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248013942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248013942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091",
      "pull_request_review_id": 1507443085,
      "id": 1248014091,
      "node_id": "PRRC_kwDOABII585KYy8L",
      "diff_hunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+const TestingSetup* g_setup;",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6d2f8d999055f48084dcebef982e47c21ceb4f38",
      "in_reply_to_id": 1247687691,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested",
      "created_at": "2023-06-30T15:43:54Z",
      "updated_at": "2023-06-30T15:43:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465",
      "pull_request_review_id": 1507443735,
      "id": 1248014465,
      "node_id": "PRRC_kwDOABII585KYzCB",
      "diff_hunk": "@@ -1,13 +1,547 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    std::vector<std::byte> data; // Data from all of the overflow pages",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 224,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "d5fe130106bdf367c0bca157b02d12254590b585",
      "in_reply_to_id": 1247852182,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed. I think originally I though I could put the overflow page data into this field, but I didn't end up doing it that way.",
      "created_at": "2023-06-30T15:44:22Z",
      "updated_at": "2023-06-30T15:44:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248014465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248014465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852",
      "pull_request_review_id": 1507509204,
      "id": 1248057852,
      "node_id": "PRRC_kwDOABII585KY9n8",
      "diff_hunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_MIGRATE_H\n+#define BITCOIN_WALLET_MIGRATE_H\n+\n+#include <wallet/db.h>\n+\n+#include <optional>\n+\n+namespace wallet {\n+\n+using BerkeleyROData = std::map<SerializeData, SerializeData, std::less<>>;\n+\n+/**\n+ * A class representing a BerkeleyDB file from which we can only read records.\n+ * This is used only for migration of legacy to descriptor wallets\n+ */\n+class BerkeleyRODatabase : public WalletDatabase\n+{\n+private:\n+    const fs::path m_filepath;\n+\n+public:\n+    /** Create dummy DB handle */\n+    BerkeleyRODatabase(const fs::path& filepath) : WalletDatabase(), m_filepath(filepath)\n+    {\n+        Open();\n+    }\n+    ~BerkeleyRODatabase() {};\n+\n+    BerkeleyROData m_records;\n+\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override {}\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    void RemoveRef() override {}\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr) override { return false; }\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest) const override;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+     void Flush() override {}\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    void Close() override {}\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override { return false; }\n+\n+    void IncrementUpdateCounter() override {}\n+\n+    void ReloadDbEnv() override {}\n+\n+    /** Return path to main database file for logs and error messages. */\n+    std::string Filename() override { return fs::PathToString(m_filepath); }\n+\n+    std::string Format() override { return \"bdb_ro\"; }\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+};\n+\n+class BerkeleyROCursor : public DatabaseCursor\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+    BerkeleyROData::const_iterator m_cursor;\n+    BerkeleyROData::const_iterator m_cursor_end;\n+\n+public:\n+    explicit BerkeleyROCursor(const BerkeleyRODatabase& database, Span<const std::byte> prefix = {});\n+    ~BerkeleyROCursor() {}\n+\n+    Status Next(DataStream& key, DataStream& value) override;\n+};\n+\n+/** RAII class that provides access to a BerkeleyRODatabase */\n+class BerkeleyROBatch : public DatabaseBatch\n+{\n+private:\n+    const BerkeleyRODatabase& m_database;\n+\n+    bool ReadKey(DataStream&& key, DataStream& value) override;\n+    bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite=true) override { return true; }",
      "path": "src/wallet/migrate.h",
      "position": 96,
      "original_position": 96,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "f108c6b565e73ea02df94331a347f9d1653ab0b2",
      "in_reply_to_id": 1229358644,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC I did this to avoid issues with old wallets that the wallet loading logic would do automatic upgrading of which expects writing to not fail. It actually should be fine for those to not write anything.",
      "created_at": "2023-06-30T16:20:07Z",
      "updated_at": "2023-06-30T16:22:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1248057852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248057852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116",
      "pull_request_review_id": 1513342000,
      "id": 1252319116,
      "node_id": "PRRC_kwDOABII585KpN-M",
      "diff_hunk": "@@ -519,7 +582,7 @@ void BerkeleyRODatabase::Open()\n                     uint32_t next_page = orec->page_number;\n                     while (next_page != 0) {\n                         SeekToPage(db_file, next_page, page_size);\n-                        PageHeader opage_header;\n+                        PageHeader opage_header(inner_meta.other_endian);\n                         db_file >> opage_header;\n                         OverflowPage opage(opage_header);\n                         db_file >> opage;",
      "path": "src/wallet/migrate.cpp",
      "position": 640,
      "original_position": 215,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0b8eac6a78351a68c1b5a6126564493ab50031dc",
      "in_reply_to_id": 1247847963,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ACK, please resolve.",
      "created_at": "2023-07-04T20:01:54Z",
      "updated_at": "2023-07-04T20:01:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1252319116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252319116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 640,
      "original_line": 640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906",
      "pull_request_review_id": 1546251193,
      "id": 1273993906,
      "node_id": "PRRC_kwDOABII585L75qy",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 527,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would be more readable if the `main` bytes were stuffed into a constant somewhere.",
      "created_at": "2023-07-25T19:30:14Z",
      "updated_at": "2023-07-25T19:58:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1273993906",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273993906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925",
      "pull_request_review_id": 1546251193,
      "id": 1274005925,
      "node_id": "PRRC_kwDOABII585L78ml",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 530,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add a comment explaining why we check this?",
      "created_at": "2023-07-25T19:43:38Z",
      "updated_at": "2023-07-25T19:58:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1274005925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1274005925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 570,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033",
      "pull_request_review_id": 1555022636,
      "id": 1279447033,
      "node_id": "PRRC_kwDOABII585MQs_5",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a recommendation to the fuzz doc to [mount /tmp to tmpfs](https://ubuntu.com/blog/data-driven-analysis-tmp-on-tmpfs), or ensure we don't use the file system.",
      "created_at": "2023-07-31T15:07:01Z",
      "updated_at": "2023-07-31T15:07:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279447033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279447033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655",
      "pull_request_review_id": 1555027910,
      "id": 1279450655,
      "node_id": "PRRC_kwDOABII585MQt4f",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279447033,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is already in the test docs, no?\r\n\r\n```\r\n$ git grep tmpfs test/README.md\r\ntest/README.md:sudo mount -t tmpfs -o size=4g tmpfs /mnt/tmp/\r\n",
      "created_at": "2023-07-31T15:09:05Z",
      "updated_at": "2023-07-31T15:09:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279450655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279450655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130",
      "pull_request_review_id": 1555052889,
      "id": 1279466130,
      "node_id": "PRRC_kwDOABII585MQxqS",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 61,
      "original_position": 55,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be useful here - if BDB is compiled - to also open it with BDB, dump and then compare both dumps.\r\n\r\nI'm not sure what to do for cases where BDB and RO have slightly different opinions on what they're willing to open at all. It's probably fine to skip comparing files where _either_ refuses to open.",
      "created_at": "2023-07-31T15:14:56Z",
      "updated_at": "2023-07-31T15:14:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279466130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279466130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544",
      "pull_request_review_id": 1555058328,
      "id": 1279468544,
      "node_id": "PRRC_kwDOABII585MQyQA",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 37,
      "original_position": 35,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279447033,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not in the fuzz docs, but just having it in the test docs is probably fine.",
      "created_at": "2023-07-31T15:16:53Z",
      "updated_at": "2023-07-31T15:16:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1279468544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1279468544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486",
      "pull_request_review_id": 1557685853,
      "id": 1281063486,
      "node_id": "PRRC_kwDOABII585MW3o-",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 527,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1273993906,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-08-01T19:30:40Z",
      "updated_at": "2023-08-01T19:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 527,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610",
      "pull_request_review_id": 1557686133,
      "id": 1281063610,
      "node_id": "PRRC_kwDOABII585MW3q6",
      "diff_hunk": "@@ -0,0 +1,683 @@\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/byteswap.h>\n+#include <crypto/common.h> // For ReadBE32\n+#include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <wallet/migrate.h>\n+\n+#include <optional>\n+#include <variant>\n+\n+namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    bool other_endian;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        other_endian = magic == BTREE_MAGIC_OE;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        if (other_endian) {\n+            uint32_flags = bswap_32(uint32_flags);\n+        }\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            magic = bswap_32(magic);\n+            version = bswap_32(version);\n+            pagesize = bswap_32(pagesize);\n+            free_list = bswap_32(free_list);\n+            last_page = bswap_32(last_page);\n+            partitions = bswap_32(partitions);\n+            key_count = bswap_32(key_count);\n+            record_count = bswap_32(record_count);\n+            unused2 = bswap_32(unused2);\n+            minkey = bswap_32(minkey);\n+            re_len = bswap_32(re_len);\n+            re_pad = bswap_32(re_pad);\n+            root = bswap_32(root);\n+            crypto_magic = bswap_32(crypto_magic);\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    bool other_endian;\n+\n+    RecordHeader(bool other_endian) : other_endian(other_endian) {}\n+    RecordHeader() = delete;\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+\n+        if (other_endian) {\n+            len = bswap_16(len);\n+        }\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+\n+        if (m_header.other_endian) {\n+            page_num = bswap_32(page_num);\n+            records = bswap_32(records);\n+        }\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+\n+        if (m_header.other_endian) {\n+            page_number = bswap_32(page_number);\n+            item_len = bswap_32(item_len);\n+        }\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    bool other_endian;\n+\n+    PageHeader(bool other_endian) : other_endian(other_endian) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (other_endian) {\n+            lsn = bswap_64(lsn);\n+            page_num = bswap_32(page_num);\n+            prev_page = bswap_32(prev_page);\n+            next_page = bswap_32(next_page);\n+            entries = bswap_16(entries);\n+            hf_offset = bswap_16(hf_offset);\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.push_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            if (m_header.other_endian) {\n+                index = bswap_16(index);\n+            }\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr(m_header.other_endian);\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.push_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static MetaPage ReadMetaPage(CAutoFile& f)\n+{\n+    // Read the metapage\n+    MetaPage meta;\n+    f >> meta;\n+\n+    // Sanity checks\n+    if (meta.magic != BTREE_MAGIC) {\n+        throw std::runtime_error(\"Not a BDB file\");\n+    }\n+    if (meta.version != 9) {\n+        throw std::runtime_error(\"Unsupported BDB data file version number\");\n+    }\n+    if (meta.type != PageType::BTREE_META) {\n+        throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+    }\n+    if (meta.flags != BTreeFlags::SUBDB) {\n+        throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+    }\n+\n+    return meta;\n+}\n+\n+static void SeekToPage(CAutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n+\n+void BerkeleyRODatabase::Open()\n+{\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    CAutoFile db_file(file, 0, 0);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    MetaPage outer_meta = ReadMetaPage(db_file);\n+    page_size = outer_meta.pagesize;\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.other_endian);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != std::vector<std::byte>({std::byte('m'), std::byte('a'), std::byte('i'), std::byte('n')})) {\n+        throw std::runtime_error(\"Subdatabase has an unexpected name\");\n+    }\n+    if (!std::holds_alternative<DataRecord>(page.records.at(1)) || std::get_if<DataRecord>(&page.records.at(1))->m_header.len != 4) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 530,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1274005925,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2023-08-01T19:30:47Z",
      "updated_at": "2023-08-01T19:30:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 570,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722",
      "pull_request_review_id": 1557686444,
      "id": 1281063722,
      "node_id": "PRRC_kwDOABII585MW3sq",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 61,
      "original_position": 55,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279466130,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comparison",
      "created_at": "2023-08-01T19:30:55Z",
      "updated_at": "2023-08-01T19:30:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281063722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281063722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281410852",
      "pull_request_review_id": 1558219665,
      "id": 1281410852,
      "node_id": "PRRC_kwDOABII585MYMck",
      "diff_hunk": "@@ -528,6 +528,7 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin);",
      "path": "src/streams.h",
      "position": null,
      "original_position": 4,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit: I don't think this method is a subset of our streams. Many streams can't seek to the beginning after a read. It may be better to move this up by 3 lines of code (or more if you want)",
      "created_at": "2023-08-02T05:26:46Z",
      "updated_at": "2023-08-02T05:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281410852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281410852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281412977",
      "pull_request_review_id": 1558223099,
      "id": 1281412977,
      "node_id": "PRRC_kwDOABII585MYM9x",
      "diff_hunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style nit: If you remove this, it may be possible to feed in a \"happy\" wallet.dat (created with vanilla Bitcoin Core) as a fuzz input. See https://github.com/bitcoin-core/qa-assets/pull/140#issuecomment-1660088315\r\n\r\nThough, I haven't tested this.",
      "created_at": "2023-08-02T05:30:46Z",
      "updated_at": "2023-08-02T05:30:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1281412977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1281412977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282150028",
      "pull_request_review_id": 1559403016,
      "id": 1282150028,
      "node_id": "PRRC_kwDOABII585MbA6M",
      "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile.dat\"};\n+    if (fs::exists(dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(dumpfile));\n+\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 61,
      "original_position": 55,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "6e28ff97a99519ec8b50123bc1177084bba68f96",
      "in_reply_to_id": 1279466130,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice! I'll run the fuzzer against that...",
      "created_at": "2023-08-02T16:26:46Z",
      "updated_at": "2023-08-02T16:26:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282150028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282150028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282196740",
      "pull_request_review_id": 1559482876,
      "id": 1282196740,
      "node_id": "PRRC_kwDOABII585MbMUE",
      "diff_hunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n+        outfile << Span{file_data};\n+    }\n+\n+    const DatabaseOptions options{};\n+    DatabaseStatus status;\n+    bilingual_str error;\n+\n+    fs::path bdb_ro_dumpfile{g_setup->m_args.GetDataDirNet() / \"fuzzed_dumpfile_bdb_ro.dat\"};\n+    if (fs::exists(bdb_ro_dumpfile)) { // Writing into an existing dump file will throw an exception\n+        remove(bdb_ro_dumpfile);\n+    }\n+    g_setup->m_args.ForceSetArg(\"-dumpfile\", fs::PathToString(bdb_ro_dumpfile));\n+\n+    bool bdb_ro_err = false;\n+    try {\n+        auto db{MakeBerkeleyRODatabase(wallet_path, options, status, error)};\n+        assert(DumpWallet(g_setup->m_args, *db, error));\n+    }\n+    catch (const std::runtime_error& e) {\n+        bdb_ro_err = true;\n+        if (std::string(e.what()) == \"AutoFile::ignore: end of file: iostream error\") return;\n+        if (std::string(e.what()) == \"AutoFile::read: end of file: iostream error\") return;\n+        if (std::string(e.what()) == \"Not a BDB file\") return;\n+        if (std::string(e.what()) == \"Unsupported BDB data file version number\") return;\n+        if (std::string(e.what()) == \"Unexpected page type, should be 9 (BTree Metadata)\") return;\n+        if (std::string(e.what()) == \"Unexpected database flags, should only be 0x20 (subdatabases)\") return;\n+        if (std::string(e.what()) == \"Unexpected outer database root page type\") return;\n+        if (std::string(e.what()) == \"Unexpected number of entries in outer database root page\") return;\n+        if (std::string(e.what()) == \"Subdatabase has an unexpected name\") return;\n+        if (std::string(e.what()) == \"Subdatabase page number has unexpected length\") return;\n+        if (std::string(e.what()) == \"Unexpected inner database page type\") return;\n+        if (std::string(e.what()) == \"Unknown record type in records page\") return;\n+        if (std::string(e.what()) == \"Unknown record type in internal page\") return;\n+        if (std::string(e.what()) == \"Unexpected page size\") return;\n+        if (std::string(e.what()) == \"Unexpected page type\") return;\n+        throw e;\n+    }",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": 100,
      "original_position": 78,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So far my corpus doesn't make it here, as tested by sprinkling `assert(false)`. It may indeed need some help with a real wallet.",
      "created_at": "2023-08-02T17:05:56Z",
      "updated_at": "2023-08-02T17:08:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282196740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282196740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282211461",
      "pull_request_review_id": 1559505421,
      "id": 1282211461,
      "node_id": "PRRC_kwDOABII585MbP6F",
      "diff_hunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": 1281412977,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I simply copied a `wallet.dat` into the corpus directory. That resulted in a bunch of extra corpus entities and almost immediately a crash.",
      "created_at": "2023-08-02T17:20:53Z",
      "updated_at": "2023-08-02T17:20:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282211461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282211461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282214518",
      "pull_request_review_id": 1559510055,
      "id": 1282214518,
      "node_id": "PRRC_kwDOABII585MbQp2",
      "diff_hunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": 1281412977,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Though the file seems to get ignored when trying to merge.",
      "created_at": "2023-08-02T17:23:59Z",
      "updated_at": "2023-08-02T17:24:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282214518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282214518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282220244",
      "pull_request_review_id": 1559519181,
      "id": 1282220244,
      "node_id": "PRRC_kwDOABII585MbSDU",
      "diff_hunk": "@@ -528,6 +528,7 @@ class AutoFile\n     //\n     // Stream subset\n     //\n+    void seek(int64_t offset, int origin);",
      "path": "src/streams.h",
      "position": null,
      "original_position": 4,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": 1281410852,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2023-08-02T17:29:49Z",
      "updated_at": "2023-08-02T17:29:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282220244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282220244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282227280",
      "pull_request_review_id": 1559530471,
      "id": 1282227280,
      "node_id": "PRRC_kwDOABII585MbTxQ",
      "diff_hunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <util/fs.h>\n+#include <util/time.h>\n+#include <util/translation.h>\n+#include <wallet/bdb.h>\n+#include <wallet/db.h>\n+#include <wallet/dump.h>\n+#include <wallet/migrate.h>\n+\n+#include <fstream>\n+#include <iostream>\n+\n+using wallet::DatabaseOptions;\n+using wallet::DatabaseStatus;\n+\n+namespace {\n+TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_wallet_bdb_parser()\n+{\n+    static auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+FUZZ_TARGET(wallet_bdb_parser, .init = initialize_wallet_bdb_parser)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    const auto wallet_path = g_setup->m_args.GetDataDirNet() / \"fuzzed_wallet.dat\";\n+\n+    {\n+        AutoFile outfile{fsbridge::fopen(wallet_path, \"wb\")};\n+        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};",
      "path": "src/wallet/test/fuzz/wallet_bdb_parser.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "0dd59f3769bfb7cb15f7a93aa5efac66e3c3e50e",
      "in_reply_to_id": 1281412977,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, figured it out! Will push some new entries to the qa-assets PR that should reproduce the crash.",
      "created_at": "2023-08-02T17:36:55Z",
      "updated_at": "2023-08-02T17:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282227280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282227280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282873918",
      "pull_request_review_id": 1560573265,
      "id": 1282873918,
      "node_id": "PRRC_kwDOABII585Mdxo-",
      "diff_hunk": "@@ -21,6 +21,28 @@ std::size_t AutoFile::detail_fread(Span<std::byte> dst)\n     }\n }\n \n+void AutoFile::seek(int64_t offset, int origin)\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\n+    }\n+    if (fseek(m_file, offset, origin) != 0) {\n+        throw std::ios_base::failure(feof() ? \"AutoFile::seek: end of file\" : \"AutoFile::seek: fseek failed\");\n+    }\n+}\n+\n+int64_t AutoFile::tell()\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::tell: file handle is nullptr\");\n+    }\n+    int64_t r = ftell(m_file);",
      "path": "src/streams.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "167cbf7b1851eeeb28937bd8e241e1f865b813f8",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 167cbf7b1851eeeb28937bd8e241e1f865b813f8:\r\n\r\n\r\n```cpp\r\n    int64_t r{std::ftell(m_file)};",
      "created_at": "2023-08-03T08:55:14Z",
      "updated_at": "2023-08-03T08:56:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282873918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282873918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282875416",
      "pull_request_review_id": 1560573265,
      "id": 1282875416,
      "node_id": "PRRC_kwDOABII585MdyAY",
      "diff_hunk": "@@ -21,6 +21,28 @@ std::size_t AutoFile::detail_fread(Span<std::byte> dst)\n     }\n }\n \n+void AutoFile::seek(int64_t offset, int origin)\n+{\n+    if (IsNull()) {\n+        throw std::ios_base::failure(\"AutoFile::seek: file handle is nullptr\");\n+    }\n+    if (fseek(m_file, offset, origin) != 0) {",
      "path": "src/streams.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "167cbf7b1851eeeb28937bd8e241e1f865b813f8",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit in 167cbf7b1851eeeb28937bd8e241e1f865b813f8:\r\n\r\nCould add `std::` before `fseek`? Also, the commit message has a typo:\r\n\r\nusefule -> useful (remove `e`)",
      "created_at": "2023-08-03T08:56:06Z",
      "updated_at": "2023-08-03T08:56:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1282875416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1282875416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382487576",
      "pull_request_review_id": 1713893741,
      "id": 1382487576,
      "node_id": "PRRC_kwDOABII585SZxYY",
      "diff_hunk": "@@ -21,17 +21,41 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;\n+    SerializeData key_data{key.begin(), key.end()};\n+    if (m_database.m_records.count(key_data) == 0) {\n+        return false;\n+    }\n+    auto val = m_database.m_records.at(key_data);",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "b7b90daf46ae840d9ab089ac438f71f7b79dbf5a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(in commit b7b90daf46ae840d9ab089ac438f71f7b79dbf5a) could avoid duplicate std::map lookup by using `.find` instead:\r\n```suggestion\r\n    const auto it{m_database.m_records.find(key_data)};\r\n    if (it == m_database.m_records.end()) {\r\n         return false;\r\n    }\r\n    auto val = it->second;\r\n```",
      "created_at": "2023-11-05T00:53:14Z",
      "updated_at": "2023-11-05T01:15:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382487576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382487576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382488042",
      "pull_request_review_id": 1713893741,
      "id": 1382488042,
      "node_id": "PRRC_kwDOABII585SZxfq",
      "diff_hunk": "@@ -1,13 +1,601 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+// Subdatabase name\n+static const std::vector<std::byte> SUBDATABASE_NAME = {std::byte{'m'}, std::byte{'a'}, std::byte{'i'}, std::byte{'n'}};\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    uint32_t expected_page_num;\n+\n+    MetaPage(uint32_t expected_page_num) : expected_page_num(expected_page_num) {}\n+    MetaPage() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        // Page number must match\n+        if (page_num != expected_page_num) {\n+            throw std::runtime_error(\"Meta page number mismatch\");\n+        }\n+\n+        // Check magic\n+        if (magic != BTREE_MAGIC) {\n+            throw std::runtime_error(\"Not a BDB file\");\n+        }\n+\n+        // Only version 9 is supported\n+        if (version != 9) {\n+            throw std::runtime_error(\"Unsupported BDB data file version number\");\n+        }\n+\n+        // Page size must be 512 <= pagesize <= 64k, and be a power of 2\n+        if (pagesize < 512 || pagesize > 65536 ||  (pagesize & (pagesize - 1)) != 0) {\n+            throw std::runtime_error(\"Bad page size\");\n+        }\n+\n+        // Page type must be the btree type\n+        if (type != PageType::BTREE_META) {\n+            throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+        }\n+\n+        // Only supported meta-flag is subdatabase\n+        if (flags != BTreeFlags::SUBDB) {\n+            throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    uint32_t expected_page_num;\n+\n+    PageHeader(uint32_t page_num) : expected_page_num(page_num) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (expected_page_num != page_num) {\n+            throw std::runtime_error(\"Page number mismatch\");\n+        }\n+        if (level < 1) {\n+            throw std::runtime_error(\"Bad btree level\");\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.emplace_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static void SeekToPage(AutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n \n void BerkeleyRODatabase::Open()\n {\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    AutoFile db_file(file);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    // Expected page number is 0\n+    MetaPage outer_meta(0);\n+    db_file >> outer_meta;\n+    page_size = outer_meta.pagesize;\n+\n+    // Verify the size of the file is a multiple of the page size\n+    db_file.seek(0, SEEK_END);\n+    int64_t size = db_file.tell();\n+    /* BDB doesn't actually error on this\n+    if (size % page_size != 0) {\n+        throw std::runtime_error(\"File size is not a multiple of page size\");\n+    }\n+    */\n+\n+    // Check the last page number\n+    uint32_t expected_last_page = (size / page_size) - 1;\n+    if (outer_meta.last_page != expected_last_page) {\n+        throw std::runtime_error(\"Last page number could not fit in file\");\n+    }\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.root);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != SUBDATABASE_NAME) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 505,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "a02db44419148984d726f95fd66030b9a40fc0bb",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(in commit a02db44419148984d726f95fd66030b9a40fc0bb) readability nit: could also use `std::get` here, as the RHS of the OR conditoin is only executed if the variant holds the right data type:\r\n```suggestion\r\n    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get<DataRecord>(page.records.at(0)).data != SUBDATABASE_NAME) {\r\n```\r\n(same for the two `page.records.at(1)` instances a few lines below)",
      "created_at": "2023-11-05T00:59:23Z",
      "updated_at": "2023-11-05T01:15:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1382488042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382488042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817693",
      "pull_request_review_id": 1728455389,
      "id": 1391817693,
      "node_id": "PRRC_kwDOABII585S9XPd",
      "diff_hunk": "@@ -21,17 +21,41 @@ bool BerkeleyRODatabase::Backup(const std::string& dest) const\n \n bool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\n {\n-    return false;\n+    SerializeData key_data{key.begin(), key.end()};\n+    if (m_database.m_records.count(key_data) == 0) {\n+        return false;\n+    }\n+    auto val = m_database.m_records.at(key_data);",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "b7b90daf46ae840d9ab089ac438f71f7b79dbf5a",
      "in_reply_to_id": 1382487576,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested",
      "created_at": "2023-11-13T23:42:04Z",
      "updated_at": "2023-11-13T23:42:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817724",
      "pull_request_review_id": 1728455442,
      "id": 1391817724,
      "node_id": "PRRC_kwDOABII585S9XP8",
      "diff_hunk": "@@ -1,13 +1,601 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <crypto/common.h> // For ReadBE32\n #include <logging.h>\n+#include <streams.h>\n+#include <uint256.h>\n #include <wallet/migrate.h>\n \n+#include <optional>\n+#include <variant>\n+\n namespace wallet {\n+// Magic bytes in both endianness's\n+constexpr uint32_t BTREE_MAGIC = 0x00053162; // If the file endianness matches our system, we see this magic\n+constexpr uint32_t BTREE_MAGIC_OE = 0x62310500; // If the file endianness is the other one, we will see this magic\n+\n+// Subdatabase name\n+static const std::vector<std::byte> SUBDATABASE_NAME = {std::byte{'m'}, std::byte{'a'}, std::byte{'i'}, std::byte{'n'}};\n+\n+enum class PageType : uint8_t\n+{\n+    INVALID = 0,         // Invalid page type\n+    DUPLICATE = 1,       // Duplicate. Deprecated and no longer used\n+    HASH_UNSORTED = 2,   // Hash pages. Deprecated.\n+    BTREE_INTERNAL = 3,  // BTree internal\n+    RECNO_INTERNAL = 4,  // Recno internal\n+    BTREE_LEAF = 5,      // BTree leaf\n+    RECNO_LEAF = 6,      // Recno leaf\n+    OVERFLOW_DATA = 7,        // Overflow\n+    HASH_META = 8,       // Hash metadata\n+    BTREE_META = 9,      // BTree metadata\n+    QUEUE_META = 10,     // Queue Metadata\n+    QUEUE_DATA = 11,     // Queue Data\n+    DUPLICATE_LEAF = 12, // Off-page duplicate leaf\n+    HASH_SORTED = 13,    // Sorted hash page\n+\n+    PAGETYPE_MAX = 14,\n+};\n+\n+enum class RecordType : uint8_t\n+{\n+    KEYDATA = 1,\n+    DUPLICATE = 2,\n+    OVERFLOW_DATA = 3,\n+    DELETE = 0x80, // Indicate this record is deleted. This is AND'd with the real type.\n+};\n+\n+enum class BTreeFlags : uint32_t\n+{\n+    DUP = 1,         // Duplicates\n+    RECNO = 2,       // Recno tree\n+    RECNUM = 4,      // BTree: Maintain record counts\n+    FIXEDLEN = 8,    // Recno: fixed length records\n+    RENUMBER = 0x10, // Recno: renumber on insert/delete\n+    SUBDB = 0x20,    // Subdatabases\n+    DUPSORT = 0x40,  // Duplicates are sorted\n+    COMPRESS = 0x80, // Compressed\n+};\n+\n+/** Berkeley DB BTree metadata page layout */\n+class MetaPage\n+{\n+public:\n+    uint64_t lsn;             // Log Sequence Number\n+    uint32_t page_num;        // Current page number\n+    uint32_t magic;           // Magic number\n+    uint32_t version;         // Version\n+    uint32_t pagesize;        // Page size\n+    uint8_t encrypt_algo;     // Encryption algorithm\n+    PageType type;            // Page type\n+    uint8_t metaflags;        // Meta-only flags\n+    uint8_t unused1;          // Unused\n+    uint32_t free_list;       // Free list page number\n+    uint32_t last_page;       // Page number of last page in db\n+    uint32_t partitions;      // Number of partitions\n+    uint32_t key_count;       // Cached key count\n+    uint32_t record_count;    // Cached record count\n+    BTreeFlags flags;         // Flags\n+    uint160 uid;              // Unique file ID (20 bytes, fits in uint16)\n+    uint32_t unused2;         // Unused\n+    uint32_t minkey;          // Minimum key\n+    uint32_t re_len;          // Recno: fixed length record length\n+    uint32_t re_pad;          // Recno: fixed length record pad\n+    uint32_t root;            // Root page number\n+    char unused3[368];        // 92 * 4 bytes of unused space\n+    uint32_t crypto_magic;    // Crypto magic number\n+    char trash[12];           // 3 * 4 bytes of trash space\n+    unsigned char iv[20];     // Crypto IV\n+    unsigned char chksum[16]; // Checksum\n+\n+    uint32_t expected_page_num;\n+\n+    MetaPage(uint32_t expected_page_num) : expected_page_num(expected_page_num) {}\n+    MetaPage() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> magic;\n+        s >> version;\n+        s >> pagesize;\n+        s >> encrypt_algo;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        s >> metaflags;\n+        s >> unused1;\n+        s >> free_list;\n+        s >> last_page;\n+        s >> partitions;\n+        s >> key_count;\n+        s >> record_count;\n+\n+        uint32_t uint32_flags;\n+        s >> uint32_flags;\n+        flags = static_cast<BTreeFlags>(uint32_flags);\n+\n+        s >> uid;\n+        s >> unused2;\n+        s >> minkey;\n+        s >> re_len;\n+        s >> re_pad;\n+        s >> root;\n+        s >> unused3;\n+        s >> crypto_magic;\n+        s >> trash;\n+        s >> iv;\n+        s >> chksum;\n+\n+        // Page number must match\n+        if (page_num != expected_page_num) {\n+            throw std::runtime_error(\"Meta page number mismatch\");\n+        }\n+\n+        // Check magic\n+        if (magic != BTREE_MAGIC) {\n+            throw std::runtime_error(\"Not a BDB file\");\n+        }\n+\n+        // Only version 9 is supported\n+        if (version != 9) {\n+            throw std::runtime_error(\"Unsupported BDB data file version number\");\n+        }\n+\n+        // Page size must be 512 <= pagesize <= 64k, and be a power of 2\n+        if (pagesize < 512 || pagesize > 65536 ||  (pagesize & (pagesize - 1)) != 0) {\n+            throw std::runtime_error(\"Bad page size\");\n+        }\n+\n+        // Page type must be the btree type\n+        if (type != PageType::BTREE_META) {\n+            throw std::runtime_error(\"Unexpected page type, should be 9 (BTree Metadata)\");\n+        }\n+\n+        // Only supported meta-flag is subdatabase\n+        if (flags != BTreeFlags::SUBDB) {\n+            throw std::runtime_error(\"Unexpected database flags, should only be 0x20 (subdatabases)\");\n+        }\n+    }\n+};\n+\n+/** General class for records in a BDB BTree database. Contains common fields. */\n+class RecordHeader\n+{\n+public:\n+    uint16_t len;  // Key/data item length\n+    RecordType type;  // Page type and DELETE FLAG\n+\n+    static constexpr size_t SIZE = 3; // The record header is 3 bytes\n+\n+    RecordType GetRealType() const\n+    {\n+        return static_cast<RecordType>(static_cast<uint8_t>(type) & ~static_cast<uint8_t>(RecordType::DELETE));\n+    }\n+\n+    bool IsDeleted() const\n+    {\n+        return static_cast<uint8_t>(type) & static_cast<uint8_t>(RecordType::DELETE);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> len;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<RecordType>(uint8_type);\n+    }\n+};\n+\n+/** Class for data in the record directly */\n+class DataRecord\n+{\n+public:\n+    DataRecord(const RecordHeader& header) : m_header(header) {}\n+    DataRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    std::vector<std::byte> data; // Variable length key/data item\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing internal nodes of the BTree. */\n+class InternalRecord\n+{\n+public:\n+    InternalRecord(const RecordHeader& header) : m_header(header) {}\n+    InternalRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused;                   // Padding, unused\n+    uint32_t page_num;                // Page number of referenced page\n+    uint32_t records;                 // Subtree record count\n+    std::vector<std::byte> data;  // Variable length key item\n+\n+    static constexpr size_t FIXED_SIZE = 9; // Size of fixed data is 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused;\n+        s >> page_num;\n+        s >> records;\n+\n+        data.resize(m_header.len);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** Class for records representing overflow records of the BTree.\n+ * Overflow records point to a page which contains the data in the record.\n+ * Those pages may point to further pages with the rest of the data if it does not fit\n+ * in one page */\n+class OverflowRecord\n+{\n+public:\n+    OverflowRecord(const RecordHeader& header) : m_header(header) {}\n+    OverflowRecord() = delete;\n+\n+    RecordHeader m_header;\n+\n+    uint8_t unused2;      // Padding, unused\n+    uint32_t page_number; // Page number where data begins\n+    uint32_t item_len;    // Total length of item\n+\n+    static constexpr size_t SIZE = 9; // Overflow record is always 9 bytes\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> unused2;\n+        s >> page_number;\n+        s >> item_len;\n+    }\n+};\n+\n+/** A generic data page in the database. Contains fields common to all data pages. */\n+class PageHeader\n+{\n+public:\n+    uint64_t lsn;       // Log Sequence Number\n+    uint32_t page_num;  // Current page number\n+    uint32_t prev_page; // Previous page number\n+    uint32_t next_page; // Next page number\n+    uint16_t entries;   // Number of items on the page\n+    uint16_t hf_offset; // High free byte page offset\n+    uint8_t level;      // Btree page level\n+    PageType type;      // Page type\n+\n+    static constexpr int64_t SIZE = 26; // The header is 26 bytes\n+\n+    uint32_t expected_page_num;\n+\n+    PageHeader(uint32_t page_num) : expected_page_num(page_num) {}\n+    PageHeader() = delete;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> lsn;\n+        s >> page_num;\n+        s >> prev_page;\n+        s >> next_page;\n+        s >> entries;\n+        s >> hf_offset;\n+        s >> level;\n+\n+        uint8_t uint8_type;\n+        s >> uint8_type;\n+        type = static_cast<PageType>(uint8_type);\n+\n+        if (expected_page_num != page_num) {\n+            throw std::runtime_error(\"Page number mismatch\");\n+        }\n+        if (level < 1) {\n+            throw std::runtime_error(\"Bad btree level\");\n+        }\n+    }\n+};\n+\n+/** A page of records in the database */\n+class RecordsPage\n+{\n+public:\n+    RecordsPage(const PageHeader& header) : m_header(header) {}\n+    RecordsPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<std::variant<DataRecord, OverflowRecord>> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            switch (rec_hdr.GetRealType()) {\n+            case RecordType::KEYDATA:\n+            {\n+                DataRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += rec_hdr.len;\n+                break;\n+            }\n+            case RecordType::DUPLICATE:\n+            case RecordType::OVERFLOW_DATA:\n+            {\n+                OverflowRecord record(rec_hdr);\n+                s >> record;\n+                records.emplace_back(record);\n+                to_jump += OverflowRecord::SIZE;\n+                break;\n+            }\n+            default:\n+                throw std::runtime_error(\"Unknown record type in records page\");\n+            }\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+        }\n+    }\n+};\n+\n+/** A page containing overflow data */\n+class OverflowPage\n+{\n+public:\n+    OverflowPage(const PageHeader& header) : m_header(header) {}\n+    OverflowPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    // BDB overloads some page fields to store overflow page data\n+    // hf_offset contains the length of the overflow data stored on this page\n+    // entries contains a reference count for references to this item\n+\n+    // The overflow data itself. Begins immediately following header\n+    std::vector<std::byte> data;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        data.resize(m_header.hf_offset);\n+        s.read(AsWritableBytes(Span(data.data(), data.size())));\n+    }\n+};\n+\n+/** A page of records in the database */\n+class InternalPage\n+{\n+public:\n+    InternalPage(const PageHeader& header) : m_header(header) {}\n+    InternalPage() = delete;\n+\n+    PageHeader m_header;\n+\n+    std::vector<uint16_t> indexes;\n+    std::vector<InternalRecord> records;\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        // Current position within the page\n+        int64_t pos = PageHeader::SIZE;\n+\n+        // Get the items\n+        for (uint32_t i = 0; i < m_header.entries; ++i) {\n+            // Get the index\n+            uint16_t index;\n+            s >> index;\n+            indexes.push_back(index);\n+            pos += sizeof(uint16_t);\n+\n+            // Go to the offset from the index\n+            int64_t to_jump = index - pos;\n+            s.ignore(to_jump);\n+\n+            // Read the record\n+            RecordHeader rec_hdr;\n+            s >> rec_hdr;\n+            to_jump += RecordHeader::SIZE;\n+\n+            if (rec_hdr.GetRealType() != RecordType::KEYDATA) {\n+                throw std::runtime_error(\"Unknown record type in internal page\");\n+            }\n+            InternalRecord record(rec_hdr);\n+            s >> record;\n+            records.emplace_back(record);\n+            to_jump += InternalRecord::FIXED_SIZE + rec_hdr.len;\n+\n+            // Go back to the indexes\n+            s.seek(-to_jump, SEEK_CUR);\n+\n+        }\n+    }\n+};\n+\n+static void SeekToPage(AutoFile& s, uint32_t page_num, uint32_t page_size)\n+{\n+    size_t pos = page_num * page_size;\n+    s.seek(pos, SEEK_SET);\n+}\n \n void BerkeleyRODatabase::Open()\n {\n+    // Open the file\n+    FILE *file = fsbridge::fopen(m_filepath, \"rb\");\n+    AutoFile db_file(file);\n+    if (db_file.IsNull()) {\n+        db_file.fclose();\n+        throw std::runtime_error(\"BerkeleyRODatabase: Failed to open database file\");\n+    }\n+\n+    uint32_t page_size = 4096; // Default page size\n+\n+    // Read the outer metapage\n+    // Expected page number is 0\n+    MetaPage outer_meta(0);\n+    db_file >> outer_meta;\n+    page_size = outer_meta.pagesize;\n+\n+    // Verify the size of the file is a multiple of the page size\n+    db_file.seek(0, SEEK_END);\n+    int64_t size = db_file.tell();\n+    /* BDB doesn't actually error on this\n+    if (size % page_size != 0) {\n+        throw std::runtime_error(\"File size is not a multiple of page size\");\n+    }\n+    */\n+\n+    // Check the last page number\n+    uint32_t expected_last_page = (size / page_size) - 1;\n+    if (outer_meta.last_page != expected_last_page) {\n+        throw std::runtime_error(\"Last page number could not fit in file\");\n+    }\n+\n+    // Read the root page\n+    SeekToPage(db_file, outer_meta.root, page_size);\n+    PageHeader header(outer_meta.root);\n+    db_file >> header;\n+    if (header.type != PageType::BTREE_LEAF) {\n+        throw std::runtime_error(\"Unexpected outer database root page type\");\n+    }\n+    if (header.entries != 2) {\n+        throw std::runtime_error(\"Unexpected number of entries in outer database root page\");\n+    }\n+    RecordsPage page(header);\n+    db_file >> page;\n+\n+    // First record should be the string \"main\"\n+    if (!std::holds_alternative<DataRecord>(page.records.at(0)) || std::get_if<DataRecord>(&page.records.at(0))->data != SUBDATABASE_NAME) {",
      "path": "src/wallet/migrate.cpp",
      "position": null,
      "original_position": 505,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "a02db44419148984d726f95fd66030b9a40fc0bb",
      "in_reply_to_id": 1382488042,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done as suggested",
      "created_at": "2023-11-13T23:42:08Z",
      "updated_at": "2023-11-13T23:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1391817724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391817724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426859564",
      "pull_request_review_id": 1782050983,
      "id": 1426859564,
      "node_id": "PRRC_kwDOABII585VDCYs",
      "diff_hunk": "@@ -1476,6 +1477,11 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // If BERKELEY_RO was the format, then change the format from BERKELEY to BERKELEY_RO",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "f18d35ec78b305dfc49bbf7262fa3685aaa1a899",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment is confusing, aren't we going from `BERKELEY` to `BERKELEY_RO`?",
      "created_at": "2023-12-14T15:15:46Z",
      "updated_at": "2023-12-14T16:54:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1426859564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1426859564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439887042",
      "pull_request_review_id": 1801124655,
      "id": 1439887042,
      "node_id": "PRRC_kwDOABII585V0u7C",
      "diff_hunk": "@@ -1476,6 +1477,11 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    // If BERKELEY_RO was the format, then change the format from BERKELEY to BERKELEY_RO",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "3ec0e37449bdd9fc676d21d8d9b23f438e0610d8",
      "original_commit_id": "f18d35ec78b305dfc49bbf7262fa3685aaa1a899",
      "in_reply_to_id": 1426859564,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed, fixed.",
      "created_at": "2024-01-02T21:36:43Z",
      "updated_at": "2024-01-02T21:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26606#discussion_r1439887042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1439887042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26606"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1480,
      "side": "RIGHT"
    }
  ]
}