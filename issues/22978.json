{
  "type": "issue",
  "issue": {
    "id": 996573480,
    "node_id": "I_kwDOABII5847ZoEo",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/22978",
    "number": 22978,
    "state": "open",
    "state_reason": null,
    "title": "RFC: ArgsManager type and range checking",
    "body": "_Originally posted by @ryanofsky in https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969613_\r\n\r\nThe way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`. The idea is arguments would be registered using explicit C++ types:\r\n\r\n```c++\r\nconst Setting<int> SETTING_myint(\"-myint\", \"description\");\r\nconst Setting<std::string> SETTING_mystring(\"-mystring\", \"description\");\r\nconst Setting<std::vector<std::string>> SETTING_mylist(\"-mylist\", \"description\");\r\nconst Setting<std::optional<std::uint16_t>> SETTING_myopt(\"-myopt\", \"description\");\r\nconst Setting<SettingsValue> SETTING_mylegacy(\"-mylegacy\", \"description\");\r\n\r\nvoid RegisterArgs(ArgsManager& args)\r\n{\r\n    args.Register({SETTING_myint, SETTING_mystring, SETTING_mylist, SETTING_myopt, SETTING_mylegacy});\r\n}\r\n```\r\n\r\nand then they could be retrieved in a type safe way:\r\n\r\n```\r\nargs.Get(SETTING_myint);    // returns int\r\nargs.Get(SETTING_mystring); // returns std::string\r\nargs.Get(SETTING_mylist);   // returns std::vector<std::string>\r\nargs.Get(SETTING_myopt);    // returns std::optional<uint16_t>\r\nargs.GetArg/GetArgs/GetIntArg/GetBoolArg(SETTING_mylegacy); // returns requested type\r\n```\r\n\r\nTo get to this point, this PR cleans up existing misused flags and misnamed functions. PR #16545 adds type validation and runtime semantics without changing the ArgsManager API, and a followup PR can improve the API and update call sites without changing the semantics. (There is a direct correspondence between the `ALLOW_` flags from #16545 and the useful C++ settings types `bool`/`int`/`std::string`/`std::optional`/`std::variant`/`std::vector`)\r\n\r\n---\r\n\r\najtowns https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785\r\n\r\nI think I finally figured out how you can go a little bit further than the above, ending up with something like:\r\n\r\n```c++\r\nstruct NetSettings\r\n{\r\n    int64_t blockreconstructionextratxn;\r\n    int64_t maxorphantx;\r\n    bool capturemessages;\r\n\r\n    template<typename C, typename... Args>\r\n    static inline void F(Args&... args) {\r\n        return C::Do(args...,\r\n            C::Defn( &NetSettings::blockreconstructionextratxn, \"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN ),\r\n            C::Defn( &NetSettings::maxorphantx, \"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_MAX_ORPHAN_TRANSACTIONS ),\r\n            C::Defn( &NetSettings::capturemessages, \"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST, false )\r\n        );\r\n    }\r\n};\r\n\r\nvoid RegisterNetProcessingArgs(ArgsManager& args)\r\n{\r\n    SettingsRegister<NetSettings>::Register(args);\r\n}\r\n\r\nNetSettings GetNetSettings(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<NetSettings>::Get(args);\r\n}\r\n\r\nclass PeerManagerImpl\r\n{\r\nprivate:\r\n    const NetSettings m_settings;\r\n    PeerManagerImpl(..., const ArgsManager& args) : m_settings{GetNetSettings(args)), ... { ... }\r\n    ...\r\n};\r\n```\r\n\r\nThe idea being that this way:\r\n * it can infer the argument type directly from the type of the struct member so that you can't accidentally specify different types between `args.AddArg<int>` and `Get<bool>`\r\n  * that the settings are const at runtime so can be accessed without any additional locks\r\n  * you only have to access the ArgsManager (and do string parsing) at setup time\r\n  * you don't have to make up lots of new names for everything or add too much boilerplate\r\n\r\nBranch built on top of this PR that has the above working at https://github.com/ajtowns/bitcoin/tree/202109-settings_struct",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 8,
    "created_at": "2021-09-15T01:42:09Z",
    "updated_at": "2024-08-02T16:40:26Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 5302933698,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAE8FFjC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5302933698",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-15T01:42:09Z"
    },
    {
      "event": "subscribed",
      "id": 5302933700,
      "node_id": "SE_lADOABII5847ZoEozwAAAAE8FFjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5302933700",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-15T01:42:09Z"
    },
    {
      "event": "commented",
      "id": 927114728,
      "node_id": "IC_kwDOABII5843QqXo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927114728",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-25T12:32:45Z",
      "updated_at": "2021-09-25T12:32:45Z",
      "author_association": "MEMBER",
      "body": "> The way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`.\r\n\r\nConcept ACK.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-927114728",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "referenced",
      "id": 5365526361,
      "node_id": "REFE_lADOABII5847ZoEozwAAAAE_z29Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5365526361",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "825f4a64e612dab62cd0a73b2afe32dac5e0c69f",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/825f4a64e612dab62cd0a73b2afe32dac5e0c69f",
      "created_at": "2021-09-27T13:15:09Z"
    },
    {
      "event": "commented",
      "id": 1004136876,
      "node_id": "IC_kwDOABII58472ems",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004136876",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-03T14:38:50Z",
      "updated_at": "2022-01-03T14:38:50Z",
      "author_association": "MEMBER",
      "body": "Possibly related: https://github.com/bitcoin/bitcoin/issues/23843",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1004136876",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "commented",
      "id": 1260310040,
      "node_id": "IC_kwDOABII585LHs4Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260310040",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-28T02:33:47Z",
      "updated_at": "2022-09-28T02:33:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Had a go at revisiting this with #26177 in mind. Here's a branch, https://github.com/ajtowns/bitcoin/commits/202209-chainstate-argsman-types and here's [an example](https://github.com/ajtowns/bitcoin/blob/08ebff304747ff9386cd4c6048fc4fc9a9301877/src/chainparams.cpp#L94) of what it might look like:\r\n\r\n```c++\r\nclass SigNetOptionsRegistration\r\n{\r\npublic:\r\n    using T = CChainParams::SigNetOptions;\r\n\r\n    static inline void GetChallenge(std::vector<uint8_t>& challenge, const std::string& hex)\r\n    {\r\n        challenge = ParseHex(hex);\r\n    }\r\n\r\n    template<typename C, typename Op>\r\n    static inline void Register(Op& op)\r\n    {\r\n        return C::Do(op,\r\n            C::Defn(&T::challenge, GetChallenge, \"-signetchallenge\", \"\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS),\r\n            C::Defn(&T::seeds, \"-signetseednode\", \"\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS)\r\n        );\r\n    }\r\n};\r\n...\r\nvoid RegisterChainParamsOptions(ArgsManager& args)\r\n{\r\n    SettingsRegister<SigNetOptionsRegistration>::Register(args);\r\n    SettingsRegister<RegTestOptionsRegistration>::Register(args);\r\n}\r\n\r\nCChainParams::SigNetOptions GetSigNetOptions(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<SigNetOptionsRegistration>::Get(args);\r\n}\r\n```\r\n\r\nIdea is you make a container for the options (`T = SigNetOptions`), provide a `Register` function that associates the options with the field in that structure (and a conversion function like `GetChallenge` if needed), then use `SettingsRegister<>::Register(args)` to register the args, then parse them, then get the results with `SettingsRegister<>::Get(args)`, and you're done.\r\n",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1260310040",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "commented",
      "id": 1689609240,
      "node_id": "IC_kwDOABII585ktWQY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1689609240",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-23T09:27:16Z",
      "updated_at": "2023-08-23T09:27:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Had a go at revisiting this with #26177 in mind. Here's a branch, https://github.com/ajtowns/bitcoin/commits/202209-chainstate-argsman-types and here's [an example](https://github.com/ajtowns/bitcoin/blob/08ebff304747ff9386cd4c6048fc4fc9a9301877/src/chainparams.cpp#L94) of what it might look like:\r\n\r\n@ryanofsky I've updated this (and switched it to the `UpdateFooOpts(args, options)` style instead of `options = GetFooOpts(args)`) in https://github.com/ajtowns/bitcoin/pull/8 if you (or anyone else) are interested in bikeshedding it towards a concept/approach ack?\r\n",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1689609240",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "mentioned",
      "id": 10167772793,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAJeC-Z5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10167772793",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-23T09:27:17Z"
    },
    {
      "event": "subscribed",
      "id": 10167772804,
      "node_id": "SE_lADOABII5847ZoEozwAAAAJeC-aE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10167772804",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-23T09:27:17Z"
    },
    {
      "event": "commented",
      "id": 1692058109,
      "node_id": "IC_kwDOABII585k2sH9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692058109",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-24T16:45:21Z",
      "updated_at": "2023-08-24T16:45:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @ryanofsky I've updated this (and switched it to the `UpdateFooOpts(args, options)` style instead of `options = GetFooOpts(args)`) in [ajtowns#8](https://github.com/ajtowns/bitcoin/pull/8) if you (or anyone else) are interested in bikeshedding it towards a concept/approach ack?\r\n\r\nLooks nice. It seems similar to your NetSettings example above, https://github.com/bitcoin/bitcoin/issues/22978#issue-996573480, but much better now because it now works on plain options structs like DBOptions, CoinsViewOptions, wallet::DatabaseOptions, and no longer requires the structs to contain argument parsing code (if I understand the commented out example from 7cb67a694e82c52b71ec86d23cb574465f9aad22 correctly). \r\n\r\nI'm still not sure I like the idea of encouraging all options to be stored in separate structs. I think that idea makes most sense for options that are used once at initialization time, since they can be parsed into the `ArgsManager::m_settings` map, then copied into the struct, and we never have to care about what happens after that. But if we added an RPC or GUI interface for changing settings at runtime and validating them and applying them and storing them in `settings.json` then it would be probably be simpler without the structs, because `ArgsManager::m_settings` would be the canonical place where settings are stored, and there wouldn't be external structs that need to be updated.\r\n\r\nIn any case, I think your idea makes an improvement over the status quo by adding compile time checks. And it could probably be generalized latter to support an API more similar to the description https://github.com/bitcoin/bitcoin/issues/22978#issue-996573480 where settings can be retrieved in a type-safe way agnostic to how they are stored.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1692058109",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "mentioned",
      "id": 10183837493,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAJfAQc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10183837493",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-24T16:45:22Z"
    },
    {
      "event": "subscribed",
      "id": 10183837503,
      "node_id": "SE_lADOABII5847ZoEozwAAAAJfAQc_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10183837503",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-24T16:45:22Z"
    },
    {
      "event": "commented",
      "id": 1692760425,
      "node_id": "IC_kwDOABII585k5Xlp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692760425",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-25T05:00:52Z",
      "updated_at": "2023-08-25T05:00:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> (if I understand the commented out example from https://github.com/bitcoin/bitcoin/commit/7cb67a694e82c52b71ec86d23cb574465f9aad22 correctly).\r\n\r\nI think you do; the `-fastprune` option in https://github.com/ajtowns/bitcoin/pull/8/commits/dddfbead90fc7b121b3a6870d546e9881eb5278a is a non-commented-out example where parsing isn't needed, if that helps?\r\n\r\n> I'm still not sure I like the idea of encouraging all options to be stored in separate structs.\r\n\r\nI'm thinking of that more as \"we want our code to be modular, and to avoid globals, so we should have our options in structs (to avoid globals), and there should be separate ones per module (to be, well, modular)\". ie, I'm not really thinking about it as \"where they're stored\" but more as syntax to keep things tidier?\r\n\r\n> But if we added an RPC or GUI interface for changing settings at runtime and validating them and applying them and storing them in `settings.json` then it would be probably be simpler without the structs, because `ArgsManager::m_settings` would be the canonical place where settings are stored, and there wouldn't be external structs that need to be updated.\r\n\r\nI think external structs with \"native\" types are desirable where we either care about performance (no need to lock argsmanager and do string parsing all the time) or want to have the code be independent of our argument parsing (ie libkernel, but maybe also unit/fuzz tests?). For cases like that, even if we want to be able to update the options at runtime, just calling `ReadFooArgs(argsman, fooman.options)` when argsman has been updated seems feasible?\r\n\r\nFor cases where you can talk to `argsman` directly, then I guess the idea would be to replace `bool b = argsman.GetBool(\"-disablewallet\")` with something like `bool b = WalletSettings(argsman).disablewallet.Get()`, where `WalletSettings` is some magic to let us define args per-module, which gives something that has members named after the option names, that then have typesafe getter/setters, with the setter updating settings.json...\r\n\r\nMaybe something like:\r\n\r\n```c++\r\nclass Magic { public: ArgsManager& argsman; ... };\r\n\r\ntemplate<typename T>\r\nclass MagicOption {\r\nprivate:\r\n    ArgsManager& argsman;\r\n    const std::string name;\r\npublic:\r\n    MagicOption(ArgsManager& argsman, std::string name, std::string desc) : argsman{argsman}, name{name} {\r\n        argsman.AddTypedArg<T>(name, desc);\r\n    }\r\n    T Get() { return argsman.Get<T>(name); }\r\n    void Set(T value) { argsman.Set<T>(name, value); }\r\n};\r\n\r\nclass WalletArgs : public Magic\r\n{\r\n    explicit WalletArgsMan(ArgsManager& argsman) : Magic{argsman} { }\r\n    MagicOption<bool> disablewallet{argsman, \"-disablewallet\", \"Do not load the wal...\"}; // maybe add the settings.json key\r\n};\r\n\r\nWalletArgs walletargs{argsman}; // calls `AddArg<bool>` via `MagicOption` initialisation\r\n\r\nargsman.ParseParameters(...); // read the config file so that accessing the options is meaningful\r\n\r\nif (walletargs.disablewallet.Get()) { ... }\r\nwalletargs.disablewallet.Set(false);\r\n```\r\n\r\ncould be made to work, eg?\r\n\r\n(In this scenario maybe you also want to be able to register callbacks so that `Set(...)` triggered by RPC causes UI elements to be updated?)\r\n\r\nSo to me that looks like a mostly independent problem that we could/should address independently or at least afterwards?\r\n\r\nThough, that said, having two different, complicated, ways of doing essentially the same things does annoy me...\r\n\r\nAnother approach to think about could be to go all-in on storing the settings natively, ie have just one place to store the settings data during runtime, but change that to being `bool WalletOptions::disablewallet;` not `argsman.GetBool(\"-disablewallet\")`. In that case we'd have functions like `UpdateWalletOptions(walletopts, argsman)` to read args, but could also have `SaveWalletOptions(walletopts, argsman)` to update settings.json. Then perhaps you'd just register `SaveWalletOptions` as a callback, and call those callbacks as part of `WriteSettingsFile()` ? Once you have callbacks, perhaps you could also have a `UpdateRuntimeWalletOptions(walletopts, argsman)` callback that allows you to reload `settings.json` at runtime.\r\n\r\n(The settings.json api confuses me -- we read/write it as a blob in ArgsManager, but the actual logic to get at values is in `node/interfaces.cpp`, and afaics there's no registration/documentation of what things can go in settings.json, and everything's done via `UniValue` so you have to manually type check when you access anyway)\r\n\r\n> In any case, I think your idea makes an improvement over the status quo by adding compile time checks.\r\n\r\nCool. I'm going to add some bikesheddy thoughts to the PR in a moment, if you have any to add feel free. I'll keep waiting on a 'concept ack' or similar there before opening a PR here though.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1692760425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "commented",
      "id": 2259327340,
      "node_id": "IC_kwDOABII586Gqpls",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2259327340",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:45:37Z",
      "updated_at": "2024-07-30T22:45:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "FWIW:\r\n@ryanofsky's version is what comes naturally to me, with some small adjustments to default to file-local `static` storage unless accessed externally, and added default value.\r\n```C++\r\nstatic const Setting<int> SETTING_myint(\"-myint\", DEFAULT_FOO_VALUE, \"description\");\r\n```\r\nThat said, @ajtowns `struct`-approach has some very strong points, avoiding globals and performing grouping and exposure of existing options-structs in a \"language-native\" way. Can see myself preferring it if the API ends up clean enough for 95% of use-cases.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2259327340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    },
    {
      "event": "mentioned",
      "id": 13702104190,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAMwtYR-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13702104190",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:45:38Z"
    },
    {
      "event": "subscribed",
      "id": 13702104200,
      "node_id": "SE_lADOABII5847ZoEozwAAAAMwtYSI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13702104200",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:45:39Z"
    },
    {
      "event": "mentioned",
      "id": 13702104209,
      "node_id": "MEE_lADOABII5847ZoEozwAAAAMwtYSR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13702104209",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:45:39Z"
    },
    {
      "event": "subscribed",
      "id": 13702104215,
      "node_id": "SE_lADOABII5847ZoEozwAAAAMwtYSX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13702104215",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:45:39Z"
    },
    {
      "event": "commented",
      "id": 2265757710,
      "node_id": "IC_kwDOABII586HDLgO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2265757710",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-02T16:32:55Z",
      "updated_at": "2024-08-02T16:40:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Posting to stop thinking about this for now, but I started working on a change that lets you declare type-safe settings without global constants, in a way that should be compatible with options structs and standalone setting retrieval.\r\n\r\nThis idea is to declare settings types like:\r\n\r\n```c++\r\nusing UpnpSetting = Setting<\r\n    \"-upnp\", \"Use UPnP to map the listening port (default: %u)\",\r\n    bool, OptionsCategory::CONNECTION>::Default<DEFAULT_UPNP>;\r\n```\r\n\r\nWhich you can register with:\r\n\r\n```c++\r\nArgsManager args;\r\nUpnpSetting::Register(args);\r\n```\r\n\r\nAnd retrieve with:\r\n\r\n```c++\r\nbool upnp_enabled{UpnpSetting::Get(args)};\r\n```\r\n\r\nThis example just declares a simple `bool` setting with a constant default value, but the implementation understands bool, integer, and string types and `std::optional`, `std::vector`, and `std::variant` compositions of these types.\r\n\r\nSo for example, instead of `bool` in the example above, you could use:\r\n\r\n- `uint16_t` for a range-checked integer setting\r\n- `std::string_view` or `std::string` for a string setting\r\n- `std::vector<std::string_view>>` and `std::vector<std::int>` for string and integer settings that accept multiple values\r\n- `std::optional<std::string_view>`, `std::optional<int64_t>` and `std::optional<bool>` for settings that don't have simple default values, and you want to distinguish unset values from ones that were explicitly specified\r\n- `std::optional<std::vector<std::string_view>` for list settings like `-listen` where you want to distinguish an unset setting (represented as nullopt) from a negated `-nolisten` setting (represented as an empty list)\r\n- `std::variant<Unset, T>` for an equivalent to `std::optional<T>`.\r\n- `std::variant<Unset, Disabled, Enabled>` for an equivalent to `std::optional<bool>`.\r\n- `std::variant<bool, int>` for a setting like `-rescan` that performs some action and accepts an optional number value. (`-norescan` sets false, `-rescan` sets true, and `-rescan=<height>` sets the height.)\r\n- `std::variant<bool, std::string_view>` for a setting like `-ipcbind` that performs some action and accepts an optional string value (`-noipcbind` sets false, `-ipcbind` sets true, `-ipcbind=<address>` sets the address.)\r\n- `std::variant<Disabled, T>` might be useful for special cases or backwards compatibility to detect negated values and treat them differently from 0 and \"\". For example if you had a `-bwlimit` setting and wanted to treat `-nobwlimit` as \"use unlimited bandwidth\" and `-bwlimit=0` as \"use no bandwidth\" using a variant with a Disabled member allows that.\r\n\r\nA version of this is implemented in 1e1c2b2054f736686058fe9f62091c3fc130e43f, but it is lacking tests and documentation. The implementation doesn't change ArgsManager code, and just wraps it, but it could be used to simplify ArgManager later if code is ported to use the interface.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2265757710",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22978"
    }
  ]
}