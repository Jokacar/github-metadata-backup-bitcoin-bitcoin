{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765",
    "id": 2046331611,
    "node_id": "PR_kwDOABII5855-Irb",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30765",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30765.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30765.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30765",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30765/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e6c02b9f2544032481743b4f8d3148622ccc73dd",
    "number": 30765,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: Allow `CScript`'s `operator<<` to accept spans, not just vectors",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split out of https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722326803.\r\n\r\nExtracted existing serialization to append size & data in separate private methods to clarify that it does more than just a simple data insertion.\r\n\r\nThis enables using `CScript() << \"...\"_hex_u8` (followed by `CScript() << \"...\"_hex`), skipping vector conversion before serializing to the prevector in CScript.\r\n\r\nOriginally I've added separate `std::vector` and  `std::array` overloads, but based on the comments it seems that `std::span` should also be safe here.\r\n\r\nI've done a partial `std::byte` support, eventually we might want to remove the `uint8_t` overload, but that will be a bigger change (usage changes, renames (e.g. getvch), iterator adjustments (`T* ptr{};`), byte manipulations (`if (result.back() & 0x80)`)), so it should likely be done in a separate PR instead.\r\n\r\nThere were also discussion on eliminating the operators here completely to obviate when we're serializing fixed-size collections as raw bytes, and when we're prefixing them with their size - should also be done in a separate PR.\r\n\r\nNote that after this change, it would technically be possible to remove `_hex_v_u8`. Let me know if you think that's a good idea.\r\n\r\nThe PR is still in a draft phase since there isn't an overall agreement about the exact direction.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-08-30T12:48:02Z",
    "updated_at": "2024-09-09T17:21:54Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "b03171d4d0c4886de76f1312591dfecd74e89e71",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "l0rinc:l0rinc/CScript-vector-and-array",
      "ref": "l0rinc/CScript-vector-and-array",
      "sha": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 674169038,
        "node_id": "R_kgDOKC8Azg",
        "name": "bitcoin",
        "full_name": "l0rinc/bitcoin",
        "owner": {
          "login": "l0rinc",
          "id": 1841944,
          "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/l0rinc",
          "html_url": "https://github.com/l0rinc",
          "followers_url": "https://api.github.com/users/l0rinc/followers",
          "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
          "organizations_url": "https://api.github.com/users/l0rinc/orgs",
          "repos_url": "https://api.github.com/users/l0rinc/repos",
          "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/l0rinc/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/l0rinc/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/l0rinc/bitcoin",
        "archive_url": "https://api.github.com/repos/l0rinc/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/l0rinc/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/l0rinc/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/l0rinc/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/l0rinc/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/l0rinc/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/l0rinc/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/l0rinc/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/l0rinc/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/l0rinc/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/l0rinc/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/l0rinc/bitcoin/events",
        "forks_url": "https://api.github.com/repos/l0rinc/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/l0rinc/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/l0rinc/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/l0rinc/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/l0rinc/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/l0rinc/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/l0rinc/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/l0rinc/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/l0rinc/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/l0rinc/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/l0rinc/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/l0rinc/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/l0rinc/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:l0rinc/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/l0rinc/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/l0rinc/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/l0rinc/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/l0rinc/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/l0rinc/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/l0rinc/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/l0rinc/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/l0rinc/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/l0rinc/bitcoin/hooks",
        "svn_url": "https://github.com/l0rinc/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 227250,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-09T14:06:34Z",
        "created_at": "2023-08-03T09:49:12Z",
        "updated_at": "2024-07-18T12:40:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ba84c2774dd92716067ae29b632f5abcbdf9e7cb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36156,
        "stargazers_count": 78300,
        "watchers_count": 78300,
        "size": 268120,
        "default_branch": "master",
        "open_issues_count": 665,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-09-09T17:02:57Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-09-09T17:03:04Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 110,
    "deletions": 63,
    "changed_files": 10,
    "commits": 3,
    "review_comments": 35,
    "comments": 2
  },
  "events": [
    {
      "event": "commented",
      "id": 2321140325,
      "node_id": "IC_kwDOABII586KWcpl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2321140325",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T12:48:06Z",
      "updated_at": "2024-09-05T07:46:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30765).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#issuecomment-2321140325",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30765"
    },
    {
      "event": "labeled",
      "id": 14080714236,
      "node_id": "LE_lADOABII586U12NgzwAAAANHRqX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14080714236",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T12:48:08Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14091882803,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANH8REz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14091882803",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-31T14:20:21Z"
    },
    {
      "event": "ready_for_review",
      "id": 14091885807,
      "node_id": "RFRE_lADOABII586U12NgzwAAAANH8Rzv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14091885807",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-31T14:21:45Z"
    },
    {
      "event": "reviewed",
      "id": 2275188408,
      "node_id": "PRR_kwDOABII586HnJ64",
      "url": null,
      "actor": null,
      "commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#pullrequestreview-2275188408",
      "submitted_at": "2024-09-02T09:51:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
    },
    {
      "event": "convert_to_draft",
      "id": 14112552353,
      "node_id": "CTDE_lADOABII586U12NgzwAAAANJLHWh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14112552353",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T09:57:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14160415123,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMBsmT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14160415123",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T10:58:23Z"
    },
    {
      "event": "renamed",
      "id": 14160422679,
      "node_id": "RTE_lADOABII586U12NgzwAAAANMBucX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14160422679",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T10:59:10Z",
      "rename": {
        "from": "refactor: Extend CScript with `operator<<` for `std::array`",
        "to": "refactor: Generalize `CScript`'s `std::vector` push to `std::span` to accept `std::array`, too"
      }
    },
    {
      "event": "renamed",
      "id": 14160769844,
      "node_id": "RTE_lADOABII586U12NgzwAAAANMDDM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14160769844",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T11:32:36Z",
      "rename": {
        "from": "refactor: Generalize `CScript`'s `std::vector` push to `std::span` to accept `std::array`, too",
        "to": "refactor: Generalize `CScript`'s `std::vector` push to accept `std::array`, too"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14163872092,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMO4lc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14163872092",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T15:30:45Z"
    },
    {
      "event": "labeled",
      "id": 14163873059,
      "node_id": "LE_lADOABII586U12NgzwAAAANMO40j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14163873059",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T15:30:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2334309196,
      "node_id": "IC_kwDOABII586LIrtM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2334309196",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T15:30:50Z",
      "updated_at": "2024-09-06T15:30:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29778092690</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#issuecomment-2334309196",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30765"
    },
    {
      "event": "reviewed",
      "id": 2286606223,
      "node_id": "PRR_kwDOABII586ISteP",
      "url": null,
      "actor": null,
      "commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#pullrequestreview-2286606223",
      "submitted_at": "2024-09-06T15:44:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14164395691,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMQ4ar",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14164395691",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-06T16:05:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14169233258,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMjVdq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14169233258",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T12:18:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14169233686,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMjVkW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14169233686",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T12:18:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14172543397,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANMv9ml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14172543397",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T20:03:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14173704787,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANM0ZJT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14173704787",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-08T09:32:44Z"
    },
    {
      "event": "renamed",
      "id": 14173705357,
      "node_id": "RTE_lADOABII586U12NgzwAAAANM0ZSN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14173705357",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-08T09:33:04Z",
      "rename": {
        "from": "refactor: Generalize `CScript`'s `std::vector` push to accept `std::array`, too",
        "to": "refactor: Generalize `CScript`'s `std::vector` push to accept `std::array`"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14173707821,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANM0Z4t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14173707821",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-08T09:34:26Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM0YzEwMmRlNzMzNmU2YzBjYzJlNTE4N2ZlZWRmNDM3ZWJhZGI1NjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4c102de7336e6c0cc2e5187feedf437ebadb565",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c102de7336e6c0cc2e5187feedf437ebadb565",
      "tree": {
        "sha": "0b873606234e51118a85fa4e15409be076eec9b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b873606234e51118a85fa4e15409be076eec9b1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7a4e11db8722c85175bcc4d9f73a713e9e61513",
          "sha": "a7a4e11db8722c85175bcc4d9f73a713e9e61513",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a4e11db8722c85175bcc4d9f73a713e9e61513"
        }
      ],
      "message": "refactor: Make code more tolerant of constexpr std::arrays",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-09T09:34:01Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-09-07T20:01:34Z"
      },
      "sha": "c4c102de7336e6c0cc2e5187feedf437ebadb565"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQwMjEwMWUyMGJjMjA4NmU5MjM3YzJlOGE1MTQ3MWFjOTcwNjllMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/402101e20bc2086e9237c2e8a51471ac97069e01",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/402101e20bc2086e9237c2e8a51471ac97069e01",
      "tree": {
        "sha": "2a16649ac745f520e3009092953d596592445812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a16649ac745f520e3009092953d596592445812"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4c102de7336e6c0cc2e5187feedf437ebadb565",
          "sha": "c4c102de7336e6c0cc2e5187feedf437ebadb565",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c102de7336e6c0cc2e5187feedf437ebadb565"
        }
      ],
      "message": "Generalize `std::vector` push to `std::span` to accept `std::array`\n\nExtracted existing serialization to append size & data in separate private methods to clarify that it does more than just a simple data insertion.\n\nThis enables using `CScript() << \"...\"_hex_u8`, skipping vector conversion before serializing to the prevector in CScript.\n\nNote that `uint8_t` was used in the extracted methods instead of `unsigned char` for consistency.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-09T09:34:01Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-08-30T12:45:48Z"
      },
      "sha": "402101e20bc2086e9237c2e8a51471ac97069e01"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14180252727,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANNNXw3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14180252727",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T09:37:16Z"
    },
    {
      "event": "ready_for_review",
      "id": 14180293446,
      "node_id": "RFRE_lADOABII586U12NgzwAAAANNNhtG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14180293446",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T09:40:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14180338808,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANNNsx4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14180338808",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T09:43:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2YzAyYjlmMjU0NDAzMjQ4MTc0M2I0ZjhkMzE0ODYyMmNjYzczZGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "tree": {
        "sha": "ad6fb53f6e9643c77756c9a71382ffe7b131b72d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6fb53f6e9643c77756c9a71382ffe7b131b72d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/402101e20bc2086e9237c2e8a51471ac97069e01",
          "sha": "402101e20bc2086e9237c2e8a51471ac97069e01",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/402101e20bc2086e9237c2e8a51471ac97069e01"
        }
      ],
      "message": "Add std::byte span overload to CScript\n\nAdded `BytesToUInt8s` and `UInt8sToBytes` span conversion helpers to simplify const conversions in the future\n\nCo-authored-by: maflcko <6399679+maflcko@users.noreply.github.com>\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-09T09:50:45Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-09-06T15:27:53Z"
      },
      "sha": "e6c02b9f2544032481743b4f8d3148622ccc73dd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14180446970,
      "node_id": "HRFPE_lADOABII586U12NgzwAAAANNOHL6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14180446970",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T09:50:53Z"
    },
    {
      "event": "unlabeled",
      "id": 14182482159,
      "node_id": "UNLE_lADOABII586U12NgzwAAAANNV4Dv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14182482159",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T12:23:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2289823867,
      "node_id": "PRR_kwDOABII586Ie_B7",
      "url": null,
      "actor": null,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review e6c02b9f2544032481743b4f8d3148622ccc73dd\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#pullrequestreview-2289823867",
      "submitted_at": "2024-09-09T14:24:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
    },
    {
      "event": "reviewed",
      "id": 2290235809,
      "node_id": "PRR_kwDOABII586Igjmh",
      "url": null,
      "actor": null,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I think this PR has been a good exploration of ways to let CScript support std::span and std::byte but current approach is a more complicated than it needs to be. I think it's be worth considering a more minimal, focused change:\r\n\r\n```diff\r\n--- a/src/script/script.h\r\n+++ b/src/script/script.h\r\n@@ -463,7 +463,7 @@ public:\r\n         return *this;\r\n     }\r\n \r\n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\r\n+    CScript& operator<<(std::span<const std::byte> b) LIFETIMEBOUND\r\n     {\r\n         if (b.size() < OP_PUSHDATA1)\r\n         {\r\n@@ -488,10 +488,17 @@ public:\r\n             WriteLE32(_data, b.size());\r\n             insert(end(), _data, _data + sizeof(_data));\r\n         }\r\n-        insert(end(), b.begin(), b.end());\r\n+        const value_type* _data{reinterpret_cast<const value_type*>(b.data())};\r\n+        insert(end(), _data, _data + b.size());\r\n         return *this;\r\n     }\r\n \r\n+    // For backwards compatibility, please prefer std::byte over uint8_t in new code\r\n+    CScript& operator<<(std::span<const uint8_t> b) LIFETIMEBOUND\r\n+    {\r\n+        return *this << std::as_bytes(b);\r\n+    }\r\n+\r\n     bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const\r\n     {\r\n         return GetScriptOp(pc, end(), opcodeRet, &vchRet);\r\n```\r\n\r\nAfter this, replacing `_hex_v_u8` suffixes with `_hex` suffixes it seems to work for me and provide most of the benefits of this change.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#pullrequestreview-2290235809",
      "submitted_at": "2024-09-09T15:27:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
    },
    {
      "event": "renamed",
      "id": 14186760052,
      "node_id": "RTE_lADOABII586U12NgzwAAAANNmMd0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14186760052",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T17:14:28Z",
      "rename": {
        "from": "refactor: Generalize `CScript`'s `std::vector` push to accept `std::array`",
        "to": "refactor: Allow `CScript`'s `operator<<` to accept spans, not just vectors"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 14186841153,
      "node_id": "CTDE_lADOABII586U12NgzwAAAANNmgRB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14186841153",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-09T17:21:54Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740636806",
      "pull_request_review_id": 2275188408,
      "id": 1740636806,
      "node_id": "PRRC_kwDOABII585nwAKG",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure about this. If someone in the future has an `std::array<std::byte, N>` and want to serialize it, will this be touched again? What if someone wants to serialize the first `N/2` bytes only? Will they need to create a copy? Though, avoiding the vector conversion was the whole point of this pull request, so it just seems like right now this is adding more code while leaving the underlying issue.\r\n\r\nMaybe this could be a span or a range?\r\n\r\nIn any case, the documentation needs to be clear that this is a pushdata and not a plain insert of the raw bytes into the underlying CScriptBase byte blob.\r\n\r\n",
      "created_at": "2024-09-02T09:51:17Z",
      "updated_at": "2024-09-02T09:51:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1740636806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740636806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741014685",
      "pull_request_review_id": 2275812757,
      "id": 1741014685,
      "node_id": "PRRC_kwDOABII585nxcad",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> will this be touched again? \r\n\r\nNot sure, isn't that the case with vector as well?\r\n\r\n> so it just seems like right now this is adding more code while leaving the underlying issue.\r\n\r\nCan you please detail why you think this is the case? `_hex_v_u8` was mostly eliminated and the production code is basically the same (+3 lines for the other overload).\r\n\r\n> Maybe this could be a span or a range?\r\n\r\nI understood we wanted to avoid doing that in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490",
      "created_at": "2024-09-02T14:40:43Z",
      "updated_at": "2024-09-02T14:40:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741014685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741014685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741026359",
      "pull_request_review_id": 2275833161,
      "id": 1741026359,
      "node_id": "PRRC_kwDOABII585nxfQ3",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > will this be touched again?\r\n> \r\n> Not sure, isn't that the case with vector as well?\r\n\r\nYes, so that is another reason that either the code should be either left as-is, (to avoid changing it now, and then again in the future), or to just change it once.\r\n\r\n\r\n\r\n> > so it just seems like right now this is adding more code while leaving the underlying issue.\r\n> \r\n> Can you please detail why you think this is the case?\r\n\r\nThe goal of this change is to avoid a copy/conversion, however the change only fixes it for one very specific instance, leaving the problem otherwise unfixed.\r\n\r\n\r\n\r\n> > Maybe this could be a span or a range?\r\n> \r\n> I understood we wanted to avoid doing that in [#30377 (comment)](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490)\r\n\r\nArray serialization is equal to span serialization, so if array-serialization would be fine to diverge on, then why wouldn't span/range serialization?",
      "created_at": "2024-09-02T14:50:58Z",
      "updated_at": "2024-09-02T14:50:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741026359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741026359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741058744",
      "pull_request_review_id": 2275881720,
      "id": 1741058744,
      "node_id": "PRRC_kwDOABII585nxnK4",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> however the change only fixes it for one very specific instance\r\n\r\nSeems I missed some other cases, which other ones should we include here?\r\n\r\n> leaving the problem otherwise unfixed\r\n\r\nIt does? This is what we've mentioned throughout the original PR by @hodlinator, @ryanofsky and yourself. I don't mind changing to span (it's what I suggested originally), if you think that would solve it in a cleaner way - but I need to understand the problem better since I though this fully solved our concerns regarding script data copying of hexadecimal values.",
      "created_at": "2024-09-02T15:17:49Z",
      "updated_at": "2024-09-02T15:17:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741058744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741058744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741073162",
      "pull_request_review_id": 2275904067,
      "id": 1741073162,
      "node_id": "PRRC_kwDOABII585nxqsK",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should just take a span, not an array or a vector because the container type should not be relevant.\r\n\r\nThe only reason to not use span here would be to try to make the cscript << operator act like the serialization << operator and treat vectors differently from spans and arrays. This behavior makes some sense for serialization, but doesn't make sense for pushing cscript data, so I don't think should be a concern.\r\n\r\n(For serialization we use Span{} casts as a way of telling serialization API that data is fixed-length, not variable-length so should be formatted without a size prefix. But this is a dubious and confusing use of span. Seems like it would be better to have `FixedSize` and `VarSize` serialization formatters that would make code clearer and allow serializing variable size containers without size prefixes, and fixed size containers with them, since there are use-cases for both. Adding span or vector conversions just to get data serialized in the right format is unnecessarily confusing, and in some cases inefficient.)",
      "created_at": "2024-09-02T15:32:47Z",
      "updated_at": "2024-09-02T15:32:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741073162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741073162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741078658",
      "pull_request_review_id": 2275912951,
      "id": 1741078658,
      "node_id": "PRRC_kwDOABII585nxsCC",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to drop operator<< from CScript, and instead have explicit \"Append\" and \"Push\" member functions (that take spans), and do the expected thing?\n\n(I have not followed this PR in detail, feel free to ignore if I'm missing things)",
      "created_at": "2024-09-02T15:38:38Z",
      "updated_at": "2024-09-02T15:38:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741078658",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741078658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741079145",
      "pull_request_review_id": 2275913697,
      "id": 1741079145,
      "node_id": "PRRC_kwDOABII585nxsJp",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would also be great if this could be more clearly documented as pushing data as marco suggests, and if it could use std::byte instead of char. If using std::byte is not easily possible, maybe it could use `BasicByte` so the PR can change `_hex_v_u8` to `_hex` instead of `_hex_u8`",
      "created_at": "2024-09-02T15:39:07Z",
      "updated_at": "2024-09-02T15:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741079145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741079145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741115644",
      "pull_request_review_id": 2275968018,
      "id": 1741115644,
      "node_id": "PRRC_kwDOABII585nx1D8",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll investigate these tomorrow, thanks for the comments!",
      "created_at": "2024-09-02T16:28:04Z",
      "updated_at": "2024-09-02T16:28:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741115644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741115644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741129350",
      "pull_request_review_id": 2275989012,
      "id": 1741129350,
      "node_id": "PRRC_kwDOABII585nx4aG",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Would it make sense to drop operator<< from CScript, and instead have explicit \"Append\" and \"Push\" member functions (that take spans), and do the expected thing?\r\n\r\nI think it makes sense, especially because cscripts are serializable, so it is confusing that `x << script` does an entirely different operation than `script << x`. But making this change would expand the scope of the PR beyond what it is currently doing which is just making cscript work a little better with hex literals from #30377.\r\n\r\nOn the idea of Append and Push methods, I think an Append method is not actually necessary, but may be useful. And if we think it is a good idea to disambiguate the CScript `<<`  operator, it probably also makes sense to disambiguate the CScript constructor, since it currently has one overload to add bytes to the script and other overloads to add opcodes and data. Probably a better interface would provide separate functions with descriptive names returning CScript objects, instead of providing multiple CScript constructors where you can't know what a constructor may be doing without knowing the type of the argument.\r\n\r\nBut I do think it would be nice if this PR just added support for std::span and std::byte without necessarily making bigger changes.\r\n",
      "created_at": "2024-09-02T16:53:55Z",
      "updated_at": "2024-09-02T16:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741129350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741129350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741676894",
      "pull_request_review_id": 2276801802,
      "id": 1741676894,
      "node_id": "PRRC_kwDOABII585nz-Fe",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having an elegant way of expressing scripts in code is nice. How about (omitted some hex digits):\r\n```C++\r\nscript << \"046711d5f\"_sized_hex << OP_CHECKSIG;\r\n```\r\n`_sized_hex` could possibly create something like a `SizePrefixed(std::array<std::byte>)` object and `CScript` could have a `<<` operator taking such objects and prepending the size.\r\n\r\n> But I do think it would be nice if this PR just added support for std::span and std::byte without necessarily making bigger changes.\r\n\r\nThat was what I was originally doing as part of #30377, I dropped it so that this PR here could let us work toward some final form of this aspect. So I would rather see a bigger step being made.",
      "created_at": "2024-09-03T08:46:52Z",
      "updated_at": "2024-09-03T08:46:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741676894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741676894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746943429",
      "pull_request_review_id": 2285986885,
      "id": 1746943429,
      "node_id": "PRRC_kwDOABII585oID3F",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> But I do think it would be nice if this PR just added support for std::span and std::byte without necessarily making bigger changes.\r\n\r\nI've added support for `const std::span<const unsigned char>` (for vector & array), but `std::byte` seems like a bigger change (as explained now in the PR's description) - unless you'd like me to add it as an extra overload - let me know if that's what you meant.",
      "created_at": "2024-09-06T11:07:59Z",
      "updated_at": "2024-09-06T11:07:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1746943429",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746943429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747087717",
      "pull_request_review_id": 2286213344,
      "id": 1747087717,
      "node_id": "PRRC_kwDOABII585oInFl",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An overload for `std::byte` could be one more line of code, but would avoid having to touch all the touched non-header lines  in this pull request again. Unless I am missing something obvious, there shouldn't be any downside.",
      "created_at": "2024-09-06T12:59:51Z",
      "updated_at": "2024-09-06T12:59:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747087717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747087717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747126073",
      "pull_request_review_id": 2286269929,
      "id": 1747126073,
      "node_id": "PRRC_kwDOABII585oIwc5",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> An overload for `std::byte` could be one more line of code, but would avoid having to touch all the touched non-header lines in this pull request again.\r\n\r\nYeah sorry for any confusion. My suggestion in https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1741079145 was to use `std::byte` if it was easy or `BasicByte` as a fallback if would be too much work to convert other code to use std::byte. Having two overloads is also fine. The point is this PR should switch callers from `_hex_v_u8` to `_hex`, not `_hex_u8`, so there is no need to change them again later.",
      "created_at": "2024-09-06T13:26:12Z",
      "updated_at": "2024-09-06T13:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747126073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747126073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747142070",
      "pull_request_review_id": 2286297768,
      "id": 1747142070,
      "node_id": "PRRC_kwDOABII585oI0W2",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> `BasicByte`\r\n\r\nIIRC the reason that serialize code uses a template on the inner type of the span is that call sites have to explicitly specify that they want the \"different\" span-serialization.\r\n\r\nI think the concern doesn't apply to CScript, so a template may be better to avoid, but I haven't tried this myself.",
      "created_at": "2024-09-06T13:36:47Z",
      "updated_at": "2024-09-06T13:36:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747142070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747142070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747327065",
      "pull_request_review_id": 2286589611,
      "id": 1747327065,
      "node_id": "PRRC_kwDOABII585oJhhZ",
      "diff_hunk": "@@ -465,30 +492,16 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        InsertSize(b.size());\n+        InsertInput(b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    template<size_t N>\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 68,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "873fe2201550735a9216b7a5e8c8990cfaa7fbd4",
      "in_reply_to_id": 1740636806,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have [added](https://github.com/bitcoin/bitcoin/compare/ab875e14b7ed02e6e4bdc607d67e28bc10216a27..14080bb53d649ed1c99f121f377d2c8f2019c99e) an `std::byte` overload in a separate commit, so now we have:\r\n```C++\r\nCScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\r\n{\r\n    return *this << std::bit_cast<std::span<const uint8_t>>(b);\r\n}\r\n```\r\nwhich delegates to:\r\n```C++\r\nCScript& operator<<(const std::span<const uint8_t> b) LIFETIMEBOUND\r\n{\r\n    AppendDataSize(b.size());\r\n    AppendData(b.begin(), b.end());\r\n    return *this;\r\n}\r\n```\r\n\r\nI haven't tried `BasicByte`, but this seems to work - if the other compilers agree...",
      "created_at": "2024-09-06T15:35:47Z",
      "updated_at": "2024-09-07T12:28:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747327065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747327065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747339084",
      "pull_request_review_id": 2286606223,
      "id": 1747339084,
      "node_id": "PRRC_kwDOABII585oJkdM",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably fine here, but IIRC it is UB to cast away const from something that is always const.\r\n\r\nIt would be better to use a safer alternative instead of a cast.",
      "created_at": "2024-09-06T15:44:12Z",
      "updated_at": "2024-09-06T15:47:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747339084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747339084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344345",
      "pull_request_review_id": 2286613335,
      "id": 1747344345,
      "node_id": "PRRC_kwDOABII585oJlvZ",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe casting away constness on itself is never UB, but *modifying* a const object (through a pointer/reference whose constness was cast away) is UB.",
      "created_at": "2024-09-06T15:47:56Z",
      "updated_at": "2024-09-06T15:48:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747344345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747344345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747371536",
      "pull_request_review_id": 2286653021,
      "id": 1747371536,
      "node_id": "PRRC_kwDOABII585oJsYQ",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes, according to https://eel.is/c++draft/expr.const.cast#6\r\n\r\nI still have a slight preference to keep the const unless removing it has a clear benefit.",
      "created_at": "2024-09-06T16:05:29Z",
      "updated_at": "2024-09-06T16:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747371536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747371536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747373351",
      "pull_request_review_id": 2286657769,
      "id": 1747373351,
      "node_id": "PRRC_kwDOABII585oJs0n",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Very good points, in this version I can indeed add back the `const`, thanks!\r\nAlso added a simple test to make sure `CScript() << _hex_v_u8` and  `CScript() << _hex` produce the same  `CScript()` (can be removed if it passes CI and is deemed superfluous)\r\nSee: https://github.com/bitcoin/bitcoin/compare/14080bb53d649ed1c99f121f377d2c8f2019c99e..03bdefff8c6663da895d0603469dee15aa4ad35d",
      "created_at": "2024-09-06T16:05:50Z",
      "updated_at": "2024-09-06T16:05:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747373351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747373351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747385054",
      "pull_request_review_id": 2286676070,
      "id": 1747385054,
      "node_id": "PRRC_kwDOABII585oJvre",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The last push looks fine, but I still have a slight preference to use UCharSpanCast or std::as_bytes, which preserve constness by default.",
      "created_at": "2024-09-06T16:13:23Z",
      "updated_at": "2024-09-06T16:13:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747385054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747385054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747621990",
      "pull_request_review_id": 2287027043,
      "id": 1747621990,
      "node_id": "PRRC_kwDOABII585oKphm",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`std::as_bytes` converts *to* `std::span<const std::byte>`, but we need a `const std::span<const uint8_t>` since we can only call `prevector#insert` with `class iterator { T* ptr{};` which isn't trivial to migrate to a byte span as far as I can tell (i.e. the `std::byte` operator has to delegate to the `uint8_t` operator).\r\nAnd `UCharSpanCast` seems to work with `Span`, which I understood we're trying to get away from.\r\nOr I could do\r\n```C++\r\nreturn *this << std::span<const uint8_t>(UCharCast(b.data()), b.size());\r\n```\r\ninstead of the current:\r\n```C++\r\nreturn *this << std::bit_cast<std::span<const uint8_t>>(b);\r\n```\r\nif you think it's more correct, but I would appreciate some explanation for why that's better.",
      "created_at": "2024-09-06T19:29:53Z",
      "updated_at": "2024-09-07T12:24:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747621990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747621990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748069155",
      "pull_request_review_id": 2287483619,
      "id": 1748069155,
      "node_id": "PRRC_kwDOABII585oMWsj",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems we're [getting an error with mingw](https://github.com/bitcoin/bitcoin/pull/30765/checks?check_run_id=29792259962) around `genesisOutputScript`, where `prevector#fill` is trying to write 65 bytes of data into a 32-byte buffer.\r\nI can't reproduce it locally, any help would be appreciated.",
      "created_at": "2024-09-07T12:23:33Z",
      "updated_at": "2024-09-07T14:35:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1748069155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748069155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748936794",
      "pull_request_review_id": 2288365016,
      "id": 1748936794,
      "node_id": "PRRC_kwDOABII585oPqha",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The error looks very much like what I ran into in my attempt to make `CScript` take a `span`, see my change to `prevector` in 05c16ae8649ee3b6bbcdbdf0541a65ccf4477537 (referenced in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715642251), I believe that might surprisingly enough fix the issue.",
      "created_at": "2024-09-07T19:55:41Z",
      "updated_at": "2024-09-07T19:55:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1748936794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748936794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748938887",
      "pull_request_review_id": 2288365792,
      "id": 1748938887,
      "node_id": "PRRC_kwDOABII585oPrCH",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wow, what a weird fix!\r\nThanks a lot, added it in a separate commit, let's see if this fixes the build on Windows: [`18870ac` (#30765)](https://github.com/bitcoin/bitcoin/pull/30765/commits/18870ac2eb419fcadd3f055c373f464a7319482e)\r\nEdit: it did fix the windows problem, but will have to rebase once master is stable again.",
      "created_at": "2024-09-07T20:04:20Z",
      "updated_at": "2024-09-08T19:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1748938887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748938887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749727270",
      "pull_request_review_id": 2289060387,
      "id": 1749727270,
      "node_id": "PRRC_kwDOABII585oSrgm",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> And `UCharSpanCast` seems to work with `Span`, which I understood we're trying to get away from.\r\n\r\nCorrect. Sorry for the brevity. I wanted to say that my preference would be to find a way that is applicable to all places in the future that need to cast the inner type of a span from one byte type to another. (I don't think all code will ever be converted to `std::byte`, because some interfaces (to C code) really only work with `unsigned char`, so a conversion will be needed in the future for some places in the code).\r\n\r\nSo my preference would be to have (and use) a safe helper function that does not allow casting away the `const` by accident (even if this happens to not be UB in almost all cases).",
      "created_at": "2024-09-09T07:36:20Z",
      "updated_at": "2024-09-09T07:36:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1749727270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749727270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749932934",
      "pull_request_review_id": 2289399596,
      "id": 1749932934,
      "node_id": "PRRC_kwDOABII585oTduG",
      "diff_hunk": "@@ -463,35 +491,18 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const unsigned char> b) LIFETIMEBOUND\n     {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            uint8_t _data[2];\n-            WriteLE16(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            uint8_t _data[4];\n-            WriteLE32(_data, b.size());\n-            insert(end(), _data, _data + sizeof(_data));\n-        }\n-        insert(end(), b.begin(), b.end());\n+        AppendDataSize(b.size());\n+        AppendData(b.begin(), b.end());\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << std::bit_cast<std::span<uint8_t>>(b);",
      "path": "src/script/script.h",
      "position": null,
      "original_position": 80,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "14080bb53d649ed1c99f121f377d2c8f2019c99e",
      "in_reply_to_id": 1747339084,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, [added](https://github.com/bitcoin/bitcoin/compare/c21b0f7cfb139caecea7bb70528483092925c7b1..e6c02b9f2544032481743b4f8d3148622ccc73dd) `BytesToUInt8s` and `UInt8sToBytes`.",
      "created_at": "2024-09-09T09:38:24Z",
      "updated_at": "2024-09-09T09:51:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1749932934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749932934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750204329",
      "pull_request_review_id": 2289823867,
      "id": 1750204329,
      "node_id": "PRRC_kwDOABII585oUf-p",
      "diff_hunk": "@@ -390,7 +390,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary expression\n+        // calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "c4c102de7336e6c0cc2e5187feedf437ebadb565",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Make code more tolerant of constexpr std::arrays\" (c4c102de7336e6c0cc2e5187feedf437ebadb565)\r\n\r\nSorry I didn't read the previous threads which might explain this, but this is a very vague comment which should be improved. It's is not clear looking at the new code what \"temporary expression\" or \"explicit type\" the comment is referring to, what \"calms down GCC\" could mean or what \"some circumstances\" could be. Would suggest writing a more understandable comment like `// Passing dst to memmove instead of (ptr + count) prevents GCC error/warning \"<whatever the error/warning is>\"`\r\n",
      "created_at": "2024-09-09T12:52:25Z",
      "updated_at": "2024-09-09T14:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750204329",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750204329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": 393,
      "original_start_line": 393,
      "start_side": "RIGHT",
      "line": 394,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750230284",
      "pull_request_review_id": 2289823867,
      "id": 1750230284,
      "node_id": "PRRC_kwDOABII585oUmUM",
      "diff_hunk": "@@ -412,6 +413,33 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public CScriptBase\n {\n+private:\n+    inline void AppendDataSize(const size_t size)\n+    {\n+        if (size < OP_PUSHDATA1) {\n+            insert(this->end(), uint8_t(size));",
      "path": "src/script/script.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "402101e20bc2086e9237c2e8a51471ac97069e01",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"refactor: Make code more tolerant of constexpr std::arrays\" (c4c102de7336e6c0cc2e5187feedf437ebadb565)\r\n\r\nI'm not sure I see benefit of changing this from `unsigned char` to `uint8_t` now when there's a good chance this is going to be switched again to `std::byte` in the future. It could also be good eliminate the C cast on this line if it is changing anyway.\r\n\r\nSo not important, but would consider changing `uint8_t(size)` to `static_cast<value_type(size)>` here and changing `uint8_t` generally to `value_type` so this code can be unchanged if the surrounding code switches to `std::byte`.",
      "created_at": "2024-09-09T13:09:12Z",
      "updated_at": "2024-09-09T14:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750230284",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750230284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750247803",
      "pull_request_review_id": 2289823867,
      "id": 1750247803,
      "node_id": "PRRC_kwDOABII585oUql7",
      "diff_hunk": "@@ -463,32 +491,10 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\n+    CScript& operator<<(const std::span<const uint8_t> b) LIFETIMEBOUND",
      "path": "src/script/script.h",
      "position": 47,
      "original_position": 47,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "402101e20bc2086e9237c2e8a51471ac97069e01",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Generalize `std::vector` push to `std::span` to accept `std::array`\" (402101e20bc2086e9237c2e8a51471ac97069e01)\r\n\r\nTitle of this commit is misleading it does not mention CScript. It sounds like it is referring to a vector push method not a script push method. Would suggest something more like \"Allow CScript operator<< to accept spans, not just vectors\"",
      "created_at": "2024-09-09T13:19:57Z",
      "updated_at": "2024-09-09T14:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750247803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750247803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 494,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750251238",
      "pull_request_review_id": 2289823867,
      "id": 1750251238,
      "node_id": "PRRC_kwDOABII585oUrbm",
      "diff_hunk": "@@ -150,25 +150,28 @@ constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n-    std::vector<unsigned char> result;\n+    std::vector<uint8_t> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\n \n-    // Basic test vector\n-    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\n-    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\n-    auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\n-    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n-\n-    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\n-    hex_literal_span = MakeUCharSpan(hex_literal_vector);\n-    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n-\n-    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};\n-    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_array_uint8.begin(), hex_literal_array_uint8.end(), expected.begin(), expected.end());\n-\n-    result = operator\"\"_hex_v_u8<util::detail::Hex(HEX_PARSE_INPUT)>();\n-    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    {\n+        constexpr std::array<std::byte, 65> hex_literal{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+        auto hex_span{BytesToUInt8s(hex_literal)};",
      "path": "src/test/util_tests.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add std::byte span overload to CScript\" (e6c02b9f2544032481743b4f8d3148622ccc73dd)\r\n\r\nI don't think these changes which don't have to do with CScript belong in a commit that is supposed to be adding a new operator to CScript.\r\n\r\nWould suggest moving definition of `BytesToUInt8s` and `UInt8sToBytes` into a new commit before any of the cscript changes so this can be more understandable.\r\n\r\nIt would also be good if commit gave a hint about what purpose of these util test changes are. They seem ok, but it is not clear what motivated them or what test coverage is being added and removed.\r\n\r\nAlso would suggest squashing the CScript portion of commits 402101e20bc2086e9237c2e8a51471ac97069e01 and e6c02b9f2544032481743b4f8d3148622ccc73dd into a single commit so surrounding code changes once directly from `_hex_v_u8` to `_hex` instead of _hex_v_u8 -> _hex_u8 -> _hex\r\n\r\n",
      "created_at": "2024-09-09T13:21:49Z",
      "updated_at": "2024-09-09T14:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750251238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750251238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750292662",
      "pull_request_review_id": 2289823867,
      "id": 1750292662,
      "node_id": "PRRC_kwDOABII585oU1i2",
      "diff_hunk": "@@ -290,6 +292,15 @@ inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_c\n template <typename B>\n concept BasicByte = requires { UCharCast(std::span<B>{}.data()); };\n \n+inline constexpr std::span<const uint8_t> BytesToUInt8s(const std::span<const std::byte> s) noexcept\n+{\n+    return std::bit_cast<std::span<const uint8_t>>(s);",
      "path": "src/span.h",
      "position": 17,
      "original_position": 17,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add std::byte span overload to CScript\" (e6c02b9f2544032481743b4f8d3148622ccc73dd)\r\n\r\nI think this could use some explanation because it seems unexpected and potentially unsafe to bit cast std::span objects and make assumptions about internal layout of std::span. I can see why bit casting std::array is ok because of restrictions it has, but unclear why bit-casting std::span objects is ok when std::span objects are just wrappers around pointers and bit-casting pointers is not ok. At least according to https://stackoverflow.com/questions/69918542/can-stdbit-cast-be-used-to-cast-from-stdspana-to-stdspanb-and-access-a \"there is no requirement that any particular span\\<T> has the same layout of span\\<U>...\" (and it goes on) so it would be good know why that reasoning does not apply here.\r\n\r\nIf you are sure this is safe, then some having some high level explanation of the reasoning in a comment here would be helpful. But from the previous stack exchange answer https://lists.isocpp.org/std-proposals/2022/05/4059.php https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2747r0.html it seems constexpr functions aren't actually meant to be able to do all the pointer conversions which are ok to do at runtime.\r\n\r\nIf this current approach is not actually safe, would suggest just dropping constexpr overload here, making CScript operator<< accept `span<const std::byte>` and making other operator call UInt8sToBytes and be not constexpr. \r\n\r\nOr if I'm wrong about this and it is ok to use bit_cast on pointers would suggest just using it on the pointer not the whole span object:\r\n\r\n```c++\r\ninline constexpr std::span<const uint8_t> BytesToUInt8s(const std::span<const std::byte> s) noexcept\r\n{\r\n    return {bit_cast<const uint8_t*>(s.data()), s.size()};\r\n}\r\n```",
      "created_at": "2024-09-09T13:41:37Z",
      "updated_at": "2024-09-09T14:37:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750292662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750292662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 297,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750308907",
      "pull_request_review_id": 2289823867,
      "id": 1750308907,
      "node_id": "PRRC_kwDOABII585oU5gr",
      "diff_hunk": "@@ -498,6 +498,11 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << BytesToUInt8s(b);",
      "path": "src/script/script.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add std::byte span overload to CScript\" (e6c02b9f2544032481743b4f8d3148622ccc73dd)\r\n\r\nIf code is moving away from `char` and `uint8_t` and towards `std::byte`, it would seem better for the `uint8_t` overload to call the `std::byte` overload (with `UInt8sToBytes`) instead of vice versa so the uint8_t overload could be dropped in the future without having to change this code again.",
      "created_at": "2024-09-09T13:50:55Z",
      "updated_at": "2024-09-09T14:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750308907",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750308907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750421415",
      "pull_request_review_id": 2290173055,
      "id": 1750421415,
      "node_id": "PRRC_kwDOABII585oVU-n",
      "diff_hunk": "@@ -498,6 +498,11 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << BytesToUInt8s(b);",
      "path": "src/script/script.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "in_reply_to_id": 1750308907,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that's what I tried at first, but I don't yet see how that would be possible without changing `prevector`, as explained [here](https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747621990)",
      "created_at": "2024-09-09T14:53:55Z",
      "updated_at": "2024-09-09T14:53:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750421415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750421415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750424687",
      "pull_request_review_id": 2290178266,
      "id": 1750424687,
      "node_id": "PRRC_kwDOABII585oVVxv",
      "diff_hunk": "@@ -390,7 +390,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary expression\n+        // calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "c4c102de7336e6c0cc2e5187feedf437ebadb565",
      "in_reply_to_id": 1750204329,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Related to https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1748936794, will see what I can do to document it better. I guess the explanation should rather go to the commit message instead of the code, since the code itself isn't doing anything special.",
      "created_at": "2024-09-09T14:55:53Z",
      "updated_at": "2024-09-09T14:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750424687",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750424687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": 393,
      "original_start_line": 393,
      "start_side": "RIGHT",
      "line": 394,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750460628",
      "pull_request_review_id": 2290235809,
      "id": 1750460628,
      "node_id": "PRRC_kwDOABII585oVejU",
      "diff_hunk": "@@ -498,6 +498,11 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n+    CScript& operator<<(const std::span<const std::byte> b) LIFETIMEBOUND\n+    {\n+        return *this << BytesToUInt8s(b);",
      "path": "src/script/script.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "original_commit_id": "e6c02b9f2544032481743b4f8d3148622ccc73dd",
      "in_reply_to_id": 1750308907,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Yes, that's what I tried at first, but I don't yet see how that would be possible without changing `prevector`, as explained [here](https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1747621990)\r\n\r\nThanks that's helpful to know, and it's clear why changing prevector could fix this but not clear why it would be necessary to change prevector to fix that as opposed to just passing a start and end pointer of the type it is expecting",
      "created_at": "2024-09-09T15:17:49Z",
      "updated_at": "2024-09-09T15:27:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30765#discussion_r1750460628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750460628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    }
  ]
}