{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116",
    "id": 1871961574,
    "node_id": "PR_kwDOABII585vk93m",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30116",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30116.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30116.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c99bf9345bbedc2c45449f5cd85b704e55a281d3",
    "number": 30116,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "p2p: Fill reconciliation sets (Erlay) attempt 2",
    "user": {
      "login": "sr-gi",
      "id": 6665628,
      "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sr-gi",
      "html_url": "https://github.com/sr-gi",
      "followers_url": "https://api.github.com/users/sr-gi/followers",
      "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
      "organizations_url": "https://api.github.com/users/sr-gi/orgs",
      "repos_url": "https://api.github.com/users/sr-gi/repos",
      "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sr-gi/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a re-attempt of https://github.com/bitcoin/bitcoin/pull/28765\r\n\r\nThe main differences from it are:\r\n- Most outstanding comments have been addressed (or responded to on the original PR)\r\n- The description of how a node is picked in `IsFanoutTarget` has been updated to reflect what the algorithm is doing (not how it is doing it)\r\n- The way `hash_key` is seeded in `IsFanoutTarget` has changed (from `m_k0` to `node_id`). This is to prevent using `m_k0` for something it is not intended to, given what data we feed to the randomizer should not matter for this\r\n- The cache in `IsFanoutTarget` was only being fed data to, but never checked. This has been reworked to make use of it\r\n- `destinations/target` has been renamed to `n` in `ShouldFanoutTo/IsFanoutTarget` \r\n- The PR has been rebased\r\n\r\nAlso, the following things have been added/changed to the approach:\r\n- Deal with short id collisions by fanning out both transactions\r\n- Deal with ancestors being present on the mempool when a child needs to be placed in the fanout or reconciliation sets (as opposed to dealing with parents, which was the wrong approach)\r\n- Move fanout/reconcile logic from INV creation to `RelayTransaction`\r\n    - Create a delayed set where transactions that are added for reconciliation but still not offered to peers (for privacy reasons) live. This is analogous to how fanout works, where transactions are only made available on trickle intervals\r\n\r\nErlay Project Tracking: https://github.com/bitcoin/bitcoin/issues/30249",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2024-05-15T20:01:38Z",
    "updated_at": "2024-10-31T10:25:06Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "62e1b3c58abf0eab376b4cd692af0d5b6281727b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sr-gi:2023-11-erlay2.1",
      "ref": "2023-11-erlay2.1",
      "sha": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 217783888,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3ODM4ODg=",
        "name": "bitcoin",
        "full_name": "sr-gi/bitcoin",
        "owner": {
          "login": "sr-gi",
          "id": 6665628,
          "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sr-gi",
          "html_url": "https://github.com/sr-gi",
          "followers_url": "https://api.github.com/users/sr-gi/followers",
          "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
          "organizations_url": "https://api.github.com/users/sr-gi/orgs",
          "repos_url": "https://api.github.com/users/sr-gi/repos",
          "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sr-gi/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sr-gi/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sr-gi/bitcoin",
        "archive_url": "https://api.github.com/repos/sr-gi/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sr-gi/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sr-gi/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sr-gi/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sr-gi/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sr-gi/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sr-gi/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sr-gi/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sr-gi/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sr-gi/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sr-gi/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sr-gi/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sr-gi/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sr-gi/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sr-gi/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sr-gi/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sr-gi/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sr-gi/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sr-gi/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sr-gi/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sr-gi/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sr-gi/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sr-gi/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sr-gi/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sr-gi/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sr-gi/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sr-gi/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sr-gi/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sr-gi/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sr-gi/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sr-gi/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sr-gi/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sr-gi/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sr-gi/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sr-gi/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sr-gi/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sr-gi/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sr-gi/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sr-gi/bitcoin/hooks",
        "svn_url": "https://github.com/sr-gi/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 252493,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-30T17:59:12Z",
        "created_at": "2019-10-27T00:01:30Z",
        "updated_at": "2024-05-28T15:33:59Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "97b790e844abd2f92c928239a7dc786d37fad18b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36296,
        "stargazers_count": 79142,
        "watchers_count": 79142,
        "size": 270516,
        "default_branch": "master",
        "open_issues_count": 635,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-30T21:37:45Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2024-10-31T09:17:16Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 949,
    "deletions": 35,
    "changed_files": 8,
    "commits": 12,
    "review_comments": 76,
    "comments": 14
  },
  "events": [
    {
      "event": "commented",
      "id": 2113359903,
      "node_id": "IC_kwDOABII585991Af",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113359903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:01:40Z",
      "updated_at": "2024-10-31T07:23:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30116).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31153](https://github.com/bitcoin/bitcoin/pull/31153) (bench: Remove various extraneous benchmarks by dergoegge)\n* [#31001](https://github.com/bitcoin/bitcoin/pull/31001) (refactor: ensure type safety for txid and wtxid in `RelayTransaction` by marcofleon)\n* [#30987](https://github.com/bitcoin/bitcoin/pull/30987) (Don't zero-after-free `DataStream`: Faster IBD on some configurations by davidgumberg)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2113359903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 12823068376,
      "node_id": "LE_lADOABII586JBASVzwAAAAL8UH7Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823068376",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:01:42Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 2113365602,
      "node_id": "IC_kwDOABII585992Zi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113365602",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:34Z",
      "updated_at": "2024-05-15T20:05:34Z",
      "author_association": "MEMBER",
      "body": "I've talked to @naumenkogs about picking this up and he was happy about it. I'm happy to close this if he changes his mind.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2113365602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 12823105634,
      "node_id": "MEE_lADOABII586JBASVzwAAAAL8URBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823105634",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:35Z"
    },
    {
      "event": "subscribed",
      "id": 12823105651,
      "node_id": "SE_lADOABII586JBASVzwAAAAL8URBz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823105651",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:05:35Z"
    },
    {
      "event": "renamed",
      "id": 12823155636,
      "node_id": "RTE_lADOABII586JBASVzwAAAAL8UdO0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12823155636",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T20:10:39Z",
      "rename": {
        "from": "p2p: Fill reconciliation sets (Erlay) attempt: 2",
        "to": "p2p: Fill reconciliation sets (Erlay) attempt 2"
      }
    },
    {
      "event": "reviewed",
      "id": 2059094027,
      "node_id": "PRR_kwDOABII5856u0gL",
      "url": null,
      "actor": null,
      "commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2059094027",
      "submitted_at": "2024-05-15T22:03:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2059097014,
      "node_id": "PRR_kwDOABII5856u1O2",
      "url": null,
      "actor": null,
      "commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2059097014",
      "submitted_at": "2024-05-15T22:06:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2060684244,
      "node_id": "PRR_kwDOABII585604vU",
      "url": null,
      "actor": null,
      "commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2060684244",
      "submitted_at": "2024-05-16T13:02:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835250927,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9CmLv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835250927",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T14:45:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835330239,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9C5i_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835330239",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T14:49:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12835446695,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAL9DV-n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12835446695",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T14:57:26Z"
    },
    {
      "event": "reviewed",
      "id": 2071518907,
      "node_id": "PRR_kwDOABII5857eN67",
      "url": null,
      "actor": null,
      "commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2071518907",
      "submitted_at": "2024-05-22T14:51:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12987634269,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMGH5Jd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12987634269",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-30T15:08:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13003134824,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMHDBdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003134824",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:26:41Z"
    },
    {
      "event": "commented",
      "id": 2142608188,
      "node_id": "IC_kwDOABII585_tZs8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2142608188",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:29:34Z",
      "updated_at": "2024-05-31T16:29:34Z",
      "author_association": "MEMBER",
      "body": "I've slightly extended the approach adding 3 commits to deal with short id collisions, which were not taken into account. Some of this may be squashable, I've added them separately for now so they are easy to diff/review.\r\n\r\nThis would be missing an additional commit/amend to deal with https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401014445, which I overlooked when addressing the outstanding comments",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2142608188",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13003204753,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMHDSiR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003204753",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:32:45Z"
    },
    {
      "event": "labeled",
      "id": 13003205680,
      "node_id": "LE_lADOABII586JBASVzwAAAAMHDSww",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13003205680",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:32:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2142612746,
      "node_id": "IC_kwDOABII585_ta0K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2142612746",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T16:32:50Z",
      "updated_at": "2024-05-31T16:32:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25659971810</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2142612746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13022605803,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMINTHr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13022605803",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T14:50:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13023750405,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIRqkF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13023750405",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T16:09:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13024748224,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIVeLA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13024748224",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T17:35:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13024766610,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIViqS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13024766610",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T17:37:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13026060825,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMIaeoZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13026060825",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T19:41:32Z"
    },
    {
      "event": "unlabeled",
      "id": 13027532810,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMIgGAK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13027532810",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-03T22:08:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13084081040,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAML3zuQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13084081040",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:10:18Z"
    },
    {
      "event": "convert_to_draft",
      "id": 13084155278,
      "node_id": "CTDE_lADOABII586JBASVzwAAAAML4F2O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13084155278",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:19:12Z"
    },
    {
      "event": "commented",
      "id": 2155312276,
      "node_id": "IC_kwDOABII586Ad3SU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2155312276",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-07T18:21:05Z",
      "updated_at": "2024-06-07T18:21:05Z",
      "author_association": "MEMBER",
      "body": "I added two more commits, moving the fanout/reconciling logic to `RelayTransaction` instead of send message, plus dealing with ancestors in mempool, instead of descendants (which seemed to be the wrong approach).\r\n\r\nI'm moving this to draft for now until I clean it a bit, plus get some feedback on the approach",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2155312276",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 13087363305,
      "node_id": "LE_lADOABII586JBASVzwAAAAMMEVDp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13087363305",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-08T05:17:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2155814489,
      "node_id": "IC_kwDOABII586Afx5Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2155814489",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-08T05:17:04Z",
      "updated_at": "2024-06-08T05:17:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/25955152377</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2155814489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "reviewed",
      "id": 2106130875,
      "node_id": "PRR_kwDOABII5859iQG7",
      "url": null,
      "actor": null,
      "commit_id": "5bd1a958d264910799fcfd985b12d41ab5f4ee91",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Saraeutsza",
        "id": 162553652,
        "node_id": "U_kgDOCbBfNA",
        "avatar_url": "https://avatars.githubusercontent.com/u/162553652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saraeutsza",
        "html_url": "https://github.com/Saraeutsza",
        "followers_url": "https://api.github.com/users/Saraeutsza/followers",
        "following_url": "https://api.github.com/users/Saraeutsza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Saraeutsza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Saraeutsza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Saraeutsza/subscriptions",
        "organizations_url": "https://api.github.com/users/Saraeutsza/orgs",
        "repos_url": "https://api.github.com/users/Saraeutsza/repos",
        "events_url": "https://api.github.com/users/Saraeutsza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Saraeutsza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2106130875",
      "submitted_at": "2024-06-09T10:05:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13106290356,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMNMh60",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13106290356",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-10T19:08:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13106325951,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMNMqm_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13106325951",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-10T19:12:09Z"
    },
    {
      "event": "reviewed",
      "id": 2110226626,
      "node_id": "PRR_kwDOABII5859x4DC",
      "url": null,
      "actor": null,
      "commit_id": "edb007255bb01526e63637f6d5fe5a6b413d1607",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2110226626",
      "submitted_at": "2024-06-11T12:09:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13121277143,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMOFszX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13121277143",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T18:34:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13122274271,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMOJgPf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13122274271",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-11T20:10:28Z"
    },
    {
      "event": "unlabeled",
      "id": 13125496881,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMOVzAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13125496881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T03:52:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151080419,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP3Y_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151080419",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T18:14:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151661694,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP5m5-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151661694",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T19:07:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13151963458,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMP6wlC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13151963458",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T19:39:09Z"
    },
    {
      "event": "ready_for_review",
      "id": 13152164843,
      "node_id": "RFRE_lADOABII586JBASVzwAAAAMP7hvr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13152164843",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T20:00:25Z"
    },
    {
      "event": "commented",
      "id": 2166667309,
      "node_id": "IC_kwDOABII586BJLgt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2166667309",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T20:01:47Z",
      "updated_at": "2024-06-13T20:01:47Z",
      "author_association": "MEMBER",
      "body": "This should be ready for review now.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2166667309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "reviewed",
      "id": 2116801594,
      "node_id": "PRR_kwDOABII585-K9Q6",
      "url": null,
      "actor": null,
      "commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2116801594",
      "submitted_at": "2024-06-13T20:02:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13163667629,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMQnaCt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13163667629",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T17:09:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13163687257,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMQne1Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13163687257",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T17:12:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13205630580,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMTHe50",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13205630580",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T19:30:54Z"
    },
    {
      "event": "labeled",
      "id": 13208301312,
      "node_id": "LE_lADOABII586JBASVzwAAAAMTRq8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13208301312",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T00:42:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13213873919,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMTm7b_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13213873919",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T10:06:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 13232750661,
      "node_id": "LE_lADOABII586JBASVzwAAAAMUu8BF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13232750661",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T18:04:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13233226272,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAMUwwIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13233226272",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T18:49:49Z"
    },
    {
      "event": "unlabeled",
      "id": 13233996642,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAMUzsNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13233996642",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-20T20:08:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2208699739,
      "node_id": "IC_kwDOABII586DphVb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2208699739",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:03:59Z",
      "updated_at": "2024-07-04T11:07:18Z",
      "author_association": "MEMBER",
      "body": "Needs rebase (for #29625)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2208699739",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "labeled",
      "id": 13393420581,
      "node_id": "LE_lADOABII586JBASVzwAAAAMeT2El",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393420581",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:16:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2161914223,
      "node_id": "PRR_kwDOABII586A3DFv",
      "url": null,
      "actor": null,
      "commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2161914223",
      "submitted_at": "2024-07-07T19:52:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "commented",
      "id": 2214110228,
      "node_id": "IC_kwDOABII586D-KQU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2214110228",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T13:40:47Z",
      "updated_at": "2024-07-08T13:40:47Z",
      "author_association": "MEMBER",
      "body": "> Needs rebase (for #29625)\r\n\r\nCurrently working on some simulations, will rebase soon",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2214110228",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14253630400,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRlSPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253630400",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:45:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14253779453,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRl2n9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253779453",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:59:42Z"
    },
    {
      "event": "labeled",
      "id": 14253780141,
      "node_id": "LE_lADOABII586JBASVzwAAAANRl2yt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253780141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:59:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2350062970,
      "node_id": "IC_kwDOABII586MEx16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2350062970",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T19:59:47Z",
      "updated_at": "2024-09-13T19:59:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/30127266270</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2350062970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "unlabeled",
      "id": 14253885408,
      "node_id": "UNLE_lADOABII586JBASVzwAAAANRmQfg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14253885408",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T20:09:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14254269463,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANRnuQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14254269463",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T20:43:36Z"
    },
    {
      "event": "unlabeled",
      "id": 14254871836,
      "node_id": "UNLE_lADOABII586JBASVzwAAAANRqBUc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14254871836",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-13T21:56:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2319731127,
      "node_id": "PRR_kwDOABII586KREm3",
      "url": null,
      "actor": null,
      "commit_id": "3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2319731127",
      "submitted_at": "2024-09-21T12:47:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2341627272,
      "node_id": "PRR_kwDOABII586LkmWI",
      "url": null,
      "actor": null,
      "commit_id": "41ae26695f4c98a3dc05ca083e355ef93774ce8f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Saraeutsza",
        "id": 162553652,
        "node_id": "U_kgDOCbBfNA",
        "avatar_url": "https://avatars.githubusercontent.com/u/162553652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saraeutsza",
        "html_url": "https://github.com/Saraeutsza",
        "followers_url": "https://api.github.com/users/Saraeutsza/followers",
        "following_url": "https://api.github.com/users/Saraeutsza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Saraeutsza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Saraeutsza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Saraeutsza/subscriptions",
        "organizations_url": "https://api.github.com/users/Saraeutsza/orgs",
        "repos_url": "https://api.github.com/users/Saraeutsza/repos",
        "events_url": "https://api.github.com/users/Saraeutsza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Saraeutsza/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2341627272",
      "submitted_at": "2024-10-01T23:37:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490723464,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANftuSI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490723464",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:18:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490804720,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANfuCHw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490804720",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:23:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14490857764,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANfuPEk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14490857764",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:26:08Z"
    },
    {
      "event": "commented",
      "id": 2388991602,
      "node_id": "IC_kwDOABII586OZR5y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2388991602",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:48Z",
      "updated_at": "2024-10-02T15:35:48Z",
      "author_association": "MEMBER",
      "body": "I've added a commit introducing a delayed set to store transactions that are being reconciled, but won't be added to the sketch should it be constructed at this time. This is to mimic the fanout trickling logic where transactions are only made available to peers if they would have been INVed to them. This was already part of @naumenkogs approach, but was scrapped out when reworking when data is added to the reconciliation set in a22b2364f5942266596c78ad306b1e32aa89aa0f",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2388991602",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 14491040573,
      "node_id": "MEE_lADOABII586JBASVzwAAAANfu7s9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14491040573",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:50Z"
    },
    {
      "event": "subscribed",
      "id": 14491040599,
      "node_id": "SE_lADOABII586JBASVzwAAAANfu7tX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14491040599",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T15:35:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14494613798,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANf8kEm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14494613798",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T20:01:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14508130816,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANgwIIA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14508130816",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T17:45:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509510880,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg1ZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509510880",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T19:38:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509608301,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg1w1t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509608301",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T19:48:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14509715522,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAANg2LBC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14509715522",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T19:58:34Z"
    },
    {
      "event": "reviewed",
      "id": 2363929991,
      "node_id": "PRR_kwDOABII586M5rWH",
      "url": null,
      "actor": null,
      "commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I fuzzed the `txreconciliation` class with `-DSANITIZERS=fuzzer,undefined,integer` and two related runtime errors occurred:\r\n\r\n<details>\r\n<summary>errors</summary>\r\n\r\n```bash\r\n../../src/node/txreconciliation.cpp:457:46: runtime error: unsigned integer overflow: 1 - 3 cannot be represented in type 'size_t' (aka 'unsigned long')\r\n    #0 0x55ddab3b7d99 in TxReconciliationTracker::Impl::ShouldFanoutTo(transaction_identifier<true> const&, long, unsigned long, unsigned long) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:457:46\r\n    #1 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7::operator()() const erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:118:46\r\n    #2 0x55ddaa5521c7 in unsigned long CallOneOf<txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8>(FuzzedDataProvider&, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/util.h:42:27\r\n    #3 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:68:9\r\n    #4 0x55ddaa6bf726 in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:591:9\r\n    #5 0x55ddaa6bf726 in LLVMFuzzerTestOneInput erlayfuzzbuild/src/test/fuzz/util/../../../../../src/test/fuzz/fuzz.cpp:209:5\r\n    #6 0x55ddaa04a840 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e6840) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #7 0x55ddaa049f75 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e5f75) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #8 0x55ddaa04b705 in fuzzer::Fuzzer::MutateAndTestOne() (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e7705) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #9 0x55ddaa04c305 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e8305) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #10 0x55ddaa03a52f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19d652f) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #11 0x55ddaa0638e2 in main (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19ff8e2) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #12 0x7fcd32ab6249  (/lib/x86_64-linux-gnu/libc.so.6+0x27249) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #13 0x7fcd32ab6304 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27304) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #14 0x55ddaa02f920 in _start (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19cb920) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\nSUMMARY: UndefinedBehaviorSanitizer: unsigned-integer-overflow ../../src/node/txreconciliation.cpp:457:46 \r\n\r\n../../src/node/txreconciliation.cpp:401:100: runtime error: 7.92282e+28 is outside the range of representable values of type 'unsigned long'\r\n    #0 0x55ddab3c704a in TxReconciliationTracker::Impl::IsFanoutTarget(transaction_identifier<true> const&, long, bool, double) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:401:100\r\n    #1 0x55ddab3b7b83 in TxReconciliationTracker::Impl::ShouldFanoutTo(transaction_identifier<true> const&, long, unsigned long, unsigned long) erlayfuzzbuild/src/../../src/node/txreconciliation.cpp:471:16\r\n    #2 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7::operator()() const erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:118:46\r\n    #3 0x55ddaa5521c7 in unsigned long CallOneOf<txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8>(FuzzedDataProvider&, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_0, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_1, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_2, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_3, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_4, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_5, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_6, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_7, txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>)::$_8) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/util.h:42:27\r\n    #4 0x55ddaa5521c7 in txreconciliation_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) erlayfuzzbuild/src/test/fuzz/../../../../src/test/fuzz/txreconciliation.cpp:68:9\r\n    #5 0x55ddaa6bf726 in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/std_function.h:591:9\r\n    #6 0x55ddaa6bf726 in LLVMFuzzerTestOneInput erlayfuzzbuild/src/test/fuzz/util/../../../../../src/test/fuzz/fuzz.cpp:209:5\r\n    #7 0x55ddaa04a840 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e6840) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #8 0x55ddaa049f75 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e5f75) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #9 0x55ddaa04b705 in fuzzer::Fuzzer::MutateAndTestOne() (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e7705) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #10 0x55ddaa04c305 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19e8305) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #11 0x55ddaa03a52f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19d652f) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #12 0x55ddaa0638e2 in main (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19ff8e2) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\n    #13 0x7fcd32ab6249  (/lib/x86_64-linux-gnu/libc.so.6+0x27249) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #14 0x7fcd32ab6304 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x27304) (BuildId: 58254ca972028402bc40624f81388d85ec95f70d)\r\n    #15 0x55ddaa02f920 in _start (/root/bitcoin/erlayfuzzbuild/src/test/fuzz/fuzz+0x19cb920) (BuildId: 9429992cf566016ee2d3d51625e57700f09635fc)\r\nSUMMARY: UndefinedBehaviorSanitizer: float-cast-overflow ../../src/node/txreconciliation.cpp:401:100 \r\n==222068== ERROR: libFuzzer: out-of-memory (used: 4046Mb; limit: 2048Mb)\r\n   To change the out-of-memory limit use -rss_limit_mb=<N>\r\n\r\nMS: 4 ChangeBinInt-ChangeBit-CrossOver-CrossOver-; base unit: 0cbe4c9fe667ead352437139e9ea437783de5c0c\r\n0xad,0xad,0xad,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x37,0xff,0xff,0xff,0xff,0xd2,0xff,0xff,0xff,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0x3b,0xd2,0xd2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xff,0x0,0xff,0xff,0x9,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x75,0xff,0xff,0xff,0xd2,0xd2,0xd2,0xd2,0xd2,0xd2,0xbf,0xff,0x0,0x0,0x0,0x52,0xad,0xad,0xbf,0x6a,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xad,0x1,0x0,0x0,\r\n\\255\\255\\255`\\000\\000\\000\\000\\000\\0007\\377\\377\\377\\377\\322\\377\\377\\377\\322\\322\\322\\322\\322\\322\\322\\322;\\322\\322\\377\\377\\377\\377\\377\\377\\377\\377\\337\\377\\000\\377\\377\\011\\000\\000\\000\\000\\000\\377\\000\\000\\000\\000\\000\\000\\000u\\377\\377\\377\\322\\322\\322\\322\\322\\322\\277\\377\\000\\000\\000R\\255\\255\\277j\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\240\\255\\001\\000\\000\r\nartifact_prefix='./'; Test unit written to ./oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02\r\nBase64: ra2tYAAAAAAAADf/////0v///9LS0tLS0tLSO9LS///////////f/wD//wkAAAAAAP8AAAAAAAAAdf///9LS0tLS0r//AAAAUq2tv2qgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgrQEAAA==\r\nSUMMARY: libFuzzer: out-of-memory\r\n```\r\n\r\n</details>\r\n\r\n[oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02.txt](https://github.com/user-attachments/files/17350703/oom-b217ee9df2670caf13a47abe1623c2f80e6d1f02.txt)\r\n\r\n\r\nLeft a question about it below.\r\n\r\n",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2363929991",
      "submitted_at": "2024-10-12T16:19:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2398229655,
      "node_id": "PRR_kwDOABII586O8hSX",
      "url": null,
      "actor": null,
      "commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2398229655",
      "submitted_at": "2024-10-28T09:31:25Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14968630280,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8MywI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968630280",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:47:07Z"
    },
    {
      "event": "commented",
      "id": 2442487595,
      "node_id": "IC_kwDOABII586RlWcr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2442487595",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:36Z",
      "updated_at": "2024-10-28T19:50:36Z",
      "author_association": "MEMBER",
      "body": "Squashed @naumenkogs fix on @marcofleon comment in ad95b2c0e21f1e865f967aa9463ef99bc252550a, plus added a commit replacing `IsFanoutTarget` with `GetFanoutTargets` so the cache for fanout can be dropped. After this, the fanout targets are computed just once per transaction",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2442487595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "mentioned",
      "id": 14968671489,
      "node_id": "MEE_lADOABII586JBASVzwAAAAN8M80B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671489",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "subscribed",
      "id": 14968671507,
      "node_id": "SE_lADOABII586JBASVzwAAAAN8M80T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671507",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "mentioned",
      "id": 14968671528,
      "node_id": "MEE_lADOABII586JBASVzwAAAAN8M80o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671528",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "subscribed",
      "id": 14968671536,
      "node_id": "SE_lADOABII586JBASVzwAAAAN8M80w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968671536",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T19:50:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14968804933,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8NdZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968804933",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T20:02:15Z"
    },
    {
      "event": "labeled",
      "id": 14968806001,
      "node_id": "LE_lADOABII586JBASVzwAAAAN8Ndpx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14968806001",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T20:02:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2442509003,
      "node_id": "IC_kwDOABII586RlbrL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2442509003",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T20:02:21Z",
      "updated_at": "2024-10-28T20:02:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32180649974</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2442509003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14969644398,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN8QqVu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14969644398",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T21:16:29Z"
    },
    {
      "event": "unlabeled",
      "id": 14970502830,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAN8T76u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14970502830",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-28T22:42:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2401362483,
      "node_id": "PRR_kwDOABII586PIeIz",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401362483",
      "submitted_at": "2024-10-29T10:06:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401412734,
      "node_id": "PRR_kwDOABII586PIqZ-",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401412734",
      "submitted_at": "2024-10-29T10:17:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401436632,
      "node_id": "PRR_kwDOABII586PIwPY",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401436632",
      "submitted_at": "2024-10-29T10:27:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "reviewed",
      "id": 2401450441,
      "node_id": "PRR_kwDOABII586PIznJ",
      "url": null,
      "actor": null,
      "commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#pullrequestreview-2401450441",
      "submitted_at": "2024-10-29T10:33:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
    },
    {
      "event": "labeled",
      "id": 14990685668,
      "node_id": "LE_lADOABII586JBASVzwAAAAN9g7Xk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14990685668",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T20:05:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14991341560,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN9jbf4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14991341560",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T21:06:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyNThmNWI1NmUyZmVmMTY0NmFkYzE1OTBkOGM1YTM5OGFlODNkZTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a258f5b56e2fef1646adc1590d8c5a398ae83de4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a258f5b56e2fef1646adc1590d8c5a398ae83de4",
      "tree": {
        "sha": "2f87f6f34360ccfa4c7fd0ee7429374367ba0115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f87f6f34360ccfa4c7fd0ee7429374367ba0115"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97b790e844abd2f92c928239a7dc786d37fad18b",
          "sha": "97b790e844abd2f92c928239a7dc786d37fad18b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/97b790e844abd2f92c928239a7dc786d37fad18b"
        }
      ],
      "message": "refactor: remove legacy comments\n\nThese comments became irrelevant in one of the previous code changes.\nThey simply don't make sense anymore.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:26Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-05T08:20:48Z"
      },
      "sha": "a258f5b56e2fef1646adc1590d8c5a398ae83de4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVlNDVjZWQyZWE1YTdjZmI1MjJiNDkwOTIzMWZjODU3MTEwYjE4NGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee45ced2ea5a7cfb522b4909231fc857110b184e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee45ced2ea5a7cfb522b4909231fc857110b184e",
      "tree": {
        "sha": "faf59b7a81ade273e3de85f1e223613182804c03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf59b7a81ade273e3de85f1e223613182804c03"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a258f5b56e2fef1646adc1590d8c5a398ae83de4",
          "sha": "a258f5b56e2fef1646adc1590d8c5a398ae83de4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a258f5b56e2fef1646adc1590d8c5a398ae83de4"
        }
      ],
      "message": "p2p: Functions to add/remove wtxids to tx reconciliation sets\n\nThey will be used later on.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:26Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2022-10-08T06:25:01Z"
      },
      "sha": "ee45ced2ea5a7cfb522b4909231fc857110b184e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUxMTE1MTZlMjcwYTk3N2JhNzE2MjYxYzg3MmMzZjhlOTZmM2VjODI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5111516e270a977ba716261c872c3f8e96f3ec82",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5111516e270a977ba716261c872c3f8e96f3ec82",
      "tree": {
        "sha": "cde2a2ef9874f0ef8d53c53dc477920d077e62b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cde2a2ef9874f0ef8d53c53dc477920d077e62b7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee45ced2ea5a7cfb522b4909231fc857110b184e",
          "sha": "ee45ced2ea5a7cfb522b4909231fc857110b184e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee45ced2ea5a7cfb522b4909231fc857110b184e"
        }
      ],
      "message": "p2p: Make short id collision detectable when adding wtxids to tx reconciliation sets",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:26Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-05-30T15:50:11Z"
      },
      "sha": "5111516e270a977ba716261c872c3f8e96f3ec82"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNhNGNiNTQzNzQ5YTRlMmIwNzJkM2M0ZmM1YWNhNzExZGJjMjU3OTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4cb543749a4e2b072d3c4fc5aca711dbc25798",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4cb543749a4e2b072d3c4fc5aca711dbc25798",
      "tree": {
        "sha": "98826a64e28e941f9917a5548dda04809ff5187b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98826a64e28e941f9917a5548dda04809ff5187b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5111516e270a977ba716261c872c3f8e96f3ec82",
          "sha": "5111516e270a977ba716261c872c3f8e96f3ec82",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5111516e270a977ba716261c872c3f8e96f3ec82"
        }
      ],
      "message": "p2p: Add transactions to reconciliation sets\n\nTransactions eligible for reconciliation are added to the\nreconciliation sets. For the remaining txs, low-fanout is used.\n\nCo-authored-by: Martin Zumsande <mzumsande@gmail.com>\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:52Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-05T08:11:33Z"
      },
      "sha": "ca4cb543749a4e2b072d3c4fc5aca711dbc25798"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVjYmQxZTRlYzYyNzlhN2Q1NzBiNmUwYzIxNjc2NzQzODRiMmE3MTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecbd1e4ec6279a7d570b6e0c2167674384b2a716",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ecbd1e4ec6279a7d570b6e0c2167674384b2a716",
      "tree": {
        "sha": "be10d0b55747996f95e0d6a97996cf973aa81be3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be10d0b55747996f95e0d6a97996cf973aa81be3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4cb543749a4e2b072d3c4fc5aca711dbc25798",
          "sha": "ca4cb543749a4e2b072d3c4fc5aca711dbc25798",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4cb543749a4e2b072d3c4fc5aca711dbc25798"
        }
      ],
      "message": "bench: add bench for ShouldFanoutTo",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2023-12-13T19:53:03Z"
      },
      "sha": "ecbd1e4ec6279a7d570b6e0c2167674384b2a716"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMzOTRiMjQwYTFiNjRjNmQzNzIyN2Y0MjBmZmUxNGY2MmI3Mzc1ZmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3394b240a1b64c6d37227f420ffe14f62b7375fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3394b240a1b64c6d37227f420ffe14f62b7375fd",
      "tree": {
        "sha": "6bf063d932617068c3abc827c6fe8e3e4e49c647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bf063d932617068c3abc827c6fe8e3e4e49c647"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecbd1e4ec6279a7d570b6e0c2167674384b2a716",
          "sha": "ecbd1e4ec6279a7d570b6e0c2167674384b2a716",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ecbd1e4ec6279a7d570b6e0c2167674384b2a716"
        }
      ],
      "message": "p2p: Cache inbound reconciling peers count\n\nIt helps to avoid recomputing every time we consider\na transaction for fanout/reconciliation.\n\nCo-authored-by: Sergi Delgado Segura <sergi.delgado.s@gmail.com>",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-01-17T09:28:02Z"
      },
      "sha": "3394b240a1b64c6d37227f420ffe14f62b7375fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNiZTY1NzEzZjI0ZTczNzc2OTQxMzdkZDEzYWJiOTZhY2ZmYmYyNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3be65713f24e7377694137dd13abb96acffbf278",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3be65713f24e7377694137dd13abb96acffbf278",
      "tree": {
        "sha": "a3417454478f594ad4783345a4e3d5719d872173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3417454478f594ad4783345a4e3d5719d872173"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3394b240a1b64c6d37227f420ffe14f62b7375fd",
          "sha": "3394b240a1b64c6d37227f420ffe14f62b7375fd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3394b240a1b64c6d37227f420ffe14f62b7375fd"
        }
      ],
      "message": "p2p: Add helper to compute reconciliation tx short ids and a cache of short ids to wtxids",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-05-30T16:03:58Z"
      },
      "sha": "3be65713f24e7377694137dd13abb96acffbf278"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM3MTE3YTE3MjY2NWZjNmEyNWQwMWFmMTNlN2M4NjdkYzJiYjJjZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37117a172665fc6a25d01af13e7c867dc2bb2cee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/37117a172665fc6a25d01af13e7c867dc2bb2cee",
      "tree": {
        "sha": "12e00d29c42510504fc409499975f03c3020a87c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12e00d29c42510504fc409499975f03c3020a87c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3be65713f24e7377694137dd13abb96acffbf278",
          "sha": "3be65713f24e7377694137dd13abb96acffbf278",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3be65713f24e7377694137dd13abb96acffbf278"
        }
      ],
      "message": "p2p: Deal with shortid collisions for reconciliation sets\n\nIf a wtxid to be added to a peer's recon set has a shot id collisions (a previously\nadded wtxid maps to the same short id), both transaction should be fanout, given\nour peer may have added the opposite transaction to our recon set, and reconciliation\nwill fail. Moreover, all descendants of the previously added transaction that were in\nthe recon set should also be removed and fanout.",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-05-30T19:01:05Z"
      },
      "sha": "37117a172665fc6a25d01af13e7c867dc2bb2cee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyYThkYmFiNzMxOTA3OTEzZjU2ZjIxZjhhMDhlYWVkZmU0MTJlMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72a8dbab731907913f56f21f8a08eaedfe412e21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/72a8dbab731907913f56f21f8a08eaedfe412e21",
      "tree": {
        "sha": "8b609e0ca39560160e228c5561a6957309df78a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b609e0ca39560160e228c5561a6957309df78a1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37117a172665fc6a25d01af13e7c867dc2bb2cee",
          "sha": "37117a172665fc6a25d01af13e7c867dc2bb2cee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/37117a172665fc6a25d01af13e7c867dc2bb2cee"
        }
      ],
      "message": "p2p: Add PeerManager method to count the amount of inbound/outbounds fanout peers",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-06-07T17:54:52Z"
      },
      "sha": "72a8dbab731907913f56f21f8a08eaedfe412e21"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZkN2MzNWEyMjY2OWQ0NDBhZmUxODJhMTUzYmVkMjhmZDMyNmI1MWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd7c35a22669d440afe182a153bed28fd326b51f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7c35a22669d440afe182a153bed28fd326b51f",
      "tree": {
        "sha": "5f3a6a445217218fba8f4ed2b26fba2fb3ff5426",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f3a6a445217218fba8f4ed2b26fba2fb3ff5426"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72a8dbab731907913f56f21f8a08eaedfe412e21",
          "sha": "72a8dbab731907913f56f21f8a08eaedfe412e21",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/72a8dbab731907913f56f21f8a08eaedfe412e21"
        }
      ],
      "message": "p2p: Moves fanout logic to RelayTransaction and properly fanouts ancestors\n\nIf a transaction to be reconciled has in mempool ancestors, we need to be consistent\nwith the way in which we announce this transaction (either by fanning out or reconciling\nall the ancestor set). In order for Erlay to work best, a minimum amount of fanout is required.\nTherefore, we cannot simply reconcile with everyone in this case either. Find the subset of peers\nthat have the least ancestors to be reconciled and send all of them via fanout",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-06-07T17:59:22Z"
      },
      "sha": "fd7c35a22669d440afe182a153bed28fd326b51f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjZDY5NTg1MWM2OWRkMzA0NDNkM2QyZjk1NmVlYTk0ZThiZjhmMjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd695851c69dd30443d3d2f956eea94e8bf8f25",
      "tree": {
        "sha": "bd1e1747b21ca1482a2600512723a1ae5923c1e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd1e1747b21ca1482a2600512723a1ae5923c1e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd7c35a22669d440afe182a153bed28fd326b51f",
          "sha": "fd7c35a22669d440afe182a153bed28fd326b51f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7c35a22669d440afe182a153bed28fd326b51f"
        }
      ],
      "message": "p2p: Makes transactions available for reconciliation on trickle\n\nSplits the reconciliation set in two, a delayed set and an available set.\nTransactions are added to the delayed set and made available when on the next\ntrickle interval for the peer. This prevents adversarial nodes from proving\nour reconciliation set by spamming reconciliation requests, in an equivalent\nmanner to how fanout delays work",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-01T19:32:33Z"
      },
      "sha": "ccd695851c69dd30443d3d2f956eea94e8bf8f25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5OWJmOTM0NWJiZWRjMmM0NTQ0OWY1Y2Q4NWI3MDRlNTVhMjgxZDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "tree": {
        "sha": "a047316f761b9c9e3f47e168c8d1d12df2780b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a047316f761b9c9e3f47e168c8d1d12df2780b08"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd695851c69dd30443d3d2f956eea94e8bf8f25",
          "sha": "ccd695851c69dd30443d3d2f956eea94e8bf8f25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd695851c69dd30443d3d2f956eea94e8bf8f25"
        }
      ],
      "message": "p2p: Replaces IsFanoutTarget with GetFanoutTargets in TxReconciliationTracker\n\nInstead of checking if a target is fanout for every single node and having to store already\ncomputed values in a cache, we can simply return the lists of fanout targets for both inbounds and outbounds\nand just check for membership for each peer (depending on its type)",
      "committer": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-30T14:46:54Z"
      },
      "author": {
        "name": "Sergi Delgado Segura",
        "email": "sergi.delgado.s@gmail.com",
        "date": "2024-10-25T20:38:50Z"
      },
      "sha": "c99bf9345bbedc2c45449f5cd85b704e55a281d3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15009203941,
      "node_id": "HRFPE_lADOABII586JBASVzwAAAAN-nkbl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15009203941",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T14:59:04Z"
    },
    {
      "event": "commented",
      "id": 2447434066,
      "node_id": "IC_kwDOABII586R4OFS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2447434066",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T14:59:22Z",
      "updated_at": "2024-10-30T14:59:22Z",
      "author_association": "MEMBER",
      "body": "Rebasing to deal with merge conflicts",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#issuecomment-2447434066",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30116"
    },
    {
      "event": "unlabeled",
      "id": 15012329940,
      "node_id": "UNLE_lADOABII586JBASVzwAAAAN-zfnU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15012329940",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-30T16:47:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602301949",
      "pull_request_review_id": 2059094027,
      "id": 1602301949,
      "node_id": "PRRC_kwDOABII585fgS_9",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 93,
      "original_position": 12,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" 7c047d30cb0eadc8a424cb01de2fcd0978e22206: What is the step 2? This comment seems a little confuse because I couldn't find it as I see for Step 1.",
      "created_at": "2024-05-15T22:03:28Z",
      "updated_at": "2024-05-15T22:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1602301949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602301949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602304001",
      "pull_request_review_id": 2059097014,
      "id": 1602304001,
      "node_id": "PRRC_kwDOABII585fgTgB",
      "diff_hunk": "@@ -115,10 +138,55 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid_to_remove) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" https://github.com/bitcoin/bitcoin/commit/7c047d30cb0eadc8a424cb01de2fcd0978e22206: Perhaps adding a log when removing from set?",
      "created_at": "2024-05-15T22:06:35Z",
      "updated_at": "2024-05-15T22:06:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1602304001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602304001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603304486",
      "pull_request_review_id": 2060684244,
      "id": 1603304486,
      "node_id": "PRRC_kwDOABII585fkHwm",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>",
      "path": "src/bench/txreconciliation.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"add bench for ShouldFanoutTo\" 3f59bf83a41b7787f9c43c277b5e62f327a72c3e: `net.h` include seems unnecessary.",
      "created_at": "2024-05-16T13:02:43Z",
      "updated_at": "2024-05-16T13:02:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603304486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603304486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603383480",
      "pull_request_review_id": 2060823307,
      "id": 1603383480,
      "node_id": "PRRC_kwDOABII585fkbC4",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 93,
      "original_position": 12,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602301949,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this refers to the steps listed at the beginning of the file. Not all of them are covered yet. This PR leaves this right before 2 AFAICT",
      "created_at": "2024-05-16T13:44:15Z",
      "updated_at": "2024-05-16T14:57:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603383480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603383480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603525767",
      "pull_request_review_id": 2060823307,
      "id": 1603525767,
      "node_id": "PRRC_kwDOABII585fk9yH",
      "diff_hunk": "@@ -115,10 +138,55 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid_to_remove) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602304001,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated to track both successful and unsuccessful deletions (in debug log, to prevent unnecessarily spamming the logs)",
      "created_at": "2024-05-16T14:51:59Z",
      "updated_at": "2024-05-16T15:04:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603525767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603525767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603536079",
      "pull_request_review_id": 2060823307,
      "id": 1603536079,
      "node_id": "PRRC_kwDOABII585flATP",
      "diff_hunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>",
      "path": "src/bench/txreconciliation.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "3f59bf83a41b7787f9c43c277b5e62f327a72c3e",
      "in_reply_to_id": 1603304486,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2024-05-16T14:57:37Z",
      "updated_at": "2024-05-16T14:57:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603536079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603536079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603548036",
      "pull_request_review_id": 2061100687,
      "id": 1603548036,
      "node_id": "PRRC_kwDOABII585flDOE",
      "diff_hunk": "@@ -74,6 +74,20 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether the transaction appears in the set.\n+     */\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid);\n+\n+    /**\n+     * Before Step 2, we might want to remove a wtxid from the reconciliation set, for example if",
      "path": "src/node/txreconciliation.h",
      "position": 93,
      "original_position": 12,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "7c047d30cb0eadc8a424cb01de2fcd0978e22206",
      "in_reply_to_id": 1602301949,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My bad, missed that. Thanks.",
      "created_at": "2024-05-16T15:02:42Z",
      "updated_at": "2024-05-16T15:02:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1603548036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603548036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610144238",
      "pull_request_review_id": 2071518907,
      "id": 1610144238,
      "node_id": "PRRC_kwDOABII585f-Nnu",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In \"p2p: Functions to add/remove wtxids to tx reconciliation sets\" 2e29e9beeebcadfc7afc56a28791456d40551bed: I think `MAX_SET_SIZE` could be in `txreconciliation.h` then we can use it in the tests.\r\n\r\n```diff\r\n-/**\r\n- * Maximum number of wtxids stored in a peer local set, bounded to protect the memory use of\r\n- * reconciliation sets and short ids mappings, and CPU used for sketch computation.\r\n- */\r\n-constexpr size_t MAX_SET_SIZE = 3000;\r\n \r\n /**\r\n  * Maximum number of transactions for which we store assigned fanout targets.\r\ndiff --git a/src/node/txreconciliation.h b/src/node/txreconciliation.h\r\nindex c2cdf9875f..648b6369c0 100644\r\n--- a/src/node/txreconciliation.h\r\n+++ b/src/node/txreconciliation.h\r\n@@ -14,6 +14,12 @@\r\n /** Supported transaction reconciliation protocol version */\r\n static constexpr uint32_t TXRECONCILIATION_VERSION{1};\r\n \r\n+/**\r\n+ * Maximum number of wtxids stored in a peer local set, bounded to protect the memory use of\r\n+ * reconciliation sets and short ids mappings, and CPU used for sketch computation.\r\n+ */\r\n+constexpr size_t MAX_SET_SIZE = 3000;\r\n+\r\n enum class ReconciliationRegisterResult {\r\n     NOT_FOUND,\r\n     SUCCESS,\r\ndiff --git a/src/test/txreconciliation_tests.cpp b/src/test/txreconciliation_tests.cpp\r\nindex a0071e4388..8befe0d36e 100644\r\n--- a/src/test/txreconciliation_tests.cpp\r\n+++ b/src/test/txreconciliation_tests.cpp\r\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(AddToSetTest)\r\n     BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\r\n     BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\r\n \r\n-    for (size_t i = 0; i < 3000; ++i)\r\n+    for (size_t i = 0; i < MAX_SET_SIZE; ++i)\r\n         BOOST_REQUIRE(tracker.AddToSet(peer_id1, Wtxid::FromUint256(frc.rand256())));\r\n     BOOST_REQUIRE(!tracker.AddToSet(peer_id1, Wtxid::FromUint256(frc.rand256())));\r\n```",
      "created_at": "2024-05-22T14:51:48Z",
      "updated_at": "2024-05-22T14:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1610144238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610144238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610159034",
      "pull_request_review_id": 2071544864,
      "id": 1610159034,
      "node_id": "PRRC_kwDOABII585f-RO6",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": 1610144238,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've been talking to @sipa about this recently and I think the limit may not be necessary if the approach for when to compute the reconciliation sets is changed. I'm may get rid of it, but if not, I'll take this",
      "created_at": "2024-05-22T14:59:17Z",
      "updated_at": "2024-05-22T14:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1610159034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610159034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620894922",
      "pull_request_review_id": 2088540718,
      "id": 1620894922,
      "node_id": "PRRC_kwDOABII585gnOTK",
      "diff_hunk": "@@ -81,4 +81,60 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid));\n+\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    BOOST_REQUIRE(!tracker.AddToSet(peer_id0, wtxid2));\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    for (size_t i = 0; i < 3000; ++i)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "2e29e9beeebcadfc7afc56a28791456d40551bed",
      "in_reply_to_id": 1610144238,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ended up taking this, since the limit will be kept in the end.\r\n\r\nThanks!",
      "created_at": "2024-05-30T15:05:35Z",
      "updated_at": "2024-05-30T15:05:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1620894922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620894922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634736227",
      "pull_request_review_id": 2110226626,
      "id": 1634736227,
      "node_id": "PRRC_kwDOABII585hcBhj",
      "diff_hunk": "@@ -390,7 +425,13 @@ TxReconciliationTracker::~TxReconciliationTracker() = default;\n \n uint64_t TxReconciliationTracker::PreRegisterPeer(NodeId peer_id)\n {\n-    return m_impl->PreRegisterPeer(peer_id);\n+    const uint64_t local_salt{GetRand(UINT64_MAX)};\n+    return m_impl->PreRegisterPeer(peer_id, local_salt);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "f71575cf4321443219ffede00ad598600f558994",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the intention behind moving salt calculation out of PreRegisterPeer ? Now if PreRegisterPeer is not executed due to lock being held we are doing meaningless computation .",
      "created_at": "2024-06-11T11:58:34Z",
      "updated_at": "2024-06-11T12:09:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1634736227",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634736227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": 393,
      "start_side": "LEFT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635224220",
      "pull_request_review_id": 2111021554,
      "id": 1635224220,
      "node_id": "PRRC_kwDOABII585hd4qc",
      "diff_hunk": "@@ -390,7 +425,13 @@ TxReconciliationTracker::~TxReconciliationTracker() = default;\n \n uint64_t TxReconciliationTracker::PreRegisterPeer(NodeId peer_id)\n {\n-    return m_impl->PreRegisterPeer(peer_id);\n+    const uint64_t local_salt{GetRand(UINT64_MAX)};\n+    return m_impl->PreRegisterPeer(peer_id, local_salt);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "f71575cf4321443219ffede00ad598600f558994",
      "in_reply_to_id": 1634736227,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The purpose is for `PreRegisterPeer` to be callable with a fixed salt (via `PreRegisterPeerWithSalt`), so collisions can be tested. This is just moving it out of the `PImpl`, the effects on the external caller should be the same",
      "created_at": "2024-06-11T17:09:10Z",
      "updated_at": "2024-06-11T17:09:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1635224220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635224220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": 393,
      "start_side": "LEFT",
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638809793",
      "pull_request_review_id": 2116801594,
      "id": 1638809793,
      "node_id": "PRRC_kwDOABII585hrkDB",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is pending. Happy get get feedback on how many to pick (either hardcoded or based on what)",
      "created_at": "2024-06-13T20:02:50Z",
      "updated_at": "2024-06-13T20:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1638809793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638809793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641905080",
      "pull_request_review_id": 2121497666,
      "id": 1641905080,
      "node_id": "PRRC_kwDOABII585h3Xu4",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The number of parents per peer should mostly be in the range of (0-2/3) , This should include a significant numbers of peers to reconcile with . A constant number might not be ideal considering if the array returned is smaller than that constant number , we might be reconciling with non-existent peers .",
      "created_at": "2024-06-16T15:26:10Z",
      "updated_at": "2024-06-16T15:26:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1641905080",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641905080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644607912",
      "pull_request_review_id": 2125758247,
      "id": 1644607912,
      "node_id": "PRRC_kwDOABII585iBrmo",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm curious to know where do you get that parent count range from 🤔 ",
      "created_at": "2024-06-18T14:53:39Z",
      "updated_at": "2024-06-18T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1644607912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1644607912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1646641952",
      "pull_request_review_id": 2128966341,
      "id": 1646641952,
      "node_id": "PRRC_kwDOABII585iJcMg",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I got some data for about 4100+ transactions from a source (cant be sure of the credibility) for bitcoin transactions in a mempool and i ran a script to count the avg. parents which came to approx. 1.6 . Another way I thought of this is I got the avg. number of [inputs per transaction](https://transactionfee.info/charts/inputs-per-transaction/) . For 2023-2024 the average is somewhat between 2-3 . If we make a tree like dependency structure for transaction considering the transactions which had their inputs as utxo's , the probability of having higher ancestories diminishes rapidly since any  transaction missing will eliminate the ancestory above it . Considering the mempool are in general highly updated , ancestories beyond grandparent transactions are not very likely to be there . So if I consider this , there are supposed to be 6 ancestors for a transactions on an average and we can expect 2-3 range to have a significant number of transactions.    ",
      "created_at": "2024-06-19T19:57:20Z",
      "updated_at": "2024-06-19T19:57:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1646641952",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1646641952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1647708122",
      "pull_request_review_id": 2130655678,
      "id": 1647708122,
      "node_id": "PRRC_kwDOABII585iNgfa",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Notice this does not apply to all transactions though. The exception here applies to transactions that have some ancestors **in the mempool**. In that case, we need to be consistent with the way we share this set of transactions, otherwise, it could be the case that the parents are reconciled at time T and the children are fanout at T-n, potentially making the children orphan.\r\n\r\nUnder these conditions, we are checking how many peers have the ancestors in their reconciliation sets, and selecting a subset of the ones with fewer of them, so the amount of transactions to be fanout is the smallest possible.",
      "created_at": "2024-06-20T14:46:06Z",
      "updated_at": "2024-06-20T14:46:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1647708122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1647708122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1667753973",
      "pull_request_review_id": 2161914223,
      "id": 1667753973,
      "node_id": "PRRC_kwDOABII585jZ-f1",
      "diff_hunk": "@@ -81,4 +87,193 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    // If the peer is not registered, adding to the set fails\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    auto r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // As long as the peer is registered, adding a new wtxid to the set should work\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // If the peer is dropped, adding wtxids to its set should fail\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    r = tracker.AddToSet(peer_id0, wtxid2);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    // As long as the peer is registered and the transaction is not in the set, and there is no short id\n+    // collision, adding should work\n+    for (size_t i = 0; i < MAX_RECONSET_SIZE; ++i) {\n+        wtxid = Wtxid::FromUint256(frc.rand256());\n+        Wtxid collision;\n+        uint32_t short_id;\n+\n+        if (!tracker.HasCollision(peer_id1, wtxid, collision, short_id)) {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(r.m_succeeded);\n+            BOOST_REQUIRE(!r.m_conflict.has_value());\n+        } else {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(!r.m_succeeded);\n+            BOOST_REQUIRE_EQUAL(r.m_conflict.value(), collision);\n+        }\n+    }\n+\n+    // Trying to add the same item twice will just bypass\n+    r = tracker.AddToSet(peer_id1, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(AddToSetCollisionTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // Register the peer with a predefined salt so we can force the collision\n+    tracker.PreRegisterPeerWithSalt(peer_id0, 2);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    // Precompute collision\n+    Wtxid wtxid{Wtxid::FromUint256(uint256S(\"c70d778bccef36a81aed8da0b819d2bd28bd8653e56a5d40903df1a0ade0b876\"))};\n+    Wtxid collision{Wtxid::FromUint256(uint256S(\"ae52a6ecb8733fba1f7af6022a8b9dd327d7825054229fafcad7e03c38ae2a50\"))};\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    auto r = tracker.AddToSet(peer_id0, collision);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE_EQUAL(r.m_conflict.value(), wtxid);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    BOOST_REQUIRE(tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    tracker.ForgetPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                            /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    // Initialize a new instance with a new hasher to be used later on.\n+    CSipHasher hasher2(0x0706050403020100ULL, 0x4F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker2(TXRECONCILIATION_VERSION, hasher2);\n+    int inbound_peers = 36;\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        tracker2.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+        BOOST_REQUIRE_EQUAL(tracker2.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    // For 35 peers we will choose 3.5 flooding targets, which means that it's either 3 or 4 with\n+    // 50% chance. Make sure the randomness actually works by checking against a different hasher.\n+    size_t total_fanouted1 = 0;\n+    size_t total_fanouted2 = 0;\n+    auto wtxid = Wtxid::FromUint256(uint256(1)); // determinism is required.\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        total_fanouted1 += tracker.ShouldFanoutTo(wtxid, i,\n+                                                  /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+        total_fanouted2 += tracker2.ShouldFanoutTo(wtxid, i,\n+                                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+    }\n+    BOOST_CHECK_EQUAL(total_fanouted1, 3);\n+    BOOST_CHECK_EQUAL(total_fanouted2, 4);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 310,
      "original_position": 216,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nfor (int i = 1; i < inbound_peers; ++i) {\r\n        // create 4000 random wtxids so that FANOUT_TARGETS_PER_TX_CACHE_SIZE is breached\r\n        for (int j = 0; j < 4000; ++j) {\r\n            tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), i,\r\n                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\r\n        }\r\n    }\r\n```\r\n\r\nincreases coverage of the units tests to check the cache_size check in ```IsFanoutTarget``` . ",
      "created_at": "2024-07-07T19:52:13Z",
      "updated_at": "2024-07-07T19:52:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1667753973",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1667753973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759454074",
      "pull_request_review_id": 2304056408,
      "id": 1759454074,
      "node_id": "PRRC_kwDOABII585o3yN6",
      "diff_hunk": "@@ -81,4 +87,193 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(AddToSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    // If the peer is not registered, adding to the set fails\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    auto r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // As long as the peer is registered, adding a new wtxid to the set should work\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    r = tracker.AddToSet(peer_id0, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    // If the peer is dropped, adding wtxids to its set should fail\n+    tracker.ForgetPeer(peer_id0);\n+    Wtxid wtxid2{Wtxid::FromUint256(frc.rand256())};\n+    r = tracker.AddToSet(peer_id0, wtxid2);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+\n+    NodeId peer_id1 = 1;\n+    tracker.PreRegisterPeer(peer_id1);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id1, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id1));\n+\n+    // As long as the peer is registered and the transaction is not in the set, and there is no short id\n+    // collision, adding should work\n+    for (size_t i = 0; i < MAX_RECONSET_SIZE; ++i) {\n+        wtxid = Wtxid::FromUint256(frc.rand256());\n+        Wtxid collision;\n+        uint32_t short_id;\n+\n+        if (!tracker.HasCollision(peer_id1, wtxid, collision, short_id)) {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(r.m_succeeded);\n+            BOOST_REQUIRE(!r.m_conflict.has_value());\n+        } else {\n+            r = tracker.AddToSet(peer_id1, wtxid);\n+            BOOST_REQUIRE(!r.m_succeeded);\n+            BOOST_REQUIRE_EQUAL(r.m_conflict.value(), collision);\n+        }\n+    }\n+\n+    // Trying to add the same item twice will just bypass\n+    r = tracker.AddToSet(peer_id1, wtxid);\n+    BOOST_REQUIRE(r.m_succeeded);\n+    BOOST_REQUIRE(!r.m_conflict.has_value());\n+}\n+\n+BOOST_AUTO_TEST_CASE(AddToSetCollisionTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // Register the peer with a predefined salt so we can force the collision\n+    tracker.PreRegisterPeerWithSalt(peer_id0, 2);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    // Precompute collision\n+    Wtxid wtxid{Wtxid::FromUint256(uint256S(\"c70d778bccef36a81aed8da0b819d2bd28bd8653e56a5d40903df1a0ade0b876\"))};\n+    Wtxid collision{Wtxid::FromUint256(uint256S(\"ae52a6ecb8733fba1f7af6022a8b9dd327d7825054229fafcad7e03c38ae2a50\"))};\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    auto r = tracker.AddToSet(peer_id0, collision);\n+    BOOST_REQUIRE(!r.m_succeeded);\n+    BOOST_REQUIRE_EQUAL(r.m_conflict.value(), wtxid);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    Wtxid wtxid{Wtxid::FromUint256(frc.rand256())};\n+\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    BOOST_CHECK(tracker.IsPeerRegistered(peer_id0));\n+\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    BOOST_REQUIRE(tracker.TryRemovingFromSet(peer_id0, wtxid));\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+\n+    BOOST_REQUIRE(tracker.AddToSet(peer_id0, wtxid).m_succeeded);\n+    tracker.ForgetPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    NodeId peer_id0 = 0;\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                            /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(Wtxid::FromUint256(frc.rand256()), peer_id0,\n+                                           /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    // Initialize a new instance with a new hasher to be used later on.\n+    CSipHasher hasher2(0x0706050403020100ULL, 0x4F0E0D0C0B0A0908ULL);\n+    TxReconciliationTracker tracker2(TXRECONCILIATION_VERSION, hasher2);\n+    int inbound_peers = 36;\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        tracker2.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+        BOOST_REQUIRE_EQUAL(tracker2.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    // For 35 peers we will choose 3.5 flooding targets, which means that it's either 3 or 4 with\n+    // 50% chance. Make sure the randomness actually works by checking against a different hasher.\n+    size_t total_fanouted1 = 0;\n+    size_t total_fanouted2 = 0;\n+    auto wtxid = Wtxid::FromUint256(uint256(1)); // determinism is required.\n+    for (int i = 1; i < inbound_peers; ++i) {\n+        total_fanouted1 += tracker.ShouldFanoutTo(wtxid, i,\n+                                                  /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+        total_fanouted2 += tracker2.ShouldFanoutTo(wtxid, i,\n+                                                   /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/0);\n+    }\n+    BOOST_CHECK_EQUAL(total_fanouted1, 3);\n+    BOOST_CHECK_EQUAL(total_fanouted2, 4);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 310,
      "original_position": 216,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "2e0b6742b82e60ea685afd25f2d19b8b558678ce",
      "in_reply_to_id": 1667753973,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't taken this yet, given I'm working on a last commit reworking part of how the fanout selection works. I may consider it after that. In any case, looks like this is only filling the cache but not testing anything after it",
      "created_at": "2024-09-13T20:22:15Z",
      "updated_at": "2024-09-13T20:22:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1759454074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1759454074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769550928",
      "pull_request_review_id": 2319731127,
      "id": 1769550928,
      "node_id": "PRRC_kwDOABII585peTRQ",
      "diff_hunk": "@@ -2374,10 +2419,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (peer_can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n+        }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant\n+            // set. Otherwise it could be the case that the children were fanout before the parent\n+            // got reconciled.\n+            Assume(peer->m_wtxid_relay);\n+            const auto result = m_txreconciliation->AddToSet(peer_id, Wtxid::FromUint256(wtxid));\n+            if (!result.m_succeeded) {\n+                // If the transactions fails to get into the set, we fanout\n+                invs_to_send.push_back(wtxid);\n+                // If the transaction fails because it collides with an existing one,\n+                // we also remove and fanout the conflict and all its descendants.\n+                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 134,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "3879f550d3c513c83ab34df7bc390e33c89e7e72",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                // This is because our peer may have added the conflicting transaction\r\n```",
      "created_at": "2024-09-21T12:47:14Z",
      "updated_at": "2024-09-21T12:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1769550928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769550928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775342441",
      "pull_request_review_id": 2328451689,
      "id": 1775342441,
      "node_id": "PRRC_kwDOABII585p0ZNp",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't we decrease the number of `inbounds_fanout_tx_relay`/`outbounds_fanout_tx_relay` by the number of peers we're going to fanout with ancestors?",
      "created_at": "2024-09-25T14:28:26Z",
      "updated_at": "2024-09-25T14:29:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1775342441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775342441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776775938",
      "pull_request_review_id": 2330757791,
      "id": 1776775938,
      "node_id": "PRRC_kwDOABII585p53MC",
      "diff_hunk": "@@ -2332,12 +2330,53 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n+std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount() {\n+\n+    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+\n+    if (m_txreconciliation) {\n+        LOCK(m_peer_mutex);\n+        for(const auto& [peer_id, peer] : m_peer_map) {\n+            if (const auto tx_relay = peer->GetTxRelay()) {\n+                const bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+                if (peer_relays_txs && !m_txreconciliation->IsPeerRegistered(peer_id)) {\n+                    inbounds_fanout_tx_relay += peer->m_is_inbound;\n+                    outbounds_fanout_tx_relay += !peer->m_is_inbound;\n+                }\n+            }\n+        }\n+    }\n+\n+    return std::pair(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+}\n+\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay)\n {\n+    size_t inbounds_fanout_tx_relay{0}, outbounds_fanout_tx_relay{0};\n+    std::vector<Wtxid> parents;\n+    std::vector<NodeId> fanout_with_ancestors;\n+    const bool peer_can_reconcile = !force_relay && m_txreconciliation;\n+    {\n+        if (peer_can_reconcile) {\n+            std::tie(inbounds_fanout_tx_relay, outbounds_fanout_tx_relay) = GetFanoutPeersCount();\n+            LOCK(m_mempool.cs);\n+            if (auto txiter = m_mempool.GetIter(wtxid)) {\n+                const auto parents_refs = (*txiter)->GetMemPoolParents();\n+                if (!parents_refs.empty()) {\n+                    for (const auto &tx : parents_refs) {\n+                        parents.emplace_back(tx.get().GetTx().GetWitnessHash());\n+                    }\n+                    fanout_with_ancestors = m_txreconciliation->SortPeersByFewestParents(parents);\n+                    fanout_with_ancestors.resize(2); // FIXME: Resize to 2 for now",
      "path": "src/net_processing.cpp",
      "position": 83,
      "original_position": 202,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "9de4233d000be79b0d0ec934a634ed6b55433b3e",
      "in_reply_to_id": 1638809793,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We could. I left it as for simplicity, given this case should not be too frequent, so having a higher fanout under these conditions shouldn't be too bad. \r\n\r\nI'll consider adding it if it does not make the code much harder to read, or if there is a clear counterargument in favor of it.",
      "created_at": "2024-09-26T10:11:57Z",
      "updated_at": "2024-09-26T10:11:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1776775938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776775938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2161,
      "original_line": 2161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797721753",
      "pull_request_review_id": 2363929991,
      "id": 1797721753,
      "node_id": "PRRC_kwDOABII585rJw6Z",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can `outbounds_fanout_tx_relay` ever be greater than 1 here? I think if we have two (or more) unregistered outbound peers and at least one registered peer, then this results in an unsigned integer overflow. Which then overflows `targets_size` in `IsFanoutTarget`.",
      "created_at": "2024-10-12T15:46:04Z",
      "updated_at": "2024-10-12T16:19:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1797721753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1797721753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812987095",
      "pull_request_review_id": 2389107187,
      "id": 1812987095,
      "node_id": "PRRC_kwDOABII585sD_zX",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "working on a test and fix for this.",
      "created_at": "2024-10-23T15:03:12Z",
      "updated_at": "2024-10-23T15:03:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1812987095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812987095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813071345",
      "pull_request_review_id": 2389257068,
      "id": 1813071345,
      "node_id": "PRRC_kwDOABII585sEUXx",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sorry, I forgot to reply to this. We discussed this in person last week and this is indeed an issue. Happy to take your fix @naumenkogs",
      "created_at": "2024-10-23T15:44:23Z",
      "updated_at": "2024-10-23T15:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1813071345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813071345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1814685980",
      "pull_request_review_id": 2391985630,
      "id": 1814685980,
      "node_id": "PRRC_kwDOABII585sKekc",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay,  see the last two commits [here](https://github.com/naumenkogs/bitcoin/commits/2024-10-30116-fix-underflow/).\r\n\r\nI also dropped the `<0.001` check, it's kinda pointless anyway...",
      "created_at": "2024-10-24T10:06:07Z",
      "updated_at": "2024-10-24T10:06:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1814685980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1814685980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818548647",
      "pull_request_review_id": 2398229655,
      "id": 1818548647,
      "node_id": "PRRC_kwDOABII585sZNmn",
      "diff_hunk": "@@ -197,15 +195,52 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool HasCollisionInternal(TxReconciliationState *peer_state, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+\n+        short_id = peer_state->ComputeShortID(wtxid);\n+        const auto iter = peer_state->m_short_id_mapping.find(short_id);\n+\n+        if (iter != peer_state->m_short_id_mapping.end()) {\n+            collision = iter->second;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    bool HasCollision(NodeId peer_id, const Wtxid& wtxid, Wtxid& collision, uint32_t &short_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 184,
      "original_position": 35,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\nNot sure it's worth exposing this external method if the only reason to have it is testing.",
      "created_at": "2024-10-28T08:16:31Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818548647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818548647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818553463",
      "pull_request_review_id": 2398229655,
      "id": 1818553463,
      "node_id": "PRRC_kwDOABII585sZOx3",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\n\r\nworth adding a comment on what would happen if there are 3 colliding transactions (probably fine but some text would be helpful) :)",
      "created_at": "2024-10-28T08:20:30Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818553463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818553463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818555798",
      "pull_request_review_id": 2398229655,
      "id": 1818555798,
      "node_id": "PRRC_kwDOABII585sZPWW",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);\n+                                        vInv.emplace_back(MSG_WTX, wtxid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\nwhat would happen if a descendant was already flooded?",
      "created_at": "2024-10-28T08:22:22Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818555798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818555798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818568903",
      "pull_request_review_id": 2398229655,
      "id": 1818568903,
      "node_id": "PRRC_kwDOABII585sZSjH",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5\r\ncould *this* be used to game collisions (for *wtxid* you have here)?",
      "created_at": "2024-10-28T08:32:21Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818568903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818568903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818570491",
      "pull_request_review_id": 2398229655,
      "id": 1818570491,
      "node_id": "PRRC_kwDOABII585sZS77",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction\n+                                // to its set, in which reconciliation of these two would fail\n+                                auto collision = result.m_conflict;\n+                                if (collision.has_value()) {\n+                                    Assume(peer->m_wtxid_relay);\n+                                    CTxMemPool::setEntries descendants;\n+                                    m_mempool.CalculateDescendants(m_mempool.get_iter_from_wtxid(collision.value()), descendants);\n+                                    for (const auto &txit: descendants) {\n+                                        auto wtxid = txit->GetTx().GetWitnessHash();\n+                                        m_txreconciliation->TryRemovingFromSet(pto->GetId(), wtxid);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818568903,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "say a descendant was never considered for reconciliation (somehow), but now is used to removefromset some other transaction (it collides with)\r\n\r\nor maybe it was considered, but then was dropped in favor of something else (that's not how we currently handle collisions, but that would be a hard assumption)",
      "created_at": "2024-10-28T08:33:42Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818570491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818570491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818575030",
      "pull_request_review_id": 2398229655,
      "id": 1818575030,
      "node_id": "PRRC_kwDOABII585sZUC2",
      "diff_hunk": "@@ -523,7 +523,7 @@ class PeerManagerImpl final : public PeerManager\n     PeerManagerInfo GetInfo() const override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     void SendPings() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n     std::pair<size_t, size_t> GetFanoutPeersCount() override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, bool force_relay) override EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);",
      "path": "src/net_processing.cpp",
      "position": 15,
      "original_position": 5,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhy do you think force relay should influence whether we reconcile or flood? The transaction is relayed in either case (the original meaning of force relay)",
      "created_at": "2024-10-28T08:37:21Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818575030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818575030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818577080",
      "pull_request_review_id": 2398229655,
      "id": 1818577080,
      "node_id": "PRRC_kwDOABII585sZUi4",
      "diff_hunk": "@@ -2370,8 +2370,8 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     if (m_txreconciliation) {\n         LOCK(m_peer_mutex);\n         for(const auto& [peer_id, peer] : m_peer_map) {\n-            if (auto tx_relay = peer->GetTxRelay()) {\n-                bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+            if (const auto tx_relay = peer->GetTxRelay()) {",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 24,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\n these kind of refactors we better apply where the code was introduced, in the older commits of this PR",
      "created_at": "2024-10-28T08:38:59Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818577080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818577080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2129,
      "original_line": 2129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818583090",
      "pull_request_review_id": 2398229655,
      "id": 1818583090,
      "node_id": "PRRC_kwDOABII585sZWAy",
      "diff_hunk": "@@ -139,6 +139,12 @@ class TxReconciliationTracker\n      */\n     bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n                         size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay);\n+\n+    /**\n+     * Returns a collections of node ids sorted by how many parents the peer has in its reconciliation set",
      "path": "src/node/txreconciliation.h",
      "position": 121,
      "original_position": 6,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nyou can technically feed it arbitrary transactions. I think the comment should say it, and then later say \"we normally pass a list of parents to determine whether [... ... ...]\".",
      "created_at": "2024-10-28T08:43:20Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818583090",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818583090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818584774",
      "pull_request_review_id": 2398229655,
      "id": 1818584774,
      "node_id": "PRRC_kwDOABII585sZWbG",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhy not modifying the former commit that introduces this code?",
      "created_at": "2024-10-28T08:44:41Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818584774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818584774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818598067",
      "pull_request_review_id": 2398229655,
      "id": 1818598067,
      "node_id": "PRRC_kwDOABII585sZZqz",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 82,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhat about the order of the parents here? Deserves a comment at least. With the current non-cluster mempool it might break something?",
      "created_at": "2024-10-28T08:54:18Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818598067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818598067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2189,
      "original_line": 2189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818641775",
      "pull_request_review_id": 2398229655,
      "id": 1818641775,
      "node_id": "PRRC_kwDOABII585sZkVv",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);\n+                }\n+            } else {\n+                // If the peer is registered for set reconciliation, maybe pick it as fanout\n+                fanout = m_txreconciliation->ShouldFanoutTo(Wtxid::FromUint256(wtxid), peer_id, inbounds_fanout_tx_relay, outbounds_fanout_tx_relay);\n+            }\n         }\n+\n+        if (fanout) {\n+            // We fanout if force relay is set, if the peer does not reconcile transactions, or if it does but it has been picked for fanout.\n+            invs_to_send.push_back(peer->m_wtxid_relay ? wtxid : txid);\n+        } else {\n+            // Otherwise, we try to add the transaction to the peer's reconciliation set.\n+            // If the transaction has in mempool descendants, we will fanout all the descendant",
      "path": "src/net_processing.cpp",
      "position": 127,
      "original_position": 95,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "392facfce1be6d0395abecc2e049ff39635bd1a5\r\n\r\nwhere do you do this (consider in-mempool descendants and decide to fanout everything)? I only see you do it for the collision",
      "created_at": "2024-10-28T09:11:44Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818641775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818641775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2202,
      "original_line": 2202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818670032",
      "pull_request_review_id": 2398229655,
      "id": 1818670032,
      "node_id": "PRRC_kwDOABII585sZrPQ",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 212,
      "original_position": 6,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "20772c077832592265bd6a2876aa6b4cb7dbde7d\r\n\r\nwith this code, and especially the 5/2 trickle delay (very long), previous performance measurements become outdated.\r\n\r\nMy idea was to [delay the responses](https://github.com/bitcoin/bitcoin/pull/21515/commits/f99fa469115856aefa9799b3fc62ba09985933ad). And by this time, the hope was flooding does enough job so that scanning the sets through many connections does not work.\r\n\r\nAlso, adding to a set already happens on a trickle... so that's another level of protection",
      "created_at": "2024-10-28T09:19:43Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818670032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818670032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5829,
      "original_line": 5829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818702420",
      "pull_request_review_id": 2398229655,
      "id": 1818702420,
      "node_id": "PRRC_kwDOABII585sZzJU",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));",
      "path": "src/node/txreconciliation.cpp",
      "position": 161,
      "original_position": 47,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "d2f260507279b1edd6c0f55d02c7ae2e598b3585",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d2f260507279b1edd6c0f55d02c7ae2e598b3585\r\nnit: `Assume(m_states.emplace(peer_id, std::move(new_state)).second);`",
      "created_at": "2024-10-28T09:28:52Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818702420",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818702420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818703437",
      "pull_request_review_id": 2398229655,
      "id": 1818703437,
      "node_id": "PRRC_kwDOABII585sZzZN",
      "diff_hunk": "@@ -115,10 +133,66 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (peer_state->m_local_set.size() >= MAX_RECONSET_SIZE) return false;\n+\n+        // The caller currently keeps track of the per-peer transaction announcements, so it\n+        // should not attempt to add same tx to the set twice. However, if that happens, we will\n+        // simply ignore it.\n+        if (peer_state->m_local_set.insert(wtxid).second) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                        \"Now the set contains %i transactions.\\n\",\n+                          wtxid.ToString(), peer_id, peer_state->m_local_set.size());\n+        }\n+        return true;\n+    }\n+\n+    bool TryRemovingFromSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        auto removed = peer_state->m_local_set.erase(wtxid) > 0;\n+        if (removed) {\n+            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Removed %s from the reconciliation set for peer=%d. \" /* Continued */",
      "path": "src/node/txreconciliation.cpp",
      "position": 275,
      "original_position": 92,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "d2f260507279b1edd6c0f55d02c7ae2e598b3585",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/commit/d2f260507279b1edd6c0f55d02c7ae2e598b3585\r\n\r\nnit: in three places in this commit `/* Continued */` should be dropped, it's no longer necessary (been a linter thing)",
      "created_at": "2024-10-28T09:29:36Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818703437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818703437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 325,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818706047",
      "pull_request_review_id": 2398229655,
      "id": 1818706047,
      "node_id": "PRRC_kwDOABII585sZ0B_",
      "diff_hunk": "@@ -6184,6 +6194,27 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;\n+                    const bool reconciles_txs = m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId());\n+                    if (reconciles_txs) {\n+                        for (const auto& [cur_peer_id, cur_peer] : m_peer_map) {\n+                            // Skip the source of the transaction.\n+                            if (cur_peer_id == pto->GetId()) continue;\n+                            if (auto peer_tx_relay = cur_peer->GetTxRelay()) {\n+                                LOCK(peer_tx_relay->m_bloom_filter_mutex);\n+                                // When we consider to which (and how many) Erlay peers\n+                                // we should fanout a tx, we must know to how\n+                                // many peers we would certainly announce this tx\n+                                // (non-Erlay peers).\n+                                if (peer_tx_relay->m_relay_txs && !m_txreconciliation->IsPeerRegistered(cur_peer_id)) {\n+                                    inbounds_fanout_tx_relay += cur_peer->m_is_inbound;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "873e8dd60b93f740330e9b0fbae4b3200204653a",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "873e8dd60b93f740330e9b0fbae4b3200204653a\r\n\r\nnit: cur_peer->m_is_inbound ? ++inbounds_fanout_tx_relay : ++outbounds_fanout_tx_relay",
      "created_at": "2024-10-28T09:31:16Z",
      "updated_at": "2024-10-28T09:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818706047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818706047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819654430",
      "pull_request_review_id": 2400051633,
      "id": 1819654430,
      "node_id": "PRRC_kwDOABII585sdbke",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The commit with the casting works, but the test one is actually not a good way of testing this; it would pass both with and without the change.\r\n\r\nTurns out that passing a huge value to `IsFanoutTarget` would result in `targets_size` being `0`, which results in the method returning `false`. I don't think there is really a good way of testing this.\r\n\r\nI'll take the code commit but skip the addition to the test.",
      "created_at": "2024-10-28T19:42:46Z",
      "updated_at": "2024-10-28T19:42:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1819654430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819654430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819663339",
      "pull_request_review_id": 2400066625,
      "id": 1819663339,
      "node_id": "PRRC_kwDOABII585sddvr",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I squashed the change in here: ad95b2c0e21f1e865f967aa9463ef99bc252550a",
      "created_at": "2024-10-28T19:48:08Z",
      "updated_at": "2024-10-28T19:48:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1819663339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1819663339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820474026",
      "pull_request_review_id": 2401341173,
      "id": 1820474026,
      "node_id": "PRRC_kwDOABII585sgjqq",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting. So, for me, the first commit (with a new test) takes forever to execute.\r\n\r\nMore specifically, the execution hangs on `best_peers.resize(targets_size);`, with `targets_size` being a huge number.\r\n\r\nI guess your system handles this gracefully instead?\r\n\r\nA clear failure could be triggered by e.g. `Assume(targets_size <= m_states.size());`",
      "created_at": "2024-10-29T09:57:31Z",
      "updated_at": "2024-10-29T09:57:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820474026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820474026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820487554",
      "pull_request_review_id": 2401362483,
      "id": 1820487554,
      "node_id": "PRRC_kwDOABII585sgm-C",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 336,
      "original_position": 36,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4234f5ebe133b949080aaa56da8cbdd18b650ff2\r\n\r\nOriginally, the code forced me to make this call for every peer, that's why i needed it to be deterministic. It's not the case anymore. Do we still need determinism then?",
      "created_at": "2024-10-29T10:06:19Z",
      "updated_at": "2024-10-29T10:06:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820487554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820487554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 385,
      "original_line": 385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820490053",
      "pull_request_review_id": 2401366605,
      "id": 1820490053,
      "node_id": "PRRC_kwDOABII585sgnlF",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 336,
      "original_position": 36,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Otherwise we can drop `m_deterministic_randomizer` altogether and use some cheap `FastRandomContext` instead.",
      "created_at": "2024-10-29T10:08:05Z",
      "updated_at": "2024-10-29T10:08:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820490053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820490053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 385,
      "original_line": 385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820518288",
      "pull_request_review_id": 2401412734,
      "id": 1820518288,
      "node_id": "PRRC_kwDOABII585sgueQ",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is no need to cast it to double anymore. \r\n\r\nWhat we should do is something like\r\n```\r\n        size_t outbounds_target_size = 0;\r\n        if (OUTBOUND_FANOUT_DESTINATIONS > outbounds_fanout_tx_relay) outbounds_target_size = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\r\n```\r\n\r\nPerhaps there is a less ugly way to do this. But casting to double seems worse.",
      "created_at": "2024-10-29T10:17:24Z",
      "updated_at": "2024-10-29T10:17:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820518288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820518288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820521627",
      "pull_request_review_id": 2401417792,
      "id": 1820521627,
      "node_id": "PRRC_kwDOABII585sgvSb",
      "diff_hunk": "@@ -142,15 +378,166 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // First, try checking if the result is already cached, and return it if so\n+        if (const auto &it = m_tx_fanout_targets_cache_data.find(wtxid); it != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(it->second.begin(), it->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n+        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n+        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n+        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n+        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n+        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n+        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& [node_id, op_peer_state]: m_states) {\n+            const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n+            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n+                best_peers.emplace_back(hash_key, node_id);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        const bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            const auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double n;\n+        if (peer_state->m_we_initiate) {\n+            n = OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 409,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1797721753,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "feel free to resolve this and let's talk in the new commit.",
      "created_at": "2024-10-29T10:19:35Z",
      "updated_at": "2024-10-29T10:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820521627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820521627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820533885",
      "pull_request_review_id": 2401436632,
      "id": 1820533885,
      "node_id": "PRRC_kwDOABII585sgyR9",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The following test would break the code if we forget the double cast (discussion [here](https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820474026)). I suggest adding it to the tests.\r\n\r\n```\r\n        std::tie(in_fanout_targets, out_fanout_targets) = tracker.GetFanoutTargets(Wtxid::FromUint256(frc.rand256()), /*inbounds_fanout_tx_relay=*/0, /*outbounds_fanout_tx_relay=*/100);\r\n        BOOST_CHECK(!tracker.ShouldFanoutTo(peer_id0, in_fanout_targets, out_fanout_targets));\r\n\r\n```",
      "created_at": "2024-10-29T10:27:47Z",
      "updated_at": "2024-10-29T10:27:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820533885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820533885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820538647",
      "pull_request_review_id": 2401443934,
      "id": 1820538647,
      "node_id": "PRRC_kwDOABII585sgzcX",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820518288,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(technically the code you have is correct, it's just confusing for no reason i think)",
      "created_at": "2024-10-29T10:30:45Z",
      "updated_at": "2024-10-29T10:30:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820538647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820538647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820542894",
      "pull_request_review_id": 2401450441,
      "id": 1820542894,
      "node_id": "PRRC_kwDOABII585sg0eu",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        return std::make_tuple(in_fanout_targets, out_fanout_targets);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4234f5ebe133b949080aaa56da8cbdd18b650ff2\r\n\r\nWe can just merge the two vectors, no? There is no use for this separation.",
      "created_at": "2024-10-29T10:33:33Z",
      "updated_at": "2024-10-29T10:33:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1820542894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1820542894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821427081",
      "pull_request_review_id": 2402910776,
      "id": 1821427081,
      "node_id": "PRRC_kwDOABII585skMWJ",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 336,
      "original_position": 36,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, this really depends. `GetFanoutTargets` is called by `RelayTransaction`, which, in turn, may be called by `ProcessMessage` for a peer that has `NetPermissionFlags::ForceRelay`. So if force relay is used for both fanout and set reconciliation, as suggested in https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1818575030, then this could be called twice leading to two different sorting if we don't do so deterministically",
      "created_at": "2024-10-29T19:34:17Z",
      "updated_at": "2024-10-29T19:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821427081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821427081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 385,
      "original_line": 385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821431430",
      "pull_request_review_id": 2402917895,
      "id": 1821431430,
      "node_id": "PRRC_kwDOABII585skNaG",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};\n+        deterministic_randomizer_in.Write(wtxid.ToUint256());\n+        CSipHasher deterministic_randomizer_out{deterministic_randomizer_in};\n+        const size_t inbounds_target_size = ((deterministic_randomizer_in.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n+\n+        // Pick all reconciliation registered peers and assign them a deterministically random value based on their peer id\n+        // Also, split peers in inbounds/outbounds\n+        std::vector<std::pair<uint64_t, NodeId>> sorted_inbounds, sorted_outbounds;\n         for (const auto& [node_id, op_peer_state]: m_states) {\n             const auto peer_state = std::get_if<TxReconciliationState>(&op_peer_state);\n-            if (peer_state && peer_state->m_we_initiate == we_initiate) {\n-                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(node_id).Finalize();\n-                best_peers.emplace_back(hash_key, node_id);\n+            if (peer_state) {\n+                if (peer_state->m_we_initiate) {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_out).Write(node_id).Finalize();\n+                    sorted_outbounds.emplace_back(hash_key, node_id);\n+                } else {\n+                    uint64_t hash_key = CSipHasher(deterministic_randomizer_in).Write(node_id).Finalize();\n+                    sorted_inbounds.emplace_back(hash_key, node_id);\n+                }\n+\n             }\n         }\n \n-        std::sort(best_peers.begin(), best_peers.end());\n-\n-        auto it = best_peers.begin();\n-        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+        // Sort the peers based on their assigned random value, extract the node_ids and trim the collections to size\n+        std::vector<NodeId> in_fanout_targets;\n+        if (inbounds_target_size >= 1) {\n+            std::sort(sorted_inbounds.begin(), sorted_inbounds.end());\n+            for_each(sorted_inbounds.begin(), sorted_inbounds.end(),\n+                    [&in_fanout_targets](auto& keyed_peer) { in_fanout_targets.push_back(keyed_peer.second); });\n+            in_fanout_targets.resize(inbounds_target_size);\n         }\n-        return false;\n+        std::vector<NodeId> out_fanout_targets;\n+        if (outbounds_target_size >= 1) {\n+            std::sort(sorted_outbounds.begin(), sorted_outbounds.end());\n+            for_each(sorted_outbounds.begin(), sorted_outbounds.end(),\n+                    [&out_fanout_targets](auto& keyed_peer) { out_fanout_targets.push_back(keyed_peer.second); });\n+            out_fanout_targets.resize(outbounds_target_size);\n+        }\n+\n+        return std::make_tuple(in_fanout_targets, out_fanout_targets);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820542894,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, you're right. Given how small the two vectors are, calling `ShouldFanoutTo` with a merged vector should not incur any major overhead, so merging will make it easier to read",
      "created_at": "2024-10-29T19:38:19Z",
      "updated_at": "2024-10-29T19:38:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821431430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821431430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821533301",
      "pull_request_review_id": 2403082616,
      "id": 1821533301,
      "node_id": "PRRC_kwDOABII585skmR1",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820533885,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added it to the initial commit and reworked it on the last one",
      "created_at": "2024-10-29T21:06:47Z",
      "updated_at": "2024-10-29T21:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1821533301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1821533301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822182678",
      "pull_request_review_id": 2404101797,
      "id": 1822182678,
      "node_id": "PRRC_kwDOABII585snE0W",
      "diff_hunk": "@@ -363,79 +363,75 @@ class TxReconciliationTracker::Impl\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n \n-    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double n) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    std::tuple<std::vector<NodeId>, std::vector<NodeId>> GetFanoutTargets(const Wtxid& wtxid, size_t inbounds_fanout_tx_relay, size_t outbounds_fanout_tx_relay) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n-        // We use the pre-determined randomness to give a consistent result per transaction, thus making sure that no transaction\n-        // gets \"unlucky\" if every per-peer roll fails. This means that, given a `wtxid`, the ordering will always be the same,\n-        // independently of what peer this is queried for. So some need to be picked eventually (as long as `n` doesn't shrink).\n-        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n-        deterministic_randomizer.Write(wtxid.ToUint256());\n-\n-        // We decide a peer is a fanout target for a given transaction deterministically at random based on two things: the wtxid of\n-        // the transaction to be relayed (which we used as a seed for the randomizer) and the likelihood to fanout this transaction\n-        // (which depends on how many non-erlay tx-relay peers we have, and the direction of the connection).\n-        // In order to do this, we sort the peers in random order, and then we pick the top `n` peers of the resulting collection.\n-        // If our chosen peer happens to be within the picked selection, we fanout to it, otherwise we reconcile.\n-        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(n * 0x100000000)) >> 32;\n-\n-        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n-        best_peers.reserve(m_states.size());\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n \n+        // We decide whether a particular peer is a low-fanout flood target differently based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations.\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        auto outbounds_target_size = (double)OUTBOUND_FANOUT_DESTINATIONS - outbounds_fanout_tx_relay;\n+\n+        // Since we use the fraction for inbound peers, we first need to compute the total number of inbound targets.\n+        const double inbound_targets = (inbounds_fanout_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+        double n = std::max(inbound_targets - inbounds_fanout_tx_relay, 0.0);\n+\n+        // Being this a fraction, we need to round it either up or down. We do this deterministically at random based on the\n+        // transaction we are picking the peers for.\n+        CSipHasher deterministic_randomizer_in{m_deterministic_randomizer};",
      "path": "src/node/txreconciliation.cpp",
      "position": 336,
      "original_position": 36,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "4234f5ebe133b949080aaa56da8cbdd18b650ff2",
      "in_reply_to_id": 1820487554,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could be `ReattemptInitialBroadcast`, `BroadcastTransaction` (rpc/wallet), `ProcessValidTx`, or earlier upon handling `NetMsgType::TX`.\r\n\r\n~~I think it's odd we have two calls to `RelayTransaction` in the two latter cases. I'd rather change this code, e.g.  pass `already_relayed` (duplicating force) to `RelayTransaction`. Perhaps too much for this PR and we should do it elsewhere (especially now that the package stuff happens in-between). I understand why it was ok when `RelayTransaction` was simple.~~\r\n\r\n~~And while we're stuck with these two calls~~, let's say we drop the determinism.\r\n\r\nWhy `RelayTransaction` doesn't look at `m_tx_inventory_to_send` very early (and maybe `m_tx_inventory_known_filter` too)? That would catch the transactions we already set for flooding, and just pass on them.\r\n\r\nNow, the transactions in the sets. If we add them to the set again, nothing is done. If we try to flood them by a different choice, nothing is done still because we hit `m_tx_inventory_to_send` already having it.\r\n \r\nThus, for now, i think we should repeat the `m_tx_inventory_to_send` check above, rather than having the determinism. It kinda makes sense anyway, no?",
      "created_at": "2024-10-30T09:15:53Z",
      "updated_at": "2024-10-30T09:52:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822182678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822182678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 385,
      "original_line": 385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822431933",
      "pull_request_review_id": 2404538684,
      "id": 1822431933,
      "node_id": "PRRC_kwDOABII585soBq9",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 212,
      "original_position": 6,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just talked to Bruno a bit more about this.\r\n\r\nI think it's fair to compare this delayed set mechanism to what i have in the code there.\r\nI like my solution more because:\r\n- its synced across peers (handles better spying across multiple conns i think?)\r\n- simpler code\r\n- more flexibility (doesn't have to be same trickling as adding to sets or fanouting)\r\n\r\nInterested in what other people think though.\r\n\r\n",
      "created_at": "2024-10-30T11:35:09Z",
      "updated_at": "2024-10-30T11:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822431933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822431933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5829,
      "original_line": 5829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822834821",
      "pull_request_review_id": 2405261931,
      "id": 1822834821,
      "node_id": "PRRC_kwDOABII585spkCF",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 212,
      "original_position": 6,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the current approach mimics what you were doing with your old one. I haven't picked up the trickle reduction commit not the delayed response, but I was planning to in the next PR.\r\n\r\nYour approach used to add transactions to the reconciliation set during INV building, which happens on trickle intervals. So data was added to `to_be_announced` (delayed) on `RelayTransaction` and then made available on trickle. The current approach adds data to the delayed set on `RelayTransaction` and makes it available on trickle too.\r\n\r\nSo I don't think the previous performance measurements become outdated, building the whole Erlay PR on this should yield similar results. ",
      "created_at": "2024-10-30T15:07:46Z",
      "updated_at": "2024-10-30T15:07:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1822834821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1822834821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5829,
      "original_line": 5829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823207236",
      "pull_request_review_id": 2405970195,
      "id": 1823207236,
      "node_id": "PRRC_kwDOABII585sq-9E",
      "diff_hunk": "@@ -2370,8 +2370,8 @@ std::pair<size_t, size_t> PeerManagerImpl::GetFanoutPeersCount()\n     if (m_txreconciliation) {\n         LOCK(m_peer_mutex);\n         for(const auto& [peer_id, peer] : m_peer_map) {\n-            if (auto tx_relay = peer->GetTxRelay()) {\n-                bool peer_relays_txs = WITH_LOCK(tx_relay->m_bloom_filter_mutex, return tx_relay->m_relay_txs);\n+            if (const auto tx_relay = peer->GetTxRelay()) {",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 24,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818577080,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, should have been added to the previous commit. Will fix",
      "created_at": "2024-10-30T18:45:43Z",
      "updated_at": "2024-10-30T18:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823207236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823207236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2129,
      "original_line": 2129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823223107",
      "pull_request_review_id": 2406001681,
      "id": 1823223107,
      "node_id": "PRRC_kwDOABII585srC1D",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Being this part of `RelayTransaction`, which processed transactions one at a time, and given that if a collision happens the existing transaction is removed from the set, there cannot be a three-way collision. If a third transaction that happens to have the same short id as the two previous ones is added to the set later, it would be added normally since there won't be a transaction to collide with.\r\n\r\nI could add a comment for three, but someone may then mention what happens if there are four 😅 ",
      "created_at": "2024-10-30T18:58:41Z",
      "updated_at": "2024-10-30T18:58:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823223107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823223107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823263917",
      "pull_request_review_id": 2406089347,
      "id": 1823263917,
      "node_id": "PRRC_kwDOABII585srMyt",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you mean squashing these changes instead of having a \"move\" commit?",
      "created_at": "2024-10-30T19:31:39Z",
      "updated_at": "2024-10-30T19:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1823263917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1823263917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824060041",
      "pull_request_review_id": 2407335911,
      "id": 1824060041,
      "node_id": "PRRC_kwDOABII585suPKJ",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was looking for something like \"As a general rule, we keep the transaction that appeared first\".\r\n\r\nCurrently, the `AddToSet` documentation seems outdated—it basically claims that the only way to fail is to reach a set limit.\r\n\r\nHow about the following replacement:\r\n\r\n```\r\n    /**\r\n     * Step 1. Add a to-be-announced transaction to the local reconciliation set of the target peer.\r\n     * Returns false if the set is at capacity, or if the set contains a colliding transaction.\r\n     * Returns true if the transaction appears in the set (whether it was already there or just was added).\r\n     */\r\n```",
      "created_at": "2024-10-31T08:22:33Z",
      "updated_at": "2024-10-31T08:22:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824060041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824060041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824208275",
      "pull_request_review_id": 2407562196,
      "id": 1824208275,
      "node_id": "PRRC_kwDOABII585suzWT",
      "diff_hunk": "@@ -6270,6 +6270,10 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n                 // Determine transactions to relay\n                 if (fSendTrickle) {\n+                    if (m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId())) {\n+                        // Make transactions added to the reconciliation set during the last interval available\n+                        m_txreconciliation->ReadyDelayedTransactions(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": 212,
      "original_position": 6,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "20772c077832592265bd6a2876aa6b4cb7dbde7d",
      "in_reply_to_id": 1818670032,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree now, it's equivalent. Still wrapping my head around `RelayTransaction` refactoring :)\r\n\r\n---------------------------\r\n\r\nA difference could be in handling dependencies: during the trickle window after the first transaction arrives.\r\n\r\nSay, a parent arrives, and then a child arrives in a second. In my approach we may notice the child when handling (announcement-wise) the parent (because handling the parent is postponed via trickle).\r\nIn your approach, you handle the parent independently.\r\n\r\nIs there any use of knowing about the child while handling (announcement-wise) the parent? I don't think so. You probably could save some efforts of adding the parent to reconset, and then removing it, but that should be cheap anyway.\r\n\r\n-------------------------\r\n\r\n(the child-before-parent case is entirely different, as the child-to-arrive-early doesn't normally hit the announcement step while in orphanage)\r\n\r\n",
      "created_at": "2024-10-31T10:14:01Z",
      "updated_at": "2024-10-31T10:14:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824208275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824208275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5829,
      "original_line": 5829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824212857",
      "pull_request_review_id": 2407569080,
      "id": 1824212857,
      "node_id": "PRRC_kwDOABII585su0d5",
      "diff_hunk": "@@ -2399,10 +2420,57 @@ void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid\n         // in the announcement.\n         if (tx_relay->m_next_inv_send_time == 0s) continue;\n \n-        const uint256& hash{peer.m_wtxid_relay ? wtxid : txid};\n-        if (!tx_relay->m_tx_inventory_known_filter.contains(hash)) {\n-            tx_relay->m_tx_inventory_to_send.insert(hash);\n+        bool fanout = true;\n+        if (can_reconcile && m_txreconciliation->IsPeerRegistered(peer_id)) {\n+            // If this transaction has parents in the mempool and the peer is within the peers with less ancestors\n+            // to reconcile, fanout the transaction an all its ancestors. We just add the parents here and leave fanout as true\n+            auto it = std::find(fanout_with_ancestors.begin(), fanout_with_ancestors.end(), peer_id);\n+            if (it != fanout_with_ancestors.end()) {\n+                for (const auto wtxid: parents) {\n+                    m_txreconciliation->TryRemovingFromSet(peer_id, wtxid);\n+                    invs_to_send.push_back(wtxid);",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 82,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818598067,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "another question: say a child arrives a few minutes after a parent (parent still in the mempool, but it's been announced to peers a while ago). Why bother with this inv? Perhaps we should do it only if `TryRemovingFromSet` actually have removed it?\r\n\r\n(same applies to handling a collision below)\r\n\r\ni know `m_tx_inventory_known_filter` will probably catch it, but i think it's better to do it here.",
      "created_at": "2024-10-31T10:17:55Z",
      "updated_at": "2024-10-31T10:18:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824212857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824212857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2189,
      "original_line": 2189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824219529",
      "pull_request_review_id": 2407578851,
      "id": 1824219529,
      "node_id": "PRRC_kwDOABII585su2GJ",
      "diff_hunk": "@@ -6264,8 +6264,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             }\n                         }\n \n-                        if (fanout || !m_txreconciliation->AddToSet(pto->GetId(), wtxid).m_succeeded) {\n+                        if (fanout) {\n                             vInv.push_back(inv);\n+                        } else {\n+                            // If the transactions fails to get into the set, we fanout\n+                            auto result = m_txreconciliation->AddToSet(pto->GetId(), wtxid);\n+                            if (!result.m_succeeded) {\n+                                vInv.push_back(inv);\n+                                // If the transaction fails because it collides with an existing one,\n+                                // we also remove and fanout the conflict and all its descendants.\n+                                // This is because our peer may have added the conflicting tranaction",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "50c19dd21f6e437cd8e3d9047a89d793d097c5e5",
      "in_reply_to_id": 1818553463,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Apparently I was wrong.\r\n\r\n```\r\n                // If the transaction fails because it collides with an existing one,\r\n                // we also remove and fanout the conflict and all its descendants.\r\n                // This is because our peer may have added the conflicting transaction\r\n                // to its set, in which reconciliation of these two would fail\r\n```\r\n\r\nSay A, B, C arrive.\r\n- First A added to the set.\r\n- then B doesn't make it to the set, but also drops A from it.\r\n- then C takes a place in the set.",
      "created_at": "2024-10-31T10:23:21Z",
      "updated_at": "2024-10-31T10:23:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824219529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824219529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824221603",
      "pull_request_review_id": 2407581905,
      "id": 1824221603,
      "node_id": "PRRC_kwDOABII585su2mj",
      "diff_hunk": "@@ -6216,27 +6284,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n-\n-                    size_t inbounds_fanout_tx_relay = 0, outbounds_fanout_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "c99bf9345bbedc2c45449f5cd85b704e55a281d3",
      "original_commit_id": "392facfce1be6d0395abecc2e049ff39635bd1a5",
      "in_reply_to_id": 1818584774,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes",
      "created_at": "2024-10-31T10:25:06Z",
      "updated_at": "2024-10-31T10:25:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30116#discussion_r1824221603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824221603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30116"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6220,
      "side": "LEFT"
    }
  ]
}