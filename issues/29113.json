{
  "type": "issue",
  "issue": {
    "id": 2047756086,
    "node_id": "I_kwDOABII5856Dkc2",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29113",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29113/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/29113",
    "number": 29113,
    "state": "open",
    "state_reason": null,
    "title": "Test case for spending bare multisig?",
    "body": "I think the only place we currently test that spending a bare multisig utxo is okay is in `AreInputsStandard` in `script_p2sh_tests.cpp`, but this only checks that `AreInputsStandard()` passes, it doesn't check that there isn't some other rule preventing the spend from entering the mempool and eventually being mined.\r\n\r\nAdding\r\n\r\n```python\r\n        self.log.info('Spending a confirmed bare multisig is okay')\r\n        node = self.nodes[0]\r\n        address = self.wallet.get_address()\r\n        tx = tx_from_hex(raw_tx_reference)\r\n        privkey, pubkey = generate_keypair()\r\n        tx.vout[0].scriptPubKey = keys_to_multisig_script([pubkey] * 3, k=1)  # Some bare multisig script (1-of-3)\r\n        tx.rehash()\r\n        self.generateblock(node, address, [tx.serialize().hex()])\r\n        tx_spend = CTransaction()\r\n        tx_spend.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\r\n        tx_spend.vout.append(CTxOut(tx.vout[0].nValue - int(fee*COIN), script_to_p2wsh_script(CScript([OP_TRUE]))))\r\n        tx_spend.rehash()\r\n        sign_input_legacy(tx_spend, 0, tx.vout[0].scriptPubKey, privkey, sighash_type=SIGHASH_ALL)\r\n        tx_spend.vin[0].scriptSig = bytes(CScript([OP_0])) + tx_spend.vin[0].scriptSig\r\n        self.check_mempool_result(\r\n            result_expected=[{'txid': tx_spend.rehash(), 'allowed': True, 'vsize': tx_spend.get_vsize(), 'fees': { 'base': Decimal('0.00000700')}}],\r\n            rawtxs=[tx_spend.serialize().hex()],\r\n            maxfeerate=0,\r\n        )\r\n```\r\n\r\nat the end of `mempool_accept.py` might therefore be a reasonable addition?\r\n\r\nCan add a bug to trigger test failures via:\r\n\r\n```diff\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -185,6 +185,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\r\n \r\n         std::vector<std::vector<unsigned char> > vSolutions;\r\n         TxoutType whichType = Solver(prev.scriptPubKey, vSolutions);\r\n+        if (whichType == TxoutType::MULTISIG) return false;\r\n         if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::WITNESS_UNKNOWN) {\r\n             // WITNESS_UNKNOWN failures are typically also caught with a policy\r\n             // flag in the script interpreter, but it can be helpful to catch\r\n```\r\n",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 0,
    "created_at": "2023-12-19T01:27:34Z",
    "updated_at": "2023-12-19T01:27:58Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 11283501860,
      "node_id": "LE_lADOABII5856Dkc2zwAAAAKgjJMk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11283501860",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-19T01:27:34Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    }
  ]
}