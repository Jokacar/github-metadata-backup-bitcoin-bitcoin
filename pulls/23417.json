{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417",
    "id": 771713901,
    "node_id": "PR_kwDOABII584t_2tt",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23417",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23417.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23417.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
    "number": 23417,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet, spkm: Move key management from DescriptorScriptPubKeyMan to wallet level KeyManager",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR changes DescriptorScriptPubKeyMan to no longer handle relevant keys directly. Instead all keys for all DescriptorSPKMs will be handled by a new `KeyManager` class which exists within `CWallet` (a reference to it is passed to each DescriptorSPKM). This allows us to have a concept of a wallet HD key for descriptor wallets. This makes it easier to add new single key descriptors that use the same HD master key as the rest of the autogenerated descriptors (e.g. for taproot). Multisigs will also be easier as an xpub belonging to the wallet can be exported without needing to do weird things like descriptor introspection and guessing about which descriptor's key to use.\r\n\r\n`KeyManager` is a class which handles all of the keys for DescriptorSPKMs. It contains the maps that hold the keys, deals with writing those keys to disk, and handles their encryption. Encryption keys are still managed by `CWallet` but provided to `KeyManager` through the `WalletStorage` interface. Signing is still done through `DescriptorScriptPubKeyMan::SignTransaction` however this will fetch the keys from `KeyManager` rather than storing keys in the DescriptorSPKM to be used.\r\n\r\nThis change is backwards compatible. Although `KeyManager` writes and uses keys in new `keyman_key` and `keyman_ckey` records, it will still write keys for each descriptor in `walletdescriptorkey` and `walletdescriptorckey` records. This allows a descriptor wallet created using this change to be opened by 22.0 and 0.21. Additionally, wallets created with older software will automatically be upgraded to using the `KeyManager` at first loading. This is done in the background and does not require any user interaction (i.e. no passphrase required).",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 1482182044,
        "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
        "name": "Descriptors",
        "description": "",
        "color": "e9f76c",
        "default": false
      }
    ],
    "created_at": "2021-11-02T18:11:16Z",
    "updated_at": "2023-12-19T12:22:37Z",
    "closed_at": "2022-12-19T22:35:38Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "8404c1aacb746af4eb98fbadec0dee4b3c5e71f0",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:wallet-keyman",
      "ref": "wallet-keyman",
      "sha": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 254710,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-18T22:36:55Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-10-20T10:28:16Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a52ff619a45c760f657413cbd40e1e2226068541",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36203,
        "stargazers_count": 72710,
        "watchers_count": 72710,
        "size": 246907,
        "default_branch": "master",
        "open_issues_count": 675,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-19T12:42:08Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-12-19T11:33:40Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 870,
    "deletions": 295,
    "changed_files": 17,
    "commits": 21,
    "review_comments": 61,
    "comments": 24
  },
  "events": [
    {
      "event": "commented",
      "id": 958114472,
      "node_id": "IC_kwDOABII5845G6qo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/958114472",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-02T19:47:15Z",
      "updated_at": "2021-11-02T19:47:15Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. This will make #22341 a _lot_ easier.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-958114472",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "labeled",
      "id": 5558054569,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFLSS6p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5558054569",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-02T20:19:42Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 5558054571,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFLSS6r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5558054571",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-02T20:19:42Z",
      "label": {
        "name": "Descriptors",
        "color": "e9f76c"
      }
    },
    {
      "event": "labeled",
      "id": 5558054572,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFLSS6s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5558054572",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-02T20:19:42Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 5558054574,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFLSS6u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5558054574",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-02T20:19:42Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 958482937,
      "node_id": "IC_kwDOABII5845IUn5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/958482937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T00:08:49Z",
      "updated_at": "2022-12-19T16:14:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26627](https://github.com/bitcoin/bitcoin/pull/26627) (wallet: Migrate non-HD keys with single combo containing a list of keys by achow101)\n* [#26596](https://github.com/bitcoin/bitcoin/pull/26596) (wallet: Migrate legacy wallets to descriptor wallets without requiring BDB by achow101)\n* [#26008](https://github.com/bitcoin/bitcoin/pull/26008) (wallet: cache IsMine scriptPubKeys to improve performance of wallets with a lot of non-ranged descriptors by achow101)\n* [#25991](https://github.com/bitcoin/bitcoin/pull/25991) (Wallet: Add foreign_outputs metadata to support CoinJoin transactions by luke-jr)\n* [#25907](https://github.com/bitcoin/bitcoin/pull/25907) (wallet: rpc to add automatically generated descriptors by achow101)\n* [#25766](https://github.com/bitcoin/bitcoin/pull/25766) (wallet: Include a signature with encrypted keys to mitigate a wallet scam by achow101)\n* [#24914](https://github.com/bitcoin/bitcoin/pull/24914) (wallet: Load database records in a particular order by achow101)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-958482937",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T00:20:45Z",
      "updated_at": "2021-11-03T00:20:45Z",
      "source": {
        "issue": {
          "id": 1041142343,
          "node_id": "PR_kwDOABII584t7NxV",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23409",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23409/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23409/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23409/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23409",
          "number": 23409,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Take Span in SetSeed",
          "body": "This makes calling code less verbose and less fragile. Also, by adding\r\nthe CKey::data() member function, it is now possible to call HexStr()\r\nwith a CKey object.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23409",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23409",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23409.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23409.patch"
          },
          "closed_at": "2021-11-08T11:59:58Z",
          "created_at": "2021-11-01T12:57:13Z",
          "updated_at": "2022-11-08T17:34:55Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T01:33:56Z",
      "updated_at": "2021-11-03T01:33:56Z",
      "source": {
        "issue": {
          "id": 1030374679,
          "node_id": "PR_kwDOABII584tY19D",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23308",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23308/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23308/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23308/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23308",
          "number": 23308,
          "state": "closed",
          "state_reason": null,
          "title": "Update basic multisig test/docs to use multipath descriptor",
          "body": "This is on top of #22838, only my last commit should be considered here. This highlights how a basic multisig like our example can be cleaned up a bit with multipath descriptors. Also serves as some light additional testing for #22838",
          "user": {
            "login": "mjdietzx",
            "id": 7217256,
            "node_id": "MDQ6VXNlcjcyMTcyNTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjdietzx",
            "html_url": "https://github.com/mjdietzx",
            "followers_url": "https://api.github.com/users/mjdietzx/followers",
            "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
            "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
            "repos_url": "https://api.github.com/users/mjdietzx/repos",
            "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23308",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23308",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23308.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23308.patch"
          },
          "closed_at": "2022-07-25T07:13:44Z",
          "created_at": "2021-10-19T14:22:22Z",
          "updated_at": "2023-07-25T10:16:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T03:03:12Z",
      "updated_at": "2021-11-03T03:03:12Z",
      "source": {
        "issue": {
          "id": 999587307,
          "node_id": "PR_kwDOABII584r5xzj",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23019",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23019/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23019/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23019/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23019",
          "number": 23019,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, wallet: Add listaddresses RPC",
          "body": "This PR adds an address explorer RPC to Bitcoin Core, similar to \"Address\" tab of Electrum or Specter Desktop.\r\n\r\nThis allows the user to know any arbitrary range of external and internal addresses and can be used with legacy or descriptor wallet.\r\n\r\nThis same functionality can be used to build an \"Address\" tab in the GUI later.\r\n\r\nFor better visualization in manual tests, the reviewer can start the node with the keypool reduced to 2. (default is 1000) and create a new wallet.\r\n```\r\n./src/bitcoind -keypool=2\r\n./src/bitcoin-cli -rpcwallet=<wallet_name> listaddresses\r\n./src/bitcoin-cli -rpcwallet=<wallet_name> listaddresses \"p2sh-segwit\"\r\n./test/functional/wallet_listaddresses.py --descriptors\r\n./test/functional/wallet_listaddresses.py --legacy-wallet\r\n```\r\n<img width=\"1175\" alt=\"image-2\" src=\"https://user-images.githubusercontent.com/84432093/133831379-65c07e7d-d9f5-48dd-93ef-22838b91e9f2.png\">\r\n",
          "user": {
            "login": "lsilva01",
            "id": 84432093,
            "node_id": "MDQ6VXNlcjg0NDMyMDkz",
            "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lsilva01",
            "html_url": "https://github.com/lsilva01",
            "followers_url": "https://api.github.com/users/lsilva01/followers",
            "following_url": "https://api.github.com/users/lsilva01/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lsilva01/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lsilva01/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
            "organizations_url": "https://api.github.com/users/lsilva01/orgs",
            "repos_url": "https://api.github.com/users/lsilva01/repos",
            "events_url": "https://api.github.com/users/lsilva01/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lsilva01/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23019",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23019",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23019.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23019.patch"
          },
          "closed_at": "2022-07-25T07:14:37Z",
          "created_at": "2021-09-17T17:46:23Z",
          "updated_at": "2023-07-25T10:16:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T04:02:21Z",
      "updated_at": "2021-11-03T04:02:21Z",
      "source": {
        "issue": {
          "id": 983140832,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzIyNzY4MTc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
          "number": 22838,
          "state": "open",
          "state_reason": null,
          "title": "descriptors: Be able to specify change and receiving in a single descriptor string",
          "body": "It is convenient to have a descriptor which specifies both receiving and change addresses in a single string. However, as discussed in https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895515768, it is not feasible to use a generic multipath specification like BIP 88 due to combinatorial blow up and that it would result in unexpected descriptors.\r\n\r\nTo resolve that problem, this PR proposes a targeted solution which allows only a single pair of 2 derivation indexes to be inserted in the place of a single derivation index. So instead of two descriptor `wpkh(xpub.../0/0/*)` and `wpkh(xpub.../0/1/*)` to represent receive and change addresses, this could be written as `wpkh(xpub.../0/<0;1>/*)`. The multipath specifier is of the form `<NUM;NUM>`. Each `NUM` can have its own hardened specifier, e.g. `<0;1h>` is valid. The multipath specifier can also only appear in one path index in the derivation path.\r\n\r\nThis results in the parser returning two descriptors. The first descriptor uses the first `NUM` in all pairs present, and the second uses the second `NUM`. In our implementation, if a multipath descriptor is not provided, a pair is still returned, but the second element is just `nullptr`.\r\n\r\nThe wallet will not output the multipath descriptors (yet). Furthermore, when a multipath descriptor is imported, it is expanded to the two descriptors and each imported on its own, with the second descriptor being implicitly for internal (change) addresses. There is no change to how the wallet stores or outputs descriptors (yet).\r\n\r\nNote that the path specifier is different from what was proposed. It uses angle brackets and the semicolon because these are unused characters available in the character set and I wanted to avoid conflicts with characters already in use in descriptors.\r\n\r\nCloses #17190 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 39,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22838.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22838.patch"
          },
          "created_at": "2021-08-30T19:46:34Z",
          "updated_at": "2023-12-13T18:10:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T05:48:12Z",
      "updated_at": "2021-11-03T05:48:12Z",
      "source": {
        "issue": {
          "id": 931978811,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njc5MzkxOTc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22364",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22364/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22364/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22364/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22364",
          "number": 22364,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Make a tr() descriptor by default",
          "body": "Make a `tr()` descriptor by default in descriptor wallets so that users will be able to make and use segwit v1 bech32m addresses.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/52",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/52",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/52/labels",
            "id": 6179837,
            "node_id": "MDk6TWlsZXN0b25lNjE3OTgzNw==",
            "number": 52,
            "state": "closed",
            "title": "23.0",
            "description": "",
            "creator": {
              "login": "maflcko",
              "id": 6399679,
              "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
              "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/maflcko",
              "html_url": "https://github.com/maflcko",
              "followers_url": "https://api.github.com/users/maflcko/followers",
              "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
              "organizations_url": "https://api.github.com/users/maflcko/orgs",
              "repos_url": "https://api.github.com/users/maflcko/repos",
              "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/maflcko/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 123,
            "created_at": "2020-12-04T08:54:20Z",
            "updated_at": "2022-04-25T20:51:00Z",
            "closed_at": "2022-04-22T18:08:30Z"
          },
          "locked": true,
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22364",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22364",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22364.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22364.patch"
          },
          "closed_at": "2021-11-22T09:03:53Z",
          "created_at": "2021-06-28T20:48:13Z",
          "updated_at": "2023-09-15T12:11:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T05:55:44Z",
      "updated_at": "2021-11-03T05:55:44Z",
      "source": {
        "issue": {
          "id": 930266556,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njc3OTg5MzM4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22341/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22341",
          "number": 22341,
          "state": "open",
          "state_reason": null,
          "title": "rpc: add path to gethdkey",
          "body": "Depends on #26728.\r\n\r\nThis PR expands the wallet RPC `gethdkey` introduced in #26728. It takes a BIP32 path as argument and returns the xpub, along with the master key fingerprint.\r\n\r\nTo test this PR:\r\n\r\n* create a regular descriptor wallet\r\n* call `getxpub m/86h/0h/0h`\r\n* call `listdescriptors`, compare the xpub in the `tr()` descriptor with the previous step\r\n\r\n## Bigger picture\r\n\r\nThis paves the way for using Bitcoin Core as one signer in a multisig setup. It simplifies the proposed flow in #22067.\r\n\r\nThe eventual flow would be:\r\n1. Create a blank wallet with a seed (either with no descriptors, or where its single key descriptors are not `active`, so they don't get used when calling `getnewaddress`). \r\n2. Call `getxpub m/87h/0h/0h` (as suggested in [BIP 87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki))\r\n3. (Manually, with Specter or with a simple Python utility - TBD): craft a multisig descriptor containing this xpub\r\n4. Call `importdescriptors` which will allow the import if its own fingerprint is recognized (and after checking the xpub)\r\n5. The usual flow with `getnewaddress`, `send` and `walletprocesspsbt` (and their GUI equivalents)\r\n\r\nThis PR makes step (2) possible.\r\n\r\nStep (1) would require a followup, because blank wallets currently can't have a seed. Step 4 would also require a followup,  so that `importdescriptors` treats an `xpub` as if it was an `xpriv`, after checking that it can derive the xpub from the seed (that matches the fingerprint)\r\n\r\nOn the GUI side a wizard could perform the above steps and guide the user, where they either:\r\n* export their own xpub and then import a descriptor from somewhere else (performing some sanity checks); or\r\n* import xpub(s) from other wallets, compose a multisig and get the descriptors for export; or\r\n* get xpub(s) from connected hardware devices and configure a multisig (with or without a key on their machine)",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 30,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22341",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22341",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22341.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22341.patch"
          },
          "created_at": "2021-06-25T15:12:03Z",
          "updated_at": "2023-12-14T21:49:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T08:42:02Z",
      "updated_at": "2021-11-03T08:42:02Z",
      "source": {
        "issue": {
          "id": 725905053,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MDYzNzgw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20205/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20205",
          "number": 20205,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Properly support a wallet id",
          "body": "Adds a unique id for each wallet that is saved in a new \"walletid\" record. For compatibility, wallets using BDB will use the BDB generated id. All other wallets will have a randomly generated id if an id does not already exist.\r\n\r\nAlternative to #20204",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 34,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20205",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20205",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20205.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20205.patch"
          },
          "closed_at": "2022-10-12T18:20:59Z",
          "created_at": "2020-10-20T20:06:17Z",
          "updated_at": "2023-10-12T12:14:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T08:51:58Z",
      "updated_at": "2021-11-03T08:51:58Z",
      "source": {
        "issue": {
          "id": 716064606,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4ODcwODQz",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20096",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20096/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20096/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20096/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20096",
          "number": 20096,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Remove WalletDatabase refcounting and enforce only one Batch access the database at a time",
          "body": "We never have multiple threads making able to multiple `WalletBatch`s due to the extensive use of `cs_wallet`, `cs_KeyStore`, and `cs_desc_man`, so the use of refcounting to handle the case where that may happen is unnecessary. Thus we can use an assert to enforce that only one `BerkeleyBatch` is accessing the `BerkeleyDatabase` at a time. The only instances where multiple `BerkeleyBatch`s were being created were where one was made in a caller function, and then the called function created another for itself. For those cases, we instead either pass in the caller's `WalletBatch` or limit the scope of the caller's `WalletBatch` so that there are no overlaps.\r\n\r\nThe refcounting in `BerkeleyDatabase` is kept because it did more than just count the number of `BerkeleyBatch`s, it also indicated when the database was flushed. However the `AddRef` and `RemoveRef` functions have been removed from `WalletDatabase`.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20096",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20096",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20096.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20096.patch"
          },
          "closed_at": "2021-11-09T21:12:45Z",
          "created_at": "2020-10-06T22:31:27Z",
          "updated_at": "2022-11-09T17:37:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T09:25:15Z",
      "updated_at": "2021-11-03T09:25:15Z",
      "source": {
        "issue": {
          "id": 666560839,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDU3MzgyMzM0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19602/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/19602",
          "number": 19602,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Migrate legacy wallets to descriptor wallets",
          "body": "This PR adds a new `migratewallet` RPC which migrates a legacy wallet to a descriptor wallet. Migrated wallets will need a new backup. If a wallet has watchonly stuff in it, a new watchonly descriptor wallet will be created containing those watchonly things. The related transactions, labels, and descriptors for those watchonly things will be removed from the original wallet. Migrated wallets will not have any of the legacy things be available for fetching from `getnewaddress` or `getrawchangeaddress`. Wallets that have private keys enabled will have newly generated descriptors. Wallets with private keys disabled will not have any active `ScriptPubKeyMan`s.\r\n\r\nFor the basic HD wallet case of just generated keys, in addition to the standard descriptor wallet descriptors using the master key derived from the pre-existing hd seed, the migration will also create 3 descriptors for each HD chain in: a ranged combo external, a ranged combo internal, and a single key combo for the seed (the seed is a valid key that we can receive coins at!). The migrated wallet will then have newly generated descriptors as the active `ScriptPubKeyMan`s. This is equivalent to creating a new descriptor wallet and importing the 3 descriptors for each HD chain. For wallets containing non-HD keys, each key will have its own combo descriptor.\r\n\r\nThere are also tests.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 50,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19602",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/19602",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/19602.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/19602.patch"
          },
          "closed_at": "2022-09-01T19:44:11Z",
          "created_at": "2020-07-27T20:22:25Z",
          "updated_at": "2023-03-13T22:00:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-03T10:54:57Z",
      "updated_at": "2021-11-03T10:54:57Z",
      "source": {
        "issue": {
          "id": 427922984,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2NDExMzEx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15719",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15719/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15719/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15719/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/15719",
          "number": 15719,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet passive startup",
          "body": "Move wallet startup code closer to a simple model where the wallet attaches to the chain with a single chain.handleNotifications() call, and just starts passively receiving blocks and mempool notifications from the last update point, instead having to actively rescan blocks and request a mempool snapshot, and deal with the tip changing, and deal with early or stale notifications.\r\n\r\nAlso, stop locking the cs_wallet mutex and registering for validationinterface notifications before the rescan. This was new behavior since 6a72f26968cf931c985d8d4797b6264274cabd06 https://github.com/bitcoin/bitcoin/pull/16426 and is not ideal because it stops other wallets and rpcs and the gui from receiving new notifications until after the scan completes.\r\n\r\nThis change is a half-step towards implementing multiwallet scans (https://github.com/bitcoin/bitcoin/issues/11756), since it provides needed locator and birthday timestamp information to the Chain interface, and it rationalizes locking and event ordering in the startup code. The second half of implementing parallel rescans requires moving the ScanForWalletTransactions implementation (which this PR does not touch) from the wallet to the node.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 164208572,
              "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
              "name": "Mempool",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15719",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/15719",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/15719.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/15719.patch"
          },
          "closed_at": "2022-10-12T17:59:26Z",
          "created_at": "2019-04-01T21:35:48Z",
          "updated_at": "2023-10-12T12:14:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 798987425,
      "node_id": "PRR_kwDOABII584vn5Sh",
      "url": null,
      "actor": null,
      "commit_id": "1399c27ec5081af7a1f31a9bb750b216cc68c6cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I rebased #22341 on top of this.\r\n\r\nSome initial review remarks:\r\n\r\n<details><summary>wallet_transactiontime_rescan.py fails consistently for me</summary>\r\n\r\n```\r\n2021-11-05T14:52:37.129000Z TestFramework (INFO): Restore user wallet on another node without rescan\r\n2021-11-05T14:52:37.154000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/sjors/dev/bitcoin/test/functional/test_framework/test_framework.py\", line 132, in main\r\n    self.run_test()\r\n  File \"test/functional/wallet_transactiontime_rescan.py\", line 134, in run_test\r\n    assert_equal(restorewo_wallet.getbalance(), 0)\r\n  File \"/Users/sjors/dev/bitcoin/test/functional/test_framework/util.py\", line 50, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not(1.00000000 == 0)\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Some thread safety warnings.</summary>\r\n\r\n```\r\nwallet/keyman.cpp:241:5: warning: calling function 'AssertLockHeldInternal<AnnotatedMixin<std::recursive_mutex>>' requires holding mutex 'cs_keyman' exclusively [-Wthread-safety-analysis]\r\n    AssertLockHeld(cs_keyman);\r\n    ^\r\n./sync.h:83:28: note: expanded from macro 'AssertLockHeld'\r\n#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\r\n                           ^\r\nwallet/keyman.cpp:244:41: warning: reading variable 'm_map_crypted_keys' requires holding mutex 'cs_keyman' [-Wthread-safety-analysis]\r\n        for (const auto& [id, key_pair] : m_map_crypted_keys) {\r\n                                        ^\r\nwallet/keyman.cpp:244:41: warning: reading variable 'm_map_crypted_keys' requires holding mutex 'cs_keyman' [-Wthread-safety-analysis]\r\nwallet/keyman.cpp:253:12: warning: reading variable 'm_map_keys' requires holding mutex 'cs_keyman' [-Wthread-safety-analysis]\r\n    return m_map_keys;\r\n           ^\r\nwallet/keyman.cpp:264:9: warning: reading variable 'm_map_crypted_keys' requires holding mutex 'cs_keyman' [-Wthread-safety-analysis]\r\n    if (m_map_crypted_keys.count(id) == 0) {\r\n        ^\r\nwallet/keyman.cpp:267:12: warning: reading variable 'm_map_crypted_keys' requires holding mutex 'cs_keyman' [-Wthread-safety-analysis]\r\n    return m_map_crypted_keys.at(id);\r\n           ^\r\n6 warnings generated.\r\n\r\n...\r\n\r\nwallet/walletdb.cpp:813:38: warning: calling function 'LoadActiveHDKey' requires holding mutex 'pwallet->GetKeyManager().cs_keyman' exclusively [-Wthread-safety-analysis]\r\n            pwallet->GetKeyManager().LoadActiveHDKey(extpub);\r\n                                     ^\r\nwallet/walletdb.cpp:1150:38: warning: calling function 'SetActiveHDKey' requires holding mutex 'pwallet->GetKeyManager().cs_keyman' exclusively [-Wthread-safety-analysis]\r\n            pwallet->GetKeyManager().SetActiveHDKey(best_xpub);\r\n\r\n```\r\n</details>\r\n\r\nShameless plug: it would be useful is #19013 was merged first, so this PR can include more wallet backward and forward compatibility tests.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-798987425",
      "submitted_at": "2021-11-05T16:57:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "labeled",
      "id": 5583036331,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFMxl-r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5583036331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-08T13:49:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592298808,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFNU7U4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592298808",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T19:59:57Z"
    },
    {
      "event": "commented",
      "id": 964490868,
      "node_id": "IC_kwDOABII5845fPZ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964490868",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T20:01:21Z",
      "updated_at": "2021-11-09T20:01:21Z",
      "author_association": "MEMBER",
      "body": "Thread safety warnings are fixed, not seeing the wallet_transactiontime_rescan.py failure.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-964490868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "unlabeled",
      "id": 5592848407,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFNXBgX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592848407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:15:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592905612,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFNXPeM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592905612",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:24:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5593071118,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFNX34O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5593071118",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T21:50:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5594091861,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFNbxFV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5594091861",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T02:06:00Z"
    },
    {
      "event": "reviewed",
      "id": 803946152,
      "node_id": "PRR_kwDOABII584v6z6o",
      "url": null,
      "actor": null,
      "commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some more comments after light-weight code review...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-803946152",
      "submitted_at": "2021-11-11T18:11:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5611755709,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFOfJi9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5611755709",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-12T20:06:02Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-13T01:32:35Z",
      "updated_at": "2021-11-13T01:32:35Z",
      "source": {
        "issue": {
          "id": 1052156700,
          "node_id": "PR_kwDOABII584udyuw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23497",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23497/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23497/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23497/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23497",
          "number": 23497,
          "state": "closed",
          "state_reason": null,
          "title": "Add `src/node/` and `src/wallet/` code to `node::` and `wallet::` namespaces",
          "body": "There are no code changes, this is just adding `namespace` and `using` declarations and `node::` or `wallet::` qualifiers in some places.\r\n\r\nMotivations for this change are:\r\n\r\n- To make it easier to see when node and wallet code is being accessed places where it shouldn't be. For example if GUI code is accessing node and wallet internals or if wallet and node code are referencing each other.\r\n- To make source code organization clearer ([#15732](https://github.com/bitcoin/bitcoin/issues/15732)), being able to know that `wallet::` code is in `src/wallet/`, `node::` code is in `src/node/`, `init::` code is in `src/init/`, `util::` code is in `src/util/`, etc.\r\n\r\nReviewing with `git log -p -n1 -U0 --word-diff-regex=.` can be helpful to verify this is only updating declarations, not changing code.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23497",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23497",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23497.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23497.patch"
          },
          "closed_at": "2022-01-11T10:13:20Z",
          "created_at": "2021-11-12T16:36:53Z",
          "updated_at": "2023-01-11T10:07:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5612638267,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFOihA7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5612638267",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-13T02:34:11Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-14T03:19:19Z",
      "updated_at": "2021-11-14T03:19:19Z",
      "source": {
        "issue": {
          "id": 1052516499,
          "node_id": "PR_kwDOABII584uewGL",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23502",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23502/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23502/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23502/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23502",
          "number": 23502,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Avoid underpaying transaction fees when signing taproot spends",
          "body": "The current taproot signing code will end up creating transactions which do not meet the feerate target. This is primarily seen when spending a taproot output with the script path. In this scenario, because the public key is known, the dummy signer would incorrectly choose to create a dummy signed transaction that used the key path spend when the actual transaction would use script path. This results in a transaction that has a significantly lower fee rate because script path spends are much larger than key path spends. This is fixed by choosing the witness with the largest stack size rather than the smallest when doing size estimation.\r\n\r\nUnfortunately this change can result in massively overestimating the transaction fees which is undesirable. More discussion is needed to find a good solution to avoiding that problem.\r\n\r\nThere is an additional issue in the PSBT workflow where the sighash type would be appended during finalizing, but not during size estimation. That results in a transaction that is slightly larger than estimated so there is a lower feerate. This is resolved by having the DUMMY_MAXIMUM_SIGNATURE_CREATOR include the sighash type so that when funding with a watchonly wallet, we will estimate enough fee for the largest possible signature (as we do for ECDSA with high R).\r\n\r\nTests are updated to catch these case. `wallet_taproot.py` will now use a set feerate and check if the result meets that feerate.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23502",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23502",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23502.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23502.patch"
          },
          "closed_at": "2023-09-07T18:58:58Z",
          "created_at": "2021-11-13T01:57:53Z",
          "updated_at": "2023-09-07T18:58:58Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 970229451,
      "node_id": "IC_kwDOABII58451IbL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/970229451",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-16T12:34:28Z",
      "updated_at": "2021-11-16T12:34:28Z",
      "author_association": "MEMBER",
      "body": "Not seeing any thread warning anymore, so that's good.\r\n\r\n`wallet_transactiontime_rescan.py` only fails for me with configuring `--without-bdb`. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-970229451",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "commented",
      "id": 970510995,
      "node_id": "IC_kwDOABII58452NKT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/970510995",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-16T17:42:28Z",
      "updated_at": "2021-11-16T17:42:28Z",
      "author_association": "MEMBER",
      "body": "> `wallet_transactiontime_rescan.py` only fails for me with configuring `--without-bdb`.\r\n\r\nThis appears to fail on master as well.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-970510995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "reviewed",
      "id": 807320159,
      "node_id": "PRR_kwDOABII584wHrpf",
      "url": null,
      "actor": null,
      "commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 709a917c26bf048de454760c7189278b965ca7f3 modulo `AddDescriptorKeyWithDB` definition\r\n\r\nI found it easier to review the PR as a whole rather the migration through individual commits: `git diff HEAD~21 --color-moved=dimmed_zebra`. This is because some of the function bodies aren't moved in single commits.\r\n\r\nLooks like you got rid of `AddDescriptorKeyWithDB`, but it's still defined in header. Also the original function contained an assert for not having `WALLET_FLAG_DISABLE_PRIVATE_KEYS` and it would check if the key already existed (`AddKeyInner` does that now).\r\n\r\n(most comments below are about existing code)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-807320159",
      "submitted_at": "2021-11-17T14:58:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5634247726,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFP08wu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5634247726",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-17T19:41:45Z"
    },
    {
      "event": "commented",
      "id": 971913592,
      "node_id": "IC_kwDOABII58457jl4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/971913592",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-17T19:42:10Z",
      "updated_at": "2021-11-17T19:42:10Z",
      "author_association": "MEMBER",
      "body": "> Looks like you got rid of `AddDescriptorKeyWithDB`, but it's still defined in header\r\n\r\nFixed\r\n\r\n> Also the original function contained an assert for not having `WALLET_FLAG_DISABLE_PRIVATE_KEYS` and it would check if the key already existed (`AddKeyInner` does that now).\r\n\r\nAdded that back in.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-971913592",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T23:20:23Z",
      "updated_at": "2021-11-18T23:20:23Z",
      "source": {
        "issue": {
          "id": 1057566159,
          "node_id": "PR_kwDOABII584uubvE",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23544",
          "number": 23544,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, wallet: addhdseed, infer seed when importing descriptor with xpub ",
          "body": "Builds on top of #25907 and one commit from #22341.\r\n\r\nFirst this PR introduces a descriptor wallet RPC `addhdseed`. Similar to its legacy wallet counterpart `sethdseed` it either generates a fresh random seed, for use on a blank wallet, or the user can provide a WIF. Unlike `sethdseed` this RPC call does not add keys / fill the keypool.\r\n\r\nThis allows a user to create a blank wallet (`createwallet`), provide it with a seed (`addhdseed`) and then craft custom descriptors. (An alternative approach would to add a `nodescriptors` argument to `createwallet`, but this RPC seems useful anyway)\r\n\r\nAn example use case of this is setting up a multisig between Core and a hardware wallet. After adding the seed to an otherwise empty wallet, the user would call `getxpub m/87'/0'/0'`. They would then combine this `xpub` and origin info with the one from their hardware wallet (e.g. using `hwi --fingerprint .... getxpub m/87'/0'/0'`  and craft a descriptor like `wsh(sorted_multi(2, [...../87'/0'/0']our_xpub, [..../87'/0'/0']their_xpub))`, and import that. The resulting wallet will be able to sign its part of the transaction.\r\n\r\nThe second part of this PR enables to ability descriptors, such as in the multisig example above, in such a way that any `fingerprint` + `xpub` that is covered by our hd seed(s) can be signed for.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23544",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23544",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23544.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23544.patch"
          },
          "closed_at": "2023-08-01T14:15:20Z",
          "created_at": "2021-11-18T16:40:53Z",
          "updated_at": "2023-08-01T14:15:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 5653123925,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFQ89NV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5653123925",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-22T11:04:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5655764781,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFRHB8t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5655764781",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-22T17:52:24Z"
    },
    {
      "event": "unlabeled",
      "id": 5656238522,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFRI1m6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5656238522",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-22T19:27:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T12:01:40Z",
      "updated_at": "2021-12-02T12:01:40Z",
      "source": {
        "issue": {
          "id": 1069248023,
          "node_id": "PR_kwDOABII584vSt4L",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23647",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23647/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23647/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23647/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23647",
          "number": 23647,
          "state": "closed",
          "state_reason": null,
          "title": "MOVEONLY: Move wallet backup and encryption RPCs out of rpcwallet",
          "body": "As part of an effort to split rpcwallet as per #23622, this moves `rpcdump.cpp` into the new wallet/rpc directory as well as moving backup and encryption RPCs out of rpcwallet.",
          "user": {
            "login": "meshcollider",
            "id": 3211283,
            "node_id": "MDQ6VXNlcjMyMTEyODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/meshcollider",
            "html_url": "https://github.com/meshcollider",
            "followers_url": "https://api.github.com/users/meshcollider/followers",
            "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
            "organizations_url": "https://api.github.com/users/meshcollider/orgs",
            "repos_url": "https://api.github.com/users/meshcollider/repos",
            "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/meshcollider/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23647",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23647",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23647.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23647.patch"
          },
          "closed_at": "2021-12-03T09:17:51Z",
          "created_at": "2021-12-02T08:10:31Z",
          "updated_at": "2022-12-03T10:00:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-04T05:03:05Z",
      "updated_at": "2021-12-04T05:03:05Z",
      "source": {
        "issue": {
          "id": 1071040242,
          "node_id": "PR_kwDOABII584vYkga",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23667",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23667/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23667/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23667/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23667",
          "number": 23667,
          "state": "closed",
          "state_reason": null,
          "title": "Split up rpcwallet",
          "body": "This is the rest of #23622, to split up rpcwallet into smaller, more logical parts.\r\n\r\nThis will have a lot of conflicts but let's just get it over and done with.",
          "user": {
            "login": "meshcollider",
            "id": 3211283,
            "node_id": "MDQ6VXNlcjMyMTEyODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/meshcollider",
            "html_url": "https://github.com/meshcollider",
            "followers_url": "https://api.github.com/users/meshcollider/followers",
            "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
            "organizations_url": "https://api.github.com/users/meshcollider/orgs",
            "repos_url": "https://api.github.com/users/meshcollider/repos",
            "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/meshcollider/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": true,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23667",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23667",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23667.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23667.patch"
          },
          "closed_at": "2021-12-08T03:34:55Z",
          "created_at": "2021-12-03T23:12:15Z",
          "updated_at": "2022-12-08T10:01:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 5731549680,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFVoIHw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5731549680",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T05:22:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5734581994,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFVzsbq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5734581994",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T15:24:06Z"
    },
    {
      "event": "unlabeled",
      "id": 5734812159,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFV0kn_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5734812159",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T15:59:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 990651616,
      "node_id": "IC_kwDOABII5847DCTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990651616",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T06:22:39Z",
      "updated_at": "2021-12-13T12:03:40Z",
      "author_association": "MEMBER",
      "body": "~re-utACK b1d76a8d91a070668332f06608a20a9d937ba1a4~\r\n\r\n(the two spurious CI failures should go away after the next rebase)\r\n\r\n_Update: apparently one of them was hiding a non-spurious failure_",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-990651616",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "commented",
      "id": 992226996,
      "node_id": "IC_kwDOABII5847JC60",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/992226996",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T08:35:46Z",
      "updated_at": "2021-12-13T08:35:46Z",
      "author_association": "MEMBER",
      "body": "`/usr/include/c++/8/bits/stl_function.h:386:20: error: ambiguous overload for ‘operator<’ (operand types are ‘const CExtPubKey’ and ‘const CExtPubKey’)`",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-992226996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5757077245,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFXJgb9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5757077245",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-13T14:01:14Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-18T16:37:05Z",
      "updated_at": "2021-12-18T16:37:05Z",
      "source": {
        "issue": {
          "id": 1083745414,
          "node_id": "PR_kwDOABII584wB0k4",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23810",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23810/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23810",
          "number": 23810,
          "state": "closed",
          "state_reason": null,
          "title": "docs: avoid C-style casts; use modern C++ casts",
          "body": "In the words of practicalswift:\r\n```\r\nA C-style cast is equivalent to try casting in the following order:\r\n\r\n    const_cast(...)\r\n    static_cast(...)\r\n    const_cast(static_cast(...))\r\n    reinterpret_cast(...)\r\n    const_cast(reinterpret_cast(...))\r\n\r\nBy using static_cast<T>(...) explicitly we avoid the possibility of an unintentional and \r\ndangerous reinterpret_cast. Furthermore static_cast<T>(...) allows for easier grepping of casts.\r\n\r\nFor a more thorough discussion, see \"ES.49: If you must use a cast, use a named cast\"\r\nin the C++ Core Guidelines (Stroustrup & Sutter).\r\n```\r\n\r\nModern tooling, specifically `-Wold-style-cast` can enable us to enforce never using C-style casts. I believe this is especially important due to the number of C-style casts the codebase is currently being used as a reinterpret_cast. reinterpret_casts are especially dangerous, and should never be done via C-style casts.\r\n\r\nUpdate the docs to suggest the use of named cast or functional casts.",
          "user": {
            "login": "PastaPastaPasta",
            "id": 6443210,
            "node_id": "MDQ6VXNlcjY0NDMyMTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PastaPastaPasta",
            "html_url": "https://github.com/PastaPastaPasta",
            "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
            "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
            "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
            "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
            "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 148216,
              "node_id": "MDU6TGFiZWwxNDgyMTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Docs",
              "name": "Docs",
              "color": "02d7e1",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 29,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23810",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23810",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23810.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23810.patch"
          },
          "closed_at": "2023-02-08T10:37:04Z",
          "created_at": "2021-12-18T04:41:01Z",
          "updated_at": "2023-02-19T17:44:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1002925709,
      "node_id": "IC_kwDOABII5847x26N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002925709",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-30T08:35:54Z",
      "updated_at": "2021-12-30T08:35:54Z",
      "author_association": "MEMBER",
      "body": "re-utACK 49234d0dbc11f91e9ae657602c97b4a0dc0ec75e\r\n(just a rebase, but with 2edf8b89b4 dropped entirely)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1002925709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "labeled",
      "id": 5872083237,
      "node_id": "LE_lADOABII584-JdWwzwAAAAFeAOEl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5872083237",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T10:36:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5875845892,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAFeOksE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5875845892",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T19:39:06Z"
    },
    {
      "event": "unlabeled",
      "id": 5876317947,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFeQX77",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5876317947",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-11T21:21:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1011190713,
      "node_id": "IC_kwDOABII5848RYu5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011190713",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-12T15:56:01Z",
      "updated_at": "2022-01-12T15:56:01Z",
      "author_association": "MEMBER",
      "body": "re-utACK 01a4860 (after #23497 namespace stuff)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1011190713",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T12:47:43Z",
      "updated_at": "2022-01-28T12:47:43Z",
      "source": {
        "issue": {
          "id": 1117366052,
          "node_id": "I_kwDOABII585Cmack",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24193/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/24193",
          "number": 24193,
          "state": "open",
          "state_reason": null,
          "title": "Add taproot descriptor to existing descriptor wallet",
          "body": "Fresh descriptor wallets will have a `tr()` descriptor as of v23.0, but existing ones won't.\r\n\r\nProbably needs #23417.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "created_at": "2022-01-28T12:47:43Z",
          "updated_at": "2022-09-06T13:52:18Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 5970510679,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFj3sNX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5970510679",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T12:52:49Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 5970511394,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAFj3sYi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5970511394",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-28T12:52:56Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-29T14:12:30Z",
      "updated_at": "2022-03-29T14:12:30Z",
      "source": {
        "issue": {
          "id": 1184048636,
          "node_id": "PR_kwDOABII5841MBLg",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24699",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24699/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24699/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24699/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24699",
          "number": 24699,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Improve AvailableCoins performance by reducing duplicated operations",
          "body": "While running my coin selection simulations, I noticed that towards the end of the simulation, the wallet would become slow to make new transactions. The wallet generally performs much more slowly when there are a large number of transactions and/or a large number of keys. The improvements here are focused on wallets with a large number of transactions as that is what the simulations produce.\r\n\r\nMost of the slowdown I observed was due to `DescriptorScriptPubKeyMan::GetSigningProvider` re-deriving keys every time it is called. To avoid this, it will now cache the `SigningProvider` produced so that repeatedly fetching the `SigningProvider` for the same script will not result in the same key being derived over and over. This has a side effect of making the function non-const, which makes a lot of other functions non-const as well. This helps with wallets with lots of address reuse (as my coin selection simulations are), but not if addresses are not reused as keys will end up needing to be derived the first time `GetSigningProvider` is called for a script.\r\n\r\nThe `GetSigningProvider` problem was also exacerbated by unnecessarily fetching a `SigningProvider` for the same script multiple times. A `SigningProvider` is retrieved to be used inside of `IsSolvable`. A few lines later, we use `GetTxSpendSize` which fetches a `SigningProvider` and then calls `CalculateMaximumSignedInputSize`. We can avoid a second call to `GetSigningProvider` by using `CalculateMaximumSignedInputSize` directly with the `SigningProvider` already retrieved for `IsSolvable`.\r\n\r\nThere is an additional slowdown where `ProduceSignature` with a dummy signer is called twice for each output. The first time is `IsSolvable` checks that `ProduceSignature` succeeds, thereby informing whether we have solving data. The second is `CalculateMaximumSignedInputSize` which returns -1 if `ProduceSignature` fails, and returns the input size otherwise. We can reduce this to one call of `ProduceSignature` by using `CalculateMaximumSignedInputSize`'s result to set `solvable`.\r\n\r\nLastly, a lot of time is spent looking in `mapWallet` and `mapTxSpends` to determine whether an output is already spent. The performance of these lookups is slightly improved by changing those maps to use `std::unordered_map` and `std::unordered_multimap` respectively.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24699",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24699",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24699.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24699.patch"
          },
          "closed_at": "2022-08-05T19:32:03Z",
          "created_at": "2022-03-28T22:08:03Z",
          "updated_at": "2023-10-28T12:16:24Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-11T02:04:14Z",
      "updated_at": "2022-04-11T02:04:14Z",
      "source": {
        "issue": {
          "id": 1196348925,
          "node_id": "I_kwDOABII585HTtX9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24801",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24801/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24801/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24801/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/24801",
          "number": 24801,
          "state": "closed",
          "state_reason": "completed",
          "title": "Add an option to create taproot descriptor for old descriptor wallets",
          "body": "**Is your feature request related to a problem? Please describe.**\r\n<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->\r\nNew wallets created with Bitcoin Core  v 23.0 RC3 have by default descriptors=true and taproot descriptor is generated.\r\n\r\n**Describe the solution you'd like**\r\n<!-- A clear and concise description of what you want to happen. -->\r\nUsing a wallet created with descriptors=true with the precedent version 22.0 does not allow me to create receiving Bech32taproot address (which is normal, since by that time \"desc\": \"tr was not present).\r\n\r\nI've tried to upgrade wallet with the command \"upgradewallet\" but it is already at latest version:\r\n{\r\n  \"wallet_name\": \"wallet_22.0\",\r\n  \"previous_version\": 169900,\r\n  \"current_version\": 169900,\r\n  \"result\": \"Already at latest version. Wallet version unchanged.\"\r\n}\r\n\r\n I think it would be great a way to upgrade/add taproot descriptors to the wallet instead of having to create a new one.",
          "user": {
            "login": "Tracachang",
            "id": 54238558,
            "node_id": "MDQ6VXNlcjU0MjM4NTU4",
            "avatar_url": "https://avatars.githubusercontent.com/u/54238558?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Tracachang",
            "html_url": "https://github.com/Tracachang",
            "followers_url": "https://api.github.com/users/Tracachang/followers",
            "following_url": "https://api.github.com/users/Tracachang/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Tracachang/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Tracachang/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Tracachang/subscriptions",
            "organizations_url": "https://api.github.com/users/Tracachang/orgs",
            "repos_url": "https://api.github.com/users/Tracachang/repos",
            "events_url": "https://api.github.com/users/Tracachang/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Tracachang/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": true,
          "comments": 2,
          "closed_at": "2022-04-11T18:23:05Z",
          "created_at": "2022-04-07T17:22:10Z",
          "updated_at": "2023-04-11T14:42:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-15T11:17:53Z",
      "updated_at": "2022-04-15T11:17:53Z",
      "source": {
        "issue": {
          "id": 1205500556,
          "node_id": "I_kwDOABII585H2nqM",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24861",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/24861",
          "number": 24861,
          "state": "open",
          "state_reason": null,
          "title": "Awesome multisig PR labyrinth guide",
          "body": "@ryanofsky recently suggested that I should write an overview of how the various pull requests spread over different repositories relate to some bigger picture view.\r\n\r\nSee the [multisig tutorial](https://github.com/bitcoin/bitcoin/blob/master/doc/multisig-tutorial.md) for how things currently work.\r\n\r\nI typically have the following future multisig wallet in mind to guide my thinking:\r\n1. a computer running Bitcoin Core holding one master key (key 1)\r\n2. one or more hardware wallets with additional keys, via HWI (keys 2 ... n)\r\n3. taproot keypath using n-of-n MuSig2\r\n4. a fallback with fewer keys after some time elapsed\r\n5. a GUI wizard to set this up (simple Python command line tool until then)\r\n\r\nThe descriptors for this could be hand crafted, but it would be nice to have:\r\n6. Miniscript compiler that can generate this\r\n\r\n**What's Missing?**\r\n\r\n- Taproot support for external signers:\r\n  - [x] #22558 (PSBT fields)\r\n  - [x] #23578 (External signer support)\r\n- [x] Timelock support for descriptors: this will be added along with full [MiniScript](https://bitcoin.sipa.be/miniscript/) support in #24148 & #24149 (@darosior).\r\n- [ ] Ability to handle descriptors for which we have 1-of-N keys. Descriptor wallets currently expect the wallet to be either watch-only and have no keys, or to have all the keys.\r\n  - [ ] #25907 makes it possible to create a wallet _with_ a seed, but without any descriptors.\r\n  - [ ] The user would grab an xpub from it (#22341 ) to construct a multisig descriptor and then import that.\r\n  - [ ] PR's to move in the right direction: #26728 and #23544 (up for grabs) \r\n- [ ] MuSig2 setup and signing support, which requires:\r\n  - [ ] a BIP to specify new PSBT fields (tracked in #23326)\r\n  - [ ] Bitcoin Core changes; no PR yet afaik, (tracked in #23326)\r\n  - [ ] At least one other (hardware) wallet to support it\r\n      * I'm not aware of any hardware wallet working on this yet\r\n      * testing with two Bitcoin Core nodes is good start\r\n  - [ ] HWI changes: additional commands for:\r\n     - [ ] initial setup\r\n     - [ ] signing (although perhaps calling `signtx` multiple times with the right PSBT will \"just work\")\r\n     * doesn't have to be HWI of course, we would just add support new commands in the [external signer command interface](https://github.com/bitcoin/bitcoin/blob/master/doc/external-signer.md) \r\n- [ ] a simple Python setup wizard\r\n   * right now [Specter Desktop](https://github.com/cryptoadvance/specter-desktop) is by far the easiest way to setup a multisig wallet. But it's a huge dependency (including a bunch of NPM packages for their web interface). A simple Python script in contrib/ could call HWI to get a list of signers, ask what threshold to use, call `createwallet` to generate a blank wallet, fetch an xpub from it, and then call `importdescriptors`.\r\n   * the script could use [BIP 129 / BSMS](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki) (perhaps initially without encryption)\r\n   * Specter doesn't set the external_signer wallet flag, so I have a trivial PR to do that manually: #21928 \r\n- [ ] a GUI setup wizard: once we have an established work flow, we would implement that in the GUI\r\n\r\n**Misc**\r\n\r\nI have a PR that improves address display handling on the device:\r\n\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/24313\r\n\r\nEven better would be if we had a feature to ask the wallet for a signature to prove it has the private key (without passing that information to the outside world of course, see #24186). This requires BIP-322 support on our end (#24058), at least one hardware wallet to support it, and a new HWI `signmessage` command. Perhaps this can later be expanded to allow your device to prove that it (still) has the keys it needs as a co-signer.\r\n\r\nMiniscript compilers currently doesn't support Taproot (e.g. to find the optimal tree structure), but I'm assuming you can still hand craft a leaf containing MiniScript. ",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "created_at": "2022-04-15T11:17:53Z",
          "updated_at": "2023-09-28T10:50:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-17T04:48:51Z",
      "updated_at": "2022-04-17T04:48:51Z",
      "source": {
        "issue": {
          "id": 1206247497,
          "node_id": "PR_kwDOABII5842Uktn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
          "number": 24897,
          "state": "closed",
          "state_reason": null,
          "title": "[Draft / POC] Silent Payments",
          "body": "This PR proposes an early version of [Silent Payment](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8) (author:@RubenSomsen).\r\nIn this scheme, the recipient generates a public address, but the sender tweaks the address and the recipient detects the payment by verifying all transactions on the blockchain. An example use case would be private donations.\r\n\r\nThe purpose of this PR is not a final version, but to start the discussion and get benchmarks based on a real implementation.\r\n\r\nThis version is built on top of [#994](https://github.com/bitcoin-core/secp256k1/pull/994) (bitcoin-core/secp256k1) for x-only ECDH support and #23480 (bitcoin/bitcoin) for `rawtr()`. Each new silent transaction detected is stored in wallet as a `rawtr()` descriptor. \r\n\r\nIn this implementation, the sender can tweak the recipient address by passing the `silent_payment` option to send RPC. The transaction output will be different from the address entered.\r\n\r\nFor example `./src/bitcoin-cli -regtest -named send outputs=\"[{\\\"bcrt1pwlh5xuyrpgfunwyww8cfu78yfs2yqyevl7yturavahh5kgxwdd2q5hzgfu\\\": 1.1}]\" fee_rate=1 options=\"{ \\\"silent_payment\\\": true}\"`.\r\n\r\nwill generate `vout` with completely unrelated outputs:\r\n\r\n```\r\n\"vout\": [\r\n    {\r\n      \"value\": 1.10000000,\r\n      \"n\": 0,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(65b19890c5ca40edb816d26f5f48cd9f3ed51121613b1c2405adc1a6dbbc824a)#8myx9tcu\",\r\n        \"address\": \"bcrt1pvkce3yx9efqwmwqk6fh47jxdnuld2yfpvya3cfq94hq6dkausf9qrfjkgz\",\r\n\r\n      }\r\n    },\r\n    {\r\n      \"value\": 2.02499835,\r\n      \"n\": 1,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(c45cb3d500bbf8f0c8841e8e011b008781d826c16ee348edb822c0f97419bc4d)#26hcce63\",\r\n        \"address\": \"bcrt1pc3wt84gqh0u0pjyyr68qzxcqs7qasfkpdm353mdcytq0jaqeh3xsuvlykg\",\r\n      }\r\n    }\r\n  ]\r\n```\r\n\r\nAny wallet, as long as it has access to private keys, can send silent payments. Thus, this excludes watch-only wallets or wallets with external signers .\r\n\r\nBut the recipient's wallet needs a new flag called `SILENT_PAYMENT`. This flag allows an additional scan that verifies that the wallet keys match the silent payment scheme. When it detects a silent payment that belongs to the wallet, it is stored in a `rawtr()` descriptor.\r\n\r\n`./src/bitcoin-cli -regtest -named createwallet wallet_name=\"recipient\" silent_payment=true`\r\n\r\nTherefore, scanning each address for each transaction is potentially prohibitive overhead, so the node can be initialized with `keypool=1` or a descriptor with range [0,1] can be imported into a blank wallet. Until there is more benchmark data, it is the safest option. The proposal recommends one static address.\r\n\r\nI've been running some silent payments on signet using wallets with default keypool and default range, I haven't noticed any relevant performance drops on the signet node.\r\nApparently this implementation is working as expected but I can't guarantee that the scheme is implemented correctly or safely, so I'm opening this PR for reviews, modifications and improvements.\r\n\r\nThere is a new functional test (`test/functional/wallet_silentpayment.py`) that can help to better understand the implementation.",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 86,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24897.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24897.patch"
          },
          "closed_at": "2023-06-05T13:18:14Z",
          "created_at": "2022-04-17T00:37:23Z",
          "updated_at": "2023-06-27T11:03:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-19T01:59:23Z",
      "updated_at": "2022-04-19T01:59:23Z",
      "source": {
        "issue": {
          "id": 1207463736,
          "node_id": "PR_kwDOABII5842Yh4P",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24914/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24914",
          "number": 24914,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Load database records in a particular order",
          "body": "Currently when we load a wallet, we just iterate through all of the records in the database and add them completely statelessly. However we have some records which do rely on other records being loaded before they are. To deal with this, we use `CWalletScanState` to hold things temporarily until all of the records have been read and then we load the stateful things.\r\n\r\nHowever this can be slow, and with some future improvements, can cause some pretty drastic slowdowns to retain this pattern. So this PR changes the way we load records by choosing to load the records in a particular order. This lets us do things such as loading a descriptor record, then finding and loading that descriptor's cache and key records. In the future, this will also let us use `IsMine` when loading transactions as then `IsMine` will actually be working as we now always load keys and descriptors before transactions.\r\n\r\nIn order to get records of a specific type, this PR includes some refactors to how we do database cursors. Functionality is also added to retrieve a cursor that will give us records beginning with a specified prefix.\r\n\r\nLastly, one thing that iterating the entire database let us do was to find unknown records. However even if unknown records were found, we would not do anything with this information except output a number in a log line. With this PR, we would no longer be aware of any unknown records. This does not change functionality as we don't do anything with unknown records, and having unknown records is not an error. Now we would just not be aware that unknown records even exist.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 23,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24914",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24914",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24914.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24914.patch"
          },
          "closed_at": "2023-06-27T23:03:39Z",
          "created_at": "2022-04-18T21:18:28Z",
          "updated_at": "2023-10-29T11:56:44Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-25T00:58:49Z",
      "updated_at": "2022-04-25T00:58:49Z",
      "source": {
        "issue": {
          "id": 1213672368,
          "node_id": "PR_kwDOABII5842rzKg",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24959",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24959/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24959/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24959/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24959",
          "number": 24959,
          "state": "closed",
          "state_reason": null,
          "title": "Remove not needed clang-format off comments",
          "body": "It seems odd to disable clang-format and force manual formatting when there is no need for it. So remove the clang-format comments and other unneeded comments.\r\n\r\nCan be reviewed with `--word-diff-regex=. --ignore-all-space`\r\n\r\nLooks like this was initially added in commit d9d79576f423cd9c5cef4547c7e3648dbb339460 to accommodate a linter that has since been removed and replaced by a functional test.",
          "user": {
            "login": "maflcko",
            "id": 6399679,
            "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maflcko",
            "html_url": "https://github.com/maflcko",
            "followers_url": "https://api.github.com/users/maflcko/followers",
            "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
            "organizations_url": "https://api.github.com/users/maflcko/orgs",
            "repos_url": "https://api.github.com/users/maflcko/repos",
            "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/maflcko/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24959",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24959",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24959.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24959.patch"
          },
          "closed_at": "2022-04-26T13:11:58Z",
          "created_at": "2022-04-24T14:37:11Z",
          "updated_at": "2023-04-27T09:57:26Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 6499332374,
      "node_id": "LE_lADOABII584-JdWwzwAAAAGDY_EW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6499332374",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T14:24:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6501495021,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGDhPDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501495021",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T19:34:39Z"
    },
    {
      "event": "unlabeled",
      "id": 6501919267,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAGDi2oj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6501919267",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T20:49:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1113262519,
      "node_id": "IC_kwDOABII585CWwm3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1113262519",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-29T12:35:50Z",
      "updated_at": "2022-04-29T12:35:50Z",
      "author_association": "MEMBER",
      "body": "re-utACK 3992d06c15af5242d955fd7f74e9e089bbb8a166",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1113262519",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-02T11:03:16Z",
      "updated_at": "2022-05-02T11:03:16Z",
      "source": {
        "issue": {
          "id": 953274717,
          "node_id": "MDExOlB1bGxSZXF1ZXN0Njk3MzQxMTUy",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22558",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22558/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22558/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22558/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22558",
          "number": 22558,
          "state": "closed",
          "state_reason": null,
          "title": "psbt: Taproot fields for PSBT",
          "body": "Implements the Taproot fields for PSBT described in [BIP 371](https://github.com/bitcoin/bips/blob/master/bip-0371.mediawiki).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": true,
          "comments": 49,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22558",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22558",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22558.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22558.patch"
          },
          "closed_at": "2022-06-28T14:44:43Z",
          "created_at": "2021-07-26T20:47:29Z",
          "updated_at": "2023-07-19T10:13:36Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T01:50:40Z",
      "updated_at": "2022-06-29T01:50:40Z",
      "source": {
        "issue": {
          "id": 1263730107,
          "node_id": "PR_kwDOABII5845REBZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
          "number": 25297,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: group independent db writes on single batched db transaction",
          "body": "The block connection process, same as many other wallet processes, contains plenty individual db writes.\r\n\r\nThis PR batches all the db transaction that occurs along each wallet workflow. Dumping all the information to disk at once atomically at the end of the process.\r\n\r\nThen, for BDB, fixed places where we are flushing to db directly on individual writes. e.g we do it in the in the chain sync/scan process, when an output that belongs to the wallet is found if the address is not inside the address book. \r\n\r\nPlus, in several places across the wallet flows, we create new `WalletBatch` objects. Which, internally, mean: Increasing the db references number, try to open the db and, for SQLite, setup and bind the statements.\r\nThis PR avoids all this overhead by sharing the same db handler instance through each entire workflow.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25297",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25297.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25297.patch"
          },
          "closed_at": "2023-11-18T18:12:38Z",
          "created_at": "2022-06-07T18:55:49Z",
          "updated_at": "2023-11-18T18:12:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-26T17:31:34Z",
      "updated_at": "2022-07-26T17:31:34Z",
      "source": {
        "issue": {
          "id": 1318001414,
          "node_id": "PR_kwDOABII5848GZ9m",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25707",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25707/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25707/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25707/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25707",
          "number": 25707,
          "state": "closed",
          "state_reason": null,
          "title": "refactor: Make const references to avoid unnecessarily copying objects and enable two clang-tidy checks",
          "body": "I added const references to some variables to avoid unnecessarily copying objects.\r\n\r\nAlso added two clang-tidy checks : [performance-for-range-copy](https://releases.llvm.org/11.1.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance-for-range-copy.html) and [performance-unnecessary-copy-initialization](https://releases.llvm.org/12.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance-unnecessary-copy-initialization.html).\r\n",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25707",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25707",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25707.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25707.patch"
          },
          "closed_at": "2022-08-19T15:12:54Z",
          "created_at": "2022-07-26T10:04:02Z",
          "updated_at": "2023-08-25T12:09:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T21:59:09Z",
      "updated_at": "2022-07-29T21:59:09Z",
      "source": {
        "issue": {
          "id": 1322119635,
          "node_id": "PR_kwDOABII5848T94k",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25734/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25734",
          "number": 25734,
          "state": "closed",
          "state_reason": null,
          "title": "wallet, refactor: #24584 follow-ups",
          "body": "This PR is to address follow-ups for #24584, specifically:\r\n\r\n* Remove redundant, hard-to-read code by adding a new `OutputType` and adding shuffle, erase, and push_back methods for `CoinsResult`\r\n* Add missing `BOOST_ASSERT` to unit test\r\n* Ensure functional test only runs if using descriptor wallets\r\n* Improve readability of `AttemptSelection` by removing triple-nested if statement\r\n\r\nNote for reviewers: commit `refactor: add new helper methods` should throw an \"unused function warning\"; the function is used in the next commit. Also, commit `wallet: switch to new shuffle, erase, push_back` will fail to compile, but this is fixed in the next commit with a scripted-diff. the commits are separate like this (code change then scripted-diff) to improve legibility.\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25734",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25734",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25734.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25734.patch"
          },
          "closed_at": "2022-08-17T00:00:45Z",
          "created_at": "2022-07-29T11:16:21Z",
          "updated_at": "2023-08-18T10:20:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-30T18:00:19Z",
      "updated_at": "2022-07-30T18:00:19Z",
      "source": {
        "issue": {
          "id": 1243856335,
          "node_id": "PR_kwDOABII5844Oka6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25183/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25183",
          "number": 25183,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Filter inputs by type during CoinSelection ",
          "body": "This PR adds a filter to the CoinControl to select only specific utxos by type. It allows the `fundrawtransaction` and `walletcreatefundedpsbt` rpc calls to filter inputs by type.\r\n\r\nCloses #25181.\r\n\r\n",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25183",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25183",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25183.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25183.patch"
          },
          "closed_at": "2022-12-08T12:22:12Z",
          "created_at": "2022-05-21T03:44:14Z",
          "updated_at": "2023-12-08T12:21:35Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T03:01:36Z",
      "updated_at": "2022-08-02T03:01:36Z",
      "source": {
        "issue": {
          "id": 1324992735,
          "node_id": "PR_kwDOABII5848deu9",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25766",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25766/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25766/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25766/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25766",
          "number": 25766,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Include a signature with encrypted keys to mitigate a wallet scam",
          "body": "This PR adds a signature to the encrypted key records (`ckey` and `walletdescriptorckey`) which acts as an additional checksum. The signature is produced by the private key, and signs the encrypted private key data. It is a schnorr signature. The signature is verified when the encrypted key record is loaded, and if it fails to verify then the loading fails with a wallet corrupted error.\r\n\r\nThe purpose of doing this is to mitigate a common scam where users are given/sold a wallet file that contains \"encrypted\" private keys that correspond to several high valued UTXOs. However the \"encrypted\" keys are not actually encrypted, they are just garbage data. The signature allows the wallet to ensure that the private keys for the stated pubkeys was known at the time of encryption, so it should help mitigate this scam by making it harder for scammers to make high value UTXOs appear to be IsMine.\r\n\r\nThere is, of course, a downgrade attack where the scammer can continue to do this with a wallet that does not have signatures over the encrypted keys. To mitigate this, the user will get a warning when they open a wallet that has encrypted keys without signatures. When the wallet is next unlocked, the signatures will be generated and written to the wallet file.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25766",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25766",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25766.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25766.patch"
          },
          "closed_at": "2023-04-25T15:58:29Z",
          "created_at": "2022-08-01T21:17:56Z",
          "updated_at": "2023-04-25T15:58:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 7138490435,
      "node_id": "LE_lADOABII584-JdWwzwAAAAGpfLhD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7138490435",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T20:14:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7140154714,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGplh1a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7140154714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-05T23:53:28Z"
    },
    {
      "event": "unlabeled",
      "id": 7140205434,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAGpluN6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7140205434",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-06T00:25:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1207183062,
      "node_id": "IC_kwDOABII585H9CbW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1207183062",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-06T09:34:14Z",
      "updated_at": "2022-08-06T09:34:14Z",
      "author_association": "MEMBER",
      "body": "CI is not happy :-(",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1207183062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T05:46:16Z",
      "updated_at": "2022-08-09T05:46:16Z",
      "source": {
        "issue": {
          "id": 1332409874,
          "node_id": "PR_kwDOABII584817t0",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25806/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25806",
          "number": 25806,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: group outputs only once, decouple it from Coin Selection",
          "body": "The idea originates from https://github.com/bitcoin/bitcoin/pull/24845#issuecomment-1130310321.\r\n\r\nNote:\r\nFor clarity, it's recommended to start reviewing from the end result to understand the structure of the flow.\r\n\r\n#### GroupOutputs function rationale:\r\nIf \"Avoid Partial Spends\" is enabled, the function gathers outputs with the same script together inside a container. So Coin Selection can treats them as if them were just one possible input and either select them all or not select them. \r\n\r\n#### How the Inputs Fetch + Selection process roughly works:\r\n\r\n```\r\n1. Fetch user’s manually selected inputs.\r\n2. Fetch wallet available coins (walks through the entire wallet txes map) and insert them into a set of vectors (each vector store outputs from a single type).\r\n3. Coin Selection Process:\r\n   Call `AttemptSelection` 8 times. Each of them expands the coin eligibility filter (accepting a larger subset of coins in the calculation) until it founds a solutions or completely fails if no solutions gets founds after the 8 rounds.\r\n\r\n   Each `AttemptSelection` call performs the following actions:\r\n     - For each output type supported by the wallet (P2SH, P2PK, P2WPKH, P2WSH and a combination of all of them):\r\n       Call ‘ChooseSelectionResult’ providing the respective, filtered by type, coins vector. Which:\r\n           I. Groups the outputs vector twice (one for positive only and a second one who includes the negative ones as well).\r\n              - GroupOutputs walks-through the entire inputted coins vector one time at least, + more if we are avoiding partial spends, to generate a vector of OutputGroups.\r\n           II. Then performs every coin selection algorithm using the recently created vector of OutputGroup: (1) BnB, (2) knapsack and (3) SRD.\r\n           III. Then returns the best solution out of them.\r\n```\r\n\r\nWe perform the general operation of gathering outputs, with the same script, into a single container inside:\r\nEach coins selection attempt (8 times —> each coin eligibility filter), for each of the outputs vector who were filtered by type (plus another one joining all the outputs as well if needed), twice (one for the positive only outputs effective value and a second one for all of them).\r\n\r\nSo, in the worst case scenario where no solution is found after the 8 Coin Selection attempts, the `GroupOutputs` function is called 80 times (8 * 5 * 2).\r\n\r\n#### Improvements:\r\n\r\nThis proposal streamlines the process so that the output groups, filtered by coin eligibility and type, are created in a single loop outside of the Coin Selection Process. \r\n\r\nThe new process is as follows:\r\n\r\n```\r\n1. Fetch user’s manually selected inputs.\r\n2. Fetch wallet available coins.\r\n3. Group outputs by each coin eligibility filter and each different output type found.\r\n4. Coin Selection Process: \r\n   Call AttemptSelection 8 times. Each of them expands the coin eligibility filter (accepting different output groups) until it founds a solutions or completely fails if no solutions gets founds after the 8 rounds.\r\n   \r\n   Each ‘AttemptSelection’ call performs the following actions:\r\n      - For each output type supported by the wallet (P2SH, P2PK, P2WPKH, P2WSH and all of them):\r\n          A. Call ‘ChooseSelectionResult’ providing the respective, filtered by type, output group. Which:\r\n             I. Performs every coin selection algorithm using the provided vector of OutputGroup: (1) BnB, (2) knapsack and (3) SRD.\r\n             II. Then returns the best solution out of them.\r\n```\r\n\r\nExtra Note:\r\nThe next steps after this PR will be to:\r\n1) Merge `AvailableCoins` and `GroupOutputs` processes.\r\n2) Skip entire coin selection rounds if no new coins are added into the subsequent round.\r\n3) Remove global feerates from the OutputGroup class.\r\n4) Remove secondary \"grouped\" tx creation from `CreateTransactionInternal` by running Coin Selection results over the aps grouped outputs vs non-aps ones.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25806",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25806",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25806.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25806.patch"
          },
          "closed_at": "2023-03-06T23:52:42Z",
          "created_at": "2022-08-08T21:19:07Z",
          "updated_at": "2023-05-27T01:47:50Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T23:26:56Z",
      "updated_at": "2022-08-09T23:26:56Z",
      "source": {
        "issue": {
          "id": 1320863837,
          "node_id": "PR_kwDOABII5848PxGI",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25729/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
          "number": 25729,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Check max transaction weight in CoinSelection",
          "body": "This PR is an attempt to fix #5782.\r\n\r\nI have added 4 test scenarios, 3 of them provided here https://github.com/bitcoin/bitcoin/issues/5782#issuecomment-73819058 (slightly modified to use a segwit wallet).\r\n\r\nHere are my benchmarks : \r\n## PR\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,466,341.00 |              681.97 |    0.6% |   11,176,762.00 |    3,358,752.00 |  3.328 |   1,897,839.00 |    0.3% |      0.02 | `CoinSelection`\r\n\r\n## Master\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,526,029.00 |              655.30 |    0.5% |   11,142,188.00 |    3,499,200.00 |  3.184 |   1,994,156.00 |    0.2% |      0.02 | `CoinSelection`",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25729",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25729",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25729.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25729.patch"
          },
          "closed_at": "2022-12-06T17:09:51Z",
          "created_at": "2022-07-28T12:33:06Z",
          "updated_at": "2023-01-12T11:51:43Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159573257,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGqvmsJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7159573257",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T00:14:55Z"
    },
    {
      "event": "commented",
      "id": 1210364525,
      "node_id": "IC_kwDOABII585IJLJt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210364525",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T08:51:27Z",
      "updated_at": "2022-08-10T08:51:27Z",
      "author_association": "MEMBER",
      "body": "re-utACK  8133ce4da3fbbcbecab4346cbe3cc825f4467ce7",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1210364525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "labeled",
      "id": 7201395643,
      "node_id": "LE_lADOABII584-JdWwzwAAAAGtPJO7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201395643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T00:45:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201596714,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGtP6Uq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201596714",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T01:33:49Z"
    },
    {
      "event": "unlabeled",
      "id": 7201832918,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAGtQz_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7201832918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T02:51:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1217881616,
      "node_id": "IC_kwDOABII585Il2YQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217881616",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T11:24:27Z",
      "updated_at": "2022-08-17T11:24:27Z",
      "author_association": "MEMBER",
      "body": "Mmm, CI is not running bf104948b42f63d60afee52ae95a8515432eeb1c.\r\n\r\nLooks like #25734 triggered the (trivial) rebase (see ffcdac846b)?\r\n\r\nBuilding throws a warning, because #25642 marked it as such.\r\n\r\n```\r\nwallet/keyman.cpp:96:9: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]\r\n        ext_key->Derive(*ext_key, i);\r\n```\r\n\r\nTested that #22341 still works on top of this.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1217881616",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "commented",
      "id": 1218142262,
      "node_id": "IC_kwDOABII585Im2A2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218142262",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T15:11:01Z",
      "updated_at": "2022-08-17T15:11:01Z",
      "author_association": "MEMBER",
      "body": "> Building throws a warning, because #25642 marked it as such.\r\n> \r\n> ```\r\n> wallet/keyman.cpp:96:9: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]\r\n>         ext_key->Derive(*ext_key, i);\r\n> ```\r\n\r\nNot seeing this error. Is this for a particular commit?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1218142262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7206955023,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGtkWgP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7206955023",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T15:12:31Z"
    },
    {
      "event": "commented",
      "id": 1219392666,
      "node_id": "IC_kwDOABII585IrnSa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219392666",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T11:44:28Z",
      "updated_at": "2022-08-18T11:44:28Z",
      "author_association": "MEMBER",
      "body": "> Is this for a particular commit?\r\n\r\nOops, in my own code :-)\r\n\r\nre-utACK e310760da891c217d2f7805978b5eca337f5cdc8",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1219392666",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T21:26:08Z",
      "updated_at": "2022-08-18T21:26:08Z",
      "source": {
        "issue": {
          "id": 1343552131,
          "node_id": "PR_kwDOABII5849aokZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25869",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25869/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25869/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25869/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25869",
          "number": 25869,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: remove UNKNOWN type from OUTPUT_TYPES array",
          "body": "Fixing https://github.com/bitcoin/bitcoin/pull/25734#discussion_r949502998 ->  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50329\r\n\r\nThe `OUTPUT_TYPES` array contain the known active output types only.\r\nAnd it's solely used to create/walk-through the active spkms.\r\n\r\nSo, no need to add the `UNKNOWN` type here.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25869",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25869",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25869.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25869.patch"
          },
          "closed_at": "2022-08-19T16:02:00Z",
          "created_at": "2022-08-18T19:49:04Z",
          "updated_at": "2023-05-27T01:47:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 7223216393,
      "node_id": "LE_lADOABII584-JdWwzwAAAAGuiYkJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223216393",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T15:42:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7223818149,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGukrel",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7223818149",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T17:11:50Z"
    },
    {
      "event": "unlabeled",
      "id": 7224071143,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAGulpPn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7224071143",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T17:52:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1079389785,
      "node_id": "PRR_kwDOABII585AVi5Z",
      "url": null,
      "actor": null,
      "commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/23417/commits/aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1079389785",
      "submitted_at": "2022-08-19T23:20:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225632138,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGurmWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7225632138",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T00:56:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225636322,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGurnXi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7225636322",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T00:57:54Z"
    },
    {
      "event": "reviewed",
      "id": 1079454924,
      "node_id": "PRR_kwDOABII585AVyzM",
      "url": null,
      "actor": null,
      "commit_id": "e8926b132d06a3357b7ec14e8ad81d699845ea23",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/23417/commits/aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1079454924",
      "submitted_at": "2022-08-20T02:00:25Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "commented",
      "id": 1222470441,
      "node_id": "IC_kwDOABII585I3Wsp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222470441",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T14:50:46Z",
      "updated_at": "2022-08-22T14:50:56Z",
      "author_association": "MEMBER",
      "body": "Rebase to e8926b1 looks correct, but see `find()` issue above.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1222470441",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7234540941,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGvNlWN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7234540941",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T16:44:34Z"
    },
    {
      "event": "commented",
      "id": 1222787338,
      "node_id": "IC_kwDOABII585I4kEK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222787338",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T18:57:56Z",
      "updated_at": "2022-08-22T18:57:56Z",
      "author_association": "MEMBER",
      "body": "re-utACK 5323e56ffb8762d5d99bb89d1623993ad6db5849",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1222787338",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7235853796,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGvSl3k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7235853796",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T19:57:09Z"
    },
    {
      "event": "commented",
      "id": 1222878856,
      "node_id": "IC_kwDOABII585I46aI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222878856",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T19:58:13Z",
      "updated_at": "2022-08-22T19:58:13Z",
      "author_association": "MEMBER",
      "body": "Pushed two small changes. The first is to set `WALLET_USES_KEYMAN` for all newly created wallets to avoid any possibility of attempting to upgrade a wallet when it shouldn't. The second is to bump the last client version check because this isn't going to make it to 24.0.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1222878856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7235862107,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGvSn5b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7235862107",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T19:58:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7235969504,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGvTCHg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7235969504",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T20:14:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7236896463,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGvWkbP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7236896463",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T22:56:28Z"
    },
    {
      "event": "commented",
      "id": 1223291186,
      "node_id": "IC_kwDOABII585I6fEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1223291186",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T22:56:35Z",
      "updated_at": "2022-08-22T22:56:35Z",
      "author_association": "MEMBER",
      "body": "On second thought, I've removed the last client check. It doesn't quite make sense to have that.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1223291186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T23:17:45Z",
      "updated_at": "2022-08-22T23:17:45Z",
      "source": {
        "issue": {
          "id": 1347108338,
          "node_id": "PR_kwDOABII5849mUDu",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
          "number": 25907,
          "state": "open",
          "state_reason": null,
          "title": "wallet: rpc to add automatically generated descriptors",
          "body": "It is useful to have a RPC that can create and add the automatically generated descriptors (that are normally made during creation) to a wallet. This is especially useful when a new default descriptor has been implemented as it allows wallets created before that time to quickly and easily add that type of descriptor.\r\n\r\nIn particular, descriptor wallets created before Taproot was implemented can use the new `createwalletdescriptor` RPC in order to get a Taproot descriptor.\r\n\r\nFurthermore, to keep the newly generated descriptor in line with the existing descriptors, this PR uses #26728 as it exposes a \"wallet extended key\" for us (in addition to upgrading wallets implemented prior to have a wallet xpub). The newly generated descriptors will use the \"wallet extended key\" stored in `CWallet` that PR adds.\r\n\r\n`createwalletdescriptor` is generic and so it can also be used with the other address types. Of course, it given the same wallet extended key, address type, and internal-ness, it will create the same descriptor. So some refactoring has been done in order to detect that the same descriptor is about to be created, and to avoid overwriting any existing descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25907",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25907.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25907.patch"
          },
          "created_at": "2022-08-22T23:17:45Z",
          "updated_at": "2023-12-13T17:52:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1081320659,
      "node_id": "PRR_kwDOABII585Ac6TT",
      "url": null,
      "actor": null,
      "commit_id": "93294e30f1f88246c47bab2bd6a091f89a520a68",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/23417/commits/93294e30f1f88246c47bab2bd6a091f89a520a68",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1081320659",
      "submitted_at": "2022-08-23T00:36:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "labeled",
      "id": 7308724663,
      "node_id": "LE_lADOABII584-JdWwzwAAAAGzokm3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7308724663",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T21:17:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7309113520,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAGzqDiw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7309113520",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T22:46:26Z"
    },
    {
      "event": "unlabeled",
      "id": 7309284501,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAGzqtSV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7309284501",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T23:23:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1094726372,
      "node_id": "PRR_kwDOABII585BQDLk",
      "url": null,
      "actor": null,
      "commit_id": "6bdd8a6759c9fc93cd19612bfbd39c1abcc4de00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-utACK 6bdd8a6759c9fc93cd19612bfbd39c1abcc4de00",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1094726372",
      "submitted_at": "2022-09-02T11:37:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T23:55:18Z",
      "updated_at": "2022-09-03T23:55:18Z",
      "source": {
        "issue": {
          "id": 1320033494,
          "node_id": "PR_kwDOABII5848NBt5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25722/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
          "number": 25722,
          "state": "open",
          "state_reason": null,
          "title": "refactor: Use util::Result class for wallet loading",
          "body": "**This is based on #25665.** The non-base commits are:\r\n\r\n- [`1b2a5f12b425` refactor: Use util::Result class for wallet loading](https://github.com/bitcoin/bitcoin/pull/25722/commits/1b2a5f12b42543d13a4bcafb9585e3d1df488914)\r\n\r\n---\r\n\r\nWallet loading functions up and down the stack have lots of error and warning parameters, and return error information in different ways. This PR makes them uniformly return `util::Result`, without changing behavior.",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25722",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25722",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25722.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25722.patch"
          },
          "created_at": "2022-07-27T19:26:58Z",
          "updated_at": "2023-10-16T16:19:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-05T04:35:25Z",
      "updated_at": "2022-09-05T04:35:25Z",
      "source": {
        "issue": {
          "id": 1361274567,
          "node_id": "PR_kwDOABII584-VbNV",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26008/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26008",
          "number": 26008,
          "state": "open",
          "state_reason": null,
          "title": "wallet: cache IsMine scriptPubKeys to improve performance of descriptor wallets",
          "body": "Wallets that have a ton of non-ranged descriptors (such as a migrated non-HD wallet) perform fairly poorly due to looping through all of the wallet's `ScriptPubKeyMan`s. This is done in various places, such as `IsMine`, and helper functions for fetching a `ScriptPubKeyMan` and a `SolvingProvider`. This also has a bit of a performance impact on standard descriptor wallets, although less noticeable due to the small number of SPKMs.\r\n\r\nAs these functions are based on doing `IsMine` for each `ScriptPubKeyMan`, we can improve this performance by caching `IsMine` scriptPubKeys for all descriptors and use that to determine which `ScriptPubKeyMan` to actually use for those things. This cache is used exclusively and we no longer iterate the SPKMs.\r\n\r\nAlso added a benchmark for `IsMine`.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26008",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26008",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26008.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26008.patch"
          },
          "created_at": "2022-09-04T23:03:15Z",
          "updated_at": "2023-12-15T04:10:28Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T15:41:12Z",
      "updated_at": "2022-09-20T15:41:12Z",
      "source": {
        "issue": {
          "id": 1360707418,
          "node_id": "PR_kwDOABII584-TvTS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25991",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25991/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25991/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25991/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25991",
          "number": 25991,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet: Add foreign_outputs metadata to support CoinJoin transactions",
          "body": "Fixes #14136\r\n\r\nDoes not fix GUI (can be done in GUI-side PR afterward)",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 749416508,
              "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
              "name": "Up for grabs",
              "color": "99a810",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25991",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25991",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25991.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25991.patch"
          },
          "closed_at": "2023-09-20T16:09:08Z",
          "created_at": "2022-09-03T00:49:20Z",
          "updated_at": "2023-09-20T16:09:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7425278201,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAG6lMD5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7425278201",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-20T19:59:56Z"
    },
    {
      "event": "commented",
      "id": 1254798554,
      "node_id": "IC_kwDOABII585KyrTa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254798554",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T09:57:37Z",
      "updated_at": "2022-09-22T09:57:37Z",
      "author_association": "MEMBER",
      "body": "re-utACK 8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1254798554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "reviewed",
      "id": 1117091463,
      "node_id": "PRR_kwDOABII585ClXaH",
      "url": null,
      "actor": null,
      "commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Left some code review nits, otherwise looks good to me.\r\nACK 8c5ddf432dceb084be6612b378dacf9211e8cf08.\r\n\r\nThough, shouldn't 8c5ddf432dceb084be6612b378dacf9211e8cf08 go in #22341?",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1117091463",
      "submitted_at": "2022-09-22T14:54:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7441685724,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAG7jxzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7441685724",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T17:36:34Z"
    },
    {
      "event": "reviewed",
      "id": 1117449606,
      "node_id": "PRR_kwDOABII585Cmu2G",
      "url": null,
      "actor": null,
      "commit_id": "d750754d5b73aae8d0ac15ef26b1c88dc369f921",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1117449606",
      "submitted_at": "2022-09-22T17:39:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7441780192,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAG7kI3g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7441780192",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T17:50:22Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-30T00:39:48Z",
      "updated_at": "2022-09-30T00:39:48Z",
      "source": {
        "issue": {
          "id": 1391200688,
          "node_id": "PR_kwDOABII584_37Hd",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26205",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26205/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26205/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26205/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26205",
          "number": 26205,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: #25768 follow ups",
          "body": "This PR addresses the outstanding comments/issues from #25768:\r\n\r\n- capitalization [typo](https://github.com/bitcoin/bitcoin/pull/25768#discussion_r958572522) in docstring\r\n- remove [unused locks](https://github.com/bitcoin/bitcoin/commit/01f3534632d18c772901fb6ce22f6394eae96799) that we previously needed for `ReacceptWalletTransactions()`\r\n- before #25768, only `ResendWalletTransactions()` would reset `m_next_resend` (formerly called `nNextResend`). By unifying it with `ReacceptWalletTransactions()` into `ResubmitWalletTransactions()`, the number of callsites that would reset the `m_next_resend` timer increased\r\n  - since `m_next_resend` is only used in case of `relay=true` (formerly `ResendWalletTransactions()`), this is unintuitive\r\n  - it leads to [unexpected behaviour](https://github.com/bitcoin/bitcoin/pull/25768#issuecomment-1252619427) such as transactions potentially never being rebroadcasted.\r\n  - it makes the ResubmitWalletTransactions()` logic [more complicated than strictly necessary](https://github.com/bitcoin/bitcoin/pull/25768#discussion_r962828563)\r\n  - since #25768, we relied on an earlier call of `ResubmitWalletTransactions(relay=false, force=true)` to initialize `m_next_resend()`, I think we can more elegantly do that by just providing `m_next_resend` with a default value\r\n  - just to highlight: this commit introduces behaviour change\r\n\r\nNote: the `if (!fBroadcastTransactions)` in `CWallet:ShouldResend()` is duplicated on purpose, since it potentially avoids the slightly more expensive `if (!chain().isReadyToBroadcast())` check afterwards. I don't have a strong view on it, so happy to remove that additional check to reduce the diff, too.",
          "user": {
            "login": "stickies-v",
            "id": 69010457,
            "node_id": "MDQ6VXNlcjY5MDEwNDU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stickies-v",
            "html_url": "https://github.com/stickies-v",
            "followers_url": "https://api.github.com/users/stickies-v/followers",
            "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
            "organizations_url": "https://api.github.com/users/stickies-v/orgs",
            "repos_url": "https://api.github.com/users/stickies-v/repos",
            "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stickies-v/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
            "id": 7150037,
            "node_id": "MI_kwDOABII584AbRnV",
            "number": 54,
            "state": "closed",
            "title": "24.0",
            "description": "",
            "creator": {
              "login": "laanwj",
              "id": 126646,
              "node_id": "MDQ6VXNlcjEyNjY0Ng==",
              "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/laanwj",
              "html_url": "https://github.com/laanwj",
              "followers_url": "https://api.github.com/users/laanwj/followers",
              "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
              "organizations_url": "https://api.github.com/users/laanwj/orgs",
              "repos_url": "https://api.github.com/users/laanwj/repos",
              "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/laanwj/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 159,
            "created_at": "2021-09-14T08:27:02Z",
            "updated_at": "2022-11-29T15:44:44Z",
            "closed_at": "2022-11-29T15:44:44Z"
          },
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26205",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26205",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26205.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26205.patch"
          },
          "closed_at": "2022-10-13T04:10:06Z",
          "created_at": "2022-09-29T17:04:49Z",
          "updated_at": "2023-07-31T14:23:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1129951245,
      "node_id": "PRR_kwDOABII585DWbAN",
      "url": null,
      "actor": null,
      "commit_id": "5145d1610202356676e5a031c68d4af0b16a62d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 5145d1610202356676e5a031c68d4af0b16a62d9 - minor changes since last review",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1129951245",
      "submitted_at": "2022-10-04T13:39:09Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "reviewed",
      "id": 1130042710,
      "node_id": "PRR_kwDOABII585DWxVW",
      "url": null,
      "actor": null,
      "commit_id": "5145d1610202356676e5a031c68d4af0b16a62d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1130042710",
      "submitted_at": "2022-10-04T14:22:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7556505654,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAHCZyA2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7556505654",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-10T19:02:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7557320643,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAHCc4_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7557320643",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-10T21:41:07Z"
    },
    {
      "event": "reviewed",
      "id": 1137842483,
      "node_id": "PRR_kwDOABII585D0hkz",
      "url": null,
      "actor": null,
      "commit_id": "bdc59fcf8a5ef473461c43c2a035accd4f89e35d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK bdc59fcf8a5ef473461c43c2a035accd4f89e35d",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1137842483",
      "submitted_at": "2022-10-11T16:41:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "labeled",
      "id": 7577558333,
      "node_id": "LE_lADOABII584-JdWwzwAAAAHDqF09",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7577558333",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-13T05:38:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4MDU0NzA0Y2YzMzYzMGM0Zjk1MTdiZTQ3MTVjYTBkMmM2M2RjYzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18054704cf33630c4f9517be4715ca0d2c63dcc5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18054704cf33630c4f9517be4715ca0d2c63dcc5",
      "tree": {
        "sha": "dd8a10d516296852425ee7a180f8cbbbcae51b56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd8a10d516296852425ee7a180f8cbbbcae51b56"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a52ff619a45c760f657413cbd40e1e2226068541",
          "sha": "a52ff619a45c760f657413cbd40e1e2226068541",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a52ff619a45c760f657413cbd40e1e2226068541"
        }
      ],
      "message": "moveonly: move WalletStorage to separate file",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T18:05:00Z"
      },
      "sha": "18054704cf33630c4f9517be4715ca0d2c63dcc5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxMjI0NTQzM2RiZTEwOTYyZGNmYTkwM2RhZWQyZjhmZTdmMGI5Mzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/312245433dbe10962dcfa903daed2f8fe7f0b937",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/312245433dbe10962dcfa903daed2f8fe7f0b937",
      "tree": {
        "sha": "bcb707ac106b82aec853a52c2471ac75ab6ce800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcb707ac106b82aec853a52c2471ac75ab6ce800"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18054704cf33630c4f9517be4715ca0d2c63dcc5",
          "sha": "18054704cf33630c4f9517be4715ca0d2c63dcc5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18054704cf33630c4f9517be4715ca0d2c63dcc5"
        }
      ],
      "message": "walletdb: Add HDKey records",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:08:56Z"
      },
      "sha": "312245433dbe10962dcfa903daed2f8fe7f0b937"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNmYTY2ZDAwOWFjYjc5YWEyMTBhNGYzNWRmMGY4NTE2ZmRiYTYxMjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa66d009acb79aa210a4f35df0f8516fdba6129",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa66d009acb79aa210a4f35df0f8516fdba6129",
      "tree": {
        "sha": "3612dbbd1117613eac994e04da0bb40484a37f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3612dbbd1117613eac994e04da0bb40484a37f29"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/312245433dbe10962dcfa903daed2f8fe7f0b937",
          "sha": "312245433dbe10962dcfa903daed2f8fe7f0b937",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/312245433dbe10962dcfa903daed2f8fe7f0b937"
        }
      ],
      "message": "walletdb: Add WriteKeyManKey and WriteCryptedKeyManKey\n\nThese functions write new key records for keys handled by a KeyManager",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:20:30Z"
      },
      "sha": "3fa66d009acb79aa210a4f35df0f8516fdba6129"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYzMmIyOTYwOGZmOGI1ZmVmOWU0ZTYwYjYwYjk4MjRlNjFjZjZiMTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/632b29608ff8b5fef9e4e60b60b9824e61cf6b13",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/632b29608ff8b5fef9e4e60b60b9824e61cf6b13",
      "tree": {
        "sha": "57107e7cf5300b51a98676c1ca213c3cc534314e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57107e7cf5300b51a98676c1ca213c3cc534314e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa66d009acb79aa210a4f35df0f8516fdba6129",
          "sha": "3fa66d009acb79aa210a4f35df0f8516fdba6129",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa66d009acb79aa210a4f35df0f8516fdba6129"
        }
      ],
      "message": "walletdb: Allow duplicate descriptor keys\n\nIf a descriptor (crypted) key is being written and one already exists,\nmake sure that the one being written and the one already on disk\nmatch each other.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T21:03:01Z"
      },
      "sha": "632b29608ff8b5fef9e4e60b60b9824e61cf6b13"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViZWM4OTNjZTFhNjdjZmY2M2I2OGM5NjZmMWQ2Yjk2ZGQzMWFhMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebec893ce1a67cff63b68c966f1d6b96dd31aa01",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ebec893ce1a67cff63b68c966f1d6b96dd31aa01",
      "tree": {
        "sha": "1934cb2f28116a4e323a6ec5cf64f60ac49af01c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1934cb2f28116a4e323a6ec5cf64f60ac49af01c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/632b29608ff8b5fef9e4e60b60b9824e61cf6b13",
          "sha": "632b29608ff8b5fef9e4e60b60b9824e61cf6b13",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/632b29608ff8b5fef9e4e60b60b9824e61cf6b13"
        }
      ],
      "message": "descspkm: Track CKeyIDs of our keys\n\nWhen DescriptorScriptPubKeyMan no longer manages its keys, it still\nneeds to know the IDs of its keys.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:16:29Z"
      },
      "sha": "ebec893ce1a67cff63b68c966f1d6b96dd31aa01"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRiNmVmZWYwOTg3NWM4NzEwNTM1ZWYzNWRhODg3ZTUyMTQ1YmJiNGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db6efef09875c8710535ef35da887e52145bbb4a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/db6efef09875c8710535ef35da887e52145bbb4a",
      "tree": {
        "sha": "2cf6324fe816b3df3043bdca6c620c4196514434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cf6324fe816b3df3043bdca6c620c4196514434"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebec893ce1a67cff63b68c966f1d6b96dd31aa01",
          "sha": "ebec893ce1a67cff63b68c966f1d6b96dd31aa01",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ebec893ce1a67cff63b68c966f1d6b96dd31aa01"
        }
      ],
      "message": "wallet: Add KeyManager class",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-26T19:03:59Z"
      },
      "sha": "db6efef09875c8710535ef35da887e52145bbb4a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYwYTQ5OWI1ZGQ1Zjg5YTljOTJiOTM2ODRkMzExNjNjY2FkZTQ0MTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a499b5dd5f89a9c92b93684d31163ccade4416",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/60a499b5dd5f89a9c92b93684d31163ccade4416",
      "tree": {
        "sha": "0d03510c648e0c7d21240616d80c30200cb471dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d03510c648e0c7d21240616d80c30200cb471dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db6efef09875c8710535ef35da887e52145bbb4a",
          "sha": "db6efef09875c8710535ef35da887e52145bbb4a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/db6efef09875c8710535ef35da887e52145bbb4a"
        }
      ],
      "message": "descspkm: Add KeyManager to DescriptorScriptPubKeyMan and use for keys",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:15:22Z"
      },
      "sha": "60a499b5dd5f89a9c92b93684d31163ccade4416"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlOTllYmRhNzc0NGYyOGFlMjAwNTMwM2EyOGQwZGYzYjU3MDk0YjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e99ebda7744f28ae2005303a28d0df3b57094b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e99ebda7744f28ae2005303a28d0df3b57094b0",
      "tree": {
        "sha": "b61b7e037d967f9cd04707548d086d1356c15d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b61b7e037d967f9cd04707548d086d1356c15d0d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a499b5dd5f89a9c92b93684d31163ccade4416",
          "sha": "60a499b5dd5f89a9c92b93684d31163ccade4416",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/60a499b5dd5f89a9c92b93684d31163ccade4416"
        }
      ],
      "message": "descspkm: Encrypt with KeyManager instead of direct map access",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:55:19Z"
      },
      "sha": "1e99ebda7744f28ae2005303a28d0df3b57094b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliNDQwNTVjNGY3MTc5NzNjYjAzZjE4YzMzN2Y0OGFkOWYyMzQwYzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b44055c4f717973cb03f18c337f48ad9f2340c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b44055c4f717973cb03f18c337f48ad9f2340c7",
      "tree": {
        "sha": "8b196ec4d89c758a6de2491032f08f3af2b24cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b196ec4d89c758a6de2491032f08f3af2b24cf9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e99ebda7744f28ae2005303a28d0df3b57094b0",
          "sha": "1e99ebda7744f28ae2005303a28d0df3b57094b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e99ebda7744f28ae2005303a28d0df3b57094b0"
        }
      ],
      "message": "descspkm: Use KeyManager::LoadKey and LoadCryptedKey when loading",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:55:50Z"
      },
      "sha": "9b44055c4f717973cb03f18c337f48ad9f2340c7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwNGRkNWJlY2ZiMjg1OTQ1NTc3YTZmNDIwNDkyZjIxMTY1NjlkYzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04dd5becfb285945577a6f420492f2116569dc9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d04dd5becfb285945577a6f420492f2116569dc9",
      "tree": {
        "sha": "c07927d07207fb95880a9d10a1dc0270acea3d5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c07927d07207fb95880a9d10a1dc0270acea3d5c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b44055c4f717973cb03f18c337f48ad9f2340c7",
          "sha": "9b44055c4f717973cb03f18c337f48ad9f2340c7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b44055c4f717973cb03f18c337f48ad9f2340c7"
        }
      ],
      "message": "descspkm: Replace GetKeys with KeyManager::GetKeys",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:11:40Z"
      },
      "sha": "d04dd5becfb285945577a6f420492f2116569dc9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0Yzc4YWNlNWEzODg1ZGNlMDY0ZDQwOTRjMjM3YjYxYTY2NTM3Nzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4c78ace5a3885dce064d4094c237b61a6653777",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c78ace5a3885dce064d4094c237b61a6653777",
      "tree": {
        "sha": "29f3a0383e654c5cdf2768cecf5cc852a51b4127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29f3a0383e654c5cdf2768cecf5cc852a51b4127"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04dd5becfb285945577a6f420492f2116569dc9",
          "sha": "d04dd5becfb285945577a6f420492f2116569dc9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d04dd5becfb285945577a6f420492f2116569dc9"
        }
      ],
      "message": "descspkm: Replace HavePrivateKeys with KeyManager::HavePrivateKeys()",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:13:28Z"
      },
      "sha": "d4c78ace5a3885dce064d4094c237b61a6653777"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM4ZTA5OWJkMmI4YTMxYjZkMTFhOTNjMWNlNGUwYTYwNDJhZWQ4ODU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e099bd2b8a31b6d11a93c1ce4e0a6042aed885",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38e099bd2b8a31b6d11a93c1ce4e0a6042aed885",
      "tree": {
        "sha": "799e423e18fb66a9adcaee4af610596c1aaff9f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/799e423e18fb66a9adcaee4af610596c1aaff9f0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4c78ace5a3885dce064d4094c237b61a6653777",
          "sha": "d4c78ace5a3885dce064d4094c237b61a6653777",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c78ace5a3885dce064d4094c237b61a6653777"
        }
      ],
      "message": "keyman: Make some members private",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:57:59Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:14:22Z"
      },
      "sha": "38e099bd2b8a31b6d11a93c1ce4e0a6042aed885"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZjODlhMzdkODFlMzI1MGQ0ZjVlNzY5YTMyY2FmMzE0NGMwNjgyOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc89a37d81e3250d4f5e769a32caf3144c068294",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fc89a37d81e3250d4f5e769a32caf3144c068294",
      "tree": {
        "sha": "fcabff65cdc054b5477ed1e3c2e47c9409863773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcabff65cdc054b5477ed1e3c2e47c9409863773"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e099bd2b8a31b6d11a93c1ce4e0a6042aed885",
          "sha": "38e099bd2b8a31b6d11a93c1ce4e0a6042aed885",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/38e099bd2b8a31b6d11a93c1ce4e0a6042aed885"
        }
      ],
      "message": "wallet: Have KeyManager in CWallet rather than DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T18:37:45Z"
      },
      "sha": "fc89a37d81e3250d4f5e769a32caf3144c068294"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIyMTk4MmYzOTBhYWIxYzhhMWNhYzA5MzFlMmMyZGRjZDYxNjlkZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b21982f390aab1c8a1cac0931e2c2ddcd6169deb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b21982f390aab1c8a1cac0931e2c2ddcd6169deb",
      "tree": {
        "sha": "e1a32ead97456f5d5d562a81a541287ad690f4cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1a32ead97456f5d5d562a81a541287ad690f4cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc89a37d81e3250d4f5e769a32caf3144c068294",
          "sha": "fc89a37d81e3250d4f5e769a32caf3144c068294",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fc89a37d81e3250d4f5e769a32caf3144c068294"
        }
      ],
      "message": "walletdb: Refactor deserialaization of keys with checksums\n\nThis will become shared later.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-10T18:20:59Z"
      },
      "sha": "b21982f390aab1c8a1cac0931e2c2ddcd6169deb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0MzZkMmZmNTU3MDkzNWE0ZGNhNGFjMjExMzYzMjFjNGFjZGJiOWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8436d2ff5570935a4dca4ac21136321c4acdbb9f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8436d2ff5570935a4dca4ac21136321c4acdbb9f",
      "tree": {
        "sha": "231240217a654c21d2158bf7e3fdf08563fd16b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/231240217a654c21d2158bf7e3fdf08563fd16b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b21982f390aab1c8a1cac0931e2c2ddcd6169deb",
          "sha": "b21982f390aab1c8a1cac0931e2c2ddcd6169deb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b21982f390aab1c8a1cac0931e2c2ddcd6169deb"
        }
      ],
      "message": "walletdb: Load keys into KeyManager directly",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T16:43:24Z"
      },
      "sha": "8436d2ff5570935a4dca4ac21136321c4acdbb9f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlNWZiZDU2YTQzZGNiYjFhOWI3ZDg1YTQ0ZWVjYjY4Y2Q5MDdjYzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5",
      "tree": {
        "sha": "58db960539548201d7c77aa4a4fd570caeab708e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58db960539548201d7c77aa4a4fd570caeab708e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8436d2ff5570935a4dca4ac21136321c4acdbb9f",
          "sha": "8436d2ff5570935a4dca4ac21136321c4acdbb9f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8436d2ff5570935a4dca4ac21136321c4acdbb9f"
        }
      ],
      "message": "wallet: Add flag for using KeyManager\n\nKeyManager will be a backwards compatible background upgrade to\ndescriptor wallets. A flag indicating that the upgrade has occurred is\nadded so that the upgrade (not yet implemented) will only happen once.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T17:48:00Z"
      },
      "sha": "6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIwYWRmNDY0YzIzNmNlNTExYjA5NDdjODk2ZmM5ODYxMzVhNzY5NGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0adf464c236ce511b0947c896fc986135a7694a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b0adf464c236ce511b0947c896fc986135a7694a",
      "tree": {
        "sha": "1423d4202fd04152199c31a4d79ffc98333e78f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1423d4202fd04152199c31a4d79ffc98333e78f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5",
          "sha": "6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5fbd56a43dcbb1a9b7d85a44eecb68cd907cc5"
        }
      ],
      "message": "wallet: Use KeyManager to generate master key",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T18:07:39Z"
      },
      "sha": "b0adf464c236ce511b0947c896fc986135a7694a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjYTUzMDg0ZTdmYzk3MDhkMThiN2Y1YjkxOGMyMDA2NTBjYmM0ZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ca53084e7fc9708d18b7f5b918c200650cbc4f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca53084e7fc9708d18b7f5b918c200650cbc4f4",
      "tree": {
        "sha": "72ed3904dd02ea95fca77c656b0d479321fb7fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72ed3904dd02ea95fca77c656b0d479321fb7fc5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0adf464c236ce511b0947c896fc986135a7694a",
          "sha": "b0adf464c236ce511b0947c896fc986135a7694a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b0adf464c236ce511b0947c896fc986135a7694a"
        }
      ],
      "message": "descriptor: Be able to get the pubkeys involved in a descriptor",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-02T20:53:25Z"
      },
      "sha": "4ca53084e7fc9708d18b7f5b918c200650cbc4f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY3ZmJkMGE1ZmQ1Mjk0NWIyZjk5OGEwYTc4NDNhNzk1MjY3NWRlMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7fbd0a5fd52945b2f998a0a7843a7952675de28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f7fbd0a5fd52945b2f998a0a7843a7952675de28",
      "tree": {
        "sha": "5895c3d3235c94fb8a5254b764389ec708f05ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5895c3d3235c94fb8a5254b764389ec708f05ecb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ca53084e7fc9708d18b7f5b918c200650cbc4f4",
          "sha": "4ca53084e7fc9708d18b7f5b918c200650cbc4f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca53084e7fc9708d18b7f5b918c200650cbc4f4"
        }
      ],
      "message": "walletdb: Implement upgrading a wallet to use KeyManager",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:04Z"
      },
      "sha": "f7fbd0a5fd52945b2f998a0a7843a7952675de28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlZTgwZTVhMGQ0ZGQ2OWI3NDExNmFiZGNlZmE5ZjUyMzY4NDc1ZDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aee80e5a0d4dd69b74116abdcefa9f52368475d6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aee80e5a0d4dd69b74116abdcefa9f52368475d6",
      "tree": {
        "sha": "5abd98872097138fa05fec26cd454d78d546b755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5abd98872097138fa05fec26cd454d78d546b755"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7fbd0a5fd52945b2f998a0a7843a7952675de28",
          "sha": "f7fbd0a5fd52945b2f998a0a7843a7952675de28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f7fbd0a5fd52945b2f998a0a7843a7952675de28"
        }
      ],
      "message": "descspkm: Remove unneeded key loading\n\nKey management will be done entirely by KeyManager, so\nDescriptorScriptPubKeyMan does not need key loading functions.",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:51Z"
      },
      "sha": "aee80e5a0d4dd69b74116abdcefa9f52368475d6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5YWYwMzBjZDYwZjFmZTRlNjZjY2JhNTg1YjYxNmMxZGNjMTFhNTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "tree": {
        "sha": "f2058306e1ef25a948b058acf86d8248be390deb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2058306e1ef25a948b058acf86d8248be390deb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aee80e5a0d4dd69b74116abdcefa9f52368475d6",
          "sha": "aee80e5a0d4dd69b74116abdcefa9f52368475d6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aee80e5a0d4dd69b74116abdcefa9f52368475d6"
        }
      ],
      "message": "rpc: Add getxpub command",
      "committer": {
        "name": "Andrew Chow",
        "email": "github@achow101.com",
        "date": "2022-10-17T14:58:12Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:47:33Z"
      },
      "sha": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7603136963,
      "node_id": "HRFPE_lADOABII584-JdWwzwAAAAHFLqnD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7603136963",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-17T14:59:31Z"
    },
    {
      "event": "reviewed",
      "id": 1144380537,
      "node_id": "PRR_kwDOABII585ENdx5",
      "url": null,
      "actor": null,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK c9af030cd60f1fe4e66ccba585b616c1dcc11a50 - minor rebase, added `KeyManager m_keyman` to `CWallet`",
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#pullrequestreview-1144380537",
      "submitted_at": "2022-10-17T15:25:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
    },
    {
      "event": "unlabeled",
      "id": 7603587009,
      "node_id": "UNLE_lADOABII584-JdWwzwAAAAHFNYfB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7603587009",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-17T15:46:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1293521720,
      "node_id": "IC_kwDOABII585NGZM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293521720",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-27T13:23:45Z",
      "updated_at": "2022-10-27T13:23:45Z",
      "author_association": "MEMBER",
      "body": "re-utACK c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1293521720",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "commented",
      "id": 1308366954,
      "node_id": "IC_kwDOABII585N_Bhq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1308366954",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-09T08:10:06Z",
      "updated_at": "2022-11-09T08:10:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. Started code review",
      "user": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1308366954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-25T03:09:46Z",
      "updated_at": "2022-11-25T03:09:46Z",
      "source": {
        "issue": {
          "id": 1463636841,
          "node_id": "PR_kwDOABII585DqW4U",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26567",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26567/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26567/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26567/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26567",
          "number": 26567,
          "state": "closed",
          "state_reason": null,
          "title": "Wallet: estimate the size of signed inputs using descriptors",
          "body": "The wallet currently estimates the size of a signed input by doing a dry run of the signing logic. This is unnecessary since all outputs we can sign for can be represented by a descriptor, and we can derive the size of a satisfaction (\"signature\") directly from the descriptor itself.\r\nIn addition, the current approach does not generalize well: dry runs of the signing logic are only possible for the most basic scripts. See for instance the discussion in #24149 around that.\r\n\r\nThis introduces a method to get the maximum size of a satisfaction from a descriptor, and makes the wallet use that instead of the dry-run.",
          "user": {
            "login": "darosior",
            "id": 22457751,
            "node_id": "MDQ6VXNlcjIyNDU3NzUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/darosior",
            "html_url": "https://github.com/darosior",
            "followers_url": "https://api.github.com/users/darosior/followers",
            "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
            "organizations_url": "https://api.github.com/users/darosior/orgs",
            "repos_url": "https://api.github.com/users/darosior/repos",
            "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/darosior/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60",
            "html_url": "https://github.com/bitcoin/bitcoin/milestone/60",
            "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/60/labels",
            "id": 9286970,
            "node_id": "MI_kwDOABII584AjbU6",
            "number": 60,
            "state": "closed",
            "title": "26.0",
            "description": "",
            "creator": {
              "login": "fanquake",
              "id": 863730,
              "node_id": "MDQ6VXNlcjg2MzczMA==",
              "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/fanquake",
              "html_url": "https://github.com/fanquake",
              "followers_url": "https://api.github.com/users/fanquake/followers",
              "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
              "organizations_url": "https://api.github.com/users/fanquake/orgs",
              "repos_url": "https://api.github.com/users/fanquake/repos",
              "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/fanquake/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 116,
            "created_at": "2023-04-15T11:36:05Z",
            "updated_at": "2023-12-08T10:41:40Z",
            "closed_at": "2023-12-04T13:27:46Z"
          },
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26567",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26567",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26567.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26567.patch"
          },
          "closed_at": "2023-09-06T17:31:32Z",
          "created_at": "2022-11-24T17:15:50Z",
          "updated_at": "2023-11-11T04:33:08Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-25T16:50:23Z",
      "updated_at": "2022-11-25T16:50:23Z",
      "source": {
        "issue": {
          "id": 1464474508,
          "node_id": "PR_kwDOABII585DtIR7",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26573",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26573/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26573/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26573/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26573",
          "number": 26573,
          "state": "open",
          "state_reason": null,
          "title": "Wallet: don't underestimate the fees when spending a Taproot output",
          "body": "Alternative to #23502.\r\n\r\nCurrently, when estimating the size an input spending a Taproot output will have once signed, we always assume the key path will be used. Even if there are script paths. This can lead to pretty severe fee underestimation if the script path turns out to be used in the end. So instead assume the most expensive between all script paths and the key path will be used.\r\n\r\nThis is still not ideal, as there may be a huge gap between the size of a script path spend and a key path spend. Still, this is less bad than undershooting the fees.",
          "user": {
            "login": "darosior",
            "id": 22457751,
            "node_id": "MDQ6VXNlcjIyNDU3NzUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/darosior",
            "html_url": "https://github.com/darosior",
            "followers_url": "https://api.github.com/users/darosior/followers",
            "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
            "organizations_url": "https://api.github.com/users/darosior/orgs",
            "repos_url": "https://api.github.com/users/darosior/repos",
            "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/darosior/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26573",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26573",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26573.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26573.patch"
          },
          "created_at": "2022-11-25T12:21:59Z",
          "updated_at": "2023-10-25T22:33:49Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-29T19:59:39Z",
      "updated_at": "2022-11-29T19:59:39Z",
      "source": {
        "issue": {
          "id": 1467243567,
          "node_id": "PR_kwDOABII585D2F4R",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26596/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26596",
          "number": 26596,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Migrate legacy wallets to descriptor wallets without requiring BDB",
          "body": "Currently migrating to descriptor wallets requires having BDB available. In order to remove BDB from the project, we need to be able to do these migrations without BDB. This PR adds `BerkeleyRODatabase` which is an independent implementation of a BDB file parser. It can be used to read uncorrupted BDB files and extract all of their records. This is used for both the wallettool's `dump` command, and `migratewallet`.\r\n\r\nBased on #26606 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26596",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26596",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26596.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26596.patch"
          },
          "created_at": "2022-11-28T23:46:50Z",
          "updated_at": "2023-12-14T21:55:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-03T04:56:30Z",
      "updated_at": "2022-12-03T04:56:30Z",
      "source": {
        "issue": {
          "id": 1473394773,
          "node_id": "PR_kwDOABII585EK5rG",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26627",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26627/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26627/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26627/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26627",
          "number": 26627,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Migrate non-HD keys with single combo containing a list of keys",
          "body": "Based on #26626\r\n\r\nThis PR changes the legacy to descriptor wallet migration from creating a new `combo()` for every individual key to creating one large `combo()` that has a list of every key. This improves the performance of the migrated wallet as it will only have one DescriptorSPKM for all of the non-HD keys.\r\n\r\nNote that this does not affect previously migrated wallets. Such wallets will still have a `combo()` for every key.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26627",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26627",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26627.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26627.patch"
          },
          "closed_at": "2023-09-21T09:33:59Z",
          "created_at": "2022-12-02T20:12:31Z",
          "updated_at": "2023-09-21T09:33:59Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T22:31:05Z",
      "updated_at": "2022-12-19T22:31:05Z",
      "source": {
        "issue": {
          "id": 1503703234,
          "node_id": "PR_kwDOABII585F0rVt",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26728/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26728",
          "number": 26728,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Have the wallet store the key for automatically generated descriptors",
          "body": "The wallet currently does not know the master key that was used to generate the automatically generated descriptors. This makes it difficult to add new automatically generated descriptors when new ones are introduced. So instead of losing this information after the descriptors are created, have `CWallet` store it. The xpub will be stored in a new `activehdkey` field. The private key must be one of the keys that is used by the descriptors, and will be extracted upon loading.\r\n\r\nAs this is a new field, wallets will be automatically upgraded upon loading. This loading is backwards compatible and uses a new non-required flag `WALLET_FLAG_GLOBAL_HD_KEY` to signal that the upgrade completed. The upgrade will search for an xpub that is shared by `pkh()`, `wpkh()`, and `sh(wpkh()` descriptors with the derivation pattern that we use. For new wallets, the xpub will be set during descriptor creation rather than trying to reverse engineer it. The flag will be set for all wallets, regardless of whether such an xpub was found or can even exist, in order to indicate that the upgrade will not need to be run in the future.\r\n\r\nThis allows us to have a `gethdkey` command which is useful for those who need a simple way to get an xpub from a wallet. `gethdkey` can also take a boolean parameter to indicate whether it should also output the corresponding xprv.\r\n\r\nSupercedes #23417",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 50,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26728",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26728",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26728.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26728.patch"
          },
          "created_at": "2022-12-19T22:31:05Z",
          "updated_at": "2023-12-19T07:45:05Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1358499860,
      "node_id": "IC_kwDOABII585Q-RAU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1358499860",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T22:35:38Z",
      "updated_at": "2022-12-19T22:35:38Z",
      "author_association": "MEMBER",
      "body": "I had a discussion with @S3RK about this PR last week, and we concluded that this might not be the best approach to tackle the issue that it targets. While it is a complete solution that would probably work well if descriptor wallets had been implemented this way in the first place, it seems like it doesn't work well with having to deal with backwards compatibility and various combinations of upgrading and downgrading that may occur.\r\n\r\nSince the goal of this PR is to enable key rotation (via re-enabling `sethdseed`) and the addition of new automatically generated descriptors, this implementation is probably overkill in addition to the backwards compatibility issues that it introduces.\r\n\r\nI've opened #26728 which implements a much simpler solution of just having `CWallet` store the master key and any ones that get rotated out. It still enables the things that we want.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#issuecomment-1358499860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23417"
    },
    {
      "event": "closed",
      "id": 8073464463,
      "node_id": "CE_lADOABII584-JdWwzwAAAAHhN0qP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8073464463",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T22:35:38Z"
    },
    {
      "event": "mentioned",
      "id": 8073464484,
      "node_id": "MEE_lADOABII584-JdWwzwAAAAHhN0qk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8073464484",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T22:35:38Z"
    },
    {
      "event": "subscribed",
      "id": 8073464488,
      "node_id": "SE_lADOABII584-JdWwzwAAAAHhN0qo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8073464488",
      "actor": {
        "login": "S3RK",
        "id": 1466284,
        "node_id": "MDQ6VXNlcjE0NjYyODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/S3RK",
        "html_url": "https://github.com/S3RK",
        "followers_url": "https://api.github.com/users/S3RK/followers",
        "following_url": "https://api.github.com/users/S3RK/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/S3RK/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/S3RK/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
        "organizations_url": "https://api.github.com/users/S3RK/orgs",
        "repos_url": "https://api.github.com/users/S3RK/repos",
        "events_url": "https://api.github.com/users/S3RK/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/S3RK/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-19T22:35:38Z"
    },
    {
      "event": "subscribed",
      "id": 10323352381,
      "node_id": "SE_lADOABII584-JdWwzwAAAAJnUds9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10323352381",
      "actor": {
        "login": "BenWestgate",
        "id": 73506583,
        "node_id": "MDQ6VXNlcjczNTA2NTgz",
        "avatar_url": "https://avatars.githubusercontent.com/u/73506583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BenWestgate",
        "html_url": "https://github.com/BenWestgate",
        "followers_url": "https://api.github.com/users/BenWestgate/followers",
        "following_url": "https://api.github.com/users/BenWestgate/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BenWestgate/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BenWestgate/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BenWestgate/subscriptions",
        "organizations_url": "https://api.github.com/users/BenWestgate/orgs",
        "repos_url": "https://api.github.com/users/BenWestgate/repos",
        "events_url": "https://api.github.com/users/BenWestgate/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BenWestgate/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-09T03:12:31Z"
    },
    {
      "event": "locked",
      "id": 11289008541,
      "node_id": "LOE_lADOABII584-JdWwzwAAAAKg4Jmd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11289008541",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-19T12:22:37Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743729962",
      "pull_request_review_id": 798987425,
      "id": 743729962,
      "node_id": "PRRC_kwDOABII584sVGsq",
      "diff_hunk": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return pubkey < other.pubkey; }",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1399c27ec5081af7a1f31a9bb750b216cc68c6cf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1399c27ec5081af7a1f31a9bb750b216cc68c6cf: nit, maybe order by `vchFingerprint < other.vchFingerprint || pubkey < other.pubkey`, in case we ever want to use this to sort by master key.",
      "created_at": "2021-11-05T14:51:53Z",
      "updated_at": "2021-11-05T16:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743729962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743729962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743737544",
      "pull_request_review_id": 798987425,
      "id": 743737544,
      "node_id": "PRRC_kwDOABII584sVIjI",
      "diff_hunk": "@@ -55,6 +55,7 @@ namespace DBKeys {\n extern const std::string ACENTRY;\n extern const std::string ACTIVEEXTERNALSPK;\n extern const std::string ACTIVEINTERNALSPK;\n+extern const std::string ACTIVEHDKEY;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "2ed25fe1a512d50065c6e27b23016500f3e6d647",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2ed25fe1a512d50065c6e27b23016500f3e6d647\r\n```\r\n// The active HD master key, identified by its extended public key\r\n```",
      "created_at": "2021-11-05T15:00:23Z",
      "updated_at": "2021-11-05T16:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743737544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743737544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743738748",
      "pull_request_review_id": 798987425,
      "id": 743738748,
      "node_id": "PRRC_kwDOABII584sVI18",
      "diff_hunk": "@@ -63,6 +64,7 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 12,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "2ed25fe1a512d50065c6e27b23016500f3e6d647",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2ed25fe1a512d50065c6e27b23016500f3e6d647\r\n```\r\n// An HD master key, identified by its extended public key\r\n```",
      "created_at": "2021-11-05T15:01:47Z",
      "updated_at": "2021-11-05T16:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743738748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743738748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743788858",
      "pull_request_review_id": 798987425,
      "id": 743788858,
      "node_id": "PRRC_kwDOABII584sVVE6",
      "diff_hunk": "@@ -1085,7 +1085,97 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)\n+        && last_client <= 220000",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1c76661cc73a32cfc5a6185aec1aa954dbad3dd6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1c76661cc73a32cfc5a6185aec1aa954dbad3dd6: assuming we don't back port this, shouldn't it be `last_client <= 229999`. Otherwise we wouldn't upgrade wallets touched by (hypothetical future release) v22.1",
      "created_at": "2021-11-05T16:01:58Z",
      "updated_at": "2021-11-05T16:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743788858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743788858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1094,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743792769",
      "pull_request_review_id": 798987425,
      "id": 743792769,
      "node_id": "PRRC_kwDOABII584sVWCB",
      "diff_hunk": "@@ -1085,7 +1085,97 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)\n+        && last_client <= 220000\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1c76661cc73a32cfc5a6185aec1aa954dbad3dd6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1c76661: maybe clarify that we're dealing with the xpub at the root level, not the BIP44/49/84 \"account\" level.",
      "created_at": "2021-11-05T16:06:59Z",
      "updated_at": "2021-11-05T16:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r743792769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743792769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1099,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968135",
      "pull_request_review_id": 801803944,
      "id": 745968135,
      "node_id": "PRRC_kwDOABII584sdpIH",
      "diff_hunk": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return pubkey < other.pubkey; }",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1399c27ec5081af7a1f31a9bb750b216cc68c6cf",
      "in_reply_to_id": 743729962,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T19:59:50Z",
      "updated_at": "2021-11-09T19:59:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968204",
      "pull_request_review_id": 801804007,
      "id": 745968204,
      "node_id": "PRRC_kwDOABII584sdpJM",
      "diff_hunk": "@@ -55,6 +55,7 @@ namespace DBKeys {\n extern const std::string ACENTRY;\n extern const std::string ACTIVEEXTERNALSPK;\n extern const std::string ACTIVEINTERNALSPK;\n+extern const std::string ACTIVEHDKEY;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "2ed25fe1a512d50065c6e27b23016500f3e6d647",
      "in_reply_to_id": 743737544,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T19:59:54Z",
      "updated_at": "2021-11-09T19:59:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968275",
      "pull_request_review_id": 801804075,
      "id": 745968275,
      "node_id": "PRRC_kwDOABII584sdpKT",
      "diff_hunk": "@@ -63,6 +64,7 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY;",
      "path": "src/wallet/walletdb.h",
      "position": null,
      "original_position": 12,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "2ed25fe1a512d50065c6e27b23016500f3e6d647",
      "in_reply_to_id": 743738748,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T19:59:58Z",
      "updated_at": "2021-11-09T19:59:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745968275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745968275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745969175",
      "pull_request_review_id": 801804881,
      "id": 745969175,
      "node_id": "PRRC_kwDOABII584sdpYX",
      "diff_hunk": "@@ -1085,7 +1085,97 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)\n+        && last_client <= 220000",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1c76661cc73a32cfc5a6185aec1aa954dbad3dd6",
      "in_reply_to_id": 743788858,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, also changed this to be either the flag is not set, or the last client is <= 229999. This is to handle the upgrade then downgrade and then upgrade again case.",
      "created_at": "2021-11-09T20:00:52Z",
      "updated_at": "2021-11-09T20:00:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745969175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745969175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1094,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745969252",
      "pull_request_review_id": 801804949,
      "id": 745969252,
      "node_id": "PRRC_kwDOABII584sdpZk",
      "diff_hunk": "@@ -1085,7 +1085,97 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)\n+        && last_client <= 220000\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "1c76661cc73a32cfc5a6185aec1aa954dbad3dd6",
      "in_reply_to_id": 743792769,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T20:00:58Z",
      "updated_at": "2021-11-09T20:00:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r745969252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745969252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1099,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747611357",
      "pull_request_review_id": 803946152,
      "id": 747611357,
      "node_id": "PRRC_kwDOABII584sj6Td",
      "diff_hunk": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return vchFingerprint < other.vchFingerprint || pubkey < other.pubkey; }",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, my example wasn't very smart, because this is comparing pointers...  `unsigned char vchFingerprint[4]`. The `memcmp` approach in `==` above is probably more useful. And we should probably be consistent and compare all the things.",
      "created_at": "2021-11-11T15:45:50Z",
      "updated_at": "2021-11-11T18:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747611357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747611357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747615584",
      "pull_request_review_id": 803946152,
      "id": 747615584,
      "node_id": "PRRC_kwDOABII584sj7Vg",
      "diff_hunk": "@@ -146,6 +146,8 @@ struct Descriptor {\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n     virtual std::optional<OutputType> GetOutputType() const = 0;\n+\n+    virtual void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;",
      "path": "src/script/descriptor.h",
      "position": 10,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n /** Return all (extended) public  keys for this descriptor, including any from any subdescriptors.\r\n     *\r\n     * @param[out] pubkeys Any public keys.\r\n     * @param[out] pubkeys Any extended public keys.\r\n     */\r\n```\r\n\r\nThis recursive function always ends up at `GetRootPubkeys`; any reason why `Root` is not present in this function name?",
      "created_at": "2021-11-11T15:51:06Z",
      "updated_at": "2021-11-11T18:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747615584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747615584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747623354",
      "pull_request_review_id": 803946152,
      "id": 747623354,
      "node_id": "PRRC_kwDOABII584sj9O6",
      "diff_hunk": "@@ -185,6 +185,8 @@ struct PubkeyProvider\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n+\n+    virtual void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;",
      "path": "src/script/descriptor.cpp",
      "position": 9,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n /** Return all (extended) public  keys for this descriptor\r\n     *\r\n     * @param[out] pubkeys Any public keys.\r\n     * @param[out] pubkeys Any extended public keys.\r\n     */\r\n```",
      "created_at": "2021-11-11T16:00:11Z",
      "updated_at": "2021-11-11T18:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747623354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747623354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747638450",
      "pull_request_review_id": 803946152,
      "id": 747638450,
      "node_id": "PRRC_kwDOABII584skA6y",
      "diff_hunk": "@@ -63,8 +64,11 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey",
      "path": "src/wallet/walletdb.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's clarify here, or at the documentation for `GetActiveHDKey`, that the corresponding extended private key is reconstructed using this extended public key, which includes the chain code, and the right `KEYMAN_KEY` or `KEYMAN_CKEY` private key.\r\n\r\nStill this process seems rather complicated, why not just store the (encrypted) extended private key?",
      "created_at": "2021-11-11T16:19:32Z",
      "updated_at": "2021-11-11T18:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747638450",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747638450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747846801",
      "pull_request_review_id": 804254898,
      "id": 747846801,
      "node_id": "PRRC_kwDOABII584skzyR",
      "diff_hunk": "@@ -146,6 +146,8 @@ struct Descriptor {\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n     virtual std::optional<OutputType> GetOutputType() const = 0;\n+\n+    virtual void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;",
      "path": "src/script/descriptor.h",
      "position": 10,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747615584,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not particularly. I believe originally I wanted the underlying function in `PubkeyProvider` to be `GetPubkey` but that was already taken. The `Root` part came from the fact that `GetPubkey` in `BIP32PubkeyProvider` returns a derived key whereas I needed the root extended key.",
      "created_at": "2021-11-11T22:05:13Z",
      "updated_at": "2021-11-11T22:05:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747846801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747846801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747861202",
      "pull_request_review_id": 804273373,
      "id": 747861202,
      "node_id": "PRRC_kwDOABII584sk3TS",
      "diff_hunk": "@@ -63,8 +64,11 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey",
      "path": "src/wallet/walletdb.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747638450,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A lot of places in the codebase do not expect `CExtKey`s when fetching private keys, even in places where BIP 32 derivation ends up being done. They instead take `CKey`s and combine them with `CExtPubKey`s to get the necessary `CExtKey`s. We maintain this same paradigm for ease of implementation.\r\n\r\nAdditionally, having all private keys be universally `CKey`s makes it easier to support non-ranged descriptors. Instead of having to store and fetch different data types depending on whether the descriptor is ranged, and then converting them into the same data type for expansion and signing, we can use the same datatype throughout. When we do need the extended key, it can be reconstructed, but that (currently) happens rarely.",
      "created_at": "2021-11-11T22:37:07Z",
      "updated_at": "2021-11-11T22:37:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r747861202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747861202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748170446",
      "pull_request_review_id": 804675890,
      "id": 748170446,
      "node_id": "PRRC_kwDOABII584smCzO",
      "diff_hunk": "@@ -63,8 +64,11 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey",
      "path": "src/wallet/walletdb.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747638450,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Storing both `CExtKey` and `Ckey` (for non-ranged descriptors) could be an approach, but I'm also not sure if that makes the implementation any easier to understand. This is probably the only opportunity to break with the past convention, if we want to.",
      "created_at": "2021-11-12T11:14:02Z",
      "updated_at": "2021-11-12T11:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748170446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748170446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748565931",
      "pull_request_review_id": 805199486,
      "id": 748565931,
      "node_id": "PRRC_kwDOABII584snjWr",
      "diff_hunk": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return vchFingerprint < other.vchFingerprint || pubkey < other.pubkey; }",
      "path": "src/pubkey.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747611357,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-12T20:25:22Z",
      "updated_at": "2021-11-12T20:25:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748565931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748565931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748565962",
      "pull_request_review_id": 805199602,
      "id": 748565962,
      "node_id": "PRRC_kwDOABII584snjXK",
      "diff_hunk": "@@ -146,6 +146,8 @@ struct Descriptor {\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n     virtual std::optional<OutputType> GetOutputType() const = 0;\n+\n+    virtual void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;",
      "path": "src/script/descriptor.h",
      "position": 10,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747615584,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the comment",
      "created_at": "2021-11-12T20:25:26Z",
      "updated_at": "2021-11-12T20:25:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748565962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748565962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748566173",
      "pull_request_review_id": 805199893,
      "id": 748566173,
      "node_id": "PRRC_kwDOABII584snjad",
      "diff_hunk": "@@ -185,6 +185,8 @@ struct PubkeyProvider\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n+\n+    virtual void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;",
      "path": "src/script/descriptor.cpp",
      "position": 9,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "7fc1afc000ad2f29bec78e6b82470369bbbf32c2",
      "in_reply_to_id": 747623354,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-12T20:25:40Z",
      "updated_at": "2021-11-12T20:25:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r748566173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748566173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750288077",
      "pull_request_review_id": 807320159,
      "id": 750288077,
      "node_id": "PRRC_kwDOABII584suHzN",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+private:\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+public:\n+    mutable RecursiveMutex cs_keyman;\n+\n+    KeyManager(WalletStorage& storage) : m_storage(storage) {}\n+    KeyManager() = delete;\n+\n+    void GenerateAndSetHDKey();\n+    std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    void SetActiveHDKey(const CExtPubKey& extpub);\n+    void LoadActiveHDKey(const CExtPubKey& extpub);",
      "path": "src/wallet/keyman.h",
      "position": null,
      "original_position": 48,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be nice to group the wallet loading and unloading functions.\r\n\r\nSimilarly let's separate functions that modify wallet storage from those that don't. ",
      "created_at": "2021-11-16T13:47:00Z",
      "updated_at": "2021-11-17T14:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r750288077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/750288077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751259808",
      "pull_request_review_id": 807320159,
      "id": 751259808,
      "node_id": "PRRC_kwDOABII584sx1Cg",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {",
      "path": "src/wallet/keyman.cpp",
      "position": 249,
      "original_position": 245,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(partly existing code)\r\nIf an encrypted wallet is locked, rather than fail, this function just returns the `m_map_keys` which happens to be empty. Not sure how I feel about that, but let's at least document (that calling this on a locked wallet returns an empty result).",
      "created_at": "2021-11-17T13:51:59Z",
      "updated_at": "2021-11-17T14:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751259808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751259808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 249,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751271168",
      "pull_request_review_id": 807320159,
      "id": 751271168,
      "node_id": "PRRC_kwDOABII584sx30A",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;",
      "path": "src/wallet/keyman.cpp",
      "position": 237,
      "original_position": 233,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clear `m_map_crypted_keys` first?",
      "created_at": "2021-11-17T14:04:32Z",
      "updated_at": "2021-11-17T14:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751271168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751271168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 237,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751276375",
      "pull_request_review_id": 807320159,
      "id": 751276375,
      "node_id": "PRRC_kwDOABII584sx5FX",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: move `break` inline or add brackets.",
      "created_at": "2021-11-17T14:09:21Z",
      "updated_at": "2021-11-17T14:58:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751276375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751276375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751578343",
      "pull_request_review_id": 809058811,
      "id": 751578343,
      "node_id": "PRRC_kwDOABII584szCzn",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;",
      "path": "src/wallet/keyman.cpp",
      "position": 237,
      "original_position": 233,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": 751271168,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's fine to not do this. The caller will `assert(false)` in that case anyways.",
      "created_at": "2021-11-17T19:40:12Z",
      "updated_at": "2021-11-17T19:40:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751578343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751578343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 237,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579190",
      "pull_request_review_id": 809059895,
      "id": 751579190,
      "node_id": "PRRC_kwDOABII584szDA2",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+private:\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+public:\n+    mutable RecursiveMutex cs_keyman;\n+\n+    KeyManager(WalletStorage& storage) : m_storage(storage) {}\n+    KeyManager() = delete;\n+\n+    void GenerateAndSetHDKey();\n+    std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    void SetActiveHDKey(const CExtPubKey& extpub);\n+    void LoadActiveHDKey(const CExtPubKey& extpub);",
      "path": "src/wallet/keyman.h",
      "position": null,
      "original_position": 48,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": 750288077,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-17T19:41:23Z",
      "updated_at": "2021-11-17T19:41:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579327",
      "pull_request_review_id": 809060089,
      "id": 751579327,
      "node_id": "PRRC_kwDOABII584szDC_",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {",
      "path": "src/wallet/keyman.cpp",
      "position": 249,
      "original_position": 245,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": 751259808,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2021-11-17T19:41:34Z",
      "updated_at": "2021-11-17T19:41:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 249,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579474",
      "pull_request_review_id": 809060281,
      "id": 751579474,
      "node_id": "PRRC_kwDOABII584szDFS",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "709a917c26bf048de454760c7189278b965ca7f3",
      "in_reply_to_id": 751276375,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-17T19:41:46Z",
      "updated_at": "2021-11-17T19:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r751579474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751579474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950582532",
      "pull_request_review_id": 1079389785,
      "id": 950582532,
      "node_id": "PRRC_kwDOABII5844qL0E",
      "diff_hunk": "@@ -296,6 +316,69 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n+bool WalletBatch::WriteHDPubKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    return WriteIC(std::make_pair(DBKeys::HDPUBKEY, xpub), uint8_t(1), false);\n+}\n+\n+bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    if (!WriteIC(DBKeys::ACTIVEHDKEY, xpub, false)) {\n+        std::vector<unsigned char> read_xpub(BIP32_EXTKEY_SIZE);\n+        if (!m_batch->Read(DBKeys::ACTIVEHDKEY, read_xpub)) {\n+            return false;\n+        }\n+        return xpub == read_xpub;\n+    }\n+    return true;\n+}\n+\n+bool WalletBatch::WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + pubkey.size());",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be `privkey.size` ?\r\n```suggestion\r\n    key.reserve(privkey.size() + pubkey.size());\r\n```",
      "created_at": "2022-08-19T22:05:16Z",
      "updated_at": "2022-08-19T23:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950582532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950582532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950594283",
      "pull_request_review_id": 1079389785,
      "id": 950594283,
      "node_id": "PRRC_kwDOABII5844qOrr",
      "diff_hunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+\n+namespace wallet {\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+private:\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+public:\n+    mutable RecursiveMutex cs_keyman;",
      "path": "src/wallet/keyman.h",
      "position": 41,
      "original_position": 41,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe change to `Mutex` ?\r\n```suggestion\r\n    mutable Mutex m_keyman_mutex;\r\n```",
      "created_at": "2022-08-19T22:40:55Z",
      "updated_at": "2022-08-19T23:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950594283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950594283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950600475",
      "pull_request_review_id": 1079389785,
      "id": 950600475,
      "node_id": "PRRC_kwDOABII5844qQMb",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n            if (desc.find(\"pkh(\")) {\r\n```",
      "created_at": "2022-08-19T23:04:10Z",
      "updated_at": "2022-08-19T23:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950600475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950600475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950604539",
      "pull_request_review_id": 1079389785,
      "id": 950604539,
      "node_id": "PRRC_kwDOABII5844qRL7",
      "diff_hunk": "@@ -786,4 +786,48 @@ RPCHelpMan walletdisplayaddress()\n     };\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n+\n+RPCHelpMan getxpub()",
      "path": "src/wallet/rpc/addresses.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `getxupub` and `listdescriptors` can be combined into a single command?",
      "created_at": "2022-08-19T23:19:20Z",
      "updated_at": "2022-08-19T23:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950604539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950604539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 790,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626299",
      "pull_request_review_id": 1079446106,
      "id": 950626299,
      "node_id": "PRRC_kwDOABII5844qWf7",
      "diff_hunk": "@@ -296,6 +316,69 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n+bool WalletBatch::WriteHDPubKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    return WriteIC(std::make_pair(DBKeys::HDPUBKEY, xpub), uint8_t(1), false);\n+}\n+\n+bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    if (!WriteIC(DBKeys::ACTIVEHDKEY, xpub, false)) {\n+        std::vector<unsigned char> read_xpub(BIP32_EXTKEY_SIZE);\n+        if (!m_batch->Read(DBKeys::ACTIVEHDKEY, read_xpub)) {\n+            return false;\n+        }\n+        return xpub == read_xpub;\n+    }\n+    return true;\n+}\n+\n+bool WalletBatch::WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + pubkey.size());",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950582532,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-20T00:56:10Z",
      "updated_at": "2022-08-20T00:56:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950626299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626355",
      "pull_request_review_id": 1079446154,
      "id": 950626355,
      "node_id": "PRRC_kwDOABII5844qWgz",
      "diff_hunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+\n+namespace wallet {\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+private:\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+public:\n+    mutable RecursiveMutex cs_keyman;",
      "path": "src/wallet/keyman.h",
      "position": 41,
      "original_position": 41,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950594283,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It ends up being used recursively.",
      "created_at": "2022-08-20T00:56:30Z",
      "updated_at": "2022-08-20T00:56:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950626355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626548",
      "pull_request_review_id": 1079446353,
      "id": 950626548,
      "node_id": "PRRC_kwDOABII5844qWj0",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950600475,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-20T00:57:49Z",
      "updated_at": "2022-08-20T00:57:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950626548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626590",
      "pull_request_review_id": 1079446410,
      "id": 950626590,
      "node_id": "PRRC_kwDOABII5844qWke",
      "diff_hunk": "@@ -786,4 +786,48 @@ RPCHelpMan walletdisplayaddress()\n     };\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n+\n+RPCHelpMan getxpub()",
      "path": "src/wallet/rpc/addresses.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950604539,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's useful to have them be separate. Fundamentally, they deal with different data too. Descriptors are about scripts, whereas this is about the keys. So it doesn't really make sense that listdescriptors would provide a key not in a descriptor.",
      "created_at": "2022-08-20T00:58:09Z",
      "updated_at": "2022-08-20T00:58:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r950626590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/950626590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 790,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951535157",
      "pull_request_review_id": 1080632012,
      "id": 951535157,
      "node_id": "PRRC_kwDOABII5844t0Y1",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950600475,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you sure? `find` returns the position, so this should match `wpkh(…)` but not `pkh()`. The `else if`'s seem wrong for the same reason.\r\n\r\n(we should probably never cast `find()` to a bool, because it's very easy to get confused)",
      "created_at": "2022-08-22T14:47:58Z",
      "updated_at": "2022-08-22T14:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r951535157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951535157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951549890",
      "pull_request_review_id": 1080653019,
      "id": 951549890,
      "node_id": "PRRC_kwDOABII5844t3_C",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950600475,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `desc.rfind(\"pkh(\", 0) == 0` ?",
      "created_at": "2022-08-22T15:00:06Z",
      "updated_at": "2022-08-22T15:00:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r951549890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951549890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951561458",
      "pull_request_review_id": 1080669373,
      "id": 951561458,
      "node_id": "PRRC_kwDOABII5844t6zy",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950600475,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the original `desc.find(\"pkh(\") == 0` was fine.",
      "created_at": "2022-08-22T15:09:56Z",
      "updated_at": "2022-08-22T15:09:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r951561458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951561458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951662171",
      "pull_request_review_id": 1080834954,
      "id": 951662171,
      "node_id": "PRRC_kwDOABII5844uTZb",
      "diff_hunk": "@@ -943,6 +1080,100 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 314,
      "original_position": 268,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "aa91428a1a017d833bd542c8c99fe53d9fc11d1f",
      "in_reply_to_id": 950600475,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, yes. Looked at the docs this time. I've changed these all to be `== 0`.",
      "created_at": "2022-08-22T16:46:46Z",
      "updated_at": "2022-08-22T16:46:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r951662171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951662171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1112,
      "original_line": 1112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/961582157",
      "pull_request_review_id": 1094726372,
      "id": 961582157,
      "node_id": "PRRC_kwDOABII5845UJRN",
      "diff_hunk": "@@ -2839,6 +2839,9 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n \n         walletInstance->InitWalletFlags(wallet_creation_flags);\n \n+        // Set USES_KEYMAN to prevent auto upgrade from trying to auto upgrade (previously) blank wallets that had imported things\n+        walletInstance->SetWalletFlag(WALLET_FLAG_USES_KEYMAN);",
      "path": "src/wallet/wallet.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "eb75f8d58ec335e013178d5b94d824cc7739139a",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "eb75f8d58ec335e013178d5b94d824cc7739139a: maybe put this under the `if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS))` check below?",
      "created_at": "2022-09-02T11:35:04Z",
      "updated_at": "2022-09-02T11:37:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r961582157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/961582157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2858,
      "original_line": 2858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977685609",
      "pull_request_review_id": 1117091463,
      "id": 977685609,
      "node_id": "PRRC_kwDOABII5846Rkxp",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "prefer empty()",
      "created_at": "2022-09-22T13:52:39Z",
      "updated_at": "2022-09-22T14:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977685609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977685609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977686311",
      "pull_request_review_id": 1117091463,
      "id": 977686311,
      "node_id": "PRRC_kwDOABII5846Rk8n",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 270,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "const is redundant because std::optional is a value",
      "created_at": "2022-09-22T13:53:14Z",
      "updated_at": "2022-09-22T14:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977686311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977686311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977694027",
      "pull_request_review_id": 1117091463,
      "id": 977694027,
      "node_id": "PRRC_kwDOABII5846Rm1L",
      "diff_hunk": "@@ -3434,53 +3437,41 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n {\n     if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc, m_keyman));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        auto spk_manager = std::make_unique<ExternalSignerScriptPubKeyMan>(*this, desc, m_keyman);\r\n```\r\n`make_unique` is less verbose, same below",
      "created_at": "2022-09-22T13:59:30Z",
      "updated_at": "2022-09-22T14:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977694027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977694027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977715219",
      "pull_request_review_id": 1117091463,
      "id": 977715219,
      "node_id": "PRRC_kwDOABII5846RsAT",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can inline this assert\r\n```suggestion\r\n            bool ok = Assert(DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key));\r\n```",
      "created_at": "2022-09-22T14:16:10Z",
      "updated_at": "2022-09-22T14:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977715219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977715219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977716285",
      "pull_request_review_id": 1117091463,
      "id": 977716285,
      "node_id": "PRRC_kwDOABII5846RsQ9",
      "diff_hunk": "@@ -2024,56 +2024,24 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n-        return false;\n-    }\n-\n-    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n-    bool keyFail = false;\n-    for (const auto& mi : m_map_crypted_keys) {\n-        const CPubKey &pubkey = mi.second.first;\n-        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n-        CKey key;\n-        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n-            keyFail = true;\n-            break;\n-        }\n-        keyPass = true;\n-        if (m_decryption_thoroughly_checked)\n-            break;\n-    }\n-    if (keyPass && keyFail) {\n-        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n-    }\n-    if (keyFail || (!keyPass && !accept_no_keys)) {\n-        return false;\n-    }\n-    m_decryption_thoroughly_checked = true;\n-    return true;\n+    return m_keyman.CheckDecryptionKey(master_key, accept_no_keys);\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_crypted_keys.empty()) {\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+\n+    if (!m_keyman.Encrypt(master_key, batch)) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_map_keys)\n-    {\n-        const CKey &key = key_in.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        std::vector<unsigned char> crypted_secret;\n-        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    for (const CKeyID& id : m_set_stored_keys) {\n+        const auto& ckey_pair = m_keyman.GetCryptedKey(id);\n+        assert(ckey_pair != std::nullopt);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 94,
      "original_position": 94,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        const auto& ckey_pair = Assert(m_keyman.GetCryptedKey(id));\r\n```",
      "created_at": "2022-09-22T14:16:58Z",
      "updated_at": "2022-09-22T14:54:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977716285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977716285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 2042,
      "original_start_line": 2039,
      "start_side": "RIGHT",
      "line": 2043,
      "original_line": 2043,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977881343",
      "pull_request_review_id": 1117383819,
      "id": 977881343,
      "node_id": "PRRC_kwDOABII5846SUj_",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977715219,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assertions should not have side effects, hence the separation here.",
      "created_at": "2022-09-22T16:46:00Z",
      "updated_at": "2022-09-22T16:46:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977881343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977881343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977896023",
      "pull_request_review_id": 1117404808,
      "id": 977896023,
      "node_id": "PRRC_kwDOABII5846SYJX",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977715219,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is true for `assert` but `Assert` is a macro defined in `util/check.h` that always executes and returns the statement, but doesn't always verify the assertion\r\nhttps://github.com/bitcoin/bitcoin/blob/100949af0e2551f22c02a73355f2c64710b68ef1/src/util/check.h#L57-L71",
      "created_at": "2022-09-22T17:02:44Z",
      "updated_at": "2022-09-22T17:02:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977896023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977896023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903474",
      "pull_request_review_id": 1117415638,
      "id": 977903474,
      "node_id": "PRRC_kwDOABII5846SZ9y",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977685609,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-09-22T17:11:31Z",
      "updated_at": "2022-09-22T17:11:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977903474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903521",
      "pull_request_review_id": 1117415725,
      "id": 977903521,
      "node_id": "PRRC_kwDOABII5846SZ-h",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n+const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 270,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977686311,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-09-22T17:11:35Z",
      "updated_at": "2022-09-22T17:11:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977903521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903602",
      "pull_request_review_id": 1117415834,
      "id": 977903602,
      "node_id": "PRRC_kwDOABII5846SZ_y",
      "diff_hunk": "@@ -3434,53 +3437,41 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n {\n     if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc, m_keyman));",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977694027,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-09-22T17:11:40Z",
      "updated_at": "2022-09-22T17:11:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977903602",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903903",
      "pull_request_review_id": 1117416234,
      "id": 977903903,
      "node_id": "PRRC_kwDOABII5846SaEf",
      "diff_hunk": "@@ -2024,56 +2024,24 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n-        return false;\n-    }\n-\n-    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n-    bool keyFail = false;\n-    for (const auto& mi : m_map_crypted_keys) {\n-        const CPubKey &pubkey = mi.second.first;\n-        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n-        CKey key;\n-        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n-            keyFail = true;\n-            break;\n-        }\n-        keyPass = true;\n-        if (m_decryption_thoroughly_checked)\n-            break;\n-    }\n-    if (keyPass && keyFail) {\n-        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n-    }\n-    if (keyFail || (!keyPass && !accept_no_keys)) {\n-        return false;\n-    }\n-    m_decryption_thoroughly_checked = true;\n-    return true;\n+    return m_keyman.CheckDecryptionKey(master_key, accept_no_keys);\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_crypted_keys.empty()) {\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+\n+    if (!m_keyman.Encrypt(master_key, batch)) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_map_keys)\n-    {\n-        const CKey &key = key_in.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        std::vector<unsigned char> crypted_secret;\n-        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    for (const CKeyID& id : m_set_stored_keys) {\n+        const auto& ckey_pair = m_keyman.GetCryptedKey(id);\n+        assert(ckey_pair != std::nullopt);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 94,
      "original_position": 94,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977716285,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assertions shouldn't have side effects, hence the separation.",
      "created_at": "2022-09-22T17:12:00Z",
      "updated_at": "2022-09-22T17:12:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977903903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977903903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 2042,
      "original_start_line": 2039,
      "start_side": "RIGHT",
      "line": 2043,
      "original_line": 2043,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977926979",
      "pull_request_review_id": 1117449606,
      "id": 977926979,
      "node_id": "PRRC_kwDOABII5846SftD",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.empty() || m_map_crypted_keys.empty();",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "d750754d5b73aae8d0ac15ef26b1c88dc369f921",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think you meant \r\n```suggestion\r\n    return !m_map_keys.empty() || !m_map_crypted_keys.empty();\r\n```\r\n",
      "created_at": "2022-09-22T17:39:16Z",
      "updated_at": "2022-09-22T17:39:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977926979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977926979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977930811",
      "pull_request_review_id": 1117455204,
      "id": 977930811,
      "node_id": "PRRC_kwDOABII5846Sgo7",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.empty() || m_map_crypted_keys.empty();",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "d750754d5b73aae8d0ac15ef26b1c88dc369f921",
      "in_reply_to_id": 977926979,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, maybe `HasPrivateKeys` is better than `HavePrivateKeys` ?",
      "created_at": "2022-09-22T17:43:55Z",
      "updated_at": "2022-09-22T17:43:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977930811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977930811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977935613",
      "pull_request_review_id": 1117462134,
      "id": 977935613,
      "node_id": "PRRC_kwDOABII5846Shz9",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977715219,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Even so, it is more confusing to read be inlining as assertions are expected to be checking invariants rather than doing something.",
      "created_at": "2022-09-22T17:49:43Z",
      "updated_at": "2022-09-22T17:49:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977935613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977935613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977936677",
      "pull_request_review_id": 1117463676,
      "id": 977936677,
      "node_id": "PRRC_kwDOABII5846SiEl",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.empty() || m_map_crypted_keys.empty();",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "d750754d5b73aae8d0ac15ef26b1c88dc369f921",
      "in_reply_to_id": 977926979,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, yes.\r\n\r\n> also, maybe `HasPrivateKeys` is better than `HavePrivateKeys` ?\r\n\r\nI prefer to keep it the same for consistent naming.",
      "created_at": "2022-09-22T17:50:58Z",
      "updated_at": "2022-09-22T17:50:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977936677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977936677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977941552",
      "pull_request_review_id": 1117470735,
      "id": 977941552,
      "node_id": "PRRC_kwDOABII5846SjQw",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977715219,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well the `Assert` macro has been used extensively already in the codebase so I don't think it's confusing anymore.\r\nBut this is a small nit so if you prefer it this way it's fine.",
      "created_at": "2022-09-22T17:56:59Z",
      "updated_at": "2022-09-22T17:56:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r977941552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977941552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978435729",
      "pull_request_review_id": 1118155018,
      "id": 978435729,
      "node_id": "PRRC_kwDOABII5846Ub6R",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);",
      "path": "src/wallet/keyman.cpp",
      "position": 255,
      "original_position": 255,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "8c5ddf432dceb084be6612b378dacf9211e8cf08",
      "in_reply_to_id": 977715219,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also prefer to keep them on separate lines, for easier review since I've gotten used to that convention.",
      "created_at": "2022-09-23T09:19:48Z",
      "updated_at": "2022-09-23T09:19:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r978435729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978435729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": 254,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978437341",
      "pull_request_review_id": 1118157399,
      "id": 978437341,
      "node_id": "PRRC_kwDOABII5846UcTd",
      "diff_hunk": "@@ -0,0 +1,278 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+namespace wallet {\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked) {\n+            break;\n+        }\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    // If the wallet is encrypted and locked, then this will just be an empty map\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.empty() || m_map_crypted_keys.empty();",
      "path": "src/wallet/keyman.cpp",
      "position": null,
      "original_position": 267,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "d750754d5b73aae8d0ac15ef26b1c88dc369f921",
      "in_reply_to_id": 977926979,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yikes. Can you add a test for this?",
      "created_at": "2022-09-23T09:21:53Z",
      "updated_at": "2022-09-23T09:21:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r978437341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978437341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986934394",
      "pull_request_review_id": 1130042710,
      "id": 986934394,
      "node_id": "PRRC_kwDOABII584602x6",
      "diff_hunk": "@@ -725,14 +810,76 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> privkey;\n             wss.nCKeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            }\n             wss.fIsEncrypted = true;\n         } else if (strType == DBKeys::LOCKED_UTXO) {\n             uint256 hash;\n             uint32_t n;\n             ssKey >> hash;\n             ssKey >> n;\n             pwallet->LockCoin(COutPoint(hash, n));\n+        } else if (strType == DBKeys::ACTIVEHDKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadActiveHDKey(extpub);\n+        } else if (strType == DBKeys::HDPUBKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssKey >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadHDKey(extpub.pubkey.GetID(), extpub);\n+        } else if (strType == DBKeys::KEYMAN_KEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            pwallet->GetKeyManager().LoadKey(pubkey.GetID(), key);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 194,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "5145d1610202356676e5a031c68d4af0b16a62d9",
      "in_reply_to_id": null,
      "user": {
        "login": "aureleoules",
        "id": 22493292,
        "node_id": "MDQ6VXNlcjIyNDkzMjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aureleoules",
        "html_url": "https://github.com/aureleoules",
        "followers_url": "https://api.github.com/users/aureleoules/followers",
        "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
        "organizations_url": "https://api.github.com/users/aureleoules/orgs",
        "repos_url": "https://api.github.com/users/aureleoules/repos",
        "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/aureleoules/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this seems to be duplicated code from the `else if (strType == DBKeys::WALLETDESCRIPTORKEY)` case above, is there a way to re-use the code?",
      "created_at": "2022-10-04T14:22:33Z",
      "updated_at": "2022-10-04T14:22:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r986934394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986934394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": 823,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 868,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/991570596",
      "pull_request_review_id": 1136429448,
      "id": 991570596,
      "node_id": "PRRC_kwDOABII5847Giqk",
      "diff_hunk": "@@ -725,14 +810,76 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> privkey;\n             wss.nCKeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            }\n             wss.fIsEncrypted = true;\n         } else if (strType == DBKeys::LOCKED_UTXO) {\n             uint256 hash;\n             uint32_t n;\n             ssKey >> hash;\n             ssKey >> n;\n             pwallet->LockCoin(COutPoint(hash, n));\n+        } else if (strType == DBKeys::ACTIVEHDKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadActiveHDKey(extpub);\n+        } else if (strType == DBKeys::HDPUBKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssKey >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadHDKey(extpub.pubkey.GetID(), extpub);\n+        } else if (strType == DBKeys::KEYMAN_KEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            pwallet->GetKeyManager().LoadKey(pubkey.GetID(), key);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 194,
      "commit_id": "c9af030cd60f1fe4e66ccba585b616c1dcc11a50",
      "original_commit_id": "5145d1610202356676e5a031c68d4af0b16a62d9",
      "in_reply_to_id": 986934394,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-10-10T19:02:34Z",
      "updated_at": "2022-10-10T19:02:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23417#discussion_r991570596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/991570596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23417"
        }
      },
      "start_line": null,
      "original_start_line": 823,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 868,
      "side": "RIGHT"
    }
  ]
}